$schema: https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json
fileTypes:
  - gml
name: GameMaker Language
patterns:
  - include: "#directives"
  - include: "#statements"
  - include: "#shebang"
repository:
  access-modifier:
    match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(abstract|declare|override|public|protected|private|readonly|static)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
    name: storage.modifier.gml
  after-operator-block-as-object-literal:
    begin: (?<!\+\+|--)(?<=[:=(,\[?+!>]|^await|[^\._$[:alnum:]]await|^return|[^\._$[:alnum:]]return|^yield|[^\._$[:alnum:]]yield|^throw|[^\._$[:alnum:]]throw|^in|[^\._$[:alnum:]]in|^of|[^\._$[:alnum:]]of|^typeof|[^\._$[:alnum:]]typeof|&&|\|\||\*)\s*(\{)
    beginCaptures:
      "1":
        name: punctuation.definition.block.gml
    end: \}
    endCaptures:
      "0":
        name: punctuation.definition.block.gml
    name: meta.objectliteral.gml
    patterns:
      - include: "#object-member"
  array-binding-pattern:
    begin: (?:(\.\.\.)\s*)?(\[)
    beginCaptures:
      "1":
        name: keyword.operator.rest.gml
      "2":
        name: punctuation.definition.binding-pattern.array.gml
    end: \]
    endCaptures:
      "0":
        name: punctuation.definition.binding-pattern.array.gml
    patterns:
      - include: "#binding-element"
      - include: "#punctuation-comma"
  array-binding-pattern-const:
    begin: (?:(\.\.\.)\s*)?(\[)
    beginCaptures:
      "1":
        name: keyword.operator.rest.gml
      "2":
        name: punctuation.definition.binding-pattern.array.gml
    end: \]
    endCaptures:
      "0":
        name: punctuation.definition.binding-pattern.array.gml
    patterns:
      - include: "#binding-element-const"
      - include: "#punctuation-comma"
  array-literal:
    begin: \s*(\[[\|\$\?]?)
    beginCaptures:
      "1":
        name: meta.brace.square.gml
    end: \]
    endCaptures:
      "0":
        name: meta.brace.square.gml
    name: meta.array.literal.gml
    patterns:
      - include: "#expression"
      - include: "#punctuation-comma"
  arrow-return-type:
    begin: (?<=\))\s*(:)
    beginCaptures:
      "1":
        name: keyword.operator.type.annotation.gml
    end: (?==>|\{|(^\s*(export|function|class|interface|let|var|const|import|enum|namespace|module|type|abstract|declare)\s+))
    name: meta.return.type.arrow.gml
    patterns:
      - include: "#arrow-return-type-body"
  arrow-return-type-body:
    patterns:
      - begin: (?<=[:])(?=\s*\{)
        end: (?<=\})
        patterns:
          - include: "#type-object"
      - include: "#type-predicate-operator"
      - include: "#type"
  async-modifier:
    match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(async)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
    name: storage.modifier.async.gml
  binding-element:
    patterns:
      - include: "#comment"
      - include: "#string"
      - include: "#numeric-literal"
      - include: "#regex"
      - include: "#object-binding-pattern"
      - include: "#array-binding-pattern"
      - include: "#destructuring-variable-rest"
      - include: "#variable-initializer"
  binding-element-const:
    patterns:
      - include: "#comment"
      - include: "#string"
      - include: "#numeric-literal"
      - include: "#regex"
      - include: "#object-binding-pattern-const"
      - include: "#array-binding-pattern-const"
      - include: "#destructuring-variable-rest-const"
      - include: "#variable-initializer"
  boolean-literal:
    patterns:
      - match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))true(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
        name: constant.language.boolean.true.gml
      - match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))false(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
        name: constant.language.boolean.false.gml
  brackets:
    patterns:
      - begin: "{"
        end: "}|(?=\\*/)"
        patterns:
          - include: "#brackets"
      - begin: \[
        end: \]|(?=\*/)
        patterns:
          - include: "#brackets"
  cast:
    patterns:
      - captures:
          "1":
            name: meta.brace.angle.gml
          "2":
            name: storage.modifier.gml
          "3":
            name: meta.brace.angle.gml
        match: \s*(<)\s*(const)\s*(>)
        name: cast.expr.gml
      - begin: (?:(?<!\+\+|--)(?<=^return|[^\._$[:alnum:]]return|^throw|[^\._$[:alnum:]]throw|^yield|[^\._$[:alnum:]]yield|^await|[^\._$[:alnum:]]await|^default|[^\._$[:alnum:]]default|[=(,:>*?\&\|\^]|[^_$[:alnum:]](?:\+\+|\-\-)|[^\+]\+|[^\-]\-))\s*(<)(?!<?\=)(?!\s*$)
        beginCaptures:
          "1":
            name: meta.brace.angle.gml
        end: (\>)
        endCaptures:
          "1":
            name: meta.brace.angle.gml
        name: cast.expr.gml
        patterns:
          - include: "#type"
      - begin: (?:(?<=^))\s*(<)(?=[_$[:alpha:]][_$[:alnum:]]*\s*>)
        beginCaptures:
          "1":
            name: meta.brace.angle.gml
        end: (\>)
        endCaptures:
          "1":
            name: meta.brace.angle.gml
        name: cast.expr.gml
        patterns:
          - include: "#type"
  class-declaration:
    begin: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(?:(\bexport)\s+)?(?:(\bdeclare)\s+)?\b(?:(abstract)\s+)?\b(class)\b(?=\s+|/[/*])
    beginCaptures:
      "1":
        name: keyword.control.export.gml
      "2":
        name: storage.modifier.gml
      "3":
        name: storage.modifier.gml
      "4":
        name: storage.type.class.gml
    end: (?<=\})
    name: meta.class.gml
    patterns:
      - include: "#class-declaration-or-expression-patterns"
  class-declaration-or-expression-patterns:
    patterns:
      - include: "#comment"
      - include: "#class-or-interface-heritage"
      - captures:
          "0":
            name: entity.name.type.class.gml
        match: "[_$[:alpha:]][_$[:alnum:]]*"
      - include: "#type-parameters"
      - include: "#class-or-interface-body"
  class-expression:
    begin: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(?:(abstract)\s+)?(class)\b(?=\s+|[<{]|\/[\/*])
    beginCaptures:
      "1":
        name: storage.modifier.gml
      "2":
        name: storage.type.class.gml
    end: (?<=\})
    name: meta.class.gml
    patterns:
      - include: "#class-declaration-or-expression-patterns"
  class-or-interface-body:
    begin: \{
    beginCaptures:
      "0":
        name: punctuation.definition.block.gml
    end: \}
    endCaptures:
      "0":
        name: punctuation.definition.block.gml
    patterns:
      - include: "#comment"
      - include: "#decorator"
      - begin: (?<=:)\s*
        end: (?=\s|[;),}\]:\-\+]|;|^\s*$|(?:^\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\b))
        patterns:
          - include: "#expression"
      - include: "#method-declaration"
      - include: "#indexer-declaration"
      - include: "#field-declaration"
      - include: "#string"
      - include: "#type-annotation"
      - include: "#variable-initializer"
      - include: "#access-modifier"
      - include: "#property-accessor"
      - include: "#async-modifier"
      - include: "#after-operator-block-as-object-literal"
      - include: "#decl-block"
      - include: "#expression"
      - include: "#punctuation-comma"
      - include: "#punctuation-semicolon"
  class-or-interface-heritage:
    begin: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(?:\b(extends|implements)\b)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
    beginCaptures:
      "1":
        name: storage.modifier.gml
    end: (?=\{)
    patterns:
      - include: "#comment"
      - include: "#class-or-interface-heritage"
      - include: "#type-parameters"
      - include: "#expressionWithoutIdentifiers"
      - captures:
          "1":
            name: entity.name.type.module.gml
          "2":
            name: punctuation.accessor.gml
          "3":
            name: punctuation.accessor.optional.gml
        match: ([_$[:alpha:]][_$[:alnum:]]*)\s*(?:(\.)|(\?\.(?!\s*[[:digit:]])))(?=\s*[_$[:alpha:]][_$[:alnum:]]*(\s*\??\.\s*[_$[:alpha:]][_$[:alnum:]]*)*\s*)
      - captures:
          "1":
            name: entity.other.inherited-class.gml
        match: ([_$[:alpha:]][_$[:alnum:]]*)
      - include: "#expressionPunctuations"
  comment:
    patterns:
      - match: (?:(#region)(.*))
        captures:
          "1":
            name: comment.line.region.start.gml
          "2":
            name: comment.line.region.description.start.gml
      - match: (?:(#endregion)(.*))
        captures:
          "1":
            name: comment.line.region.end.gml
          "2":
            name: comment.line.region.description.end.gml
      - begin: /\*\*(?!/)
        beginCaptures:
          "0":
            name: punctuation.definition.comment.gml
        end: \*/
        endCaptures:
          "0":
            name: punctuation.definition.comment.gml
        name: comment.block.documentation.gml
        patterns:
          - include: "#docblock"
      - begin: (/\*)(?:\s*((@)internal)(?=\s|(\*/)))?
        beginCaptures:
          "1":
            name: punctuation.definition.comment.gml
          "2":
            name: storage.type.internaldeclaration.gml
          "3":
            name: punctuation.decorator.internaldeclaration.gml
        end: \*/
        endCaptures:
          "0":
            name: punctuation.definition.comment.gml
        name: comment.block.gml
      - begin: (^[ \t]+)?((//)(?:\s*((@)internal)(?=\s|$))?)
        beginCaptures:
          "1":
            name: punctuation.whitespace.comment.leading.gml
          "2":
            name: comment.line.double-slash.gml
          "3":
            name: punctuation.definition.comment.gml
          "4":
            name: storage.type.internaldeclaration.gml
          "5":
            name: punctuation.decorator.internaldeclaration.gml
        contentName: comment.line.double-slash.gml
        end: (?=$)
  control-statement:
    patterns:
      - include: "#switch-statement"
      - include: "#for-loop"
      - match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(catch|finally|throw|try)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
        name: keyword.control.trycatch.gml
      - captures:
          "1":
            name: keyword.control.loop.gml
          "2":
            name: entity.name.label.gml
        match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(break|continue|goto)\s+([_$[:alpha:]][_$[:alnum:]]*)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
      - match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(break|continue|do|goto|while)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
        name: keyword.control.loop.gml
      - begin: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(return)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
        beginCaptures:
          "0":
            name: keyword.control.flow.gml
        end: (?=[;}]|$|;|^\s*$|(?:^\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|type|var|globalvar)\b))
        patterns:
          - include: "#expression"
      - match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(case|default|switch)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
        name: keyword.control.switch.gml
      - include: "#if-statement"
      - match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(else|if)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
        name: keyword.control.conditional.gml
      - match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(with)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
        name: keyword.control.with.gml
      - match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(package)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
        name: keyword.control.gml
      - match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(debugger)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
        name: keyword.other.debugger.gml
  decl-block:
    begin: \{
    beginCaptures:
      "0":
        name: punctuation.definition.block.gml
    end: \}
    endCaptures:
      "0":
        name: punctuation.definition.block.gml
    name: meta.block.gml
    patterns:
      - include: "#statements"
  declaration:
    patterns:
      - include: "#decorator"
      - include: "#var-expr"
      - include: "#function-declaration"
      - include: "#class-declaration"
      - include: "#interface-declaration"
      - include: "#enum-declaration"
      - include: "#namespace-declaration"
      - include: "#type-alias-declaration"
      - include: "#import-equals-declaration"
      - include: "#import-declaration"
      - include: "#export-declaration"
      - match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(declare|export)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
        name: storage.modifier.gml
  decorator:
    begin: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))\@
    beginCaptures:
      "0":
        name: punctuation.decorator.gml
    end: (?=\s)
    name: meta.decorator.gml
    patterns:
      - include: "#expression"
  destructuring-const:
    patterns:
      - begin: (?<!=|:|^of|[^\._$[:alnum:]]of|^in|[^\._$[:alnum:]]in)\s*(?=\{)
        end: (?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(of|in)\s+))
        name: meta.object-binding-pattern-variable.gml
        patterns:
          - include: "#object-binding-pattern-const"
          - include: "#type-annotation"
          - include: "#comment"
      - begin: (?<!=|:|^of|[^\._$[:alnum:]]of|^in|[^\._$[:alnum:]]in)\s*(?=\[)
        end: (?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(of|in)\s+))
        name: meta.array-binding-pattern-variable.gml
        patterns:
          - include: "#array-binding-pattern-const"
          - include: "#type-annotation"
          - include: "#comment"
  destructuring-parameter:
    patterns:
      - begin: (?<!=|:)\s*(?:(\.\.\.)\s*)?(\{)
        beginCaptures:
          "1":
            name: keyword.operator.rest.gml
          "2":
            name: punctuation.definition.binding-pattern.object.gml
        end: \}
        endCaptures:
          "0":
            name: punctuation.definition.binding-pattern.object.gml
        name: meta.parameter.object-binding-pattern.gml
        patterns:
          - include: "#parameter-object-binding-element"
      - begin: (?<!=|:)\s*(?:(\.\.\.)\s*)?(\[)
        beginCaptures:
          "1":
            name: keyword.operator.rest.gml
          "2":
            name: punctuation.definition.binding-pattern.array.gml
        end: \]
        endCaptures:
          "0":
            name: punctuation.definition.binding-pattern.array.gml
        name: meta.paramter.array-binding-pattern.gml
        patterns:
          - include: "#parameter-binding-element"
          - include: "#punctuation-comma"
  destructuring-parameter-rest:
    captures:
      "1":
        name: keyword.operator.rest.gml
      "2":
        name: variable.parameter.gml
    match: (?:(\.\.\.)\s*)?([_$[:alpha:]][_$[:alnum:]]*)
  destructuring-variable:
    patterns:
      - begin: (?<!=|:|^of|[^\._$[:alnum:]]of|^in|[^\._$[:alnum:]]in)\s*(?=\{)
        end: (?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(of|in)\s+))
        name: meta.object-binding-pattern-variable.gml
        patterns:
          - include: "#object-binding-pattern"
          - include: "#type-annotation"
          - include: "#comment"
      - begin: (?<!=|:|^of|[^\._$[:alnum:]]of|^in|[^\._$[:alnum:]]in)\s*(?=\[)
        end: (?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(of|in)\s+))
        name: meta.array-binding-pattern-variable.gml
        patterns:
          - include: "#array-binding-pattern"
          - include: "#type-annotation"
          - include: "#comment"
  destructuring-variable-rest:
    captures:
      "1":
        name: keyword.operator.rest.gml
      "2":
        name: meta.definition.variable.gml variable.other.readwrite.gml
    match: (?:(\.\.\.)\s*)?([_$[:alpha:]][_$[:alnum:]]*)
  destructuring-variable-rest-const:
    captures:
      "1":
        name: keyword.operator.rest.gml
      "2":
        name: meta.definition.variable.gml variable.other.constant.gml
    match: (?:(\.\.\.)\s*)?([_$[:alpha:]][_$[:alnum:]]*)
  directives:
    begin: ^(///)\s*(?=<(reference|amd-dependency|amd-module)(\s+(path|types|no-default-lib|lib|name|resolution-mode)\s*=\s*((\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`)))+\s*/>\s*$)
    beginCaptures:
      "1":
        name: punctuation.definition.comment.gml
    end: (?=$)
    name: comment.line.triple-slash.directive.gml
    patterns:
      - begin: (<)(reference|amd-dependency|amd-module)
        beginCaptures:
          "1":
            name: punctuation.definition.tag.directive.gml
          "2":
            name: entity.name.tag.directive.gml
        end: />
        endCaptures:
          "0":
            name: punctuation.definition.tag.directive.gml
        name: meta.tag.gml
        patterns:
          - match: path|types|no-default-lib|lib|name|resolution-mode
            name: entity.other.attribute-name.directive.gml
          - match: =
            name: keyword.operator.assignment.gml
          - include: "#string"
  enum-declaration:
    begin: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(?:(\bexport)\s+)?(?:(\bdeclare)\s+)?(?:\b(const)\s+)?\b(enum)\s+([_$[:alpha:]][_$[:alnum:]]*)
    beginCaptures:
      "1":
        name: keyword.control.export.gml
      "2":
        name: storage.modifier.gml
      "3":
        name: storage.modifier.gml
      "4":
        name: storage.type.enum.gml
      "5":
        name: entity.name.type.enum.gml
    end: (?<=\})
    name: meta.enum.declaration.gml
    patterns:
      - include: "#comment"
      - begin: \{
        beginCaptures:
          "0":
            name: punctuation.definition.block.gml
        end: \}
        endCaptures:
          "0":
            name: punctuation.definition.block.gml
        patterns:
          - include: "#comment"
          - begin: ([_$[:alpha:]][_$[:alnum:]]*)
            beginCaptures:
              "0":
                name: variable.other.enummember.gml
            end: (?=,|\}|$)
            patterns:
              - include: "#comment"
              - include: "#variable-initializer"
          - begin: (?=((\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`)|(\[([^\[\]]|\[[^\[\]]*\])+\])))
            end: (?=,|\}|$)
            patterns:
              - include: "#string"
              - include: "#array-literal"
              - include: "#comment"
              - include: "#variable-initializer"
          - include: "#punctuation-comma"
  export-declaration:
    patterns:
      - captures:
          "1":
            name: keyword.control.export.gml
          "2":
            name: keyword.control.as.gml
          "3":
            name: storage.type.namespace.gml
          "4":
            name: entity.name.type.module.gml
        match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(export)\s+(as)\s+(namespace)\s+([_$[:alpha:]][_$[:alnum:]]*)
      - begin: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(export)(?:\s+(type))?(?:(?:\s*(=))|(?:\s+(default)(?=\s+)))
        beginCaptures:
          "1":
            name: keyword.control.export.gml
          "2":
            name: keyword.control.type.gml
          "3":
            name: keyword.operator.assignment.gml
          "4":
            name: keyword.control.default.gml
        end: (?=$|;|^\s*$|(?:^\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\b))
        name: meta.export.default.gml
        patterns:
          - include: "#interface-declaration"
          - include: "#expression"
      - begin: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(export)(?:\s+(type))?\b(?!(\$)|(\s*:))((?=\s*[\{*])|((?=\s*[_$[:alpha:]][_$[:alnum:]]*(\s|,))(?!\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\b)))
        beginCaptures:
          "1":
            name: keyword.control.export.gml
          "2":
            name: keyword.control.type.gml
        end: (?=$|;|^\s*$|(?:^\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\b))
        name: meta.export.gml
        patterns:
          - include: "#import-export-declaration"
  expression:
    patterns:
      - include: "#expressionWithoutIdentifiers"
      - include: "#identifiers"
      - include: "#expressionPunctuations"
  expression-inside-possibly-arrow-parens:
    patterns:
      - include: "#expressionWithoutIdentifiers"
      - include: "#comment"
      - include: "#string"
      - include: "#decorator"
      - include: "#destructuring-parameter"
      - captures:
          "1":
            name: storage.modifier.gml
        match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(override|public|protected|private|readonly)\s+(?=(override|public|protected|private|readonly)\s+)
      - captures:
          "1":
            name: storage.modifier.gml
          "2":
            name: keyword.operator.rest.gml
          "3":
            name: entity.name.function.gml variable.language.this.gml
          "4":
            name: entity.name.function.gml
          "5":
            name: keyword.operator.optional.gml
        match: >-
          (?x)(?:(?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(override|public|private|protected|readonly)\s+)?(?:(\.\.\.)\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))\s*(\??)(?=\s*

          # function assignment |

          (=\s*(
            ((async\s+)?(
              (function\s*[(<*]) |
              (function\s+) |
              ([_$[:alpha:]][_$[:alnum:]]*\s*=>)
            )) |
            ((async\s*)?(
              ((<\s*$)|((<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*)?[\(]\s*((([\{\[]\s*)?$)|((\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})\s*((:\s*\{?$)|((\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))|((\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])\s*((:\s*\[?$)|((\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))))) |
              # sure shot arrow functions even if => is on new line
          (
            (<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*)?
            [(]\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*
            (
              ([)]\s*:) |                                                                                       # ():
              ((\.\.\.\s*)?[_$[:alpha:]][_$[:alnum:]]*\s*:)                                                                  # [(]param: | [(]...param:
            )
          ) |


          # arrow function possible to detect only with => on same line

          (
            (<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*)?                                                                                 # typeparameters
            \(\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*(([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\.\.\.\s*[_$[:alpha:]]))([^()\'\"\`]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))*)?\)   # parameters
            (\s*:\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+)?                                                                        # return type
            \s*=>                                                                                               # arrow operator
          )
            ))
          )) |

          # typeannotation is fn type: < | () | (... | (param: | (param, | (param? | (param= | (param) =>

          (:\s*(
            (<) |
            ([(]\s*(
              ([)]) |
              (\.\.\.) |
              ([_$[:alnum:]]+\s*(
                ([:,?=])|
                ([)]\s*=>)
              ))
            ))
          )) |

          (:\s*(?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))Function(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))) |

          (:\s*((<\s*$)|((<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*)?[\(]\s*((([\{\[]\s*)?$)|((\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})\s*((:\s*\{?$)|((\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))|((\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])\s*((:\s*\[?$)|((\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*))))))) |

          (:\s*(=>|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(<[^<>]*>)|[^<>(),=])+=\s*(
            ((async\s+)?(
              (function\s*[(<*]) |
              (function\s+) |
              ([_$[:alpha:]][_$[:alnum:]]*\s*=>)
            )) |
            ((async\s*)?(
              ((<\s*$)|((<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*)?[\(]\s*((([\{\[]\s*)?$)|((\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})\s*((:\s*\{?$)|((\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))|((\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])\s*((:\s*\[?$)|((\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))))) |
              # sure shot arrow functions even if => is on new line
          (
            (<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*)?
            [(]\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*
            (
              ([)]\s*:) |                                                                                       # ():
              ((\.\.\.\s*)?[_$[:alpha:]][_$[:alnum:]]*\s*:)                                                                  # [(]param: | [(]...param:
            )
          ) |


          # arrow function possible to detect only with => on same line

          (
            (<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*)?                                                                                 # typeparameters
            \(\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*(([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\.\.\.\s*[_$[:alpha:]]))([^()\'\"\`]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))*)?\)   # parameters
            (\s*:\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+)?                                                                        # return type
            \s*=>                                                                                               # arrow operator
          )
            ))
          )))
      - captures:
          "1":
            name: storage.modifier.gml
          "2":
            name: keyword.operator.rest.gml
          "3":
            name: variable.parameter.gml variable.language.this.gml
          "4":
            name: variable.parameter.gml
          "5":
            name: keyword.operator.optional.gml
        match: (?x)(?:(?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(override|public|private|protected|readonly)\s+)?(?:(\.\.\.)\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))\s*(\??)(?=\s*[:,]|$)
      - include: "#type-annotation"
      - include: "#variable-initializer"
      - match: ","
        name: punctuation.separator.parameter.gml
      - include: "#identifiers"
      - include: "#expressionPunctuations"
  expression-operators:
    patterns:
      - match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(await)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
        name: keyword.control.flow.gml
      - begin: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(yield)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))(?=\s*\/\*([^\*]|(\*[^\/]))*\*\/\s*\*)
        beginCaptures:
          "1":
            name: keyword.control.flow.gml
        end: \*
        endCaptures:
          "0":
            name: keyword.generator.asterisk.gml
        patterns:
          - include: "#comment"
      - captures:
          "1":
            name: keyword.control.flow.gml
          "2":
            name: keyword.generator.asterisk.gml
        match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(yield)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))(?:\s*(\*))?
      - match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))delete(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
        name: keyword.operator.expression.delete.gml
      - match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))in(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))(?!\()
        name: keyword.operator.expression.in.gml
      - match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))of(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))(?!\()
        name: keyword.operator.expression.of.gml
      - match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))instanceof(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
        name: keyword.operator.expression.instanceof.gml
      - match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))new(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
        name: keyword.operator.new.gml
      - include: "#typeof-operator"
      - match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))void(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
        name: keyword.operator.expression.void.gml
      - captures:
          "1":
            name: keyword.control.as.gml
          "2":
            name: storage.modifier.gml
        match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(as)\s+(const)(?=\s*($|[;,:})\]]))
      - begin: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(?:(as)|(satisfies))\s+
        beginCaptures:
          "1":
            name: keyword.control.as.gml
          "2":
            name: keyword.control.satisfies.gml
        end: (?=^|[;),}\]:?\-\+\>]|\|\||\&\&|\!\=\=|$|((?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(as|satisfies)\s+)|(\s+\<))
        patterns:
          - include: "#type"
      - match: \.\.\.
        name: keyword.operator.spread.gml
      - match: \*=|(?<!\()/=|%=|\+=|\-=
        name: keyword.operator.assignment.compound.gml
      - match: \&=|\^=|<<=|>>=|>>>=|\|=
        name: keyword.operator.assignment.compound.bitwise.gml
      - match: <<|>>>|>>
        name: keyword.operator.bitwise.shift.gml
      - match: ===|!==|==|!=
        name: keyword.operator.comparison.gml
      - match: <=|>=|<>|<|>
        name: keyword.operator.relational.gml
      - captures:
          "1":
            name: keyword.operator.logical.gml
          "2":
            name: keyword.operator.assignment.compound.gml
          "3":
            name: keyword.operator.arithmetic.gml
        match: (?<=[_$[:alnum:]])(\!)\s*(?:(/=)|(?:(/)(?![/*])))
      - match: \!|&&|\|\||\?\?
        name: keyword.operator.logical.gml
      - match: \&|~|\^|\|
        name: keyword.operator.bitwise.gml
      - match: \=
        name: keyword.operator.assignment.gml
      - match: --
        name: keyword.operator.decrement.gml
      - match: \+\+
        name: keyword.operator.increment.gml
      - match: "%|\\*|/|-|\\+"
        name: keyword.operator.arithmetic.gml
      - begin: (?<=[_$[:alnum:])\]])\s*(?=(\/\*([^\*]|(\*[^\/]))*\*\/\s*)+(?:(/=)|(?:(/)(?![/*]))))
        end: (?:(/=)|(?:(/)(?!\*([^\*]|(\*[^\/]))*\*\/)))
        endCaptures:
          "1":
            name: keyword.operator.assignment.compound.gml
          "2":
            name: keyword.operator.arithmetic.gml
        patterns:
          - include: "#comment"
      - captures:
          "1":
            name: keyword.operator.assignment.compound.gml
          "2":
            name: keyword.operator.arithmetic.gml
        match: (?<=[_$[:alnum:])\]])\s*(?:(/=)|(?:(/)(?![/*])))
  expressionPunctuations:
    patterns:
      - include: "#punctuation-comma"
      - include: "#punctuation-accessor"
  expressionWithoutIdentifiers:
    patterns:
      - include: "#string"
      - include: "#regex"
      - include: "#comment"
      - include: "#function-expression"
      - include: "#class-expression"
      - include: "#paren-expression-possibly-arrow"
      - include: "#cast"
      - include: "#ternary-expression"
      - include: "#new-expr"
      - include: "#instanceof-expr"
      - include: "#object-literal"
      - include: "#expression-operators"
      - include: "#function-call"
      - include: "#literal"
      - include: "#support-objects"
      - include: "#paren-expression"
  field-declaration:
    begin: >-
      (?x)(?<!\()(?:(?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(readonly)\s+)?(?=\s*((\b(?<!\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\b(?!\$))|(\b(?<!\$)0(?:b|B)[01][01_]*(n)?\b(?!\$))|(\b(?<!\$)0(?:o|O)?[0-7][0-7_]*(n)?\b(?!\$))|((?<!\$)(?:
        (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)| # 1.1E+3
        (?:\b[0-9][0-9_]*(\.)[eE][+-]?[0-9][0-9_]*(n)?\b)|             # 1.E+3
        (?:\B(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|             # .1E+3
        (?:\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|                 # 1E+3
        (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*(n)?\b)|                      # 1.1
        (?:\b[0-9][0-9_]*(\.)(n)?\B)|                                  # 1.
        (?:\B(\.)[0-9][0-9_]*(n)?\b)|                                  # .1
        (?:\b[0-9][0-9_]*(n)?\b(?!\.))                                 # 1
      )(?!\$))|(\#?[_$[:alpha:]][_$[:alnum:]]*)|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`)|(\[([^\[\]]|\[[^\[\]]*\])+\]))\s*(?:(?:(\?)|(\!))\s*)?(=|:|;|,|\}|$))
    beginCaptures:
      "1":
        name: storage.modifier.gml
    end: >-
      (?x)(?=\}|;|,|$|(^(?!\s*((\b(?<!\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\b(?!\$))|(\b(?<!\$)0(?:b|B)[01][01_]*(n)?\b(?!\$))|(\b(?<!\$)0(?:o|O)?[0-7][0-7_]*(n)?\b(?!\$))|((?<!\$)(?:
        (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)| # 1.1E+3
        (?:\b[0-9][0-9_]*(\.)[eE][+-]?[0-9][0-9_]*(n)?\b)|             # 1.E+3
        (?:\B(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|             # .1E+3
        (?:\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|                 # 1E+3
        (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*(n)?\b)|                      # 1.1
        (?:\b[0-9][0-9_]*(\.)(n)?\B)|                                  # 1.
        (?:\B(\.)[0-9][0-9_]*(n)?\b)|                                  # .1
        (?:\b[0-9][0-9_]*(n)?\b(?!\.))                                 # 1
      )(?!\$))|(\#?[_$[:alpha:]][_$[:alnum:]]*)|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`)|(\[([^\[\]]|\[[^\[\]]*\])+\]))\s*(?:(?:(\?)|(\!))\s*)?(=|:|;|,|$))))|(?<=\})
    name: meta.field.declaration.gml
    patterns:
      - include: "#variable-initializer"
      - include: "#type-annotation"
      - include: "#string"
      - include: "#array-literal"
      - include: "#numeric-literal"
      - include: "#comment"
      - captures:
          "1":
            name: meta.definition.property.gml entity.name.function.gml
          "2":
            name: keyword.operator.optional.gml
          "3":
            name: keyword.operator.definiteassignment.gml
        match: >-
          (?x)(\#?[_$[:alpha:]][_$[:alnum:]]*)(?:(\?)|(\!))?(?=\s*\s*

          # function assignment |

          (=\s*(
            ((async\s+)?(
              (function\s*[(<*]) |
              (function\s+) |
              ([_$[:alpha:]][_$[:alnum:]]*\s*=>)
            )) |
            ((async\s*)?(
              ((<\s*$)|((<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*)?[\(]\s*((([\{\[]\s*)?$)|((\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})\s*((:\s*\{?$)|((\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))|((\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])\s*((:\s*\[?$)|((\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))))) |
              # sure shot arrow functions even if => is on new line
          (
            (<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*)?
            [(]\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*
            (
              ([)]\s*:) |                                                                                       # ():
              ((\.\.\.\s*)?[_$[:alpha:]][_$[:alnum:]]*\s*:)                                                                  # [(]param: | [(]...param:
            )
          ) |


          # arrow function possible to detect only with => on same line

          (
            (<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*)?                                                                                 # typeparameters
            \(\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*(([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\.\.\.\s*[_$[:alpha:]]))([^()\'\"\`]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))*)?\)   # parameters
            (\s*:\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+)?                                                                        # return type
            \s*=>                                                                                               # arrow operator
          )
            ))
          )) |

          # typeannotation is fn type: < | () | (... | (param: | (param, | (param? | (param= | (param) =>

          (:\s*(
            (<) |
            ([(]\s*(
              ([)]) |
              (\.\.\.) |
              ([_$[:alnum:]]+\s*(
                ([:,?=])|
                ([)]\s*=>)
              ))
            ))
          )) |

          (:\s*(?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))Function(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))) |

          (:\s*((<\s*$)|((<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*)?[\(]\s*((([\{\[]\s*)?$)|((\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})\s*((:\s*\{?$)|((\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))|((\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])\s*((:\s*\[?$)|((\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*))))))) |

          (:\s*(=>|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(<[^<>]*>)|[^<>(),=])+=\s*(
            ((async\s+)?(
              (function\s*[(<*]) |
              (function\s+) |
              ([_$[:alpha:]][_$[:alnum:]]*\s*=>)
            )) |
            ((async\s*)?(
              ((<\s*$)|((<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*)?[\(]\s*((([\{\[]\s*)?$)|((\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})\s*((:\s*\{?$)|((\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))|((\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])\s*((:\s*\[?$)|((\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))))) |
              # sure shot arrow functions even if => is on new line
          (
            (<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*)?
            [(]\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*
            (
              ([)]\s*:) |                                                                                       # ():
              ((\.\.\.\s*)?[_$[:alpha:]][_$[:alnum:]]*\s*:)                                                                  # [(]param: | [(]...param:
            )
          ) |


          # arrow function possible to detect only with => on same line

          (
            (<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*)?                                                                                 # typeparameters
            \(\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*(([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\.\.\.\s*[_$[:alpha:]]))([^()\'\"\`]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))*)?\)   # parameters
            (\s*:\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+)?                                                                        # return type
            \s*=>                                                                                               # arrow operator
          )
            ))
          )))
      - match: \#?[_$[:alpha:]][_$[:alnum:]]*
        name: meta.definition.property.gml variable.object.property.gml
      - match: \?
        name: keyword.operator.optional.gml
      - match: \!
        name: keyword.operator.definiteassignment.gml
  for-loop:
    begin: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))for(?=((\s+|(\s*\/\*([^\*]|(\*[^\/]))*\*\/\s*))await)?\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)?(\())
    beginCaptures:
      "0":
        name: keyword.control.loop.gml
    end: (?<=\))
    patterns:
      - include: "#comment"
      - match: await
        name: keyword.control.loop.gml
      - begin: \(
        beginCaptures:
          "0":
            name: meta.brace.round.gml
        end: \)
        endCaptures:
          "0":
            name: meta.brace.round.gml
        patterns:
          - include: "#var-expr"
          - include: "#expression"
          - include: "#punctuation-semicolon"
  function-body:
    patterns:
      - include: "#comment"
      - include: "#type-parameters"
      - include: "#function-parameters"
      - include: "#return-type"
      - include: "#type-function-return-type"
      - include: "#decl-block"
      - match: \*
        name: keyword.generator.asterisk.gml
  function-call:
    patterns:
      - begin: (?=(((([_$[:alpha:]][_$[:alnum:]]*)(\s*\??\.\s*(\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\??\.\s*\#?[_$[:alpha:]][_$[:alnum:]]*))|(?<=[\)]))\s*(?:(\?\.\s*)|(\!))?((<\s*(((keyof|infer|typeof|readonly)\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))(?=\s*([\<\>\,\.\[]|=>|&(?!&)|\|(?!\|)))))([^<>\(]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(?<==)\>|\<\s*(((keyof|infer|typeof|readonly)\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))(?=\s*([\<\>\,\.\[]|=>|&(?!&)|\|(?!\|)))))(([^<>\(]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(?<==)\>|\<\s*(((keyof|infer|typeof|readonly)\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))(?=\s*([\<\>\,\.\[]|=>|&(?!&)|\|(?!\|)))))([^<>\(]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(?<==)\>)*(?<!=)\>))*(?<!=)\>)*(?<!=)>\s*)?\())
        end: (?<=\))(?!(((([_$[:alpha:]][_$[:alnum:]]*)(\s*\??\.\s*(\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\??\.\s*\#?[_$[:alpha:]][_$[:alnum:]]*))|(?<=[\)]))\s*(?:(\?\.\s*)|(\!))?((<\s*(((keyof|infer|typeof|readonly)\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))(?=\s*([\<\>\,\.\[]|=>|&(?!&)|\|(?!\|)))))([^<>\(]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(?<==)\>|\<\s*(((keyof|infer|typeof|readonly)\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))(?=\s*([\<\>\,\.\[]|=>|&(?!&)|\|(?!\|)))))(([^<>\(]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(?<==)\>|\<\s*(((keyof|infer|typeof|readonly)\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))(?=\s*([\<\>\,\.\[]|=>|&(?!&)|\|(?!\|)))))([^<>\(]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(?<==)\>)*(?<!=)\>))*(?<!=)\>)*(?<!=)>\s*)?\())
        patterns:
          - begin: (?=(([_$[:alpha:]][_$[:alnum:]]*)(\s*\??\.\s*(\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\??\.\s*\#?[_$[:alpha:]][_$[:alnum:]]*))
            end: (?=\s*(?:(\?\.\s*)|(\!))?((<\s*(((keyof|infer|typeof|readonly)\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))(?=\s*([\<\>\,\.\[]|=>|&(?!&)|\|(?!\|)))))([^<>\(]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(?<==)\>|\<\s*(((keyof|infer|typeof|readonly)\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))(?=\s*([\<\>\,\.\[]|=>|&(?!&)|\|(?!\|)))))(([^<>\(]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(?<==)\>|\<\s*(((keyof|infer|typeof|readonly)\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))(?=\s*([\<\>\,\.\[]|=>|&(?!&)|\|(?!\|)))))([^<>\(]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(?<==)\>)*(?<!=)\>))*(?<!=)\>)*(?<!=)>\s*)?\())
            name: meta.function-call.gml
            patterns:
              - include: "#function-call-target"
          - include: "#comment"
          - include: "#function-call-optionals"
          - include: "#type-arguments"
          - include: "#paren-expression"
      - begin: (?=(((([_$[:alpha:]][_$[:alnum:]]*)(\s*\??\.\s*(\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\??\.\s*\#?[_$[:alpha:]][_$[:alnum:]]*))|(?<=[\)]))(<\s*[\{\[\(]\s*$))
        end: (?<=\>)(?!(((([_$[:alpha:]][_$[:alnum:]]*)(\s*\??\.\s*(\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\??\.\s*\#?[_$[:alpha:]][_$[:alnum:]]*))|(?<=[\)]))(<\s*[\{\[\(]\s*$))
        patterns:
          - begin: (?=(([_$[:alpha:]][_$[:alnum:]]*)(\s*\??\.\s*(\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\??\.\s*\#?[_$[:alpha:]][_$[:alnum:]]*))
            end: (?=(<\s*[\{\[\(]\s*$))
            name: meta.function-call.gml
            patterns:
              - include: "#function-call-target"
          - include: "#comment"
          - include: "#function-call-optionals"
          - include: "#type-arguments"
  function-call-optionals:
    patterns:
      - match: \?\.
        name: meta.function-call.gml punctuation.accessor.optional.gml
      - match: \!
        name: meta.function-call.gml keyword.operator.definiteassignment.gml
  function-call-target:
    patterns:
      - include: "#support-function-call-identifiers"
      - match: (\#?[_$[:alpha:]][_$[:alnum:]]*)
        name: entity.name.function.gml
  function-declaration:
    begin: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(?:(\bexport)\s+)?(?:(\bdeclare)\s+)?(?:(async)\s+)?(function\b)(?:\s*(\*))?(?:(?:\s+|(?<=\*))([_$[:alpha:]][_$[:alnum:]]*))?\s*
    beginCaptures:
      "1":
        name: keyword.control.export.gml
      "2":
        name: storage.modifier.gml
      "3":
        name: storage.modifier.async.gml
      "4":
        name: storage.type.function.gml
      "5":
        name: keyword.generator.asterisk.gml
      "6":
        name: meta.definition.function.gml entity.name.function.gml
    end: (?=;|^\s*$|(?:^\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\b))|(?<=\})
    name: meta.function.gml
    patterns:
      - include: "#function-name"
      - include: "#function-body"
  function-expression:
    begin: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(?:(async)\s+)?(function\b)(?:\s*(\*))?(?:(?:\s+|(?<=\*))([_$[:alpha:]][_$[:alnum:]]*))?\s*
    beginCaptures:
      "1":
        name: storage.modifier.async.gml
      "2":
        name: storage.type.function.gml
      "3":
        name: keyword.generator.asterisk.gml
      "4":
        name: meta.definition.function.gml entity.name.function.gml
    end: (?=;)|(?<=\})
    name: meta.function.expression.gml
    patterns:
      - include: "#function-name"
      - include: "#single-line-comment-consuming-line-ending"
      - include: "#function-body"
  function-name:
    match: "[_$[:alpha:]][_$[:alnum:]]*"
    name: meta.definition.function.gml entity.name.function.gml
  function-parameters:
    begin: \(
    beginCaptures:
      "0":
        name: punctuation.definition.parameters.begin.gml
    end: \)
    endCaptures:
      "0":
        name: punctuation.definition.parameters.end.gml
    name: meta.parameters.gml
    patterns:
      - include: "#function-parameters-body"
  function-parameters-body:
    patterns:
      - include: "#comment"
      - include: "#string"
      - include: "#decorator"
      - include: "#destructuring-parameter"
      - include: "#parameter-name"
      - include: "#parameter-type-annotation"
      - include: "#variable-initializer"
      - match: ","
        name: punctuation.separator.parameter.gml
  identifiers:
    patterns:
      - include: "#object-identifiers"
      - captures:
          "1":
            name: punctuation.accessor.gml
          "2":
            name: punctuation.accessor.optional.gml
          "3":
            name: entity.name.function.gml
        match: >-
          (?x)(?:(?:(\.)|(\?\.(?!\s*[[:digit:]])))\s*)?([_$[:alpha:]][_$[:alnum:]]*)(?=\s*=\s*(
            ((async\s+)?(
              (function\s*[(<*]) |
              (function\s+) |
              ([_$[:alpha:]][_$[:alnum:]]*\s*=>)
            )) |
            ((async\s*)?(
              ((<\s*$)|((<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*)?[\(]\s*((([\{\[]\s*)?$)|((\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})\s*((:\s*\{?$)|((\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))|((\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])\s*((:\s*\[?$)|((\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))))) |
              # sure shot arrow functions even if => is on new line
          (
            (<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*)?
            [(]\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*
            (
              ([)]\s*:) |                                                                                       # ():
              ((\.\.\.\s*)?[_$[:alpha:]][_$[:alnum:]]*\s*:)                                                                  # [(]param: | [(]...param:
            )
          ) |


          # arrow function possible to detect only with => on same line

          (
            (<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*)?                                                                                 # typeparameters
            \(\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*(([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\.\.\.\s*[_$[:alpha:]]))([^()\'\"\`]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))*)?\)   # parameters
            (\s*:\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+)?                                                                        # return type
            \s*=>                                                                                               # arrow operator
          )
            ))
          ))
      - captures:
          "1":
            name: punctuation.accessor.gml
          "2":
            name: punctuation.accessor.optional.gml
          "3":
            name: variable.other.constant.property.gml
        match: (?:(\.)|(\?\.(?!\s*[[:digit:]])))\s*(\#?[[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])
      - captures:
          "1":
            name: punctuation.accessor.gml
          "2":
            name: punctuation.accessor.optional.gml
          "3":
            name: variable.other.property.gml
        match: (?:(\.)|(\?\.(?!\s*[[:digit:]])))\s*(\#?[_$[:alpha:]][_$[:alnum:]]*)
      - match: ([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])
        name: variable.other.constant.gml
      - match: \#macro
        name: storage.type.gml
      - match: "[_$[:alpha:]][_$[:alnum:]]*"
        name: variable.other.readwrite.gml
  if-statement:
    patterns:
      - begin: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(?=\bif\s*(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))\s*(?!\{))
        end: (?=;|$|\})
        patterns:
          - include: "#comment"
          - begin: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(if)\s*(\()
            beginCaptures:
              "1":
                name: keyword.control.conditional.gml
              "2":
                name: meta.brace.round.gml
            end: \)
            endCaptures:
              "0":
                name: meta.brace.round.gml
            patterns:
              - include: "#expression"
          - begin: (?<=\))\s*\/(?![\/*])(?=(?:[^\/\\\[]|\\.|\[([^\]\\]|\\.)*\])+\/([dgimsuy]+|(?![\/\*])|(?=\/\*))(?!\s*[a-zA-Z0-9_$]))
            beginCaptures:
              "0":
                name: punctuation.definition.string.begin.gml
            end: (/)([dgimsuy]*)
            endCaptures:
              "1":
                name: punctuation.definition.string.end.gml
              "2":
                name: keyword.other.gml
            name: string.regexp.gml
            patterns:
              - include: "#regexp"
          - include: "#statements"
  import-declaration:
    begin: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(?:(\bexport)\s+)?(?:(\bdeclare)\s+)?\b(import)(?:\s+(type)(?!\s+from))?(?!\s*[:\(])(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
    beginCaptures:
      "1":
        name: keyword.control.export.gml
      "2":
        name: storage.modifier.gml
      "3":
        name: keyword.control.import.gml
      "4":
        name: keyword.control.type.gml
    end: (?<!^import|[^\._$[:alnum:]]import)(?=;|$|^)
    name: meta.import.gml
    patterns:
      - include: "#single-line-comment-consuming-line-ending"
      - include: "#comment"
      - include: "#string"
      - begin: (?<=^import|[^\._$[:alnum:]]import)(?!\s*["'])
        end: \bfrom\b
        endCaptures:
          "0":
            name: keyword.control.from.gml
        patterns:
          - include: "#import-export-declaration"
      - include: "#import-export-declaration"
  import-equals-declaration:
    patterns:
      - begin: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(?:(\bexport)\s+)?(?:(\bdeclare)\s+)?\b(import)(?:\s+(type))?\s+([_$[:alpha:]][_$[:alnum:]]*)\s*(=)\s*(require)\s*(\()
        beginCaptures:
          "1":
            name: keyword.control.export.gml
          "2":
            name: storage.modifier.gml
          "3":
            name: keyword.control.import.gml
          "4":
            name: keyword.control.type.gml
          "5":
            name: variable.other.readwrite.alias.gml
          "6":
            name: keyword.operator.assignment.gml
          "7":
            name: keyword.control.require.gml
          "8":
            name: meta.brace.round.gml
        end: \)
        endCaptures:
          "0":
            name: meta.brace.round.gml
        name: meta.import-equals.external.gml
        patterns:
          - include: "#comment"
          - include: "#string"
      - begin: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(?:(\bexport)\s+)?(?:(\bdeclare)\s+)?\b(import)(?:\s+(type))?\s+([_$[:alpha:]][_$[:alnum:]]*)\s*(=)\s*(?!require\b)
        beginCaptures:
          "1":
            name: keyword.control.export.gml
          "2":
            name: storage.modifier.gml
          "3":
            name: keyword.control.import.gml
          "4":
            name: keyword.control.type.gml
          "5":
            name: variable.other.readwrite.alias.gml
          "6":
            name: keyword.operator.assignment.gml
        end: (?=;|$|^)
        name: meta.import-equals.internal.gml
        patterns:
          - include: "#single-line-comment-consuming-line-ending"
          - include: "#comment"
          - captures:
              "1":
                name: entity.name.type.module.gml
              "2":
                name: punctuation.accessor.gml
              "3":
                name: punctuation.accessor.optional.gml
            match: ([_$[:alpha:]][_$[:alnum:]]*)\s*(?:(\.)|(\?\.(?!\s*[[:digit:]])))
          - match: ([_$[:alpha:]][_$[:alnum:]]*)
            name: variable.other.readwrite.gml
  import-export-assert-clause:
    begin: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(assert)\s*(\{)
    beginCaptures:
      "1":
        name: keyword.control.assert.gml
      "2":
        name: punctuation.definition.block.gml
    end: \}
    endCaptures:
      "0":
        name: punctuation.definition.block.gml
    patterns:
      - include: "#comment"
      - include: "#string"
      - match: (?:[_$[:alpha:]][_$[:alnum:]]*)\s*(?=(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*:)
        name: meta.object-literal.key.gml
      - match: ":"
        name: punctuation.separator.key-value.gml
  import-export-block:
    begin: \{
    beginCaptures:
      "0":
        name: punctuation.definition.block.gml
    end: \}
    endCaptures:
      "0":
        name: punctuation.definition.block.gml
    name: meta.block.gml
    patterns:
      - include: "#import-export-clause"
  import-export-clause:
    patterns:
      - include: "#comment"
      - captures:
          "1":
            name: keyword.control.type.gml
          "2":
            name: keyword.control.default.gml
          "3":
            name: constant.language.import-export-all.gml
          "4":
            name: variable.other.readwrite.gml
          "5":
            name: keyword.control.as.gml
          "6":
            name: keyword.control.default.gml
          "7":
            name: variable.other.readwrite.alias.gml
        match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(?:(?:(\btype)\s+)?(?:(\bdefault)|(\*)|(\b[_$[:alpha:]][_$[:alnum:]]*)))\s+(as)\s+(?:(default(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.)))|([_$[:alpha:]][_$[:alnum:]]*))
      - include: "#punctuation-comma"
      - match: \*
        name: constant.language.import-export-all.gml
      - match: \b(default)\b
        name: keyword.control.default.gml
      - captures:
          "1":
            name: keyword.control.type.gml
          "2":
            name: variable.other.readwrite.alias.gml
        match: (?:(\btype)\s+)?([_$[:alpha:]][_$[:alnum:]]*)
  import-export-declaration:
    patterns:
      - include: "#comment"
      - include: "#string"
      - include: "#import-export-block"
      - match: \bfrom\b
        name: keyword.control.from.gml
      - include: "#import-export-assert-clause"
      - include: "#import-export-clause"
  indexer-declaration:
    begin: (?:(?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(readonly)\s*)?\s*(\[)\s*([_$[:alpha:]][_$[:alnum:]]*)\s*(?=:)
    beginCaptures:
      "1":
        name: storage.modifier.gml
      "2":
        name: meta.brace.square.gml
      "3":
        name: variable.parameter.gml
    end: (\])\s*(\?\s*)?|$
    endCaptures:
      "1":
        name: meta.brace.square.gml
      "2":
        name: keyword.operator.optional.gml
    name: meta.indexer.declaration.gml
    patterns:
      - include: "#type-annotation"
  indexer-mapped-type-declaration:
    begin: (?:(?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))([+-])?(readonly)\s*)?\s*(\[)\s*([_$[:alpha:]][_$[:alnum:]]*)\s+(in)\s+
    beginCaptures:
      "1":
        name: keyword.operator.type.modifier.gml
      "2":
        name: storage.modifier.gml
      "3":
        name: meta.brace.square.gml
      "4":
        name: entity.name.type.gml
      "5":
        name: keyword.operator.expression.in.gml
    end: (\])([+-])?\s*(\?\s*)?|$
    endCaptures:
      "1":
        name: meta.brace.square.gml
      "2":
        name: keyword.operator.type.modifier.gml
      "3":
        name: keyword.operator.optional.gml
    name: meta.indexer.mappedtype.declaration.gml
    patterns:
      - captures:
          "1":
            name: keyword.control.as.gml
        match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(as)\s+
      - include: "#type"
  inline-tags:
    patterns:
      - captures:
          "1":
            name: punctuation.definition.bracket.square.begin.jsdoc
          "2":
            name: punctuation.definition.bracket.square.end.jsdoc
        match: (\[)[^\]]+(\])(?={@(?:link|linkcode|linkplain|tutorial))
        name: constant.other.description.jsdoc
      - begin: ({)((@)(?:link(?:code|plain)?|tutorial))\s*
        beginCaptures:
          "1":
            name: punctuation.definition.bracket.curly.begin.jsdoc
          "2":
            name: storage.type.class.jsdoc
          "3":
            name: punctuation.definition.inline.tag.jsdoc
        end: "}|(?=\\*/)"
        endCaptures:
          "0":
            name: punctuation.definition.bracket.curly.end.jsdoc
        name: entity.name.type.instance.jsdoc
        patterns:
          - captures:
              "1":
                name: variable.other.link.underline.jsdoc
              "2":
                name: punctuation.separator.pipe.jsdoc
            match: \G((?=https?://)(?:[^|}\s*]|\*[/])+)(\|)?
          - captures:
              "1":
                name: variable.other.description.jsdoc
              "2":
                name: punctuation.separator.pipe.jsdoc
            match: \G((?:[^{}@\s|*]|\*[^/])+)(\|)?
  instanceof-expr:
    begin: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(instanceof)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
    beginCaptures:
      "1":
        name: keyword.operator.expression.instanceof.gml
    end: (?<=\))|(?=[;),}\]:?\-\+\>]|\|\||\&\&|\!\=\=|$|(===|!==|==|!=)|(([\&\~\^\|]\s*)?[_$[:alpha:]][_$[:alnum:]]*\s+instanceof(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.)))|((?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))function((\s+[_$[:alpha:]][_$[:alnum:]]*)|(\s*[\(]))))
    patterns:
      - include: "#type"
  interface-declaration:
    begin: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(?:(\bexport)\s+)?(?:(\bdeclare)\s+)?\b(?:(abstract)\s+)?\b(interface)\b(?=\s+|/[/*])
    beginCaptures:
      "1":
        name: keyword.control.export.gml
      "2":
        name: storage.modifier.gml
      "3":
        name: storage.modifier.gml
      "4":
        name: storage.type.interface.gml
    end: (?<=\})
    name: meta.interface.gml
    patterns:
      - include: "#comment"
      - include: "#class-or-interface-heritage"
      - captures:
          "0":
            name: entity.name.type.interface.gml
        match: "[_$[:alpha:]][_$[:alnum:]]*"
      - include: "#type-parameters"
      - include: "#class-or-interface-body"
  jdocblock:
    patterns:
      - captures:
          "1":
            name: storage.type.class.jsdoc
          "2":
            name: punctuation.definition.block.tag.jsdoc
          "3":
            name: constant.language.access-type.jsdoc
        match: |-
          (?x)
          ((@)(?:access|api))
          \s+
          (private|protected|public)
          \b
      - captures:
          "1":
            name: storage.type.class.jsdoc
          "2":
            name: punctuation.definition.block.tag.jsdoc
          "3":
            name: entity.name.type.instance.jsdoc
          "4":
            name: punctuation.definition.bracket.angle.begin.jsdoc
          "5":
            name: constant.other.email.link.underline.jsdoc
          "6":
            name: punctuation.definition.bracket.angle.end.jsdoc
        match: |-
          (?x)
          ((@)author)
          \s+
          (
            [^@\s<>*/]
            (?:[^@<>*/]|\*[^/])*
          )
          (?:
            \s*
            (<)
            ([^>\s]+)
            (>)
          )?
      - captures:
          "1":
            name: storage.type.class.jsdoc
          "2":
            name: punctuation.definition.block.tag.jsdoc
          "3":
            name: entity.name.type.instance.jsdoc
          "4":
            name: keyword.operator.control.jsdoc
          "5":
            name: entity.name.type.instance.jsdoc
        match: |-
          (?x)
          ((@)borrows) \s+
          ((?:[^@\s*/]|\*[^/])+)    # <that namepath>
          \s+ (as) \s+              # as
          ((?:[^@\s*/]|\*[^/])+)    # <this namepath>
      - begin: ((@)example)\s+
        beginCaptures:
          "1":
            name: storage.type.class.jsdoc
          "2":
            name: punctuation.definition.block.tag.jsdoc
        end: (?=@|\*/)
        name: meta.example.jsdoc
        patterns:
          - match: ^\s\*\s+
          - begin: \G(<)caption(>)
            beginCaptures:
              "0":
                name: entity.name.tag.inline.jsdoc
              "1":
                name: punctuation.definition.bracket.angle.begin.jsdoc
              "2":
                name: punctuation.definition.bracket.angle.end.jsdoc
            contentName: constant.other.description.jsdoc
            end: (</)caption(>)|(?=\*/)
            endCaptures:
              "0":
                name: entity.name.tag.inline.jsdoc
              "1":
                name: punctuation.definition.bracket.angle.begin.jsdoc
              "2":
                name: punctuation.definition.bracket.angle.end.jsdoc
          - captures:
              "0":
                name: source.embedded.gml
            match: "[^\\s@*](?:[^*]|\\*[^/])*"
      - captures:
          "1":
            name: storage.type.class.jsdoc
          "2":
            name: punctuation.definition.block.tag.jsdoc
          "3":
            name: constant.language.symbol-type.jsdoc
        match: (?x) ((@)kind) \s+
          (class|constant|event|external|file|function|member|mixin|module|namespace|typedef)
          \b
      - captures:
          "1":
            name: storage.type.class.jsdoc
          "2":
            name: punctuation.definition.block.tag.jsdoc
          "3":
            name: variable.other.link.underline.jsdoc
          "4":
            name: entity.name.type.instance.jsdoc
        match: |-
          (?x)
          ((@)see)
          \s+
          (?:
            # URL
            (
              (?=https?://)
              (?:[^\s*]|\*[^/])+
            )
            |
            # JSDoc namepath
            (
              (?!
                # Avoid matching bare URIs (also acceptable as links)
                https?://
                |
                # Avoid matching {@inline tags}; we match those below
                (?:\[[^\[\]]*\])? # Possible description [preceding]{@tag}
                {@(?:link|linkcode|linkplain|tutorial)\b
              )
              # Matched namepath
              (?:[^@\s*/]|\*[^/])+
            )
          )
      - captures:
          "1":
            name: storage.type.class.jsdoc
          "2":
            name: punctuation.definition.block.tag.jsdoc
          "3":
            name: variable.other.jsdoc
        match: |-
          (?x)
          ((@)template)
          \s+
          # One or more valid identifiers
          (
            [A-Za-z_$]         # First character: non-numeric word character
            [\w$.\[\]]*        # Rest of identifier
            (?:                # Possible list of additional identifiers
              \s* , \s*
              [A-Za-z_$]
              [\w$.\[\]]*
            )*
          )
      - begin: (?x)((@)template)\s+(?={)
        beginCaptures:
          "1":
            name: storage.type.class.jsdoc
          "2":
            name: punctuation.definition.block.tag.jsdoc
        end: (?=\s|\*/|[^{}\[\]A-Za-z_$])
        patterns:
          - include: "#jsdoctype"
          - match: ([A-Za-z_$][\w$.\[\]]*)
            name: variable.other.jsdoc
      - captures:
          "1":
            name: storage.type.class.jsdoc
          "2":
            name: punctuation.definition.block.tag.jsdoc
          "3":
            name: variable.other.jsdoc
        match: |-
          (?x)
          (
            (@)
            (?:arg|argument|const|constant|member|namespace|param|var)
          )
          \s+
          (
            [A-Za-z_$]
            [\w$.\[\]]*
          )
      - begin: ((@)typedef)\s+(?={)
        beginCaptures:
          "1":
            name: storage.type.class.jsdoc
          "2":
            name: punctuation.definition.block.tag.jsdoc
        end: (?=\s|\*/|[^{}\[\]A-Za-z_$])
        patterns:
          - include: "#jsdoctype"
          - match: (?:[^@\s*/]|\*[^/])+
            name: entity.name.type.instance.jsdoc
      - begin: ((@)(?:arg|argument|const|constant|member|namespace|param|prop|property|var))\s+(?={)
        beginCaptures:
          "1":
            name: storage.type.class.jsdoc
          "2":
            name: punctuation.definition.block.tag.jsdoc
        end: (?=\s|\*/|[^{}\[\]A-Za-z_$])
        patterns:
          - include: "#jsdoctype"
          - match: ([A-Za-z_$][\w$.\[\]]*)
            name: variable.other.jsdoc
          - captures:
              "1":
                name: punctuation.definition.optional-value.begin.bracket.square.jsdoc
              "2":
                name: keyword.operator.assignment.jsdoc
              "3":
                name: source.embedded.gml
              "4":
                name: punctuation.definition.optional-value.end.bracket.square.jsdoc
              "5":
                name: invalid.illegal.syntax.jsdoc
            match: >-
              (?x)

              (\[)\s*

              [\w$]+

              (?:
                (?:\[\])?                                        # Foo[ ].bar properties within an array
                \.                                                # Foo.Bar namespaced parameter
                [\w$]+
              )*

              (?:
                \s*
                (=)                                                # [foo=bar] Default parameter value
                \s*
                (
                  # The inner regexes are to stop the match early at */ and to not stop at escaped quotes
                  (?>
                    "(?:(?:\*(?!/))|(?:\\(?!"))|[^*\\])*?" |                      # [foo="bar"] Double-quoted
                    '(?:(?:\*(?!/))|(?:\\(?!'))|[^*\\])*?' |                      # [foo='bar'] Single-quoted
                    \[ (?:(?:\*(?!/))|[^*])*? \] |                                # [foo=[1,2]] Array literal
                    (?:(?:\*(?!/))|\s(?!\s*\])|\[.*?(?:\]|(?=\*/))|[^*\s\[\]])*   # Everything else
                  )*
                )
              )?

              \s*(?:(\])((?:[^*\s]|\*[^\s/])+)?|(?=\*/))
            name: variable.other.jsdoc
      - begin: >-
          (?x)

          (
            (@)
            (?:define|enum|exception|export|extends|lends|implements|modifies
            |namespace|private|protected|returns?|satisfies|suppress|this|throws|type
            |yields?)
          )

          \s+(?={)
        beginCaptures:
          "1":
            name: storage.type.class.jsdoc
          "2":
            name: punctuation.definition.block.tag.jsdoc
        end: (?=\s|\*/|[^{}\[\]A-Za-z_$])
        patterns:
          - include: "#jsdoctype"
      - captures:
          "1":
            name: storage.type.class.jsdoc
          "2":
            name: punctuation.definition.block.tag.jsdoc
          "3":
            name: entity.name.type.instance.jsdoc
        match: >-
          (?x)

          (
            (@)
            (?:alias|augments|callback|constructs|emits|event|fires|exports?
            |extends|external|function|func|host|lends|listens|interface|memberof!?
            |method|module|mixes|mixin|name|requires|see|this|typedef|uses)
          )

          \s+

          (
            (?:
              [^{}@\s*] | \*[^/]
            )+
          )
      - begin: ((@)(?:default(?:value)?|license|version))\s+(([''"]))
        beginCaptures:
          "1":
            name: storage.type.class.jsdoc
          "2":
            name: punctuation.definition.block.tag.jsdoc
          "3":
            name: variable.other.jsdoc
          "4":
            name: punctuation.definition.string.begin.jsdoc
        contentName: variable.other.jsdoc
        end: (\3)|(?=$|\*/)
        endCaptures:
          "0":
            name: variable.other.jsdoc
          "1":
            name: punctuation.definition.string.end.jsdoc
      - captures:
          "1":
            name: storage.type.class.jsdoc
          "2":
            name: punctuation.definition.block.tag.jsdoc
          "3":
            name: variable.other.jsdoc
        match: ((@)(?:default(?:value)?|license|tutorial|variation|version))\s+([^\s*]+)
      - captures:
          "1":
            name: punctuation.definition.block.tag.jsdoc
        match: (?x) (@)
          (?:abstract|access|alias|api|arg|argument|async|attribute|augments|author|beta|borrows|bubbles
          |callback|chainable|class|classdesc|code|config|const|constant|constructor|constructs|copyright
          |default|defaultvalue|define|deprecated|desc|description|dict|emits|enum|event|example|exception
          |exports?|extends|extension(?:_?for)?|external|externs|file|fileoverview|final|fires|for|func
          |function|generator|global|hideconstructor|host|ignore|implements|implicitCast|inherit[Dd]oc
          |inner|instance|interface|internal|kind|lends|license|listens|main|member|memberof!?|method
          |mixes|mixins?|modifies|module|name|namespace|noalias|nocollapse|nocompile|nosideeffects
          |override|overview|package|param|polymer(?:Behavior)?|preserve|private|prop|property|protected
          |public|read[Oo]nly|record|require[ds]|returns?|see|since|static|struct|submodule|summary
          |suppress|template|this|throws|todo|tutorial|type|typedef|unrestricted|uses|var|variation
          |version|virtual|writeOnce|yields?) \b
        name: storage.type.class.jsdoc
      - include: "#inline-tags"
      - captures:
          "1":
            name: storage.type.class.jsdoc
          "2":
            name: punctuation.definition.block.tag.jsdoc
        match: ((@)(?:[_$[:alpha:]][_$[:alnum:]]*))(?=\s+)
  jsdoctype:
    patterns:
      - match: \G{(?:[^}*]|\*[^/}])+$
        name: invalid.illegal.type.jsdoc
      - begin: \G({)
        beginCaptures:
          "0":
            name: entity.name.type.instance.jsdoc
          "1":
            name: punctuation.definition.bracket.curly.begin.jsdoc
        contentName: entity.name.type.instance.jsdoc
        end: ((}))\s*|(?=\*/)
        endCaptures:
          "1":
            name: entity.name.type.instance.jsdoc
          "2":
            name: punctuation.definition.bracket.curly.end.jsdoc
        patterns:
          - include: "#brackets"
  label:
    patterns:
      - begin: ([_$[:alpha:]][_$[:alnum:]]*)\s*(:)(?=\s*\{)
        beginCaptures:
          "1":
            name: entity.name.label.gml
          "2":
            name: punctuation.separator.label.gml
        end: (?<=\})
        patterns:
          - include: "#decl-block"
      - captures:
          "1":
            name: entity.name.label.gml
          "2":
            name: punctuation.separator.label.gml
        match: ([_$[:alpha:]][_$[:alnum:]]*)\s*(:)
  literal:
    patterns:
      - include: "#numeric-literal"
      - include: "#boolean-literal"
      - include: "#null-literal"
      - include: "#undefined-literal"
      - include: "#numericConstant-literal"
      - include: "#array-literal"
      - include: "#this-literal"
      - include: "#super-literal"
  method-declaration:
    patterns:
      - begin: (?x)(?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(?:\b(override)\s+)?(?:\b(public|private|protected)\s+)?(?:\b(abstract)\s+)?(?:\b(async)\s+)?\s*\b(constructor)\b(?!:)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
        beginCaptures:
          "1":
            name: storage.modifier.gml
          "2":
            name: storage.modifier.gml
          "3":
            name: storage.modifier.gml
          "4":
            name: storage.modifier.async.gml
          "5":
            name: storage.type.gml
        end: (?=\}|;|,|$)|(?<=\})
        name: meta.method.declaration.gml
        patterns:
          - include: "#method-declaration-name"
          - include: "#function-body"
      - begin: (?x)(?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(?:\b(override)\s+)?(?:\b(public|private|protected)\s+)?(?:\b(abstract)\s+)?(?:\b(async)\s+)?(?:(?:\s*\b(new)\b(?!:)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.)))|(?:(\*)\s*)?)(?=\s*((<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*))?[\(])
        beginCaptures:
          "1":
            name: storage.modifier.gml
          "2":
            name: storage.modifier.gml
          "3":
            name: storage.modifier.gml
          "4":
            name: storage.modifier.async.gml
          "5":
            name: keyword.operator.new.gml
          "6":
            name: keyword.generator.asterisk.gml
        end: (?=\}|;|,|$)|(?<=\})
        name: meta.method.declaration.gml
        patterns:
          - include: "#method-declaration-name"
          - include: "#function-body"
      - begin: >-
          (?x)(?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(?:\b(override)\s+)?(?:\b(public|private|protected)\s+)?(?:\b(abstract)\s+)?(?:\b(async)\s+)?(?:\b(get|set)\s+)?(?:(\*)\s*)?(?=\s*(((\b(?<!\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\b(?!\$))|(\b(?<!\$)0(?:b|B)[01][01_]*(n)?\b(?!\$))|(\b(?<!\$)0(?:o|O)?[0-7][0-7_]*(n)?\b(?!\$))|((?<!\$)(?:
            (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)| # 1.1E+3
            (?:\b[0-9][0-9_]*(\.)[eE][+-]?[0-9][0-9_]*(n)?\b)|             # 1.E+3
            (?:\B(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|             # .1E+3
            (?:\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|                 # 1E+3
            (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*(n)?\b)|                      # 1.1
            (?:\b[0-9][0-9_]*(\.)(n)?\B)|                                  # 1.
            (?:\B(\.)[0-9][0-9_]*(n)?\b)|                                  # .1
            (?:\b[0-9][0-9_]*(n)?\b(?!\.))                                 # 1
          )(?!\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`)|(\[([^\[\]]|\[[^\[\]]*\])+\]))\s*(\??))\s*((<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*))?[\(])
        beginCaptures:
          "1":
            name: storage.modifier.gml
          "2":
            name: storage.modifier.gml
          "3":
            name: storage.modifier.gml
          "4":
            name: storage.modifier.async.gml
          "5":
            name: storage.type.property.gml
          "6":
            name: keyword.generator.asterisk.gml
        end: (?=\}|;|,|$)|(?<=\})
        name: meta.method.declaration.gml
        patterns:
          - include: "#method-declaration-name"
          - include: "#function-body"
  method-declaration-name:
    begin: >-
      (?x)(?=((\b(?<!\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\b(?!\$))|(\b(?<!\$)0(?:b|B)[01][01_]*(n)?\b(?!\$))|(\b(?<!\$)0(?:o|O)?[0-7][0-7_]*(n)?\b(?!\$))|((?<!\$)(?:
        (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)| # 1.1E+3
        (?:\b[0-9][0-9_]*(\.)[eE][+-]?[0-9][0-9_]*(n)?\b)|             # 1.E+3
        (?:\B(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|             # .1E+3
        (?:\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|                 # 1E+3
        (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*(n)?\b)|                      # 1.1
        (?:\b[0-9][0-9_]*(\.)(n)?\B)|                                  # 1.
        (?:\B(\.)[0-9][0-9_]*(n)?\b)|                                  # .1
        (?:\b[0-9][0-9_]*(n)?\b(?!\.))                                 # 1
      )(?!\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`)|(\[([^\[\]]|\[[^\[\]]*\])+\]))\s*(\??)\s*[\(\<])
    end: (?=\(|\<)
    patterns:
      - include: "#string"
      - include: "#array-literal"
      - include: "#numeric-literal"
      - match: "[_$[:alpha:]][_$[:alnum:]]*"
        name: meta.definition.method.gml entity.name.function.gml
      - match: \?
        name: keyword.operator.optional.gml
  namespace-declaration:
    begin: (?:(?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(?:(\bexport)\s+)?(?:(\bdeclare)\s+)?\b(namespace|module)\s+(?=[_$[:alpha:]"'`]))
    beginCaptures:
      "1":
        name: keyword.control.export.gml
      "2":
        name: storage.modifier.gml
      "3":
        name: storage.type.namespace.gml
    end: (?<=\})|(?=;|^\s*$|(?:^\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\b))
    name: meta.namespace.declaration.gml
    patterns:
      - include: "#comment"
      - include: "#string"
      - match: ([_$[:alpha:]][_$[:alnum:]]*)
        name: entity.name.type.module.gml
      - include: "#punctuation-accessor"
      - include: "#decl-block"
  new-expr:
    begin: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(new)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
    beginCaptures:
      "1":
        name: keyword.operator.new.gml
    end: (?<=\))|(?=[;),}\]:?\-\+\>]|\|\||\&\&|\!\=\=|$|((?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))new(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.)))|((?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))function((\s+[_$[:alpha:]][_$[:alnum:]]*)|(\s*[\(]))))
    name: new.expr.gml
    patterns:
      - include: "#expression"
  null-literal:
    match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))null(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
    name: constant.language.null.gml
  numeric-literal:
    patterns:
      - captures:
          "1":
            name: storage.type.numeric.bigint.gml
        match: \b(?<!\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\b(?!\$)
        name: constant.numeric.hex.gml
      - captures:
          "1":
            name: storage.type.numeric.bigint.gml
        match: \b(?<!\$)0(?:b|B)[01][01_]*(n)?\b(?!\$)
        name: constant.numeric.binary.gml
      - captures:
          "1":
            name: storage.type.numeric.bigint.gml
        match: \b(?<!\$)0(?:o|O)?[0-7][0-7_]*(n)?\b(?!\$)
        name: constant.numeric.octal.gml
      - captures:
          "0":
            name: constant.numeric.decimal.gml
          "1":
            name: meta.delimiter.decimal.period.gml
          "2":
            name: storage.type.numeric.bigint.gml
          "3":
            name: meta.delimiter.decimal.period.gml
          "4":
            name: storage.type.numeric.bigint.gml
          "5":
            name: meta.delimiter.decimal.period.gml
          "6":
            name: storage.type.numeric.bigint.gml
          "7":
            name: storage.type.numeric.bigint.gml
          "8":
            name: meta.delimiter.decimal.period.gml
          "9":
            name: storage.type.numeric.bigint.gml
          "10":
            name: meta.delimiter.decimal.period.gml
          "11":
            name: storage.type.numeric.bigint.gml
          "12":
            name: meta.delimiter.decimal.period.gml
          "13":
            name: storage.type.numeric.bigint.gml
          "14":
            name: storage.type.numeric.bigint.gml
        match: >-
          (?x)

          (?<!\$)(?:
            (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)| # 1.1E+3
            (?:\b[0-9][0-9_]*(\.)[eE][+-]?[0-9][0-9_]*(n)?\b)|             # 1.E+3
            (?:\B(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|             # .1E+3
            (?:\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|                 # 1E+3
            (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*(n)?\b)|                      # 1.1
            (?:\b[0-9][0-9_]*(\.)(n)?\B)|                                  # 1.
            (?:\B(\.)[0-9][0-9_]*(n)?\b)|                                  # .1
            (?:\b[0-9][0-9_]*(n)?\b(?!\.))                                 # 1
          )(?!\$)
  numericConstant-literal:
    patterns:
      - match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))NaN(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
        name: constant.language.nan.gml
      - match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))Infinity(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
        name: constant.language.infinity.gml
  object-binding-element:
    patterns:
      - include: "#comment"
      - begin: >-
          (?x)(?=((\b(?<!\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\b(?!\$))|(\b(?<!\$)0(?:b|B)[01][01_]*(n)?\b(?!\$))|(\b(?<!\$)0(?:o|O)?[0-7][0-7_]*(n)?\b(?!\$))|((?<!\$)(?:
            (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)| # 1.1E+3
            (?:\b[0-9][0-9_]*(\.)[eE][+-]?[0-9][0-9_]*(n)?\b)|             # 1.E+3
            (?:\B(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|             # .1E+3
            (?:\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|                 # 1E+3
            (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*(n)?\b)|                      # 1.1
            (?:\b[0-9][0-9_]*(\.)(n)?\B)|                                  # 1.
            (?:\B(\.)[0-9][0-9_]*(n)?\b)|                                  # .1
            (?:\b[0-9][0-9_]*(n)?\b(?!\.))                                 # 1
          )(?!\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`)|(\[([^\[\]]|\[[^\[\]]*\])+\]))\s*(:))
        end: (?=,|\})
        patterns:
          - include: "#object-binding-element-propertyName"
          - include: "#binding-element"
      - include: "#object-binding-pattern"
      - include: "#destructuring-variable-rest"
      - include: "#variable-initializer"
      - include: "#punctuation-comma"
  object-binding-element-const:
    patterns:
      - include: "#comment"
      - begin: >-
          (?x)(?=((\b(?<!\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\b(?!\$))|(\b(?<!\$)0(?:b|B)[01][01_]*(n)?\b(?!\$))|(\b(?<!\$)0(?:o|O)?[0-7][0-7_]*(n)?\b(?!\$))|((?<!\$)(?:
            (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)| # 1.1E+3
            (?:\b[0-9][0-9_]*(\.)[eE][+-]?[0-9][0-9_]*(n)?\b)|             # 1.E+3
            (?:\B(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|             # .1E+3
            (?:\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|                 # 1E+3
            (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*(n)?\b)|                      # 1.1
            (?:\b[0-9][0-9_]*(\.)(n)?\B)|                                  # 1.
            (?:\B(\.)[0-9][0-9_]*(n)?\b)|                                  # .1
            (?:\b[0-9][0-9_]*(n)?\b(?!\.))                                 # 1
          )(?!\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`)|(\[([^\[\]]|\[[^\[\]]*\])+\]))\s*(:))
        end: (?=,|\})
        patterns:
          - include: "#object-binding-element-propertyName"
          - include: "#binding-element-const"
      - include: "#object-binding-pattern-const"
      - include: "#destructuring-variable-rest-const"
      - include: "#variable-initializer"
      - include: "#punctuation-comma"
  object-binding-element-propertyName:
    begin: >-
      (?x)(?=((\b(?<!\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\b(?!\$))|(\b(?<!\$)0(?:b|B)[01][01_]*(n)?\b(?!\$))|(\b(?<!\$)0(?:o|O)?[0-7][0-7_]*(n)?\b(?!\$))|((?<!\$)(?:
        (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)| # 1.1E+3
        (?:\b[0-9][0-9_]*(\.)[eE][+-]?[0-9][0-9_]*(n)?\b)|             # 1.E+3
        (?:\B(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|             # .1E+3
        (?:\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|                 # 1E+3
        (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*(n)?\b)|                      # 1.1
        (?:\b[0-9][0-9_]*(\.)(n)?\B)|                                  # 1.
        (?:\B(\.)[0-9][0-9_]*(n)?\b)|                                  # .1
        (?:\b[0-9][0-9_]*(n)?\b(?!\.))                                 # 1
      )(?!\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`)|(\[([^\[\]]|\[[^\[\]]*\])+\]))\s*(:))
    end: (:)
    endCaptures:
      "0":
        name: punctuation.destructuring.gml
    patterns:
      - include: "#string"
      - include: "#array-literal"
      - include: "#numeric-literal"
      - match: ([_$[:alpha:]][_$[:alnum:]]*)
        name: variable.object.property.gml
  object-binding-pattern:
    begin: (?:(\.\.\.)\s*)?(\{)
    beginCaptures:
      "1":
        name: keyword.operator.rest.gml
      "2":
        name: punctuation.definition.binding-pattern.object.gml
    end: \}
    endCaptures:
      "0":
        name: punctuation.definition.binding-pattern.object.gml
    patterns:
      - include: "#object-binding-element"
  object-binding-pattern-const:
    begin: (?:(\.\.\.)\s*)?(\{)
    beginCaptures:
      "1":
        name: keyword.operator.rest.gml
      "2":
        name: punctuation.definition.binding-pattern.object.gml
    end: \}
    endCaptures:
      "0":
        name: punctuation.definition.binding-pattern.object.gml
    patterns:
      - include: "#object-binding-element-const"
  object-identifiers:
    patterns:
      - match: ([_$[:alpha:]][_$[:alnum:]]*)(?=\s*\??\.\s*prototype\b(?!\$))
        name: support.class.gml
      - captures:
          "1":
            name: punctuation.accessor.gml
          "2":
            name: punctuation.accessor.optional.gml
          "3":
            name: variable.other.constant.object.property.gml
          "4":
            name: variable.other.object.property.gml
        match: |-
          (?x)(?:(\.)|(\?\.(?!\s*[[:digit:]])))\s*(?:
            (\#?[[:upper:]][_$[:digit:][:upper:]]*) |
            (\#?[_$[:alpha:]][_$[:alnum:]]*)
          )(?=\s*\??\.\s*\#?[_$[:alpha:]][_$[:alnum:]]*)
      - captures:
          "1":
            name: variable.other.constant.object.gml
          "2":
            name: variable.other.object.gml
        match: |-
          (?x)(?:
            ([[:upper:]][_$[:digit:][:upper:]]*) |
            ([_$[:alpha:]][_$[:alnum:]]*)
          )(?=\s*\??\.\s*\#?[_$[:alpha:]][_$[:alnum:]]*)
  object-literal:
    begin: \{
    beginCaptures:
      "0":
        name: punctuation.definition.block.gml
    end: \}
    endCaptures:
      "0":
        name: punctuation.definition.block.gml
    name: meta.objectliteral.gml
    patterns:
      - include: "#object-member"
  object-literal-method-declaration:
    begin: >-
      (?x)(?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(?:\b(async)\s+)?(?:\b(get|set)\s+)?(?:(\*)\s*)?(?=\s*(((\b(?<!\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\b(?!\$))|(\b(?<!\$)0(?:b|B)[01][01_]*(n)?\b(?!\$))|(\b(?<!\$)0(?:o|O)?[0-7][0-7_]*(n)?\b(?!\$))|((?<!\$)(?:
        (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)| # 1.1E+3
        (?:\b[0-9][0-9_]*(\.)[eE][+-]?[0-9][0-9_]*(n)?\b)|             # 1.E+3
        (?:\B(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|             # .1E+3
        (?:\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|                 # 1E+3
        (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*(n)?\b)|                      # 1.1
        (?:\b[0-9][0-9_]*(\.)(n)?\B)|                                  # 1.
        (?:\B(\.)[0-9][0-9_]*(n)?\b)|                                  # .1
        (?:\b[0-9][0-9_]*(n)?\b(?!\.))                                 # 1
      )(?!\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`)|(\[([^\[\]]|\[[^\[\]]*\])+\]))\s*(\??))\s*((<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*))?[\(])
    beginCaptures:
      "1":
        name: storage.modifier.async.gml
      "2":
        name: storage.type.property.gml
      "3":
        name: keyword.generator.asterisk.gml
    end: (?=\}|;|,)|(?<=\})
    name: meta.method.declaration.gml
    patterns:
      - include: "#method-declaration-name"
      - include: "#function-body"
      - begin: >-
          (?x)(?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(?:\b(async)\s+)?(?:\b(get|set)\s+)?(?:(\*)\s*)?(?=\s*(((\b(?<!\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\b(?!\$))|(\b(?<!\$)0(?:b|B)[01][01_]*(n)?\b(?!\$))|(\b(?<!\$)0(?:o|O)?[0-7][0-7_]*(n)?\b(?!\$))|((?<!\$)(?:
            (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)| # 1.1E+3
            (?:\b[0-9][0-9_]*(\.)[eE][+-]?[0-9][0-9_]*(n)?\b)|             # 1.E+3
            (?:\B(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|             # .1E+3
            (?:\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|                 # 1E+3
            (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*(n)?\b)|                      # 1.1
            (?:\b[0-9][0-9_]*(\.)(n)?\B)|                                  # 1.
            (?:\B(\.)[0-9][0-9_]*(n)?\b)|                                  # .1
            (?:\b[0-9][0-9_]*(n)?\b(?!\.))                                 # 1
          )(?!\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`)|(\[([^\[\]]|\[[^\[\]]*\])+\]))\s*(\??))\s*((<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*))?[\(])
        beginCaptures:
          "1":
            name: storage.modifier.async.gml
          "2":
            name: storage.type.property.gml
          "3":
            name: keyword.generator.asterisk.gml
        end: (?=\(|\<)
        patterns:
          - include: "#method-declaration-name"
  object-member:
    patterns:
      - include: "#comment"
      - include: "#object-literal-method-declaration"
      - begin: (?=\[)
        end: (?=:)|((?<=[\]])(?=\s*[\(\<]))
        name: meta.object.member.gml meta.object-literal.key.gml
        patterns:
          - include: "#comment"
          - include: "#array-literal"
      - begin: (?=[\'\"\`])
        end: (?=:)|((?<=[\'\"\`])(?=((\s*[\(\<,}])|(\s+(as|satisifies)\s+))))
        name: meta.object.member.gml meta.object-literal.key.gml
        patterns:
          - include: "#comment"
          - include: "#string"
      - begin: >-
          (?x)(?=(\b(?<!\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\b(?!\$))|(\b(?<!\$)0(?:b|B)[01][01_]*(n)?\b(?!\$))|(\b(?<!\$)0(?:o|O)?[0-7][0-7_]*(n)?\b(?!\$))|((?<!\$)(?:
            (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)| # 1.1E+3
            (?:\b[0-9][0-9_]*(\.)[eE][+-]?[0-9][0-9_]*(n)?\b)|             # 1.E+3
            (?:\B(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|             # .1E+3
            (?:\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|                 # 1E+3
            (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*(n)?\b)|                      # 1.1
            (?:\b[0-9][0-9_]*(\.)(n)?\B)|                                  # 1.
            (?:\B(\.)[0-9][0-9_]*(n)?\b)|                                  # .1
            (?:\b[0-9][0-9_]*(n)?\b(?!\.))                                 # 1
          )(?!\$)))
        end: (?=:)|(?=\s*([\(\<,}])|(\s+as|satisifies\s+))
        name: meta.object.member.gml meta.object-literal.key.gml
        patterns:
          - include: "#comment"
          - include: "#numeric-literal"
      - begin: (?<=[\]\'\"\`])(?=\s*[\(\<])
        end: (?=\}|;|,)|(?<=\})
        name: meta.method.declaration.gml
        patterns:
          - include: "#function-body"
      - captures:
          "0":
            name: meta.object-literal.key.gml
          "1":
            name: constant.numeric.decimal.gml
        match: (?![_$[:alpha:]])([[:digit:]]+)\s*(?=(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*:)
        name: meta.object.member.gml
      - captures:
          "0":
            name: meta.object-literal.key.gml
          "1":
            name: entity.name.function.gml
        match: >-
          (?x)(?:([_$[:alpha:]][_$[:alnum:]]*)\s*(?=(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*:(\s*\/\*([^\*]|(\*[^\/]))*\*\/)*\s*(
            ((async\s+)?(
              (function\s*[(<*]) |
              (function\s+) |
              ([_$[:alpha:]][_$[:alnum:]]*\s*=>)
            )) |
            ((async\s*)?(
              ((<\s*$)|((<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*)?[\(]\s*((([\{\[]\s*)?$)|((\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})\s*((:\s*\{?$)|((\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))|((\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])\s*((:\s*\[?$)|((\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))))) |
              # sure shot arrow functions even if => is on new line
          (
            (<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*)?
            [(]\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*
            (
              ([)]\s*:) |                                                                                       # ():
              ((\.\.\.\s*)?[_$[:alpha:]][_$[:alnum:]]*\s*:)                                                                  # [(]param: | [(]...param:
            )
          ) |


          # arrow function possible to detect only with => on same line

          (
            (<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*)?                                                                                 # typeparameters
            \(\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*(([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\.\.\.\s*[_$[:alpha:]]))([^()\'\"\`]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))*)?\)   # parameters
            (\s*:\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+)?                                                                        # return type
            \s*=>                                                                                               # arrow operator
          )
            ))
          )))
        name: meta.object.member.gml
      - captures:
          "0":
            name: meta.object-literal.key.gml
        match: (?:[_$[:alpha:]][_$[:alnum:]]*)\s*(?=(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*:)
        name: meta.object.member.gml
      - begin: \.\.\.
        beginCaptures:
          "0":
            name: keyword.operator.spread.gml
        end: (?=,|\})
        name: meta.object.member.gml
        patterns:
          - include: "#expression"
      - captures:
          "1":
            name: variable.other.readwrite.gml
        match: ([_$[:alpha:]][_$[:alnum:]]*)\s*(?=,|\}|$|\/\/|\/\*)
        name: meta.object.member.gml
      - captures:
          "1":
            name: keyword.control.as.gml
          "2":
            name: storage.modifier.gml
        match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(as)\s+(const)(?=\s*([,}]|$))
        name: meta.object.member.gml
      - begin: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(?:(as)|(satisfies))\s+
        beginCaptures:
          "1":
            name: keyword.control.as.gml
          "2":
            name: keyword.control.satisfies.gml
        end: (?=[;),}\]:?\-\+\>]|\|\||\&\&|\!\=\=|$|^|((?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(as|satisifies)\s+))
        name: meta.object.member.gml
        patterns:
          - include: "#type"
      - begin: (?=[_$[:alpha:]][_$[:alnum:]]*\s*=)
        end: (?=,|\}|$|\/\/|\/\*)
        name: meta.object.member.gml
        patterns:
          - include: "#expression"
      - begin: ":"
        beginCaptures:
          "0":
            name: meta.object-literal.key.gml punctuation.separator.key-value.gml
        end: (?=,|\})
        name: meta.object.member.gml
        patterns:
          - begin: (?<=:)\s*(async)?(?=\s*(<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*)\(\s*((([\{\[]\s*)?$)|((\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})\s*((:\s*\{?$)|((\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))|((\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])\s*((:\s*\[?$)|((\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))))
            beginCaptures:
              "1":
                name: storage.modifier.async.gml
            end: (?<=\))
            patterns:
              - include: "#type-parameters"
              - begin: \(
                beginCaptures:
                  "0":
                    name: meta.brace.round.gml
                end: \)
                endCaptures:
                  "0":
                    name: meta.brace.round.gml
                patterns:
                  - include: "#expression-inside-possibly-arrow-parens"
          - begin: (?<=:)\s*(async)?\s*(\()(?=\s*((([\{\[]\s*)?$)|((\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})\s*((:\s*\{?$)|((\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))|((\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])\s*((:\s*\[?$)|((\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))))
            beginCaptures:
              "1":
                name: storage.modifier.async.gml
              "2":
                name: meta.brace.round.gml
            end: \)
            endCaptures:
              "0":
                name: meta.brace.round.gml
            patterns:
              - include: "#expression-inside-possibly-arrow-parens"
          - begin: (?<=:)\s*(async)?\s*(?=\<\s*$)
            beginCaptures:
              "1":
                name: storage.modifier.async.gml
            end: (?<=\>)
            patterns:
              - include: "#type-parameters"
          - begin: (?<=\>)\s*(\()(?=\s*((([\{\[]\s*)?$)|((\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})\s*((:\s*\{?$)|((\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))|((\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])\s*((:\s*\[?$)|((\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))))
            beginCaptures:
              "1":
                name: meta.brace.round.gml
            end: \)
            endCaptures:
              "0":
                name: meta.brace.round.gml
            patterns:
              - include: "#expression-inside-possibly-arrow-parens"
          - include: "#possibly-arrow-return-type"
          - include: "#expression"
      - include: "#punctuation-comma"
  parameter-array-binding-pattern:
    begin: (?:(\.\.\.)\s*)?(\[)
    beginCaptures:
      "1":
        name: keyword.operator.rest.gml
      "2":
        name: punctuation.definition.binding-pattern.array.gml
    end: \]
    endCaptures:
      "0":
        name: punctuation.definition.binding-pattern.array.gml
    patterns:
      - include: "#parameter-binding-element"
      - include: "#punctuation-comma"
  parameter-binding-element:
    patterns:
      - include: "#comment"
      - include: "#string"
      - include: "#numeric-literal"
      - include: "#regex"
      - include: "#parameter-object-binding-pattern"
      - include: "#parameter-array-binding-pattern"
      - include: "#destructuring-parameter-rest"
      - include: "#variable-initializer"
  parameter-name:
    patterns:
      - captures:
          "1":
            name: storage.modifier.gml
        match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(override|public|protected|private|readonly)\s+(?=(override|public|protected|private|readonly)\s+)
      - captures:
          "1":
            name: storage.modifier.gml
          "2":
            name: keyword.operator.rest.gml
          "3":
            name: entity.name.function.gml variable.language.this.gml
          "4":
            name: entity.name.function.gml
          "5":
            name: keyword.operator.optional.gml
        match: >-
          (?x)(?:(?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(override|public|private|protected|readonly)\s+)?(?:(\.\.\.)\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))\s*(\??)(?=\s*

          # function assignment |

          (=\s*(
            ((async\s+)?(
              (function\s*[(<*]) |
              (function\s+) |
              ([_$[:alpha:]][_$[:alnum:]]*\s*=>)
            )) |
            ((async\s*)?(
              ((<\s*$)|((<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*)?[\(]\s*((([\{\[]\s*)?$)|((\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})\s*((:\s*\{?$)|((\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))|((\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])\s*((:\s*\[?$)|((\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))))) |
              # sure shot arrow functions even if => is on new line
          (
            (<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*)?
            [(]\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*
            (
              ([)]\s*:) |                                                                                       # ():
              ((\.\.\.\s*)?[_$[:alpha:]][_$[:alnum:]]*\s*:)                                                                  # [(]param: | [(]...param:
            )
          ) |


          # arrow function possible to detect only with => on same line

          (
            (<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*)?                                                                                 # typeparameters
            \(\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*(([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\.\.\.\s*[_$[:alpha:]]))([^()\'\"\`]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))*)?\)   # parameters
            (\s*:\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+)?                                                                        # return type
            \s*=>                                                                                               # arrow operator
          )
            ))
          )) |

          # typeannotation is fn type: < | () | (... | (param: | (param, | (param? | (param= | (param) =>

          (:\s*(
            (<) |
            ([(]\s*(
              ([)]) |
              (\.\.\.) |
              ([_$[:alnum:]]+\s*(
                ([:,?=])|
                ([)]\s*=>)
              ))
            ))
          )) |

          (:\s*(?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))Function(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))) |

          (:\s*((<\s*$)|((<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*)?[\(]\s*((([\{\[]\s*)?$)|((\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})\s*((:\s*\{?$)|((\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))|((\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])\s*((:\s*\[?$)|((\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*))))))) |

          (:\s*(=>|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(<[^<>]*>)|[^<>(),=])+=\s*(
            ((async\s+)?(
              (function\s*[(<*]) |
              (function\s+) |
              ([_$[:alpha:]][_$[:alnum:]]*\s*=>)
            )) |
            ((async\s*)?(
              ((<\s*$)|((<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*)?[\(]\s*((([\{\[]\s*)?$)|((\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})\s*((:\s*\{?$)|((\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))|((\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])\s*((:\s*\[?$)|((\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))))) |
              # sure shot arrow functions even if => is on new line
          (
            (<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*)?
            [(]\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*
            (
              ([)]\s*:) |                                                                                       # ():
              ((\.\.\.\s*)?[_$[:alpha:]][_$[:alnum:]]*\s*:)                                                                  # [(]param: | [(]...param:
            )
          ) |


          # arrow function possible to detect only with => on same line

          (
            (<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*)?                                                                                 # typeparameters
            \(\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*(([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\.\.\.\s*[_$[:alpha:]]))([^()\'\"\`]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))*)?\)   # parameters
            (\s*:\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+)?                                                                        # return type
            \s*=>                                                                                               # arrow operator
          )
            ))
          )))
      - captures:
          "1":
            name: storage.modifier.gml
          "2":
            name: keyword.operator.rest.gml
          "3":
            name: variable.parameter.gml variable.language.this.gml
          "4":
            name: variable.parameter.gml
          "5":
            name: keyword.operator.optional.gml
        match: (?x)(?:(?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(override|public|private|protected|readonly)\s+)?(?:(\.\.\.)\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))\s*(\??)
  parameter-object-binding-element:
    patterns:
      - include: "#comment"
      - begin: >-
          (?x)(?=((\b(?<!\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\b(?!\$))|(\b(?<!\$)0(?:b|B)[01][01_]*(n)?\b(?!\$))|(\b(?<!\$)0(?:o|O)?[0-7][0-7_]*(n)?\b(?!\$))|((?<!\$)(?:
            (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)| # 1.1E+3
            (?:\b[0-9][0-9_]*(\.)[eE][+-]?[0-9][0-9_]*(n)?\b)|             # 1.E+3
            (?:\B(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|             # .1E+3
            (?:\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|                 # 1E+3
            (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*(n)?\b)|                      # 1.1
            (?:\b[0-9][0-9_]*(\.)(n)?\B)|                                  # 1.
            (?:\B(\.)[0-9][0-9_]*(n)?\b)|                                  # .1
            (?:\b[0-9][0-9_]*(n)?\b(?!\.))                                 # 1
          )(?!\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`)|(\[([^\[\]]|\[[^\[\]]*\])+\]))\s*(:))
        end: (?=,|\})
        patterns:
          - include: "#object-binding-element-propertyName"
          - include: "#parameter-binding-element"
          - include: "#paren-expression"
      - include: "#parameter-object-binding-pattern"
      - include: "#destructuring-parameter-rest"
      - include: "#variable-initializer"
      - include: "#punctuation-comma"
  parameter-object-binding-pattern:
    begin: (?:(\.\.\.)\s*)?(\{)
    beginCaptures:
      "1":
        name: keyword.operator.rest.gml
      "2":
        name: punctuation.definition.binding-pattern.object.gml
    end: \}
    endCaptures:
      "0":
        name: punctuation.definition.binding-pattern.object.gml
    patterns:
      - include: "#parameter-object-binding-element"
  parameter-type-annotation:
    patterns:
      - begin: (:)
        beginCaptures:
          "1":
            name: keyword.operator.type.annotation.gml
        end: (?=[,)])|(?==[^>])
        name: meta.type.annotation.gml
        patterns:
          - include: "#type"
  paren-expression:
    begin: \(
    beginCaptures:
      "0":
        name: meta.brace.round.gml
    end: \)
    endCaptures:
      "0":
        name: meta.brace.round.gml
    patterns:
      - include: "#expression"
  paren-expression-possibly-arrow:
    patterns:
      - begin: (?<=[(=,])\s*(async)?(?=\s*((<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*))?\(\s*((([\{\[]\s*)?$)|((\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})\s*((:\s*\{?$)|((\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))|((\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])\s*((:\s*\[?$)|((\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))))
        beginCaptures:
          "1":
            name: storage.modifier.async.gml
        end: (?<=\))
        patterns:
          - include: "#paren-expression-possibly-arrow-with-typeparameters"
      - begin: (?<=[(=,]|=>|^return|[^\._$[:alnum:]]return)\s*(async)?(?=\s*((((<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*))?\()|(<)|((<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*)))\s*$)
        beginCaptures:
          "1":
            name: storage.modifier.async.gml
        end: (?<=\))
        patterns:
          - include: "#paren-expression-possibly-arrow-with-typeparameters"
      - include: "#possibly-arrow-return-type"
  paren-expression-possibly-arrow-with-typeparameters:
    patterns:
      - include: "#type-parameters"
      - begin: \(
        beginCaptures:
          "0":
            name: meta.brace.round.gml
        end: \)
        endCaptures:
          "0":
            name: meta.brace.round.gml
        patterns:
          - include: "#expression-inside-possibly-arrow-parens"
  possibly-arrow-return-type:
    begin: (?<=\)|^)\s*(:)(?=\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+\s*=>)
    beginCaptures:
      "1":
        name: meta.arrow.gml meta.return.type.arrow.gml
          keyword.operator.type.annotation.gml
    contentName: meta.arrow.gml meta.return.type.arrow.gml
    end: (?==>|\{|(^\s*(export|function|class|interface|let|var|const|import|enum|namespace|module|type|abstract|declare)\s+))
    patterns:
      - include: "#arrow-return-type-body"
  property-accessor:
    match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(accessor|get|set)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
    name: storage.type.property.gml
  punctuation-accessor:
    captures:
      "1":
        name: punctuation.accessor.gml
      "2":
        name: punctuation.accessor.optional.gml
    match: (?:(\.)|(\?\.(?!\s*[[:digit:]])))
  punctuation-comma:
    match: ","
    name: punctuation.separator.comma.gml
  punctuation-semicolon:
    match: ;
    name: punctuation.terminator.statement.gml
  qstring-double:
    begin: '"'
    beginCaptures:
      "0":
        name: punctuation.definition.string.begin.gml
    end: (")|((?:[^\\\n])$)
    endCaptures:
      "1":
        name: punctuation.definition.string.end.gml
      "2":
        name: invalid.illegal.newline.gml
    name: string.quoted.double.gml
    patterns:
      - include: "#string-character-escape"
  qstring-single:
    begin: "'"
    beginCaptures:
      "0":
        name: punctuation.definition.string.begin.gml
    end: (\')|((?:[^\\\n])$)
    endCaptures:
      "1":
        name: punctuation.definition.string.end.gml
      "2":
        name: invalid.illegal.newline.gml
    name: string.quoted.single.gml
    patterns:
      - include: "#string-character-escape"
  regex:
    patterns:
      - begin: (?<!\+\+|--|})(?<=[=(:,\[?+!]|^return|[^\._$[:alnum:]]return|^case|[^\._$[:alnum:]]case|=>|&&|\|\||\*\/)\s*(\/)(?![\/*])(?=(?:[^\/\\\[\()]|\\.|\[([^\]\\]|\\.)+\]|\(([^\)\\]|\\.)+\))+\/([dgimsuy]+|(?![\/\*])|(?=\/\*))(?!\s*[a-zA-Z0-9_$]))
        beginCaptures:
          "1":
            name: punctuation.definition.string.begin.gml
        end: (/)([dgimsuy]*)
        endCaptures:
          "1":
            name: punctuation.definition.string.end.gml
          "2":
            name: keyword.other.gml
        name: string.regexp.gml
        patterns:
          - include: "#regexp"
      - begin: ((?<![_$[:alnum:])\]]|\+\+|--|}|\*\/)|((?<=^return|[^\._$[:alnum:]]return|^case|[^\._$[:alnum:]]case))\s*)\/(?![\/*])(?=(?:[^\/\\\[]|\\.|\[([^\]\\]|\\.)*\])+\/([dgimsuy]+|(?![\/\*])|(?=\/\*))(?!\s*[a-zA-Z0-9_$]))
        beginCaptures:
          "0":
            name: punctuation.definition.string.begin.gml
        end: (/)([dgimsuy]*)
        endCaptures:
          "1":
            name: punctuation.definition.string.end.gml
          "2":
            name: keyword.other.gml
        name: string.regexp.gml
        patterns:
          - include: "#regexp"
  regex-character-class:
    patterns:
      - match: \\[wWsSdDtrnvf]|\.
        name: constant.other.character-class.regexp
      - match: \\([0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4})
        name: constant.character.numeric.regexp
      - match: \\c[A-Z]
        name: constant.character.control.regexp
      - match: \\.
        name: constant.character.escape.backslash.regexp
  regexp:
    patterns:
      - match: \\[bB]|\^|\$
        name: keyword.control.anchor.regexp
      - captures:
          "0":
            name: keyword.other.back-reference.regexp
          "1":
            name: variable.other.regexp
        match: \\[1-9]\d*|\\k<([a-zA-Z_$][\w$]*)>
      - match: "[?+*]|\\{(\\d+,\\d+|\\d+,|,\\d+|\\d+)\\}\\??"
        name: keyword.operator.quantifier.regexp
      - match: \|
        name: keyword.operator.or.regexp
      - begin: (\()((\?=)|(\?!)|(\?<=)|(\?<!))
        beginCaptures:
          "1":
            name: punctuation.definition.group.regexp
          "2":
            name: punctuation.definition.group.assertion.regexp
          "3":
            name: meta.assertion.look-ahead.regexp
          "4":
            name: meta.assertion.negative-look-ahead.regexp
          "5":
            name: meta.assertion.look-behind.regexp
          "6":
            name: meta.assertion.negative-look-behind.regexp
        end: (\))
        endCaptures:
          "1":
            name: punctuation.definition.group.regexp
        name: meta.group.assertion.regexp
        patterns:
          - include: "#regexp"
      - begin: \((?:(\?:)|(?:\?<([a-zA-Z_$][\w$]*)>))?
        beginCaptures:
          "0":
            name: punctuation.definition.group.regexp
          "1":
            name: punctuation.definition.group.no-capture.regexp
          "2":
            name: variable.other.regexp
        end: \)
        endCaptures:
          "0":
            name: punctuation.definition.group.regexp
        name: meta.group.regexp
        patterns:
          - include: "#regexp"
      - begin: (\[)(\^)?
        beginCaptures:
          "1":
            name: punctuation.definition.character-class.regexp
          "2":
            name: keyword.operator.negation.regexp
        end: (\])
        endCaptures:
          "1":
            name: punctuation.definition.character-class.regexp
        name: constant.other.character-class.set.regexp
        patterns:
          - captures:
              "1":
                name: constant.character.numeric.regexp
              "2":
                name: constant.character.control.regexp
              "3":
                name: constant.character.escape.backslash.regexp
              "4":
                name: constant.character.numeric.regexp
              "5":
                name: constant.character.control.regexp
              "6":
                name: constant.character.escape.backslash.regexp
            match: (?:.|(\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\c[A-Z])|(\\.))\-(?:[^\]\\]|(\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\c[A-Z])|(\\.))
            name: constant.other.character-class.range.regexp
          - include: "#regex-character-class"
      - include: "#regex-character-class"
  return-type:
    patterns:
      - begin: (?<=\))\s*(:)(?=\s*\S)
        beginCaptures:
          "1":
            name: keyword.operator.type.annotation.gml
        end: (?<![:|&])(?=$|^|[{};,]|//)
        name: meta.return.type.gml
        patterns:
          - include: "#return-type-core"
      - begin: (?<=\))\s*(:)
        beginCaptures:
          "1":
            name: keyword.operator.type.annotation.gml
        end: (?<![:|&])((?=[{};,]|//|^\s*$)|((?<=\S)(?=\s*$)))
        name: meta.return.type.gml
        patterns:
          - include: "#return-type-core"
  return-type-core:
    patterns:
      - include: "#comment"
      - begin: (?<=[:|&])(?=\s*\{)
        end: (?<=\})
        patterns:
          - include: "#type-object"
      - include: "#type-predicate-operator"
      - include: "#type"
  shebang:
    captures:
      "1":
        name: punctuation.definition.comment.gml
    match: \A(#!).*(?=$)
    name: comment.line.shebang.gml
  single-line-comment-consuming-line-ending:
    begin: (^[ \t]+)?((//)(?:\s*((@)internal)(?=\s|$))?)
    beginCaptures:
      "1":
        name: punctuation.whitespace.comment.leading.gml
      "2":
        name: comment.line.double-slash.gml
      "3":
        name: punctuation.definition.comment.gml
      "4":
        name: storage.type.internaldeclaration.gml
      "5":
        name: punctuation.decorator.internaldeclaration.gml
    contentName: comment.line.double-slash.gml
    end: (?=^)
  statements:
    patterns:
      - include: "#declaration"
      - include: "#control-statement"
      - include: "#after-operator-block-as-object-literal"
      - include: "#decl-block"
      - include: "#label"
      - include: "#expression"
      - include: "#punctuation-semicolon"
      - include: "#string"
      - include: "#comment"
  string:
    patterns:
      - include: "#qstring-single"
      - include: "#qstring-double"
      - include: "#template"
  string-character-escape:
    match: \\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|u\{[0-9A-Fa-f]+\}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)
    name: constant.character.escape.gml
  super-literal:
    match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))super\b(?!\$)
    name: variable.language.super.gml
  support-function-call-identifiers:
    patterns:
      - include: "#literal"
      - include: "#support-objects"
      - include: "#object-identifiers"
      - include: "#punctuation-accessor"
      - match: (?:(?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))import(?=\s*[\(]\s*[\"\'\`]))
        name: keyword.operator.expression.import.gml
  support-objects:
    patterns:
      - match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(arguments)\b(?!\$)
        name: variable.language.arguments.gml
      - match: >-
          (?x)(?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(Array|ArrayBuffer|Atomics|BigInt|BigInt64Array|BigUint64Array|Boolean|DataView|Date|Float32Array
            |Float64Array|Function|Generator|GeneratorFunction|Int8Array|Int16Array|Int32Array|Intl|Map|Number|Object|Proxy
            |Reflect|RegExp|Set|SharedArrayBuffer|SIMD|String|Symbol|TypedArray
            |Uint8Array|Uint16Array|Uint32Array|Uint8ClampedArray|WeakMap|WeakSet)\b(?!\$)
        name: support.class.builtin.gml
      - match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))((Eval|Internal|Range|Reference|Syntax|Type|URI)?Error)\b(?!\$)
        name: support.class.error.gml
      - match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(Promise)\b(?!\$)
        name: support.class.promise.gml
      - match: >-
          (?x)(?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(clear(Interval|Timeout)|decodeURI|decodeURIComponent|encodeURI|encodeURIComponent|escape|eval|
            isFinite|isNaN|parseFloat|parseInt|require|set(Interval|Timeout)|super|unescape|uneval)(?=\s*\()
        name: support.function.gml
      - captures:
          "1":
            name: support.constant.math.gml
          "2":
            name: punctuation.accessor.gml
          "3":
            name: punctuation.accessor.optional.gml
          "4":
            name: support.function.math.gml
          "5":
            name: support.constant.property.math.gml
        match: >-
          (?x)(?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(Math)(?:\s*(?:(\.)|(\?\.(?!\s*[[:digit:]])))\s*(?:
            (abs|acos|acosh|asin|asinh|atan|atan2|atanh|cbrt|ceil|clz32|cos|cosh|exp|
            expm1|floor|fround|hypot|imul|log|log10|log1p|log2|max|min|pow|random|
            round|sign|sin|sinh|sqrt|tan|tanh|trunc)
            |
            (E|LN10|LN2|LOG10E|LOG2E|PI|SQRT1_2|SQRT2)))?\b(?!\$)
      - captures:
          "1":
            name: support.class.console.gml
          "2":
            name: punctuation.accessor.gml
          "3":
            name: punctuation.accessor.optional.gml
          "4":
            name: support.function.console.gml
        match: >-
          (?x)(?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(console)(?:\s*(?:(\.)|(\?\.(?!\s*[[:digit:]])))\s*(
            assert|clear|count|debug|dir|error|group|groupCollapsed|groupEnd|info|log
            |profile|profileEnd|table|time|timeEnd|timeStamp|trace|warn))?\b(?!\$)
      - captures:
          "1":
            name: support.constant.json.gml
          "2":
            name: punctuation.accessor.gml
          "3":
            name: punctuation.accessor.optional.gml
          "4":
            name: support.function.json.gml
        match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(JSON)(?:\s*(?:(\.)|(\?\.(?!\s*[[:digit:]])))\s*(parse|stringify))?\b(?!\$)
      - captures:
          "1":
            name: keyword.control.import.gml
          "2":
            name: punctuation.accessor.gml
          "3":
            name: punctuation.accessor.optional.gml
          "4":
            name: support.variable.property.importmeta.gml
        match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(import)\s*(?:(\.)|(\?\.(?!\s*[[:digit:]])))\s*(meta)\b(?!\$)
      - captures:
          "1":
            name: keyword.operator.new.gml
          "2":
            name: punctuation.accessor.gml
          "3":
            name: punctuation.accessor.optional.gml
          "4":
            name: support.variable.property.target.gml
        match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(new)\s*(?:(\.)|(\?\.(?!\s*[[:digit:]])))\s*(target)\b(?!\$)
      - captures:
          "1":
            name: punctuation.accessor.gml
          "2":
            name: punctuation.accessor.optional.gml
          "3":
            name: support.variable.property.gml
          "4":
            name: support.constant.gml
        match: >-
          (?x) (?:(\.)|(\?\.(?!\s*[[:digit:]]))) \s* (?:
            (?:(constructor|length|prototype|__proto__)\b(?!\$|\s*(<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*)?\())
            |
            (?:(EPSILON|MAX_SAFE_INTEGER|MAX_VALUE|MIN_SAFE_INTEGER|MIN_VALUE|NEGATIVE_INFINITY|POSITIVE_INFINITY)\b(?!\$)))
      - captures:
          "1":
            name: support.variable.dom.gml
          "2":
            name: support.class.dom.gml
        match: >-
          (?x) (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.)) \b (?:
            (document|event|navigator|performance|screen|window)
            |
            (AnalyserNode|ArrayBufferView|Attr|AudioBuffer|AudioBufferSourceNode|AudioContext|AudioDestinationNode|AudioListener
            |AudioNode|AudioParam|BatteryManager|BeforeUnloadEvent|BiquadFilterNode|Blob|BufferSource|ByteString|CSS|CSSConditionRule
            |CSSCounterStyleRule|CSSGroupingRule|CSSMatrix|CSSMediaRule|CSSPageRule|CSSPrimitiveValue|CSSRule|CSSRuleList|CSSStyleDeclaration
            |CSSStyleRule|CSSStyleSheet|CSSSupportsRule|CSSValue|CSSValueList|CanvasGradient|CanvasImageSource|CanvasPattern
            |CanvasRenderingContext2D|ChannelMergerNode|ChannelSplitterNode|CharacterData|ChromeWorker|CloseEvent|Comment|CompositionEvent
            |Console|ConvolverNode|Coordinates|Credential|CredentialsContainer|Crypto|CryptoKey|CustomEvent|DOMError|DOMException
            |DOMHighResTimeStamp|DOMImplementation|DOMString|DOMStringList|DOMStringMap|DOMTimeStamp|DOMTokenList|DataTransfer
            |DataTransferItem|DataTransferItemList|DedicatedWorkerGlobalScope|DelayNode|DeviceProximityEvent|DirectoryEntry
            |DirectoryEntrySync|DirectoryReader|DirectoryReaderSync|Document|DocumentFragment|DocumentTouch|DocumentType|DragEvent
            |DynamicsCompressorNode|Element|Entry|EntrySync|ErrorEvent|Event|EventListener|EventSource|EventTarget|FederatedCredential
            |FetchEvent|File|FileEntry|FileEntrySync|FileException|FileList|FileReader|FileReaderSync|FileSystem|FileSystemSync
            |FontFace|FormData|GainNode|Gamepad|GamepadButton|GamepadEvent|Geolocation|GlobalEventHandlers|HTMLAnchorElement
            |HTMLAreaElement|HTMLAudioElement|HTMLBRElement|HTMLBaseElement|HTMLBodyElement|HTMLButtonElement|HTMLCanvasElement
            |HTMLCollection|HTMLContentElement|HTMLDListElement|HTMLDataElement|HTMLDataListElement|HTMLDialogElement|HTMLDivElement
            |HTMLDocument|HTMLElement|HTMLEmbedElement|HTMLFieldSetElement|HTMLFontElement|HTMLFormControlsCollection|HTMLFormElement
            |HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLIFrameElement|HTMLImageElement|HTMLInputElement
            |HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMediaElement
            |HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLObjectElement|HTMLOptGroupElement|HTMLOptionElement
            |HTMLOptionsCollection|HTMLOutputElement|HTMLParagraphElement|HTMLParamElement|HTMLPreElement|HTMLProgressElement
            |HTMLQuoteElement|HTMLScriptElement|HTMLSelectElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement
            |HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableElement|HTMLTableHeaderCellElement
            |HTMLTableRowElement|HTMLTableSectionElement|HTMLTextAreaElement|HTMLTimeElement|HTMLTitleElement|HTMLTrackElement
            |HTMLUListElement|HTMLUnknownElement|HTMLVideoElement|HashChangeEvent|History|IDBCursor|IDBCursorWithValue|IDBDatabase
            |IDBEnvironment|IDBFactory|IDBIndex|IDBKeyRange|IDBMutableFile|IDBObjectStore|IDBOpenDBRequest|IDBRequest|IDBTransaction
            |IDBVersionChangeEvent|IIRFilterNode|IdentityManager|ImageBitmap|ImageBitmapFactories|ImageData|Index|InputDeviceCapabilities
            |InputEvent|InstallEvent|InstallTrigger|KeyboardEvent|LinkStyle|LocalFileSystem|LocalFileSystemSync|Location|MIDIAccess
            |MIDIConnectionEvent|MIDIInput|MIDIInputMap|MIDIOutputMap|MediaElementAudioSourceNode|MediaError|MediaKeyMessageEvent
            |MediaKeySession|MediaKeyStatusMap|MediaKeySystemAccess|MediaKeySystemConfiguration|MediaKeys|MediaRecorder|MediaStream
            |MediaStreamAudioDestinationNode|MediaStreamAudioSourceNode|MessageChannel|MessageEvent|MessagePort|MouseEvent
            |MutationObserver|MutationRecord|NamedNodeMap|Navigator|NavigatorConcurrentHardware|NavigatorGeolocation|NavigatorID
            |NavigatorLanguage|NavigatorOnLine|Node|NodeFilter|NodeIterator|NodeList|NonDocumentTypeChildNode|Notification
            |OfflineAudioCompletionEvent|OfflineAudioContext|OscillatorNode|PageTransitionEvent|PannerNode|ParentNode|PasswordCredential
            |Path2D|PaymentAddress|PaymentRequest|PaymentResponse|Performance|PerformanceEntry|PerformanceFrameTiming|PerformanceMark
            |PerformanceMeasure|PerformanceNavigation|PerformanceNavigationTiming|PerformanceObserver|PerformanceObserverEntryList
            |PerformanceResourceTiming|PerformanceTiming|PeriodicSyncEvent|PeriodicWave|Plugin|Point|PointerEvent|PopStateEvent
            |PortCollection|Position|PositionError|PositionOptions|PresentationConnectionClosedEvent|PresentationConnectionList
            |PresentationReceiver|ProcessingInstruction|ProgressEvent|PromiseRejectionEvent|PushEvent|PushRegistrationManager
            |RTCCertificate|RTCConfiguration|RTCPeerConnection|RTCSessionDescriptionCallback|RTCStatsReport|RadioNodeList|RandomSource
            |Range|ReadableByteStream|RenderingContext|SVGAElement|SVGAngle|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement
            |SVGAnimateTransformElement|SVGAnimatedAngle|SVGAnimatedBoolean|SVGAnimatedEnumeration|SVGAnimatedInteger|SVGAnimatedLength
            |SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedPoints|SVGAnimatedPreserveAspectRatio
            |SVGAnimatedRect|SVGAnimatedString|SVGAnimatedTransformList|SVGAnimationElement|SVGCircleElement|SVGClipPathElement
            |SVGCursorElement|SVGDefsElement|SVGDescElement|SVGElement|SVGEllipseElement|SVGEvent|SVGFilterElement|SVGFontElement
            |SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement
            |SVGForeignObjectElement|SVGGElement|SVGGlyphElement|SVGGradientElement|SVGHKernElement|SVGImageElement|SVGLength
            |SVGLengthList|SVGLineElement|SVGLinearGradientElement|SVGMPathElement|SVGMaskElement|SVGMatrix|SVGMissingGlyphElement
            |SVGNumber|SVGNumberList|SVGPathElement|SVGPatternElement|SVGPoint|SVGPolygonElement|SVGPolylineElement|SVGPreserveAspectRatio
            |SVGRadialGradientElement|SVGRect|SVGRectElement|SVGSVGElement|SVGScriptElement|SVGSetElement|SVGStopElement|SVGStringList
            |SVGStylable|SVGStyleElement|SVGSwitchElement|SVGSymbolElement|SVGTRefElement|SVGTSpanElement|SVGTests|SVGTextElement
            |SVGTextPositioningElement|SVGTitleElement|SVGTransform|SVGTransformList|SVGTransformable|SVGUseElement|SVGVKernElement
            |SVGViewElement|ServiceWorker|ServiceWorkerContainer|ServiceWorkerGlobalScope|ServiceWorkerRegistration|ServiceWorkerState
            |ShadowRoot|SharedWorker|SharedWorkerGlobalScope|SourceBufferList|StereoPannerNode|Storage|StorageEvent|StyleSheet
            |StyleSheetList|SubtleCrypto|SyncEvent|Text|TextMetrics|TimeEvent|TimeRanges|Touch|TouchEvent|TouchList|Transferable
            |TreeWalker|UIEvent|USVString|VRDisplayCapabilities|ValidityState|WaveShaperNode|WebGL|WebGLActiveInfo|WebGLBuffer
            |WebGLContextEvent|WebGLFramebuffer|WebGLProgram|WebGLRenderbuffer|WebGLRenderingContext|WebGLShader|WebGLShaderPrecisionFormat
            |WebGLTexture|WebGLTimerQueryEXT|WebGLTransformFeedback|WebGLUniformLocation|WebGLVertexArrayObject|WebGLVertexArrayObjectOES
            |WebSocket|WebSockets|WebVTT|WheelEvent|Window|WindowBase64|WindowEventHandlers|WindowTimers|Worker|WorkerGlobalScope
            |WorkerLocation|WorkerNavigator|XMLHttpRequest|XMLHttpRequestEventTarget|XMLSerializer|XPathExpression|XPathResult
            |XSLTProcessor))\b(?!\$)
      - captures:
          "1":
            name: punctuation.accessor.gml
          "2":
            name: punctuation.accessor.optional.gml
          "3":
            name: support.constant.dom.gml
          "4":
            name: support.variable.property.dom.gml
        match: >-
          (?x) (?:(\.)|(\?\.(?!\s*[[:digit:]]))) \s* (?:
            (ATTRIBUTE_NODE|CDATA_SECTION_NODE|COMMENT_NODE|DOCUMENT_FRAGMENT_NODE|DOCUMENT_NODE|DOCUMENT_TYPE_NODE
            |DOMSTRING_SIZE_ERR|ELEMENT_NODE|ENTITY_NODE|ENTITY_REFERENCE_NODE|HIERARCHY_REQUEST_ERR|INDEX_SIZE_ERR
            |INUSE_ATTRIBUTE_ERR|INVALID_CHARACTER_ERR|NO_DATA_ALLOWED_ERR|NO_MODIFICATION_ALLOWED_ERR|NOT_FOUND_ERR
            |NOT_SUPPORTED_ERR|NOTATION_NODE|PROCESSING_INSTRUCTION_NODE|TEXT_NODE|WRONG_DOCUMENT_ERR)
            |
            (_content|[xyz]|abbr|above|accept|acceptCharset|accessKey|action|align|[av]Link(?:color)?|all|alt|anchors|appCodeName
            |appCore|applets|appMinorVersion|appName|appVersion|archive|areas|arguments|attributes|availHeight|availLeft|availTop
            |availWidth|axis|background|backgroundColor|backgroundImage|below|bgColor|body|border|borderBottomWidth|borderColor
            |borderLeftWidth|borderRightWidth|borderStyle|borderTopWidth|borderWidth|bottom|bufferDepth|callee|caller|caption
            |cellPadding|cells|cellSpacing|ch|characterSet|charset|checked|childNodes|chOff|cite|classes|className|clear
            |clientInformation|clip|clipBoardData|closed|code|codeBase|codeType|color|colorDepth|cols|colSpan|compact|complete
            |components|content|controllers|cookie|cookieEnabled|cords|cpuClass|crypto|current|data|dateTime|declare|defaultCharset
            |defaultChecked|defaultSelected|defaultStatus|defaultValue|defaultView|defer|description|dialogArguments|dialogHeight
            |dialogLeft|dialogTop|dialogWidth|dir|directories|disabled|display|docmain|doctype|documentElement|elements|embeds
            |enabledPlugin|encoding|enctype|entities|event|expando|external|face|fgColor|filename|firstChild|fontFamily|fontSize
            |fontWeight|form|formName|forms|frame|frameBorder|frameElement|frames|hasFocus|hash|headers|height|history|host
            |hostname|href|hreflang|hspace|htmlFor|httpEquiv|id|ids|ignoreCase|images|implementation|index|innerHeight|innerWidth
            |input|isMap|label|lang|language|lastChild|lastIndex|lastMatch|lastModified|lastParen|layer[sXY]|left|leftContext
            |lineHeight|link|linkColor|links|listStyleType|localName|location|locationbar|longDesc|lowsrc|lowSrc|marginBottom
            |marginHeight|marginLeft|marginRight|marginTop|marginWidth|maxLength|media|menubar|method|mimeTypes|multiline|multiple
            |name|nameProp|namespaces|namespaceURI|next|nextSibling|nodeName|nodeType|nodeValue|noHref|noResize|noShade|notationName
            |notations|noWrap|object|offscreenBuffering|onLine|onreadystatechange|opener|opsProfile|options|oscpu|outerHeight
            |outerWidth|ownerDocument|paddingBottom|paddingLeft|paddingRight|paddingTop|page[XY]|page[XY]Offset|parent|parentLayer
            |parentNode|parentWindow|pathname|personalbar|pixelDepth|pkcs11|platform|plugins|port|prefix|previous|previousDibling
            |product|productSub|profile|profileend|prompt|prompter|protocol|publicId|readOnly|readyState|referrer|rel|responseText
            |responseXML|rev|right|rightContext|rowIndex|rows|rowSpan|rules|scheme|scope|screen[XY]|screenLeft|screenTop|scripts
            |scrollbars|scrolling|sectionRowIndex|security|securityPolicy|selected|selectedIndex|selection|self|shape|siblingAbove
            |siblingBelow|size|source|specified|standby|start|status|statusbar|statusText|style|styleSheets|suffixes|summary
            |systemId|systemLanguage|tagName|tags|target|tBodies|text|textAlign|textDecoration|textIndent|textTransform|tFoot|tHead
            |title|toolbar|top|type|undefined|uniqueID|updateInterval|URL|URLUnencoded|useMap|userAgent|userLanguage|userProfile
            |vAlign|value|valueType|vendor|vendorSub|version|visibility|vspace|whiteSpace|width|X[MS]LDocument|zIndex))\b(?!\$|\s*(<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*)?\()
      - match: >-
          (?x)(?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(Buffer|EventEmitter|Server|Pipe|Socket|REPLServer|ReadStream|WriteStream|Stream
            |Inflate|Deflate|InflateRaw|DeflateRaw|GZip|GUnzip|Unzip|Zip)\b(?!\$)
        name: support.class.node.gml
      - captures:
          "1":
            name: support.variable.object.process.gml
          "2":
            name: punctuation.accessor.gml
          "3":
            name: punctuation.accessor.optional.gml
          "4":
            name: support.variable.property.process.gml
          "5":
            name: support.function.process.gml
        match: >-
          (?x)(?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(process)(?:(?:(\.)|(\?\.(?!\s*[[:digit:]])))(?:
            (arch|argv|config|connected|env|execArgv|execPath|exitCode|mainModule|pid|platform|release|stderr|stdin|stdout|title|version|versions)
            |
            (abort|chdir|cwd|disconnect|exit|[sg]ete?[gu]id|send|[sg]etgroups|initgroups|kill|memoryUsage|nextTick|umask|uptime|hrtime)
          ))?\b(?!\$)
      - captures:
          "1":
            name: support.type.object.module.gml
          "2":
            name: support.type.object.module.gml
          "3":
            name: punctuation.accessor.gml
          "4":
            name: punctuation.accessor.optional.gml
          "5":
            name: support.type.object.module.gml
        match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(?:(exports)|(module)(?:(?:(\.)|(\?\.(?!\s*[[:digit:]])))(exports|id|filename|loaded|parent|children))?)\b(?!\$)
      - match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(global|GLOBAL|root|__dirname|__filename)\b(?!\$)
        name: support.variable.object.node.gml
      - captures:
          "1":
            name: punctuation.accessor.gml
          "2":
            name: punctuation.accessor.optional.gml
          "3":
            name: support.function.event-handler.gml
          "4":
            name: support.function.gml
          "5":
            name: support.function.dom.gml
          "6":
            name: support.function.promise.gml
        match: >-
          (?x) (?:(\.)|(\?\.(?!\s*[[:digit:]]))) \s*

          (?:
           (on(?:Rowsinserted|Rowsdelete|Rowenter|Rowexit|Resize|Resizestart|Resizeend|Reset|
             Readystatechange|Mouseout|Mouseover|Mousedown|Mouseup|Mousemove|
             Before(?:cut|deactivate|unload|update|paste|print|editfocus|activate)|
             Blur|Scrolltop|Submit|Select|Selectstart|Selectionchange|Hover|Help|
             Change|Contextmenu|Controlselect|Cut|Cellchange|Clock|Close|Deactivate|
             Datasetchanged|Datasetcomplete|Dataavailable|Drop|Drag|Dragstart|Dragover|
             Dragdrop|Dragenter|Dragend|Dragleave|Dblclick|Unload|Paste|Propertychange|Error|
             Errorupdate|Keydown|Keyup|Keypress|Focus|Load|Activate|Afterupdate|Afterprint|Abort)
           ) |
           (shift|showModelessDialog|showModalDialog|showHelp|scroll|scrollX|scrollByPages|
             scrollByLines|scrollY|scrollTo|stop|strike|sizeToContent|sidebar|signText|sort|
             sup|sub|substr|substring|splice|split|send|set(?:Milliseconds|Seconds|Minutes|Hours|
             Month|Year|FullYear|Date|UTC(?:Milliseconds|Seconds|Minutes|Hours|Month|FullYear|Date)|
             Time|Hotkeys|Cursor|ZOptions|Active|Resizable|RequestHeader)|search|slice|
             savePreferences|small|home|handleEvent|navigate|char|charCodeAt|charAt|concat|
             contextual|confirm|compile|clear|captureEvents|call|createStyleSheet|createPopup|
             createEventObject|to(?:GMTString|UTCString|String|Source|UpperCase|LowerCase|LocaleString)|
             test|taint|taintEnabled|indexOf|italics|disableExternalCapture|dump|detachEvent|unshift|
             untaint|unwatch|updateCommands|join|javaEnabled|pop|push|plugins.refresh|paddings|parse|
             print|prompt|preference|enableExternalCapture|exec|execScript|valueOf|UTC|find|file|
             fileModifiedDate|fileSize|fileCreatedDate|fileUpdatedDate|fixed|fontsize|fontcolor|
             forward|fromCharCode|watch|link|load|lastIndexOf|anchor|attachEvent|atob|apply|alert|
             abort|routeEvents|resize|resizeBy|resizeTo|recalc|returnValue|replace|reverse|reload|
             releaseCapture|releaseEvents|go|get(?:Milliseconds|Seconds|Minutes|Hours|Month|Day|Year|FullYear|
             Time|Date|TimezoneOffset|UTC(?:Milliseconds|Seconds|Minutes|Hours|Day|Month|FullYear|Date)|
             Attention|Selection|ResponseHeader|AllResponseHeaders)|moveBy|moveBelow|moveTo|
             moveToAbsolute|moveAbove|mergeAttributes|match|margins|btoa|big|bold|borderWidths|blink|back
           ) |
           (acceptNode|add|addEventListener|addTextTrack|adoptNode|after|animate|append|
             appendChild|appendData|before|blur|canPlayType|captureStream|
             caretPositionFromPoint|caretRangeFromPoint|checkValidity|clear|click|
             cloneContents|cloneNode|cloneRange|close|closest|collapse|
             compareBoundaryPoints|compareDocumentPosition|comparePoint|contains|
             convertPointFromNode|convertQuadFromNode|convertRectFromNode|createAttribute|
             createAttributeNS|createCaption|createCDATASection|createComment|
             createContextualFragment|createDocument|createDocumentFragment|
             createDocumentType|createElement|createElementNS|createEntityReference|
             createEvent|createExpression|createHTMLDocument|createNodeIterator|
             createNSResolver|createProcessingInstruction|createRange|createShadowRoot|
             createTBody|createTextNode|createTFoot|createTHead|createTreeWalker|delete|
             deleteCaption|deleteCell|deleteContents|deleteData|deleteRow|deleteTFoot|
             deleteTHead|detach|disconnect|dispatchEvent|elementFromPoint|elementsFromPoint|
             enableStyleSheetsForSet|entries|evaluate|execCommand|exitFullscreen|
             exitPointerLock|expand|extractContents|fastSeek|firstChild|focus|forEach|get|
             getAll|getAnimations|getAttribute|getAttributeNames|getAttributeNode|
             getAttributeNodeNS|getAttributeNS|getBoundingClientRect|getBoxQuads|
             getClientRects|getContext|getDestinationInsertionPoints|getElementById|
             getElementsByClassName|getElementsByName|getElementsByTagName|
             getElementsByTagNameNS|getItem|getNamedItem|getSelection|getStartDate|
             getVideoPlaybackQuality|has|hasAttribute|hasAttributeNS|hasAttributes|
             hasChildNodes|hasFeature|hasFocus|importNode|initEvent|insertAdjacentElement|
             insertAdjacentHTML|insertAdjacentText|insertBefore|insertCell|insertData|
             insertNode|insertRow|intersectsNode|isDefaultNamespace|isEqualNode|
             isPointInRange|isSameNode|item|key|keys|lastChild|load|lookupNamespaceURI|
             lookupPrefix|matches|move|moveAttribute|moveAttributeNode|moveChild|
             moveNamedItem|namedItem|nextNode|nextSibling|normalize|observe|open|
             parentNode|pause|play|postMessage|prepend|preventDefault|previousNode|
             previousSibling|probablySupportsContext|queryCommandEnabled|
             queryCommandIndeterm|queryCommandState|queryCommandSupported|queryCommandValue|
             querySelector|querySelectorAll|registerContentHandler|registerElement|
             registerProtocolHandler|releaseCapture|releaseEvents|remove|removeAttribute|
             removeAttributeNode|removeAttributeNS|removeChild|removeEventListener|
             removeItem|replace|replaceChild|replaceData|replaceWith|reportValidity|
             requestFullscreen|requestPointerLock|reset|scroll|scrollBy|scrollIntoView|
             scrollTo|seekToNextFrame|select|selectNode|selectNodeContents|set|setAttribute|
             setAttributeNode|setAttributeNodeNS|setAttributeNS|setCapture|
             setCustomValidity|setEnd|setEndAfter|setEndBefore|setItem|setNamedItem|
             setRangeText|setSelectionRange|setSinkId|setStart|setStartAfter|setStartBefore|
             slice|splitText|stepDown|stepUp|stopImmediatePropagation|stopPropagation|
             submit|substringData|supports|surroundContents|takeRecords|terminate|toBlob|
             toDataURL|toggle|toString|values|write|writeln
           ) |
           (all|catch|finally|race|reject|resolve|then
           )
          )(?=\s*\()
  switch-statement:
    begin: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(?=\bswitch\s*\()
    end: \}
    endCaptures:
      "0":
        name: punctuation.definition.block.gml
    name: switch-statement.expr.gml
    patterns:
      - include: "#comment"
      - begin: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(switch)\s*(\()
        beginCaptures:
          "1":
            name: keyword.control.switch.gml
          "2":
            name: meta.brace.round.gml
        end: \)
        endCaptures:
          "0":
            name: meta.brace.round.gml
        name: switch-expression.expr.gml
        patterns:
          - include: "#expression"
      - begin: \{
        beginCaptures:
          "0":
            name: punctuation.definition.block.gml
        end: (?=\})
        name: switch-block.expr.gml
        patterns:
          - begin: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(case|default(?=:))(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
            beginCaptures:
              "1":
                name: keyword.control.switch.gml
            end: (?=:)
            name: case-clause.expr.gml
            patterns:
              - include: "#expression"
          - begin: (:)\s*(\{)
            beginCaptures:
              "1":
                name: case-clause.expr.gml punctuation.definition.section.case-statement.gml
              "2":
                name: meta.block.gml punctuation.definition.block.gml
            contentName: meta.block.gml
            end: \}
            endCaptures:
              "0":
                name: meta.block.gml punctuation.definition.block.gml
            patterns:
              - include: "#statements"
          - captures:
              "0":
                name: case-clause.expr.gml punctuation.definition.section.case-statement.gml
            match: (:)
          - include: "#statements"
  template:
    patterns:
      - include: "#template-call"
      - begin: ([_$[:alpha:]][_$[:alnum:]]*)?(`)
        beginCaptures:
          "1":
            name: entity.name.function.tagged-template.gml
          "2":
            name: punctuation.definition.string.template.begin.gml
        end: "`"
        endCaptures:
          "0":
            name: punctuation.definition.string.template.end.gml
        name: string.template.gml
        patterns:
          - include: "#template-substitution-element"
          - include: "#string-character-escape"
  template-call:
    patterns:
      - begin: (?=(([_$[:alpha:]][_$[:alnum:]]*\s*\??\.\s*)*|(\??\.\s*)?)([_$[:alpha:]][_$[:alnum:]]*)(<\s*(((keyof|infer|typeof|readonly)\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))(?=\s*([\<\>\,\.\[]|=>|&(?!&)|\|(?!\|)))))([^<>\(]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(?<==)\>|\<\s*(((keyof|infer|typeof|readonly)\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))(?=\s*([\<\>\,\.\[]|=>|&(?!&)|\|(?!\|)))))(([^<>\(]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(?<==)\>|\<\s*(((keyof|infer|typeof|readonly)\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))(?=\s*([\<\>\,\.\[]|=>|&(?!&)|\|(?!\|)))))([^<>\(]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(?<==)\>)*(?<!=)\>))*(?<!=)\>)*(?<!=)>\s*)?`)
        end: (?=`)
        name: string.template.gml
        patterns:
          - begin: (?=(([_$[:alpha:]][_$[:alnum:]]*\s*\??\.\s*)*|(\??\.\s*)?)([_$[:alpha:]][_$[:alnum:]]*))
            end: (?=(<\s*(((keyof|infer|typeof|readonly)\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))(?=\s*([\<\>\,\.\[]|=>|&(?!&)|\|(?!\|)))))([^<>\(]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(?<==)\>|\<\s*(((keyof|infer|typeof|readonly)\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))(?=\s*([\<\>\,\.\[]|=>|&(?!&)|\|(?!\|)))))(([^<>\(]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(?<==)\>|\<\s*(((keyof|infer|typeof|readonly)\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))(?=\s*([\<\>\,\.\[]|=>|&(?!&)|\|(?!\|)))))([^<>\(]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(?<==)\>)*(?<!=)\>))*(?<!=)\>)*(?<!=)>\s*)?`)
            patterns:
              - include: "#support-function-call-identifiers"
              - match: ([_$[:alpha:]][_$[:alnum:]]*)
                name: entity.name.function.tagged-template.gml
          - include: "#type-arguments"
      - begin: ([_$[:alpha:]][_$[:alnum:]]*)?\s*(?=(<\s*(((keyof|infer|typeof|readonly)\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))(?=\s*([\<\>\,\.\[]|=>|&(?!&)|\|(?!\|)))))([^<>\(]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(?<==)\>|\<\s*(((keyof|infer|typeof|readonly)\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))(?=\s*([\<\>\,\.\[]|=>|&(?!&)|\|(?!\|)))))(([^<>\(]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(?<==)\>|\<\s*(((keyof|infer|typeof|readonly)\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))(?=\s*([\<\>\,\.\[]|=>|&(?!&)|\|(?!\|)))))([^<>\(]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(?<==)\>)*(?<!=)\>))*(?<!=)\>)*(?<!=)>\s*)`)
        beginCaptures:
          "1":
            name: entity.name.function.tagged-template.gml
        end: (?=`)
        name: string.template.gml
        patterns:
          - include: "#type-arguments"
  template-substitution-element:
    begin: \$\{
    beginCaptures:
      "0":
        name: punctuation.definition.template-expression.begin.gml
    contentName: meta.embedded.line.gml
    end: \}
    endCaptures:
      "0":
        name: punctuation.definition.template-expression.end.gml
    name: meta.template.expression.gml
    patterns:
      - include: "#expression"
  template-type:
    patterns:
      - include: "#template-call"
      - begin: ([_$[:alpha:]][_$[:alnum:]]*)?(`)
        beginCaptures:
          "1":
            name: entity.name.function.tagged-template.gml
          "2":
            name: punctuation.definition.string.template.begin.gml
        end: "`"
        endCaptures:
          "0":
            name: punctuation.definition.string.template.end.gml
        name: string.template.gml
        patterns:
          - include: "#template-type-substitution-element"
          - include: "#string-character-escape"
  template-type-substitution-element:
    begin: \$\{
    beginCaptures:
      "0":
        name: punctuation.definition.template-expression.begin.gml
    contentName: meta.embedded.line.gml
    end: \}
    endCaptures:
      "0":
        name: punctuation.definition.template-expression.end.gml
    name: meta.template.expression.gml
    patterns:
      - include: "#type"
  ternary-expression:
    begin: (?!\?\.\s*[^[:digit:]])(\?)(?!\?)
    beginCaptures:
      "1":
        name: keyword.operator.ternary.gml
    end: \s*(:)
    endCaptures:
      "1":
        name: keyword.operator.ternary.gml
    patterns:
      - include: "#expression"
  this-literal:
    match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))this\b(?!\$)
    name: variable.language.this.gml
  type:
    patterns:
      - include: "#comment"
      - include: "#type-string"
      - include: "#numeric-literal"
      - include: "#type-primitive"
      - include: "#type-builtin-literals"
      - include: "#type-parameters"
      - include: "#type-tuple"
      - include: "#type-object"
      - include: "#type-operators"
      - include: "#type-conditional"
      - include: "#type-fn-type-parameters"
      - include: "#type-paren-or-function-parameters"
      - include: "#type-function-return-type"
      - captures:
          "1":
            name: storage.modifier.gml
        match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(readonly)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))\s*
      - include: "#type-name"
  type-alias-declaration:
    begin: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(?:(\bexport)\s+)?(?:(\bdeclare)\s+)?\b(type)\b\s+([_$[:alpha:]][_$[:alnum:]]*)\s*
    beginCaptures:
      "1":
        name: keyword.control.export.gml
      "2":
        name: storage.modifier.gml
      "3":
        name: storage.type.type.gml
      "4":
        name: entity.name.type.alias.gml
    end: (?=\}|;|^\s*$|(?:^\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\b))
    name: meta.type.declaration.gml
    patterns:
      - include: "#comment"
      - include: "#type-parameters"
      - begin: (=)\s*(intrinsic)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
        beginCaptures:
          "1":
            name: keyword.operator.assignment.gml
          "2":
            name: keyword.control.intrinsic.gml
        end: (?=\}|;|^\s*$|(?:^\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\b))
        patterns:
          - include: "#type"
      - begin: (=)\s*
        beginCaptures:
          "1":
            name: keyword.operator.assignment.gml
        end: (?=\}|;|^\s*$|(?:^\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\b))
        patterns:
          - include: "#type"
  type-annotation:
    patterns:
      - begin: (:)(?=\s*\S)
        beginCaptures:
          "1":
            name: keyword.operator.type.annotation.gml
        end: (?<![:|&])(?!\s*[|&]\s+)((?=^|[,);\}\]]|//)|(?==[^>])|((?<=[\}>\]\)]|[_$[:alpha:]])\s*(?=\{)))
        name: meta.type.annotation.gml
        patterns:
          - include: "#type"
      - begin: (:)
        beginCaptures:
          "1":
            name: keyword.operator.type.annotation.gml
        end: (?<![:|&])((?=[,);\}\]]|\/\/)|(?==[^>])|(?=^\s*$)|((?<=[\}>\]\)]|[_$[:alpha:]])\s*(?=\{)))
        name: meta.type.annotation.gml
        patterns:
          - include: "#type"
  type-arguments:
    begin: \<
    beginCaptures:
      "0":
        name: punctuation.definition.typeparameters.begin.gml
    end: \>
    endCaptures:
      "0":
        name: punctuation.definition.typeparameters.end.gml
    name: meta.type.parameters.gml
    patterns:
      - include: "#type-arguments-body"
  type-arguments-body:
    patterns:
      - captures:
          "0":
            name: keyword.operator.type.gml
        match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(_)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
      - include: "#type"
      - include: "#punctuation-comma"
  type-builtin-literals:
    match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(this|true|false|undefined|null|object)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
    name: support.type.builtin.gml
  type-conditional:
    patterns:
      - begin: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(extends)\s+
        beginCaptures:
          "1":
            name: storage.modifier.gml
        end: (?<=:)
        patterns:
          - begin: \?
            beginCaptures:
              "0":
                name: keyword.operator.ternary.gml
            end: ":"
            endCaptures:
              "0":
                name: keyword.operator.ternary.gml
            patterns:
              - include: "#type"
          - include: "#type"
  type-fn-type-parameters:
    patterns:
      - begin: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(?:(abstract)\s+)?(new)\b(?=\s*\<)
        beginCaptures:
          "1":
            name: meta.type.constructor.gml storage.modifier.gml
          "2":
            name: meta.type.constructor.gml keyword.control.new.gml
        end: (?<=>)
        patterns:
          - include: "#comment"
          - include: "#type-parameters"
      - begin: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(?:(abstract)\s+)?(new)\b\s*(?=\()
        beginCaptures:
          "1":
            name: storage.modifier.gml
          "2":
            name: keyword.control.new.gml
        end: (?<=\))
        name: meta.type.constructor.gml
        patterns:
          - include: "#function-parameters"
      - begin: |-
          (?x)(
            (?=
              [(]\s*(
                ([)]) |
                (\.\.\.) |
                ([_$[:alnum:]]+\s*(
                  ([:,?=])|
                  ([)]\s*=>)
                ))
              )
            )
          )
        end: (?<=\))
        name: meta.type.function.gml
        patterns:
          - include: "#function-parameters"
  type-function-return-type:
    patterns:
      - begin: (=>)(?=\s*\S)
        beginCaptures:
          "1":
            name: storage.type.function.arrow.gml
        end: (?<!=>)(?<![|&])(?=[,\]\)\{\}=;>:\?]|//|$)
        name: meta.type.function.return.gml
        patterns:
          - include: "#type-function-return-type-core"
      - begin: =>
        beginCaptures:
          "0":
            name: storage.type.function.arrow.gml
        end: (?<!=>)(?<![|&])((?=[,\]\)\{\}=;:\?>]|//|^\s*$)|((?<=\S)(?=\s*$)))
        name: meta.type.function.return.gml
        patterns:
          - include: "#type-function-return-type-core"
  type-function-return-type-core:
    patterns:
      - include: "#comment"
      - begin: (?<==>)(?=\s*\{)
        end: (?<=\})
        patterns:
          - include: "#type-object"
      - include: "#type-predicate-operator"
      - include: "#type"
  type-infer:
    patterns:
      - captures:
          "1":
            name: keyword.operator.expression.infer.gml
          "2":
            name: entity.name.type.gml
          "3":
            name: keyword.operator.expression.extends.gml
        match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(infer)\s+([_$[:alpha:]][_$[:alnum:]]*)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))(?:\s+(extends)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.)))?
        name: meta.type.infer.gml
  type-name:
    patterns:
      - begin: ([_$[:alpha:]][_$[:alnum:]]*)\s*(?:(\.)|(\?\.(?!\s*[[:digit:]])))\s*(<)
        captures:
          "1":
            name: entity.name.type.module.gml
          "2":
            name: punctuation.accessor.gml
          "3":
            name: punctuation.accessor.optional.gml
          "4":
            name: meta.type.parameters.gml punctuation.definition.typeparameters.begin.gml
        contentName: meta.type.parameters.gml
        end: (>)
        endCaptures:
          "1":
            name: meta.type.parameters.gml punctuation.definition.typeparameters.end.gml
        patterns:
          - include: "#type-arguments-body"
      - begin: ([_$[:alpha:]][_$[:alnum:]]*)\s*(<)
        beginCaptures:
          "1":
            name: entity.name.type.gml
          "2":
            name: meta.type.parameters.gml punctuation.definition.typeparameters.begin.gml
        contentName: meta.type.parameters.gml
        end: (>)
        endCaptures:
          "1":
            name: meta.type.parameters.gml punctuation.definition.typeparameters.end.gml
        patterns:
          - include: "#type-arguments-body"
      - captures:
          "1":
            name: entity.name.type.module.gml
          "2":
            name: punctuation.accessor.gml
          "3":
            name: punctuation.accessor.optional.gml
        match: ([_$[:alpha:]][_$[:alnum:]]*)\s*(?:(\.)|(\?\.(?!\s*[[:digit:]])))
      - match: "[_$[:alpha:]][_$[:alnum:]]*"
        name: entity.name.type.gml
  type-object:
    begin: \{
    beginCaptures:
      "0":
        name: punctuation.definition.block.gml
    end: \}
    endCaptures:
      "0":
        name: punctuation.definition.block.gml
    name: meta.object.type.gml
    patterns:
      - include: "#comment"
      - include: "#method-declaration"
      - include: "#indexer-declaration"
      - include: "#indexer-mapped-type-declaration"
      - include: "#field-declaration"
      - include: "#type-annotation"
      - begin: \.\.\.
        beginCaptures:
          "0":
            name: keyword.operator.spread.gml
        end: (?=\}|;|,|$)|(?<=\})
        patterns:
          - include: "#type"
      - include: "#punctuation-comma"
      - include: "#punctuation-semicolon"
      - include: "#type"
  type-operators:
    patterns:
      - include: "#typeof-operator"
      - include: "#type-infer"
      - begin: ([&|])(?=\s*\{)
        beginCaptures:
          "0":
            name: keyword.operator.type.gml
        end: (?<=\})
        patterns:
          - include: "#type-object"
      - begin: "[&|]"
        beginCaptures:
          "0":
            name: keyword.operator.type.gml
        end: (?=\S)
      - match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))keyof(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
        name: keyword.operator.expression.keyof.gml
      - match: (\?|\:)
        name: keyword.operator.ternary.gml
      - match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))import(?=\s*\()
        name: keyword.operator.expression.import.gml
  type-parameters:
    begin: (<)
    beginCaptures:
      "1":
        name: punctuation.definition.typeparameters.begin.gml
    end: (>)
    endCaptures:
      "1":
        name: punctuation.definition.typeparameters.end.gml
    name: meta.type.parameters.gml
    patterns:
      - include: "#comment"
      - match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(extends|in|out|const)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
        name: storage.modifier.gml
      - include: "#type"
      - include: "#punctuation-comma"
      - match: (=)(?!>)
        name: keyword.operator.assignment.gml
  type-paren-or-function-parameters:
    begin: \(
    beginCaptures:
      "0":
        name: meta.brace.round.gml
    end: \)
    endCaptures:
      "0":
        name: meta.brace.round.gml
    name: meta.type.paren.cover.gml
    patterns:
      - captures:
          "1":
            name: storage.modifier.gml
          "2":
            name: keyword.operator.rest.gml
          "3":
            name: entity.name.function.gml variable.language.this.gml
          "4":
            name: entity.name.function.gml
          "5":
            name: keyword.operator.optional.gml
        match: >-
          (?x)(?:(?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(public|private|protected|readonly)\s+)?(?:(\.\.\.)\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))\s*(\??)(?=\s*(:\s*(
            (<) |
            ([(]\s*(
              ([)]) |
              (\.\.\.) |
              ([_$[:alnum:]]+\s*(
                ([:,?=])|
                ([)]\s*=>)
              ))
            ))
          )) |

          (:\s*(?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))Function(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))) |

          (:\s*((<\s*$)|((<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*)?[\(]\s*((([\{\[]\s*)?$)|((\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})\s*((:\s*\{?$)|((\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))|((\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])\s*((:\s*\[?$)|((\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*))))))))
      - captures:
          "1":
            name: storage.modifier.gml
          "2":
            name: keyword.operator.rest.gml
          "3":
            name: variable.parameter.gml variable.language.this.gml
          "4":
            name: variable.parameter.gml
          "5":
            name: keyword.operator.optional.gml
        match: (?x)(?:(?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(public|private|protected|readonly)\s+)?(?:(\.\.\.)\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))\s*(\??)(?=:)
      - include: "#type-annotation"
      - match: ","
        name: punctuation.separator.parameter.gml
      - include: "#type"
  type-predicate-operator:
    patterns:
      - captures:
          "1":
            name: keyword.operator.type.asserts.gml
          "2":
            name: variable.parameter.gml variable.language.this.gml
          "3":
            name: variable.parameter.gml
          "4":
            name: keyword.operator.expression.is.gml
        match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(?:(asserts)\s+)?(?!asserts)(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))\s(is)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
      - captures:
          "1":
            name: keyword.operator.type.asserts.gml
          "2":
            name: variable.parameter.gml variable.language.this.gml
          "3":
            name: variable.parameter.gml
        match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(asserts)\s+(?!is)(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
      - match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))asserts(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
        name: keyword.operator.type.asserts.gml
      - match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))is(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
        name: keyword.operator.expression.is.gml
  type-primitive:
    match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(string|number|bigint|boolean|symbol|any|void|never|unknown)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
    name: support.type.primitive.gml
  type-string:
    patterns:
      - include: "#qstring-single"
      - include: "#qstring-double"
      - include: "#template-type"
  type-tuple:
    begin: \[
    beginCaptures:
      "0":
        name: meta.brace.square.gml
    end: \]
    endCaptures:
      "0":
        name: meta.brace.square.gml
    name: meta.type.tuple.gml
    patterns:
      - match: \.\.\.
        name: keyword.operator.rest.gml
      - captures:
          "1":
            name: entity.name.label.gml
          "2":
            name: keyword.operator.optional.gml
          "3":
            name: punctuation.separator.label.gml
        match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))([_$[:alpha:]][_$[:alnum:]]*)\s*(\?)?\s*(:)
      - include: "#type"
      - include: "#punctuation-comma"
  typeof-operator:
    begin: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))typeof(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
    beginCaptures:
      "0":
        name: keyword.operator.expression.typeof.gml
    end: (?=[,);}\]=>:&|{\?]|(extends\s+)|$|;|^\s*$|(?:^\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\b))
    patterns:
      - include: "#type-arguments"
      - include: "#expression"
  undefined-literal:
    match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))undefined(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
    name: constant.language.undefined.gml
  var-expr:
    patterns:
      - begin: (?=(?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(?:(\bexport)\s+)?(?:(\bdeclare)\s+)?\b(var|let)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.)))
        end: (?!(?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(?:(\bexport)\s+)?(?:(\bdeclare)\s+)?\b(var|let)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.)))((?=;|}|((?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(of|in)\s+)|;|^\s*$|(?:^\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\b))|((?<!^let|[^\._$[:alnum:]]let|^var|[^\._$[:alnum:]]var)(?=\s*$)))
        name: meta.var.expr.gml
        patterns:
          - begin: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(?:(\bexport)\s+)?(?:(\bdeclare)\s+)?\b(var|let)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))\s*
            beginCaptures:
              "1":
                name: keyword.control.export.gml
              "2":
                name: storage.modifier.gml
              "3":
                name: storage.type.gml
            end: (?=\S)
          - include: "#destructuring-variable"
          - include: "#var-single-variable"
          - include: "#variable-initializer"
          - include: "#comment"
          - begin: (,)\s*((?!\S)|(?=\/\/))
            beginCaptures:
              "1":
                name: punctuation.separator.comma.gml
            end: (?<!,)(((?==|;|}|((?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(of|in)\s+)|^\s*$))|((?<=\S)(?=\s*$)))
            patterns:
              - include: "#single-line-comment-consuming-line-ending"
              - include: "#comment"
              - include: "#destructuring-variable"
              - include: "#var-single-variable"
              - include: "#punctuation-comma"
          - include: "#punctuation-comma"
      - begin: (?=(?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(?:(\bexport)\s+)?(?:(\bdeclare)\s+)?\b(const(?!\s+enum\b))(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.)))
        beginCaptures:
          "1":
            name: keyword.control.export.gml
          "2":
            name: storage.modifier.gml
          "3":
            name: storage.type.gml
        end: (?!(?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(?:(\bexport)\s+)?(?:(\bdeclare)\s+)?\b(const(?!\s+enum\b))(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.)))((?=;|}|((?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(of|in)\s+)|;|^\s*$|(?:^\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\b))|((?<!^const|[^\._$[:alnum:]]const)(?=\s*$)))
        name: meta.var.expr.gml
        patterns:
          - begin: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(?:(\bexport)\s+)?(?:(\bdeclare)\s+)?\b(const(?!\s+enum\b))(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))\s*
            beginCaptures:
              "1":
                name: keyword.control.export.gml
              "2":
                name: storage.modifier.gml
              "3":
                name: storage.type.gml
            end: (?=\S)
          - include: "#destructuring-const"
          - include: "#var-single-const"
          - include: "#variable-initializer"
          - include: "#comment"
          - begin: (,)\s*((?!\S)|(?=\/\/))
            beginCaptures:
              "1":
                name: punctuation.separator.comma.gml
            end: (?<!,)(((?==|;|}|((?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(of|in)\s+)|^\s*$))|((?<=\S)(?=\s*$)))
            patterns:
              - include: "#single-line-comment-consuming-line-ending"
              - include: "#comment"
              - include: "#destructuring-const"
              - include: "#var-single-const"
              - include: "#punctuation-comma"
          - include: "#punctuation-comma"
  var-single-const:
    patterns:
      - begin: >-
          (?x)([_$[:alpha:]][_$[:alnum:]]*)(?=\s*

          # function assignment |

          (=\s*(
            ((async\s+)?(
              (function\s*[(<*]) |
              (function\s+) |
              ([_$[:alpha:]][_$[:alnum:]]*\s*=>)
            )) |
            ((async\s*)?(
              ((<\s*$)|((<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*)?[\(]\s*((([\{\[]\s*)?$)|((\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})\s*((:\s*\{?$)|((\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))|((\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])\s*((:\s*\[?$)|((\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))))) |
              # sure shot arrow functions even if => is on new line
          (
            (<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*)?
            [(]\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*
            (
              ([)]\s*:) |                                                                                       # ():
              ((\.\.\.\s*)?[_$[:alpha:]][_$[:alnum:]]*\s*:)                                                                  # [(]param: | [(]...param:
            )
          ) |


          # arrow function possible to detect only with => on same line

          (
            (<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*)?                                                                                 # typeparameters
            \(\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*(([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\.\.\.\s*[_$[:alpha:]]))([^()\'\"\`]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))*)?\)   # parameters
            (\s*:\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+)?                                                                        # return type
            \s*=>                                                                                               # arrow operator
          )
            ))
          )) |

          # typeannotation is fn type: < | () | (... | (param: | (param, | (param? | (param= | (param) =>

          (:\s*(
            (<) |
            ([(]\s*(
              ([)]) |
              (\.\.\.) |
              ([_$[:alnum:]]+\s*(
                ([:,?=])|
                ([)]\s*=>)
              ))
            ))
          )) |

          (:\s*(?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))Function(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))) |

          (:\s*((<\s*$)|((<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*)?[\(]\s*((([\{\[]\s*)?$)|((\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})\s*((:\s*\{?$)|((\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))|((\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])\s*((:\s*\[?$)|((\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*))))))) |

          (:\s*(=>|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(<[^<>]*>)|[^<>(),=])+=\s*(
            ((async\s+)?(
              (function\s*[(<*]) |
              (function\s+) |
              ([_$[:alpha:]][_$[:alnum:]]*\s*=>)
            )) |
            ((async\s*)?(
              ((<\s*$)|((<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*)?[\(]\s*((([\{\[]\s*)?$)|((\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})\s*((:\s*\{?$)|((\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))|((\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])\s*((:\s*\[?$)|((\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))))) |
              # sure shot arrow functions even if => is on new line
          (
            (<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*)?
            [(]\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*
            (
              ([)]\s*:) |                                                                                       # ():
              ((\.\.\.\s*)?[_$[:alpha:]][_$[:alnum:]]*\s*:)                                                                  # [(]param: | [(]...param:
            )
          ) |


          # arrow function possible to detect only with => on same line

          (
            (<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*)?                                                                                 # typeparameters
            \(\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*(([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\.\.\.\s*[_$[:alpha:]]))([^()\'\"\`]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))*)?\)   # parameters
            (\s*:\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+)?                                                                        # return type
            \s*=>                                                                                               # arrow operator
          )
            ))
          )))
        beginCaptures:
          "1":
            name: meta.definition.variable.gml variable.other.constant.gml
              entity.name.function.gml
        end: (?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(of|in)\s+))
        name: meta.var-single-variable.expr.gml
        patterns:
          - include: "#var-single-variable-type-annotation"
      - begin: ([_$[:alpha:]][_$[:alnum:]]*)
        beginCaptures:
          "1":
            name: meta.definition.variable.gml variable.other.constant.gml
        end: (?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(of|in)\s+))
        name: meta.var-single-variable.expr.gml
        patterns:
          - include: "#var-single-variable-type-annotation"
  var-single-variable:
    patterns:
      - begin: >-
          (?x)([_$[:alpha:]][_$[:alnum:]]*)(\!)?(?=\s*

          # function assignment |

          (=\s*(
            ((async\s+)?(
              (function\s*[(<*]) |
              (function\s+) |
              ([_$[:alpha:]][_$[:alnum:]]*\s*=>)
            )) |
            ((async\s*)?(
              ((<\s*$)|((<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*)?[\(]\s*((([\{\[]\s*)?$)|((\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})\s*((:\s*\{?$)|((\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))|((\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])\s*((:\s*\[?$)|((\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))))) |
              # sure shot arrow functions even if => is on new line
          (
            (<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*)?
            [(]\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*
            (
              ([)]\s*:) |                                                                                       # ():
              ((\.\.\.\s*)?[_$[:alpha:]][_$[:alnum:]]*\s*:)                                                                  # [(]param: | [(]...param:
            )
          ) |


          # arrow function possible to detect only with => on same line

          (
            (<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*)?                                                                                 # typeparameters
            \(\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*(([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\.\.\.\s*[_$[:alpha:]]))([^()\'\"\`]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))*)?\)   # parameters
            (\s*:\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+)?                                                                        # return type
            \s*=>                                                                                               # arrow operator
          )
            ))
          )) |

          # typeannotation is fn type: < | () | (... | (param: | (param, | (param? | (param= | (param) =>

          (:\s*(
            (<) |
            ([(]\s*(
              ([)]) |
              (\.\.\.) |
              ([_$[:alnum:]]+\s*(
                ([:,?=])|
                ([)]\s*=>)
              ))
            ))
          )) |

          (:\s*(?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))Function(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))) |

          (:\s*((<\s*$)|((<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*)?[\(]\s*((([\{\[]\s*)?$)|((\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})\s*((:\s*\{?$)|((\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))|((\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])\s*((:\s*\[?$)|((\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*))))))) |

          (:\s*(=>|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(<[^<>]*>)|[^<>(),=])+=\s*(
            ((async\s+)?(
              (function\s*[(<*]) |
              (function\s+) |
              ([_$[:alpha:]][_$[:alnum:]]*\s*=>)
            )) |
            ((async\s*)?(
              ((<\s*$)|((<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*)?[\(]\s*((([\{\[]\s*)?$)|((\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})\s*((:\s*\{?$)|((\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))|((\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])\s*((:\s*\[?$)|((\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))))) |
              # sure shot arrow functions even if => is on new line
          (
            (<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*)?
            [(]\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*
            (
              ([)]\s*:) |                                                                                       # ():
              ((\.\.\.\s*)?[_$[:alpha:]][_$[:alnum:]]*\s*:)                                                                  # [(]param: | [(]...param:
            )
          ) |


          # arrow function possible to detect only with => on same line

          (
            (<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*(((const\s+)?[_$[:alpha:]])|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*)?                                                                                 # typeparameters
            \(\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*(([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\.\.\.\s*[_$[:alpha:]]))([^()\'\"\`]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))*)?\)   # parameters
            (\s*:\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+)?                                                                        # return type
            \s*=>                                                                                               # arrow operator
          )
            ))
          )))
        beginCaptures:
          "1":
            name: meta.definition.variable.gml entity.name.function.gml
          "2":
            name: keyword.operator.definiteassignment.gml
        end: (?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(of|in)\s+))
        name: meta.var-single-variable.expr.gml
        patterns:
          - include: "#var-single-variable-type-annotation"
      - begin: ([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])(\!)?
        beginCaptures:
          "1":
            name: meta.definition.variable.gml variable.other.constant.gml
          "2":
            name: keyword.operator.definiteassignment.gml
        end: (?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(of|in)\s+))
        name: meta.var-single-variable.expr.gml
        patterns:
          - include: "#var-single-variable-type-annotation"
      - begin: ([_$[:alpha:]][_$[:alnum:]]*)(\!)?
        beginCaptures:
          "1":
            name: meta.definition.variable.gml variable.other.readwrite.gml
          "2":
            name: keyword.operator.definiteassignment.gml
        end: (?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(of|in)\s+))
        name: meta.var-single-variable.expr.gml
        patterns:
          - include: "#var-single-variable-type-annotation"
  var-single-variable-type-annotation:
    patterns:
      - include: "#type-annotation"
      - include: "#string"
      - include: "#comment"
  variable-initializer:
    patterns:
      - begin: (?<!=|!)(=)(?!=)(?=\s*\S)(?!\s*.*=>\s*$)
        beginCaptures:
          "1":
            name: keyword.operator.assignment.gml
        end: (?=$|^|[,);}\]]|((?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(of|in)\s+))
        patterns:
          - include: "#expression"
      - begin: (?<!=|!)(=)(?!=)
        beginCaptures:
          "1":
            name: keyword.operator.assignment.gml
        end: (?=[,);}\]]|((?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(of|in)\s+))|(?=^\s*$)|(?<![\|\&\+\-\*\/])(?<=\S)(?<!=)(?=\s*$)
        patterns:
          - include: "#expression"
scopeName: source.gml
