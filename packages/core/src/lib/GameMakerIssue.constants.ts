export const issueTypes = {
  runner: 'Bug with in-game functionality',
  ide: 'Bug in the UI or IDE functionality',
};

export const issueAffectedAreaOptions = {
  ide: [
    'Feather',
    'Animation Curve Editor',
    'Asset Browser ("Resource Tree")',
    'Audio Groups',
    'Bookmarks',
    'Building Projects',
    'Code Editor (GML Code)',
    'Code Editor (GML Visual)',
    'Debugger',
    'Device Manager',
    'File Watcher',
    'Font Editor',
    'Game Options',
    'Generate Project Images',
    'Go To',
    'IDE Crash',
    'Image Editor',
    'Included Files Editor / Integration',
    'Inspector',
    'Install / Uninstall',
    'Local Package Integration',
    'Marketplace Integration',
    'Notes',
    'Object Editor',
    'Path Editor',
    'Preferences',
    'Project Load/Save/Import/Export',
    'Recent Windows',
    'Room Editor Filter Layers',
    'Room Editor',
    'Search and Replace',
    'Sequence Editor',
    'Shaders',
    'Sound Editor / Sound Mixer',
    'Sprite Editor',
    'Start Page Ads/Links',
    'Start Page',
    'Target Manager',
    'Templates  (Downloading, creating projects, UI)',
    'Texture Groups',
    'Tile Set Editor',
    'Timeline Editor',
    'Tutorials (Downloading, creating projects, UI)',
    'UI/UX and Localisation',
    'Webserver',
    'Workspaces',
  ],
  runner: [
    'In-Game Crash',
    'General / Other In-Game Issue',
    '3D Functions',
    'Amazon Fire',
    'Android',
    'Audio',
    'Backgrounds',
    'Buffers',
    'Collisions',
    'Configurations',
    'GML Visual actions',
    'Events',
    'Extensions',
    'Fonts and Drawing Text',
    'HTML5',
    'IAPs',
    'Included Files',
    'Input Devices (gamepads, keyboards, etc.)',
    'iOS',
    'Layers and Depth',
    'macOS',
    'Macros',
    'Networking',
    'Objects / Instances',
    'Particles',
    'Paths',
    'Physics',
    'PlayStation 4',
    'Push Notifications',
    'Rooms',
    'Scripts',
    'Shaders',
    'Social (achievements, leaderboards, ratings, etc.)',
    'Spine',
    'Sprites',
    'Steamworks',
    'Surfaces',
    'SWF',
    'Switch (Nintendo)',
    'Tiles',
    'Xbox One',
    'Timelines',
    'tvOS',
    'Ubuntu',
    'UWP',
    'Variables (In-built ones)',
    'Variables (Object/Instance ones)',
    'Views and Cameras',
    'Windows',
    'YYC (compiling, differences to VM exports)',
    'Sequences',
    'Animation Curves',
    'Garbage Collector',
    'PlayStation 5',
    'Xbox Series X/S',
    'Opera GX',
    'Filters / Effects',
  ],
} as const;

export const issueAffectedPlatforms = [
  'Windows',
  'macOS',
  'Ubuntu',
  'HTML5',
  'UWP',
  'Android',
  'iOS (including iPadOS)',
  'tvOS',
  'PS4',
  'PS5',
  'Switch',
  'Xbox One',
  'Xbox Series X/S',
  'Opera GX (Beta)',
] as const;

export const gameMakerIssueSchema = {
  $schema: 'http://json-schema.org/draft-07/schema#',
  title: 'GameMaker Issue',
  description:
    'Structured content describing a GameMaker issue, for creating a ticket to send to the GameMaker team.',
  type: 'object',
  required: ['type', 'summary', 'description', 'platforms', 'affected'],
  properties: {
    type: {
      description:
        'The top-level issue category, basically which GameMaker product is impacted.',
      type: 'string',
      enum: Object.keys(issueTypes) as string[],
    },
    summary: {
      description:
        'Short summary of the issue (basically the title of the ticket)',
      type: 'string',
      minLength: 1,
      maxLength: 128,
    },
    description: {
      type: 'string',
      minLength: 1,
      description: `Fully describe the issue, including information about replication and context.`,
    },
    platforms: {
      type: 'array',
      description: `Which platforms are affected?`,
      items: {
        type: 'string',
        enum: issueAffectedPlatforms,
      },
    },
    affected: { type: 'array', items: { type: 'string' } },
  },
  if: {
    properties: {
      type: {
        const: 'runner',
      },
    },
  },
  then: {
    properties: {
      affected: {
        type: 'array',
        description: `Which In-Game feature(s) are affected?`,
        items: {
          type: 'string',
          enum: issueAffectedAreaOptions.runner,
          default: ['General / Other In-Game Issue'],
        },
      },
    },
  },
  else: {
    properties: {
      affected: {
        type: 'array',
        description: `Which IDE feature(s) are affected?`,
        items: {
          type: 'string',
          enum: issueAffectedAreaOptions.ide,
          default: ['Feather'],
        },
      },
    },
  },
};
