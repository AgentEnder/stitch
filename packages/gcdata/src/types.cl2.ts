export namespace Crashlands2 {
  /* eslint-disable */
  /**
   * This file was automatically generated by json-schema-to-typescript.
   * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
   * and run json-schema-to-typescript to regenerate this file.
   */

  /**
   * Check this if some aspect of this element's mechanics or logic are unfinished or need reworking.
   */
  export type MechanicsNeeded = boolean;
  /**
   * Check this if some aspect of this element's audio elements are unfinished or need reworking.
   */
  export type AudioNeeded = boolean;
  /**
   * Check this if some aspect of this element's text fields are unfinished or need reworking.
   */
  export type TextNeeded = boolean;
  /**
   * Check this if the element needs to have some of its numbers tuned to make it more or less challenging to engage with.
   */
  export type BalanceNeeded = boolean;
  /**
   * Check this if the element needs to be added to the game in a way that the player can access it as intended.
   */
  export type IntegrationNeeded = boolean;
  /**
   * Check this if this element is under heavy iteration and shouldn't be viewed as a fully functional element.
   */
  export type MoteIsDraft = boolean;
  /**
   * Check this if some aspect of this element's visuals are unfinished or need reworking.
   */
  export type VisualsNeeded = boolean;
  export type EnglishText = string;
  /**
   * Explain this text to help with localization and development.
   */
  export type TranslatorHelperText = string;
  /**
   * If set, this icon will display next to the storyline in the sidebar
   */
  export type Icon = string;
  export type EnglishText1 = string;
  /**
   * Explain this text to help with localization and development.
   */
  export type TranslatorHelperText1 = string;
  export type Pet = string;
  export type EnglishText2 = string;
  /**
   * What stage of the pet's life this quest is available during.
   */
  export type PetStage = 'Baby' | 'Adult';
  export type EnglishText3 = string;
  export type QuestMoment =
    | {
        requirements?: MomentRequirements;
        style: 'Dialogue';
        speech: {
          text: {
            text: EnglishText4;
          };
          speaker: Speaker;
          emotion?: Emoji;
        };
      }
    | {
        requirements?: MomentRequirements;
        emotes: Emotes;
        style: 'Emote';
      }
    | {
        style: 'Gain Item';
        bonus?: ItemsAreBonus;
        items: ItemsToGain;
      }
    | {
        style: 'Pin';
        pin: WhatToPin;
      }
    | {
        style: 'Artisan Follow';
        artisan: Buddy;
      }
    | {
        style: 'Drop Item';
        bonus?: ItemsAreBonus1;
        drops: Drops;
      }
    | {
        style: 'Artisan Stop Following';
        artisan: Artisan1;
      }
    | {
        style: 'Set Area Discovered';
        area: Area;
      }
    | {
        quest_to_close: Quest1;
        style: 'Close a Quest';
      }
    | {
        style: 'Pause';
        pause_duration: PauseSeconds;
      }
    | {
        style: 'Camera Target Set';
        camera_target: CameraTargetEntity;
      }
    | {
        style: 'Camera Target Unset';
      }
    | {
        style: 'Camera Zoom';
        zoom_amount: ZoomAmount;
      };
  export type Requirement =
    | {
        style: 'Quest';
        quest: QuestToCheck;
        quest_status: QuestStatus;
      }
    | {
        style: 'Equipped';
        item: Item;
      }
    | {
        time: Time;
        style: 'Time';
      }
    | {
        style: 'Items Owned';
        items_owned: Items;
      }
    | {
        insight_status: InsightStatus;
        style: 'Insight';
        insight: Insight;
      }
    | {
        style: 'Artisan Following';
        artisan?: Artisan;
        following: Following;
      }
    | {
        style: 'Comfort';
        comfort: Comfort;
        comfort_status: ComfortStatus;
      }
    | {
        style: 'Inventory Evaluation';
        comparisons: InventoryEvaluation;
      }
    | {
        style: 'Area';
        area: AreaToCheck;
        item_id: Entity;
      }
    | {
        style: 'Teleporter Active';
        teleporter_area?: TeleporterArea;
        teleporter_active: ActiveState;
      }
    | {
        style: 'Requirement Group';
        require_all: RequireAll;
        invert: Invert;
        group_requirements: MomentRequirements1;
      }
    | {
        stage?: PetStage1;
        style: 'Pet';
        pet?: Pet1;
        following?: Following1;
      }
    | {
        boss: Boss;
        style: 'Boss Defeated';
      }
    | {
        distance: Distance;
        style: 'Entity Proximity';
        exclusive?: Exclusive;
        same_room: SameRoom;
        item_ids: Entities;
      };
  /**
   * The quest whose status we are querying.
   */
  export type QuestToCheck = string;
  export type QuestStatus = 'Complete' | 'Started' | 'Not Started';
  /**
   * The player must be wearing this item.
   */
  export type Item = string;
  export type Time = 'Day' | 'Night';
  export type Quantity = number;
  export type InsightStatus = 'Complete' | 'Available' | 'Locked';
  export type Insight = string;
  /**
   * Leave unset to query whether any artisans are either following or not following. Otherwise, this will query the specific artisan you have chosen.
   */
  export type Artisan = string;
  /**
   * If false, then this will only trigger if the artisan is not following.
   */
  export type Following = boolean;
  export type Comfort = string;
  export type ComfortStatus = 'Complete' | 'Available';
  export type Quantity1 = number;
  export type Item1 = string;
  export type AreaToCheck = string;
  /**
   * The entity that must be in the area for the requirement to pass.
   */
  export type Entity = string;
  /**
   * If not set, this requirement will check for 'any' teleporters.
   */
  export type TeleporterArea = string;
  /**
   * The teleporter must be in this state.
   */
  export type ActiveState = boolean;
  /**
   * If set to false, then this requirement group will pass if any of its requirements are met.
   */
  export type RequireAll = boolean;
  /**
   * If set, then this requirement group will 'pass' if its requirements are NOT met.
   */
  export type Invert = boolean;
  /**
   * If unset, then this requirement will be met if any of your pets match it.
   */
  export type Pet1 = string;
  /**
   * If set, then this will only trigger if the pet's following state matches this.
   */
  export type Following1 = boolean;
  export type Boss = string;
  /**
   * How far from the player (in grid spaces) the entity should be for this requirement to be met.
   */
  export type Distance = number;
  /**
   * Only consider this requirement met if NONE of the listed entities are within the range.
   */
  export type Exclusive = boolean;
  /**
   * If true, this requirement will check whether the entity is in the same room as the player. If outdoors, it will use distance.
   */
  export type SameRoom = boolean;
  export type EntityType = string;
  export type EnglishText4 = string;
  export type Speaker = string;
  export type Emoji = string;
  export type Character = string;
  export type Emoji1 = string;
  /**
   * If checked, these items will not be included in the progression map.
   */
  export type ItemsAreBonus = boolean;
  export type Quantity2 = number;
  export type WhatToPin = string;
  export type Buddy = string;
  /**
   * If checked, these items will not be included in the progression map.
   */
  export type ItemsAreBonus1 = boolean;
  /**
   * Who or what will drop these items. If not present, the items will fly out of the player.
   */
  export type Dropper = string;
  export type Quantity3 = number;
  export type Item2 = string;
  export type Artisan1 = string;
  export type Area = string;
  /**
   * This quest will be set as 'complete', regardless of whether it has been started or not. Its end moments will be skipped.
   */
  export type Quest1 = string;
  /**
   * How long to pause before moving to the next quest moment.
   */
  export type PauseSeconds = number;
  export type CameraTargetEntity = string;
  /**
   * Higher number means you can see more.
   */
  export type ZoomAmount = number;
  export type Requirement1 =
    | {
        style: 'Quest';
        quest: QuestToCheck1;
        quest_status: QuestStatus1;
      }
    | {
        style: 'Equipped';
        item: Item3;
      }
    | {
        time: Time1;
        style: 'Time';
      }
    | {
        style: 'Items Owned';
        items_owned: Items1;
      }
    | {
        insight_status: InsightStatus1;
        style: 'Insight';
        insight: Insight1;
      }
    | {
        style: 'Artisan Following';
        artisan?: Artisan2;
        following: Following2;
      }
    | {
        style: 'Comfort';
        comfort: Comfort1;
        comfort_status: ComfortStatus1;
      }
    | {
        style: 'Inventory Evaluation';
        comparisons: InventoryEvaluation1;
      }
    | {
        style: 'Area';
        area: AreaToCheck1;
        item_id: Entity1;
      }
    | {
        style: 'Teleporter Active';
        teleporter_area?: TeleporterArea1;
        teleporter_active: ActiveState1;
      }
    | {
        style: 'Requirement Group';
        require_all: RequireAll1;
        invert: Invert1;
        group_requirements: Requirements1;
      }
    | {
        stage?: PetStage2;
        style: 'Pet';
        pet?: Pet2;
        following?: Following3;
      }
    | {
        boss: Boss1;
        style: 'Boss Defeated';
      };
  /**
   * The quest whose status we are querying.
   */
  export type QuestToCheck1 = string;
  export type QuestStatus1 = 'Complete' | 'Started' | 'Not Started';
  /**
   * The player must be wearing this item.
   */
  export type Item3 = string;
  export type Time1 = 'Day' | 'Night';
  export type Quantity4 = number;
  export type InsightStatus1 = 'Complete' | 'Available' | 'Locked';
  export type Insight1 = string;
  /**
   * Leave unset to query whether any artisans are either following or not following. Otherwise, this will query the specific artisan you have chosen.
   */
  export type Artisan2 = string;
  /**
   * If false, then this will only trigger if the artisan is not following.
   */
  export type Following2 = boolean;
  export type Comfort1 = string;
  export type ComfortStatus1 = 'Complete' | 'Available';
  export type Quantity5 = number;
  export type Item4 = string;
  export type AreaToCheck1 = string;
  /**
   * The entity that must be in the area for the requirement to pass.
   */
  export type Entity1 = string;
  /**
   * If not set, this requirement will check for 'any' teleporters.
   */
  export type TeleporterArea1 = string;
  /**
   * The teleporter must be in this state.
   */
  export type ActiveState1 = boolean;
  /**
   * If set to false, then this requirement group will pass if any of its requirements are met.
   */
  export type RequireAll1 = boolean;
  /**
   * If set, then this requirement group will 'pass' if its requirements are NOT met.
   */
  export type Invert1 = boolean;
  /**
   * If unset, then this requirement will be met if any of your pets match it.
   */
  export type Pet2 = string;
  /**
   * If set, then this will only trigger if the pet's following state matches this.
   */
  export type Following3 = boolean;
  export type Boss1 = string;
  export type Objective =
    | {
        style: 'Turn-in Items';
        items: Items2;
      }
    | {
        ability: AbilityToUse;
        style: 'Ability Usage';
        ability_quantity?: NumberOfTimes;
        ability_targets?: TargetS;
        objective_id: ObjectiveID;
        ability_requirements?: AbilityUsageRequirements;
      }
    | {
        require_player: RequirePlayerInvolvement;
        destroy_quantity?: Quantity9;
        destroy_targets: TargetS1;
        target_home?: TargetHome;
        destroy_requirements?: DestructionRequirements;
        style: 'Destroy';
        objective_id: ObjectiveID1;
      }
    | {
        consume_quantity: Quantity12;
        style: 'Consume Item';
        consume_items: ItemsToConsume;
        objective_id: ObjectiveID2;
      }
    | {
        style: 'Open Interface';
        objective_id: ObjectiveID3;
        interface: Interface;
      }
    | {
        placement_area?: RequiredArea;
        marker_proximity?: QuestMarkerProximity;
        placement_item: Item7;
        style: 'Place Item';
        objective_id: ObjectiveID4;
        placement_quantity: Quantity13;
      }
    | {
        style: 'Craft Item';
        item_to_craft: ItemToCraft;
        craft_quantity: Quantity14;
        objective_id: ObjectiveID5;
      }
    | {
        style: 'Get Custom Loot';
        items: ItemsToDrop1;
        custom_loot: CustomLootDrops;
      }
    | {
        interact_text?: InteractionText;
        interact_duration?: InteractionDuration;
        interact_targets: TargetS2;
        interact_target_home?: TargetHome1;
        interact_outcomes?: InteractionOutcomes;
        interact_color?: InteractionBarColor;
        interact_quantity?: Quantity17;
        interact_sound?: InteractionFinishSound;
        interact_requirements?: Requirements2;
        style: 'Interact';
        objective_id: ObjectiveID6;
      }
    | {
        style: 'Acquire Item';
        quantity: Quantity18;
        objective_id: ObjectiveID7;
        item: Item8;
      };
  /**
   * How many of this item to turn in.
   */
  export type Quantity6 = number;
  /**
   * The player must use this ability to meet the quest objective.
   */
  export type AbilityToUse = string;
  /**
   * How many times the ability must be used to meet the quest objective.
   */
  export type NumberOfTimes = number;
  /**
   * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
   */
  export type Combatants = boolean;
  /**
   * If any of the items are tags, you can require that the targeted item have every tag in the list.
   */
  export type RequireAllTags = boolean;
  /**
   * If true, world elements that match this filter will *not* be targeted.
   */
  export type Exclude = boolean;
  /**
   * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
   */
  export type RequireAll2 = boolean;
  export type Quantity7 = number;
  /**
   * A unique number used to save and load this objective's progress to/from disk.
   */
  export type ObjectiveID = number;
  export type AbilityUsageRequirement =
    | {
        time: Time2;
        style: 'Time';
      }
    | {
        style: 'Artisan Following';
        artisan?: Artisan3;
        following: Following4;
      }
    | {
        style: 'Equipped';
        item: Item5;
      }
    | {
        style: 'Items Owned';
        items_owned: Items4;
      }
    | {
        style: 'Area';
        area: AreaToCheck2;
        item_id: Entity2;
      }
    | {
        stage?: PetStage3;
        style: 'Pet';
        pet?: Pet3;
        following?: Following5;
      };
  export type Time2 = 'Day' | 'Night';
  /**
   * Leave unset to query whether any artisans are either following or not following. Otherwise, this will query the specific artisan you have chosen.
   */
  export type Artisan3 = string;
  /**
   * If false, then this will only trigger if the artisan is not following.
   */
  export type Following4 = boolean;
  /**
   * The player must be wearing this item.
   */
  export type Item5 = string;
  export type Quantity8 = number;
  export type AreaToCheck2 = string;
  /**
   * The entity that must be in the area for the requirement to pass.
   */
  export type Entity2 = string;
  /**
   * If unset, then this requirement will be met if any of your pets match it.
   */
  export type Pet3 = string;
  /**
   * If set, then this will only trigger if the pet's following state matches this.
   */
  export type Following5 = boolean;
  /**
   * If checked, this will require the player (or something the player created/owns) to destroy the target. Otherwise, any kind of destruction will count.
   */
  export type RequirePlayerInvolvement = boolean;
  /**
   * How many things must be destroyed.
   */
  export type Quantity9 = number;
  /**
   * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
   */
  export type Combatants1 = boolean;
  /**
   * If any of the items are tags, you can require that the targeted item have every tag in the list.
   */
  export type RequireAllTags1 = boolean;
  /**
   * If true, world elements that match this filter will *not* be targeted.
   */
  export type Exclude1 = boolean;
  /**
   * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
   */
  export type RequireAll3 = boolean;
  export type Quantity10 = number;
  /**
   * If set, destruction will only count if the target is originally from this area, even if the target has wandered away.
   */
  export type TargetHome = string;
  export type DestructionRequirement =
    | {
        time: Time3;
        style: 'Time';
      }
    | {
        style: 'Artisan Following';
        artisan?: Artisan4;
        following: Following6;
      }
    | {
        style: 'Equipped';
        item: Item6;
      }
    | {
        style: 'Ability Used';
        ability: Ability;
      }
    | {
        style: 'Items Owned';
        items_owned: Items6;
      }
    | {
        style: 'Area';
        area: AreaToCheck3;
        item_id: Entity3;
      }
    | {
        stage?: PetStage4;
        style: 'Pet';
        pet?: Pet4;
        following?: Following7;
      };
  export type Time3 = 'Day' | 'Night';
  /**
   * Leave unset to query whether any artisans are either following or not following. Otherwise, this will query the specific artisan you have chosen.
   */
  export type Artisan4 = string;
  /**
   * If false, then this will only trigger if the artisan is not following.
   */
  export type Following6 = boolean;
  /**
   * The player must be wearing this item.
   */
  export type Item6 = string;
  /**
   * The destruction will only count if this ability is used to do it.
   */
  export type Ability = string;
  export type Quantity11 = number;
  export type AreaToCheck3 = string;
  /**
   * The entity that must be in the area for the requirement to pass.
   */
  export type Entity3 = string;
  /**
   * If unset, then this requirement will be met if any of your pets match it.
   */
  export type Pet4 = string;
  /**
   * If set, then this will only trigger if the pet's following state matches this.
   */
  export type Following7 = boolean;
  /**
   * A unique number used to save and load this objective's progress to/from disk.
   */
  export type ObjectiveID1 = number;
  /**
   * How many items must be consumed.
   */
  export type Quantity12 = number;
  /**
   * A unique number used to save and load this objective's progress to/from disk.
   */
  export type ObjectiveID2 = number;
  /**
   * A unique number used to save and load this objective's progress to/from disk.
   */
  export type ObjectiveID3 = number;
  /**
   * Once the player has viewed this interface, the quest objective will be completed.
   */
  export type Interface =
    | 'Build Mode'
    | 'Insights'
    | 'Crafting'
    | 'Comforts'
    | 'Home'
    | 'Death'
    | 'Quests'
    | 'Equipment'
    | 'Map'
    | 'Teleport List'
    | 'Teleport Sequence'
    | 'Pet'
    | 'Death to Boss';
  /**
   * Where this item must be placed.
   */
  export type RequiredArea = string;
  export type ProximityGridSpaces = number;
  export type Item7 = string;
  /**
   * A unique number used to save and load this objective's progress to/from disk.
   */
  export type ObjectiveID4 = number;
  /**
   * How many of this item must be placed.
   */
  export type Quantity13 = number;
  export type ItemToCraft = string;
  /**
   * How many of this item must be crafted.
   */
  export type Quantity14 = number;
  /**
   * A unique number used to save and load this objective's progress to/from disk.
   */
  export type ObjectiveID5 = number;
  /**
   * How many of this item will drop. Once the player has all of these items, this objective will be considered complete.
   */
  export type Quantity15 = number;
  /**
   * When this loot group is able to drop.
   */
  export type TimeOfDay = 'Always' | 'Day' | 'Night';
  /**
   * What event will cause this loot to drop.
   */
  export type Trigger = 'Death' | 'Damage';
  export type Max = number;
  export type Min = number;
  /**
   * The probability for this loot group to occur.
   */
  export type DropChance = number;
  export type EnglishText5 = string;
  /**
   * How long the player must interact with the target to complete this objective.
   */
  export type InteractionDuration = number;
  /**
   * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
   */
  export type Combatants2 = boolean;
  /**
   * If any of the items are tags, you can require that the targeted item have every tag in the list.
   */
  export type RequireAllTags2 = boolean;
  /**
   * If true, world elements that match this filter will *not* be targeted.
   */
  export type Exclude2 = boolean;
  /**
   * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
   */
  export type RequireAll4 = boolean;
  export type Quantity16 = number;
  /**
   * If set, interaction will only count if the target is originally from this area, even if the target has wandered away.
   */
  export type TargetHome1 = string;
  export type QuestInteractionOutcome =
    | {
        datafield: Datafield;
        type: 'Set Datafield';
        value: Value;
      }
    | {
        type: 'Destroy';
      };
  export type Datafield = string;
  /**
   * The new value to set the datafield to.
   */
  export type Value = number;
  export type Green = number;
  export type Red = number;
  export type Blue = number;
  /**
   * How many times the player must perform this interaction.
   */
  export type Quantity17 = number;
  /**
   * The sound that will play when the player finishes interacting with the target.
   */
  export type InteractionFinishSound = string;
  /**
   * A unique number used to save and load this objective's progress to/from disk.
   */
  export type ObjectiveID6 = number;
  /**
   * How many of this item to acquire.
   */
  export type Quantity18 = number;
  /**
   * A unique number used to save and load this objective's progress to/from disk.
   */
  export type ObjectiveID7 = number;
  /**
   * Which item must be acquired. Note that this objective only counts items acquired after you have started the quest.
   */
  export type Item8 = string;
  export type EnglishText6 = string;
  export type Emoji2 = string;
  export type Speaker1 = string;
  export type Green1 = number;
  export type Red1 = number;
  export type Blue1 = number;
  export type EnglishText7 = string;
  /**
   * Explain this text to help with localization and development.
   */
  export type TranslatorHelperText2 = string;
  export type QuestMarker = string;
  /**
   * If set, this sprite will be drawn alongside the quest marker text.
   */
  export type Sprite = string;
  /**
   * If set, the text will only appear if the player is within this distance of the quest marker.
   */
  export type Proximity = number;
  export type Storyline1 = string;
  /**
   * The interactor can optionally check for distance to an entity other than the player.
   */
  export type AutomaticInteractionTarget = string;
  /**
   * For automatic interactions, whether this interaction will only occur if it is in the same room as the interaction target.
   */
  export type RequireSameRoom = boolean;
  /**
   * Who or what must be present for this quest to advance.
   */
  export type Initiator = string;
  /**
   * If the requirements are met, this interactor will be shown on the world map.
   */
  export type ShowOnMap = boolean;
  /**
   * How far away from the interaction target (in grid spaces) the quest giver will automatically begin speaking.
   */
  export type AutomaticInteractionProximity = number;
  /**
   * For sorting in the Game Changer.
   */
  export type Order = number;
  export type Name1 = string;
  /**
   * The interactor can optionally check for distance to an entity other than the player.
   */
  export type AutomaticInteractionTarget1 = string;
  /**
   * For automatic interactions, whether this interaction will only occur if it is in the same room as the interaction target.
   */
  export type RequireSameRoom1 = boolean;
  /**
   * Who or what must be present for this quest to advance.
   */
  export type Initiator1 = string;
  /**
   * If the requirements are met, this interactor will be shown on the world map.
   */
  export type ShowOnMap1 = boolean;
  /**
   * How far away from the interaction target (in grid spaces) the quest giver will automatically begin speaking.
   */
  export type AutomaticInteractionProximity1 = number;
  export type QuestMoment1 =
    | {
        requirements?: MomentRequirements;
        style: 'Dialogue';
        speech: {
          text: {
            text: EnglishText8;
          };
          speaker: Speaker2;
          emotion?: Emoji3;
        };
      }
    | {
        requirements?: MomentRequirements;
        emotes: Emotes1;
        style: 'Emote';
      }
    | {
        style: 'Gain Item';
        bonus?: ItemsAreBonus2;
        items: ItemsToGain1;
      }
    | {
        style: 'Pin';
        pin: WhatToPin1;
      }
    | {
        style: 'Artisan Follow';
        artisan: Buddy1;
      }
    | {
        style: 'Drop Item';
        bonus?: ItemsAreBonus3;
        drops: Drops1;
      }
    | {
        style: 'Artisan Stop Following';
        artisan: Artisan5;
      }
    | {
        style: 'Set Area Discovered';
        area: Area1;
      }
    | {
        quest_to_close: Quest2;
        style: 'Close a Quest';
      }
    | {
        style: 'Pause';
        pause_duration: PauseSeconds1;
      }
    | {
        style: 'Camera Target Set';
        camera_target: CameraTargetEntity1;
      }
    | {
        style: 'Camera Target Unset';
      }
    | {
        style: 'Camera Zoom';
        zoom_amount: ZoomAmount1;
      };
  export type EnglishText8 = string;
  export type Speaker2 = string;
  export type Emoji3 = string;
  export type Character1 = string;
  export type Emoji4 = string;
  /**
   * If checked, these items will not be included in the progression map.
   */
  export type ItemsAreBonus2 = boolean;
  export type Quantity19 = number;
  export type WhatToPin1 = string;
  export type Buddy1 = string;
  /**
   * If checked, these items will not be included in the progression map.
   */
  export type ItemsAreBonus3 = boolean;
  /**
   * Who or what will drop these items. If not present, the items will fly out of the player.
   */
  export type Dropper1 = string;
  export type Quantity20 = number;
  export type Item9 = string;
  export type Artisan5 = string;
  export type Area1 = string;
  /**
   * This quest will be set as 'complete', regardless of whether it has been started or not. Its end moments will be skipped.
   */
  export type Quest2 = string;
  /**
   * How long to pause before moving to the next quest moment.
   */
  export type PauseSeconds1 = number;
  export type CameraTargetEntity1 = string;
  /**
   * Higher number means you can see more.
   */
  export type ZoomAmount1 = number;
  /**
   * If true, this quest will not be shown in the progression map.
   */
  export type IgnoreInProgressionMap = boolean;
  /**
   * If 0, this text will just display next to a point on the map. Otherwise, it will appear inside a radius.
   */
  export type RadiusGridSpaces = number;
  export type EnglishText9 = string;
  export type QuestMarker1 = string;

  export interface Schemas {
    storyline: Storyline;
    quest: Quest;
  }
  export interface Storyline {
    wip?: WIP;
    name: Name;
    icon?: Icon;
    description?: Description;
  }
  /**
   * Here you can indicate aspects of this element that should be considered a 'work in progress.' This means that it has elements that are either unfinished or need to be reworked.
   */
  export interface WIP {
    mechanics: MechanicsNeeded;
    audio: AudioNeeded;
    text: TextNeeded;
    balance: BalanceNeeded;
    integration: IntegrationNeeded;
    comments?: Comments;
    draft: MoteIsDraft;
    visuals: VisualsNeeded;
  }
  /**
   * Leave comments to explain tasks or things that need to be done to no longer consider this element 'WIP'.
   */
  export interface Comments {
    [k: string]: {
      element?: string;
      order?: number;
    };
  }
  export interface Name {
    text: EnglishText;
    description?: TranslatorHelperText;
  }
  /**
   * If set, this description will appear at the top of the Storyline when it is being inspected.
   */
  export interface Description {
    text: EnglishText1;
    description?: TranslatorHelperText1;
  }
  export interface Quest {
    pet_quest?: PetQuest;
    quest_start_log?: QuestLogSummary;
    quest_start_moments?: QuestStartMoments;
    quest_end_requirements?: Requirements;
    objectives?: Objectives;
    clues?: Clues;
    marker_world_text?: QuestMarkerWorldText;
    wip?: WIP;
    item_highlights?: WorldElementHighlights;
    storyline: Storyline1;
    quest_giver?: QuestGiver;
    order: Order;
    quest_start_requirements?: Requirements4;
    name: Name1;
    quest_receiver?: QuestReceiver;
    quest_end_moments?: QuestEndMoments;
    ignore_in_progression_map?: IgnoreInProgressionMap;
    priors?: ProgressionPriors;
    map_markers?: MapMarkers;
  }
  /**
   * If set, this quest will be considered a 'pet quest'. Progress toward this quest will only occur if you have the specified pet with you.
   */
  export interface PetQuest {
    pet?: Pet;
    name?: ShortName;
    pet_stage?: PetStage;
  }
  /**
   * The name of this quest as displayed in the pet UI. Should be quite short.
   */
  export interface ShortName {
    text: EnglishText2;
  }
  export interface QuestLogSummary {
    text: EnglishText3;
  }
  /**
   * A sequence of narrative events to tell the story of this quest.
   */
  export interface QuestStartMoments {
    [k: string]: {
      element?: QuestMoment;
      order?: number;
    };
  }
  /**
   * Conditions that must be true for the quest to proceed.
   */
  export interface MomentRequirements {
    [k: string]: {
      element?: Requirement;
      order?: number;
    };
  }
  /**
   * The player must have at least these quantities of these items.
   */
  export interface Items {
    [k: string]: {
      element?: {
        key?: string;
        value?: Quantity;
      };
      order?: number;
    };
  }
  export interface InventoryEvaluation {
    [k: string]: {
      element?: {
        value1?: Quantity1;
        value0?: Item1;
        comparison?: '==' | '!=' | '<' | '<=' | '>' | '>=';
      };
      order?: number;
    };
  }
  /**
   * Conditions that must be true for the quest to proceed.
   */
  export interface MomentRequirements1 {
    [k: string]: {
      element?: Requirement;
      order?: number;
    };
  }
  export interface PetStage1 {
    stage?: 'Egg' | 'Baby' | 'Adult' | 'Embiggened';
    comparison?: '==' | '!=' | '<' | '<=' | '>' | '>=';
  }
  export interface Entities {
    [k: string]: {
      element?: EntityType;
      order?: number;
    };
  }
  /**
   * Characters or actors can convey emojis.
   */
  export interface Emotes {
    [k: string]: {
      element?: {
        key?: Character;
        value?: Emoji1;
      };
      order?: number;
    };
  }
  export interface ItemsToGain {
    [k: string]: {
      element?: {
        key?: string;
        value?: Quantity2;
      };
      order?: number;
    };
  }
  /**
   * Characters can throw items out onto the ground.
   */
  export interface Drops {
    [k: string]: {
      element?: {
        dropper?: Dropper;
        items?: ItemsToDrop;
      };
      order?: number;
    };
  }
  export interface ItemsToDrop {
    [k: string]: {
      element?: {
        quantity?: Quantity3;
        item_id?: Item2;
      };
      order?: number;
    };
  }
  /**
   * Conditions that must be true for the quest to proceed.
   */
  export interface Requirements {
    [k: string]: {
      element?: Requirement1;
      order?: number;
    };
  }
  /**
   * The player must have at least these quantities of these items.
   */
  export interface Items1 {
    [k: string]: {
      element?: {
        key?: string;
        value?: Quantity4;
      };
      order?: number;
    };
  }
  export interface InventoryEvaluation1 {
    [k: string]: {
      element?: {
        value1?: Quantity5;
        value0?: Item4;
        comparison?: '==' | '!=' | '<' | '<=' | '>' | '>=';
      };
      order?: number;
    };
  }
  /**
   * Conditions that must be true for the quest to proceed.
   */
  export interface Requirements1 {
    [k: string]: {
      element?: Requirement1;
      order?: number;
    };
  }
  export interface PetStage2 {
    stage?: 'Egg' | 'Baby' | 'Adult' | 'Embiggened';
    comparison?: '==' | '!=' | '<' | '<=' | '>' | '>=';
  }
  export interface Objectives {
    [k: string]: {
      element?: Objective;
      order?: number;
    };
  }
  export interface Items2 {
    [k: string]: {
      element?: {
        key?: string;
        value?: Quantity6;
      };
      order?: number;
    };
  }
  /**
   * The ability must be used on targets that match these filters to count towards the objective.
   */
  export interface TargetS {
    [k: string]: {
      element?: Filter;
      order?: number;
    };
  }
  export interface Filter {
    combatants_only?: Combatants;
    datafield_evaluations?: DatafieldEvaluations;
    require_all_tags?: RequireAllTags;
    exclude?: Exclude;
    buffs?: Buffs;
    items?: Items3;
  }
  /**
   * If set, only items whose datafields meet these criteria will be targeted.
   */
  export interface DatafieldEvaluations {
    [k: string]: {
      element?: {
        value1?: number;
        value0?: string;
        comparison?: '==' | '!=' | '<' | '<=' | '>' | '>=';
      };
      order?: number;
    };
  }
  export interface Buffs {
    buffs: Buffs1;
    require_all: RequireAll2;
    stacks?: Stacks;
  }
  export interface Buffs1 {
    [k: string]: {
      element?: string;
      order?: number;
    };
  }
  /**
   * The buffs found must match this stack requirement.
   */
  export interface Stacks {
    value1?: Quantity7;
    comparison?: '==' | '!=' | '<' | '<=' | '>' | '>=';
  }
  export interface Items3 {
    [k: string]: {
      element?: string;
      order?: number;
    };
  }
  /**
   * Progress toward this objective will only count if these requirements are met at the time of using the ability.
   */
  export interface AbilityUsageRequirements {
    [k: string]: {
      element?: AbilityUsageRequirement;
      order?: number;
    };
  }
  /**
   * The player must have at least these quantities of these items.
   */
  export interface Items4 {
    [k: string]: {
      element?: {
        key?: string;
        value?: Quantity8;
      };
      order?: number;
    };
  }
  export interface PetStage3 {
    stage?: 'Egg' | 'Baby' | 'Adult' | 'Embiggened';
    comparison?: '==' | '!=' | '<' | '<=' | '>' | '>=';
  }
  /**
   * Destruction of targets that match these filters will count towards the objective.
   */
  export interface TargetS1 {
    [k: string]: {
      element?: Filter1;
      order?: number;
    };
  }
  export interface Filter1 {
    combatants_only?: Combatants1;
    datafield_evaluations?: DatafieldEvaluations1;
    require_all_tags?: RequireAllTags1;
    exclude?: Exclude1;
    buffs?: Buffs2;
    items?: Items5;
  }
  /**
   * If set, only items whose datafields meet these criteria will be targeted.
   */
  export interface DatafieldEvaluations1 {
    [k: string]: {
      element?: {
        value1?: number;
        value0?: string;
        comparison?: '==' | '!=' | '<' | '<=' | '>' | '>=';
      };
      order?: number;
    };
  }
  export interface Buffs2 {
    buffs: Buffs3;
    require_all: RequireAll3;
    stacks?: Stacks1;
  }
  export interface Buffs3 {
    [k: string]: {
      element?: string;
      order?: number;
    };
  }
  /**
   * The buffs found must match this stack requirement.
   */
  export interface Stacks1 {
    value1?: Quantity10;
    comparison?: '==' | '!=' | '<' | '<=' | '>' | '>=';
  }
  export interface Items5 {
    [k: string]: {
      element?: string;
      order?: number;
    };
  }
  /**
   * Progress toward this objective will only count if these requirements are met at the time of destruction.
   */
  export interface DestructionRequirements {
    [k: string]: {
      element?: DestructionRequirement;
      order?: number;
    };
  }
  /**
   * The player must have at least these quantities of these items.
   */
  export interface Items6 {
    [k: string]: {
      element?: {
        key?: string;
        value?: Quantity11;
      };
      order?: number;
    };
  }
  export interface PetStage4 {
    stage?: 'Egg' | 'Baby' | 'Adult' | 'Embiggened';
    comparison?: '==' | '!=' | '<' | '<=' | '>' | '>=';
  }
  /**
   * Any of these items will count toward this consumption objective.
   */
  export interface ItemsToConsume {
    [k: string]: {
      element?: string;
      order?: number;
    };
  }
  /**
   * You can require this item be placed within a certain distance of a quest marker.
   */
  export interface QuestMarkerProximity {
    quest_marker?: string;
    proximity?: ProximityGridSpaces;
  }
  export interface ItemsToDrop1 {
    [k: string]: {
      element?: {
        key?: string;
        value?: Quantity15;
      };
      order?: number;
    };
  }
  /**
   * You can optionally force certain things in the world to drop the items in this quest objective while this quest is active.
   */
  export interface CustomLootDrops {
    [k: string]: {
      element?: CustomLoot;
      order?: number;
    };
  }
  export interface CustomLoot {
    loot?: LootGroup;
    sources?: Sources;
  }
  export interface LootGroup {
    time_requirement?: TimeOfDay;
    item_tags_used?: ItemTagsUsed;
    item_ids_used?: ItemsUsed;
    trigger: Trigger;
    num_drops?: DropQuantity;
    areas?: Areas;
    drop_chance: DropChance;
  }
  /**
   * The kinds of items required to be used on this for loot to drop.
   */
  export interface ItemTagsUsed {
    [k: string]: {
      element?: string;
      order?: number;
    };
  }
  /**
   * Specific items required to be used on this for loot to drop.
   */
  export interface ItemsUsed {
    [k: string]: {
      element?: string;
      order?: number;
    };
  }
  /**
   * A random number of items will drop in this range. Once the player has acquired the req
   */
  export interface DropQuantity {
    value1?: Max;
    value0?: Min;
  }
  /**
   * If set, the loot will only drop from something within the listed areas.
   */
  export interface Areas {
    [k: string]: {
      element?: string;
      order?: number;
    };
  }
  /**
   * What's going to drop this loot?
   */
  export interface Sources {
    [k: string]: {
      element?: string;
      order?: number;
    };
  }
  /**
   * The text that will appear when the player interacts with the target.
   */
  export interface InteractionText {
    text: EnglishText5;
  }
  /**
   * The player must interact with a target that matches this filter.
   */
  export interface TargetS2 {
    [k: string]: {
      element?: Filter2;
      order?: number;
    };
  }
  export interface Filter2 {
    combatants_only?: Combatants2;
    datafield_evaluations?: DatafieldEvaluations2;
    require_all_tags?: RequireAllTags2;
    exclude?: Exclude2;
    buffs?: Buffs4;
    items?: Items7;
  }
  /**
   * If set, only items whose datafields meet these criteria will be targeted.
   */
  export interface DatafieldEvaluations2 {
    [k: string]: {
      element?: {
        value1?: number;
        value0?: string;
        comparison?: '==' | '!=' | '<' | '<=' | '>' | '>=';
      };
      order?: number;
    };
  }
  export interface Buffs4 {
    buffs: Buffs5;
    require_all: RequireAll4;
    stacks?: Stacks2;
  }
  export interface Buffs5 {
    [k: string]: {
      element?: string;
      order?: number;
    };
  }
  /**
   * The buffs found must match this stack requirement.
   */
  export interface Stacks2 {
    value1?: Quantity16;
    comparison?: '==' | '!=' | '<' | '<=' | '>' | '>=';
  }
  export interface Items7 {
    [k: string]: {
      element?: string;
      order?: number;
    };
  }
  export interface InteractionOutcomes {
    [k: string]: {
      element?: QuestInteractionOutcome;
      order?: number;
    };
  }
  /**
   * The color of the progress bar that will appear when the player interacts with the target.
   */
  export interface InteractionBarColor {
    g?: Green;
    r?: Red;
    b?: Blue;
  }
  /**
   * Conditions that must be true for the quest to proceed.
   */
  export interface Requirements2 {
    [k: string]: {
      element?: Requirement1;
      order?: number;
    };
  }
  /**
   * Things characters can say about this quest while the quest is active.
   */
  export interface Clues {
    [k: string]: {
      element?: {
        phrases?: Phrases;
        speaker?: Speaker1;
      };
      order?: number;
    };
  }
  export interface Phrases {
    [k: string]: {
      element?: Clue;
      order?: number;
    };
  }
  export interface Clue {
    requirements?: Requirements3;
    phrase: {
      text: Text;
      emoji?: Emoji2;
    };
  }
  /**
   * Conditions that must be true for the quest to proceed.
   */
  export interface Requirements3 {
    [k: string]: {
      element?: Requirement1;
      order?: number;
    };
  }
  export interface Text {
    text: EnglishText6;
  }
  /**
   * You can display text in the world while this quest is active.
   */
  export interface QuestMarkerWorldText {
    [k: string]: {
      element?: QuestMarkerText;
      order?: number;
    };
  }
  export interface QuestMarkerText {
    color?: TextColor;
    text: Text1;
    marker: QuestMarker;
    sprite?: Sprite;
    proximity?: Proximity;
  }
  export interface TextColor {
    g?: Green1;
    r?: Red1;
    b?: Blue1;
  }
  export interface Text1 {
    text: EnglishText7;
    description?: TranslatorHelperText2;
  }
  /**
   * Items to have a glow underneath them while this quest is active.
   */
  export interface WorldElementHighlights {
    [k: string]: {
      element?: string;
      order?: number;
    };
  }
  /**
   * Who/what triggers the quest. If no giver is present, the quest will automatically trigger once requirements are met.
   */
  export interface QuestGiver {
    interaction_target?: AutomaticInteractionTarget;
    same_room?: RequireSameRoom;
    item: Initiator;
    show_on_map?: ShowOnMap;
    proximity?: AutomaticInteractionProximity;
  }
  /**
   * Conditions that must be true for the quest to proceed.
   */
  export interface Requirements4 {
    [k: string]: {
      element?: Requirement1;
      order?: number;
    };
  }
  /**
   * Who/what triggers the quest. If no giver is present, the quest will automatically trigger once requirements are met.
   */
  export interface QuestReceiver {
    interaction_target?: AutomaticInteractionTarget1;
    same_room?: RequireSameRoom1;
    item: Initiator1;
    show_on_map?: ShowOnMap1;
    proximity?: AutomaticInteractionProximity1;
  }
  /**
   * A sequence of narrative events to tell the story of this quest.
   */
  export interface QuestEndMoments {
    [k: string]: {
      element?: QuestMoment1;
      order?: number;
    };
  }
  /**
   * Characters or actors can convey emojis.
   */
  export interface Emotes1 {
    [k: string]: {
      element?: {
        key?: Character1;
        value?: Emoji4;
      };
      order?: number;
    };
  }
  export interface ItemsToGain1 {
    [k: string]: {
      element?: {
        key?: string;
        value?: Quantity19;
      };
      order?: number;
    };
  }
  /**
   * Characters can throw items out onto the ground.
   */
  export interface Drops1 {
    [k: string]: {
      element?: {
        dropper?: Dropper1;
        items?: ItemsToDrop2;
      };
      order?: number;
    };
  }
  export interface ItemsToDrop2 {
    [k: string]: {
      element?: {
        quantity?: Quantity20;
        item_id?: Item9;
      };
      order?: number;
    };
  }
  /**
   * When viewing the progression tree, are there certain items you would consider to be prerequisites to this item?
   */
  export interface ProgressionPriors {
    [k: string]: {
      element?: string;
      order?: number;
    };
  }
  /**
   * You can optionally have certain Quest Markers display on the world map while this quest is active.
   */
  export interface MapMarkers {
    [k: string]: {
      element?: MapMarker;
      order?: number;
    };
  }
  export interface MapMarker {
    radius: RadiusGridSpaces;
    text: TextForWorldMap;
    marker: QuestMarker1;
  }
  export interface TextForWorldMap {
    text: EnglishText9;
  }
}
