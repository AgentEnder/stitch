export namespace Crashlands2 {
	/* eslint-disable */
	/**
	 * This file was automatically generated by json-schema-to-typescript.
	 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
	 * and run json-schema-to-typescript to regenerate this file.
	 */
	
	export type DoorOpenSound = string;
	export type WorldSprite = string;
	export type DoorCloseSound = string;
	export type UIIcon = string;
	/**
	 * Whether the object can be passed through or not. Solid objects cannot move, and they use the grid for collisions. So if a solid object is much smaller than a grid space, it will cause visual confusion. If the item is larger than a grid space, it will become a 2x2 or 3x3, etc... to fit.
	 */
	export type Solid = boolean;
	export type Width = number;
	export type Height = number;
	/**
	 * The type of hitbox to use. This will influence collisions, as well as how the object intercepts mouse clicks.
	 */
	export type Type = "Cylinder" | "Cone" | "Box" | "Pyramid";
	export type EnglishText = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText = string;
	/**
	 * Check this if the element needs to have some of its numbers tuned to make it more or less challenging to engage with.
	 */
	export type BalanceNeeded = boolean;
	/**
	 * Check this if some aspect of this element's text fields are unfinished or need reworking.
	 */
	export type TextNeeded = boolean;
	/**
	 * Check this if the element needs to be added to the game in a way that the player can access it as intended.
	 */
	export type IntegrationNeeded = boolean;
	/**
	 * Check this if some aspect of this element's audio elements are unfinished or need reworking.
	 */
	export type AudioNeeded = boolean;
	/**
	 * Check this if this element is under heavy iteration and shouldn't be viewed as a fully functional element.
	 */
	export type MoteIsDraft = boolean;
	/**
	 * Check this if some aspect of this element's visuals are unfinished or need reworking.
	 */
	export type VisualsNeeded = boolean;
	/**
	 * Check this if some aspect of this element's mechanics or logic are unfinished or need reworking.
	 */
	export type MechanicsNeeded = boolean;
	export type EnglishText1 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText1 = string;
	/**
	 * If false, the object will always render itself at its normal color and won't be darkened or brightened by lighting.
	 */
	export type UseLighting = boolean;
	export type WorldSprite1 = string;
	export type Blue = number;
	export type Red = number;
	export type Green = number;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed = number;
	export type Affects = "Brightness" | "Radius";
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude = number;
	export type Brightness = number;
	/**
	 * The number of tiles that the light will illuminate (although it does fade out at the edges).
	 */
	export type TileRadius = number;
	export type Width1 = number;
	export type Height1 = number;
	export type UIIcon1 = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup = string;
	export type OutputQuantity = number;
	export type ResearchNode = string;
	export type Style = "Additive" | "Multiplicative";
	export type ChangePerPoint = number;
	/**
	 * What workstation the player must be near to craft this recipe.
	 */
	export type Station = string;
	export type ResearchNode1 = string;
	export type ChangePerPoint1 = number;
	export type UnlockedBy = string;
	/**
	 * Change this number to increase or decrease the number of materials required to craft this item.
	 */
	export type EffortModifier = number;
	export type EnglishText2 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText2 = string;
	export type EnglishText3 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText3 = string;
	/**
	 * Structural base items will vote on their preferred roof. The roof type with the most votes will be displayed.
	 */
	export type PreferredRoof = string;
	export type WorldSprite2 = string;
	export type UIIcon2 = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup1 = string;
	export type OutputQuantity1 = number;
	export type ResearchNode2 = string;
	export type Style1 = "Additive" | "Multiplicative";
	export type ChangePerPoint2 = number;
	/**
	 * What workstation the player must be near to craft this recipe.
	 */
	export type Station1 = string;
	export type ResearchNode3 = string;
	export type ChangePerPoint3 = number;
	export type UnlockedBy1 = string;
	/**
	 * Change this number to increase or decrease the number of materials required to craft this item.
	 */
	export type EffortModifier1 = number;
	/**
	 * The sound to play when this is placed in the editor or in Build Mode.
	 */
	export type PlacementSound = string;
	export type EnglishText4 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText4 = string;
	export type EnglishText5 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText5 = string;
	export type Blue1 = number;
	export type Red1 = number;
	export type Green1 = number;
	/**
	 * For saving in the binary file. This does not affect phase order -- it is only for saving/loading.
	 */
	export type UniqueID = number;
	/**
	 * A quest that must be completed to unlock this phase.
	 */
	export type UnlockedBy2 = string;
	export type TransitionVisuals =
	  | {
	      color: FullscreenColor;
	      fade_end_seconds: FadeEndSeconds;
	      fade_hold_seconds: FadeHoldSeconds;
	      text_overlay?: TextOverlay;
	      fade_start_seconds: FadeStartSeconds;
	      fullscreen: 1;
	    }
	  | {
	      effects?: Effects;
	      fullscreen: 0;
	    };
	export type Blue2 = number;
	export type Red2 = number;
	export type Green2 = number;
	/**
	 * How long to fade back to normal view.
	 */
	export type FadeEndSeconds = number;
	/**
	 * How long to hold the vew on the designated color. The scene transition will occur halfway through this hold.
	 */
	export type FadeHoldSeconds = number;
	export type EnglishText6 = string;
	/**
	 * How long to fade to the designated color.
	 */
	export type FadeStartSeconds = number;
	export type VisualEffect =
	  | {
	      effect_type: "Ground Decal";
	      decal_sprite: DecalSprite;
	      decal_duration?: DecalDurationSeconds;
	      decal_max_alpha?: MaxAlpha;
	      decal_scale?: DecalScale;
	    }
	  | {
	      explosion_z_offset?: ZOffset;
	      effect_type: "Explosion";
	      explosion_random_delay?: RandomDelaySeconds;
	      explosion_random_distance?: RandomDistanceGridSpaces;
	      explosion_smoke?: ShowSmoke;
	      explosion_sound?: Sound;
	      explosion_scale?: ExplosionScale;
	      explosion_highlight_color?: HighlightColor;
	      explosion_color: BaseColor;
	      explosion_y_offset?: YOffset;
	      explosion_slomo_burst: SlowMotionPulse;
	    }
	  | {
	      effect_type: "Particle System Burst";
	      particle_system_z_offset?: ZOffset1;
	      particle_system: ParticleSystem;
	      particle_system_y_offset?: YOffset1;
	      particle_system_emitter_scale?: EmitterScale;
	    };
	/**
	 * This sprite will be drawn subtractively.
	 */
	export type DecalSprite = string;
	export type Min = number;
	export type Max = number;
	export type MaxAlpha = number;
	export type Min1 = number;
	export type Max1 = number;
	/**
	 * If spawning on the ground, this will be height above ground. If spawning on targets, it will spawn at their height midpoints, plus this offset.
	 */
	export type ZOffset = number;
	export type Min2 = number;
	export type Max2 = number;
	export type Min3 = number;
	export type Max3 = number;
	/**
	 * If true, smoke will be spawned at the explosion location.
	 */
	export type ShowSmoke = boolean;
	/**
	 * There is a default explosion sound, but you can override it here.
	 */
	export type Sound = string;
	export type Min4 = number;
	export type Max4 = number;
	export type Blue3 = number;
	export type Red3 = number;
	export type Green3 = number;
	export type Blue4 = number;
	export type Red4 = number;
	export type Green4 = number;
	/**
	 * Can be useful for depth-sorting. For example, a Y offset of 1 will spawn the explosion in front of whatever is explosing.
	 */
	export type YOffset = number;
	/**
	 * If true, there will be a brief slow-down of the game when the explosion occurs to make it feel more impactful. Use sparingly.
	 */
	export type SlowMotionPulse = boolean;
	/**
	 * If spawning on the ground, this will be height above ground. If spawning on targets, it will spawn at their height midpoints, plus this offset.
	 */
	export type ZOffset1 = number;
	export type ParticleSystem = string;
	/**
	 * Can be useful for depth-sorting. For example, a Y offset of 1 will spawn the explosion in front of whatever is explosing.
	 */
	export type YOffset1 = number;
	export type EmitterScale = number;
	/**
	 * If checked, these transition effects will play on tiles that have changed.
	 */
	export type PlayOnTiles = boolean;
	/**
	 * The chance that the effect will play on a given target.
	 */
	export type Chance = number;
	/**
	 * If checked, these transition effects will play on entities that have changed.
	 */
	export type PlayOnEntities = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll = boolean;
	export type Quantity = number;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants = boolean;
	export type PhaseNameInternal = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup2 = string;
	/**
	 * Describe what this scene is for (for other developers).
	 */
	export type DescriptionInternal = string;
	export type EnglishText7 = string;
	export type Min5 = number;
	export type Max5 = number;
	export type EarpartyGroup = string;
	/**
	 * The sound's pitch will randomly fluctuate each time it is played by +/- this percentage.
	 */
	export type Variability = number;
	/**
	 * To prevent auditory blowout/spam, sound effects can have a cooldown between plays.
	 */
	export type CooldownSeconds = number;
	/**
	 * A random roll to cause the sound effect to sometimes not play when the code calls for it.
	 */
	export type PlayChance = number;
	/**
	 * If the game has run out of sound channels, lower priority sounds will be stopped to play higher priority sounds.
	 */
	export type Priority = number;
	/**
	 * If set, this sound will automatically increment or decrement pitch each time it is played within a certain time frame. If not played for a while, its pitch will reset. Good for making sparkly collection sounds.
	 */
	export type AutoPitch =
	  | {
	      pitchup_per_event?: number;
	      pitchup_max: AutoPitchMaximum;
	    }
	  | {
	      pitchup_per_event?: number;
	      pitchup_min: AutoPitchMinimum;
	    }
	  | {
	      pitchup_per_event?: 0;
	    };
	/**
	 * During auto-pitching, Earparty won't allow the pitch to go above this number.
	 */
	export type AutoPitchMaximum = number;
	/**
	 * During auto-pitching, Earparty won't allow the pitch to go below this number.
	 */
	export type AutoPitchMinimum = number;
	/**
	 * Whether the sound should play as a loop.
	 */
	export type Looping = boolean;
	/**
	 * Each time the Earparty sound is played, EarParty will choose a new variation of the sound this many times before repeating the same variation.
	 */
	export type NonRepeatingInterval = number;
	export type NameFromGMSProject = string;
	/**
	 * The baseline volume of the sound.
	 */
	export type Gain = number;
	/**
	 * The sprite to draw below the main sprite. Subimages must correspond with the Sprite.
	 */
	export type UnderSprite = string;
	/**
	 * The primary sprite of the tile.
	 */
	export type MainSprite = string;
	export type Blue5 = number;
	export type Red5 = number;
	export type Green5 = number;
	/**
	 * This is a large sprite that will be drawn underwater if this tile is at a shoreline. It helps create a sense of the water getting deeper.
	 */
	export type ShelfUnderwaterSprite = string;
	/**
	 * If this tile is against water, the Shoreline Water Sprite will be drawn in the water to convey how the tile interacts with the water.
	 */
	export type ShorelineUnderwaterSprite = string;
	/**
	 * The sprite to use when displaying the tile in the UI (e.g. Build Mode).
	 */
	export type Icon = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup3 = string;
	/**
	 * The sound to play when this tile is placed in the editor or in Build Mode.
	 */
	export type PlacementSound1 = string;
	export type OutputQuantity2 = number;
	export type ResearchNode4 = string;
	export type Style2 = "Additive" | "Multiplicative";
	export type ChangePerPoint4 = number;
	/**
	 * What workstation the player must be near to craft this recipe.
	 */
	export type Station2 = string;
	export type ResearchNode5 = string;
	export type ChangePerPoint5 = number;
	export type UnlockedBy3 = string;
	/**
	 * Change this number to increase or decrease the number of materials required to craft this item.
	 */
	export type EffortModifier2 = number;
	/**
	 * The sound to play when the player walks on this tile.
	 */
	export type FootstepSound = string;
	export type EnglishText8 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText6 = string;
	/**
	 * Whether the tile should be X-flipped randomly when placed.
	 */
	export type Flippable = boolean;
	export type EnglishText9 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText7 = string;
	/**
	 * The probability of a given tile having Dapples on it.
	 */
	export type SpawnChance = number;
	export type Blue6 = number;
	export type Red6 = number;
	export type Green6 = number;
	export type Blue7 = number;
	export type Red7 = number;
	export type Green7 = number;
	/**
	 * If true, this damage type exists as a 'roll up' to categorize other damage types, but isn't usable as a type of damage itself.
	 */
	export type Aggregator = boolean;
	/**
	 * If this damage type is reduced by a stat, link to that stat here.
	 */
	export type ResistanceStat = string;
	/**
	 * If set, then this damage will be counted as a subset of the parent.
	 */
	export type ParentDamageType = string;
	/**
	 * If set, this will dictate if this boost only applies to direct or periodic damage. If unset, it will apply to all damage.
	 */
	export type DirectDamage = boolean;
	/**
	 * Whether the stat should be used as a multiplier or added to the damage. Multipliers will assume the stat is a percentage and will use the formula (1+Stat)*Damage.
	 */
	export type BoostStyle = "Add" | "Multiply";
	/**
	 * If the entity dealing damage has this stat, the damage will be boosted by it.
	 */
	export type BoostingStat = string;
	export type EnglishText10 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText8 = string;
	/**
	 * The object's string ID in the Game Maker project.
	 */
	export type Name5 = string;
	export type EquipmentSet = string;
	export type Action =
	  | {
	      target_entity: TargetEntity;
	      blame?: Blame;
	      ability: Ability;
	      action_type?: "Cast Ability";
	    }
	  | {
	      ability?: Ability1;
	      action_type?: "Finish Ability";
	    }
	  | {
	      ability?: Ability2;
	      action_type?: "Stop Ability";
	    }
	  | {
	      target_entity: SoundLocation;
	      sound: Sound1;
	      voice?: PlayAsVoice;
	      action_type?: "Play a Sound";
	    }
	  | {
	      target_entity: TargetEntity1;
	      damage_modifier?: DamageModifier;
	      buff: Buff;
	      stacks: Stacks1;
	      healing_percentage?: HealingPercentage;
	      action_type?: "Buff";
	    }
	  | {
	      forced_spawning?: IgnoreAllConflicts;
	      require_line_of_sight?: RequireLineOfSight;
	      spawn_item: ThingToSpawn;
	      summoned?: EntityIsSummoned;
	      action_type?: "Create Entity";
	      distance_range?: SpawnDistance;
	      non_overlap: AttemptNonOverlap;
	      spawn_location?: NewEntityLocation;
	    }
	  | {
	      counts_as_death: CountsAsDeath;
	      target_entity: TargetEntity2;
	      drop_loot: DropLoot;
	      action_type?: "Destroy";
	    }
	  | {
	      target_entity?: TargetEntity3;
	      offset: OffsetMinutes;
	      timestamp: Timestamp;
	      action_type?: "Set Timestamp";
	    }
	  | {
	      target_entity?: TargetEntity4;
	      minutes: IncrementMinutes;
	      timestamp: Timestamp1;
	      action_type?: "Increment Timestamp";
	    }
	  | {
	      target_entity?: TargetEntity5;
	      datafield: Datafield;
	      value: Value;
	      action_type?: "Set Datafield";
	    }
	  | {
	      target_entity?: TargetEntity6;
	      datafield: Datafield1;
	      value: Value1;
	      action_type?: "Increment Datafield";
	    }
	  | {
	      badge_modifiers?: InsightDamageModifiers;
	      damage_success_sound?: ImpactSound;
	      target_entity: TargetEntity7;
	      damage_profile: DamageProfile;
	      datafield_modifiers?: DatafieldMultipliers;
	      target_filter?: TargetFilters;
	      damage_failure_sound?: FailureSound;
	      action_type?: "Damage";
	    }
	  | {
	      action_type?: "Refresh State";
	    }
	  | {
	      target_entity: DatafieldOwner1;
	      datafield: Datafield2;
	      action_type?: "Copy Datafield";
	    }
	  | {
	      target_entity: HealingTarget;
	      healing_percentage: HealingPercentage1;
	      action_type?: "Heal";
	    }
	  | {
	      boss_phase: NewBossPhase;
	      action_type?: "Boss Phase Change";
	    }
	  | {
	      target_entity: TargetEntity8;
	      buff_to_remove?: Buff2;
	      negative?: RemoveNegativeBuffs;
	      positive?: RemovePositiveBuffs;
	      stacks?: Stacks3;
	      action_type?: "Remove Buff";
	    }
	  | {
	      target_entity: TargetEntity9;
	      ability?: Ability3;
	      action_type?: "Restore Charge";
	      charges?: Charges;
	    }
	  | {
	      loot_items: LootItems;
	      action_type?: "Drop Loot";
	    }
	  | {
	      visual_effect: VisualEffect1;
	      action_type: "Visual Effect";
	    };
	/**
	 * Which entity to cast this ability on.
	 */
	export type TargetEntity = "Self" | "Other";
	/**
	 * If this ability causes threat, should the threat be attributed to myself, or the 'other' entity (from the trigger)?
	 */
	export type Blame = "Self" | "Other";
	/**
	 * Which ability to cast. Won't cast if already casting it.
	 */
	export type Ability = string;
	/**
	 * Which ability to finish casting, if it's already casting. Won't do anything if the ability is not already casting. If unset, will finish whatever ability is currently casting.
	 */
	export type Ability1 = string;
	/**
	 * Which ability to stop casting, if it's already casting. Won't do anything if the ability is not already casting. If unset, will stop whatever ability is currently casting.
	 */
	export type Ability2 = string;
	/**
	 * Where to play the sound at.
	 */
	export type SoundLocation = "Self" | "Other";
	export type Sound1 = string;
	/**
	 * Only one 'Voice' sound can be playing at a time per Entity.
	 */
	export type PlayAsVoice = boolean;
	/**
	 * Which entity to cast this buff on.
	 */
	export type TargetEntity1 = "Self" | "Other" | "Summoner";
	/**
	 * If set, and if the buff deals damage, this will modify its damage.
	 */
	export type DamageModifier = number;
	export type Buff = string;
	/**
	 * How many stacks of the buff to apply.
	 */
	export type Stacks1 = number;
	/**
	 * If set, and if the buff can heal, this will set how much health it restores (based on the level of the user).
	 */
	export type HealingPercentage = number;
	/**
	 * If set, this entity will spawn wherever you say, regardless of whether that is allowed.
	 */
	export type IgnoreAllConflicts = boolean;
	/**
	 * If false, the new entity can spawn just about anywhere, including in other buildings.
	 */
	export type RequireLineOfSight = boolean;
	export type ThingToSpawn = string;
	/**
	 * 'Summoned' entities exist on behalf of their creators, and their actions will cast blame to the creator. Defaults to false.
	 */
	export type EntityIsSummoned = boolean;
	export type Min6 = number;
	export type Max6 = number;
	/**
	 * Whether spawning will attempt to find a clear space.
	 */
	export type AttemptNonOverlap = boolean;
	/**
	 * Where the new entity will be created.
	 */
	export type NewEntityLocation = "Self" | "Other";
	/**
	 * If false, the destroyed entity will just stop existing. If true, the entity will trigger any Death events and play its death animations.
	 */
	export type CountsAsDeath = boolean;
	/**
	 * Which entity to destroy.
	 */
	export type TargetEntity2 = "Self" | "Other";
	/**
	 * Whether the destroyed entity should drop loot as if it were killed by the player (if possible).
	 */
	export type DropLoot = boolean;
	/**
	 * Which entity's timestamp to set.
	 */
	export type TargetEntity3 = "Self" | "Other";
	/**
	 * By default, the timestamp will be set to the current playtime minutes. You can add an offset to this, so the timestamp will be earlier or later than the current time.
	 */
	export type OffsetMinutes = number;
	export type Timestamp = string;
	/**
	 * Which entity's timestamp to set.
	 */
	export type TargetEntity4 = "Self" | "Other";
	export type IncrementMinutes = number;
	export type Timestamp1 = string;
	/**
	 * Which entity's datafield to set.
	 */
	export type TargetEntity5 = "Self" | "Other";
	export type Datafield = string;
	export type Value = number;
	/**
	 * Which entity's datafield to increment.
	 */
	export type TargetEntity6 = "Self" | "Other";
	export type Datafield1 = string;
	export type Value1 = number;
	export type Insight = string;
	export type ChangePerPoint6 = number;
	export type EnglishText11 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText9 = string;
	/**
	 * This sound will only play if damage is dealt.
	 */
	export type ImpactSound = string;
	/**
	 * Which entity to deal damage to.
	 */
	export type TargetEntity7 = "Self" | "Other";
	/**
	 * Which entity the buff is on.
	 */
	export type BuffTarget = "All Entities" | "Self" | "Target Entity" | "Summoner";
	export type Buff1 = string;
	/**
	 * If true, only buffs created by the caster will be used for damage calculations.
	 */
	export type OwnOnly = boolean;
	/**
	 * If set, this will consume damage from the buff's pool.
	 */
	export type ConsumeDamage = boolean;
	export type Amount = number;
	export type Filter1 = string;
	export type Modifier = number;
	/**
	 * If false, this damage will never crit.
	 */
	export type CanCrit = boolean;
	export type DamageType1 = string;
	export type DamageAmount = number;
	export type DataField = string;
	export type DatafieldOwner = "Self" | "Target Entity";
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll1 = boolean;
	export type Quantity1 = number;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude1 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags1 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants1 = boolean;
	/**
	 * This sound will play if no targets were damaged.
	 */
	export type FailureSound = string;
	/**
	 * The entity from which to copy the data.
	 */
	export type DatafieldOwner1 = "Summoner" | "Other";
	export type Datafield2 = string;
	/**
	 * The entity from which to copy the data.
	 */
	export type HealingTarget = "Self" | "Other";
	/**
	 * How much health to restore, based on % of typical max health for things of that level.
	 */
	export type HealingPercentage1 = number;
	/**
	 * Which boss phase to change to. This will only work if you are currently fighting the boss to whom this phase belongs.
	 */
	export type NewBossPhase = string;
	/**
	 * Which entity to cast this buff on.
	 */
	export type TargetEntity8 = "Self" | "Other";
	export type Buff2 = string;
	export type RemoveNegativeBuffs = boolean;
	export type RemovePositiveBuffs = boolean;
	/**
	 * How many stacks of the buff to remove. If unset, all stacks will be removed.
	 */
	export type Stacks3 = number;
	/**
	 * The entity for which to restore ability charges.
	 */
	export type TargetEntity9 = "Self" | "Other";
	/**
	 * This ability will have its charges restored.
	 */
	export type Ability3 = string;
	/**
	 * How many charges of the ability to restore.
	 */
	export type Charges = number;
	export type Chance1 = number;
	export type Min7 = number;
	export type Max7 = number;
	export type Item = string;
	export type VisualEffect1 =
	  | {
	      electric_arc_color: Color3;
	      effect_type: "Electric Arc";
	      electric_arc_source_distance?: DistanceFromSourcePixels;
	      electric_arc_destination_distance?: DistanceFromDestinationPixels;
	      electric_arc_source: Source;
	      electric_arc_destination: Destination;
	    }
	  | {
	      effect_type: "Ground Decal";
	      decal_sprite: DecalSprite1;
	      decal_duration?: DecalDurationSeconds1;
	      decal_location: Location;
	      decal_max_alpha?: MaxAlpha1;
	      decal_scale?: DecalScale1;
	    }
	  | {
	      explosion_z_offset?: ZOffset2;
	      effect_type: "Explosion";
	      explosion_random_delay?: RandomDelaySeconds1;
	      explosion_random_distance?: RandomDistanceGridSpaces1;
	      explosion_smoke?: ShowSmoke1;
	      explosion_sound?: Sound2;
	      explosion_scale?: ExplosionScale1;
	      explosion_location: Location1;
	      explosion_highlight_color?: HighlightColor1;
	      explosion_color: BaseColor1;
	      explosion_y_offset?: YOffset2;
	      explosion_slomo_burst: SlowMotionPulse1;
	    }
	  | {
	      effect_type: "Particle Burst";
	      burst_particle: Particle;
	      bursts: Bursts;
	    }
	  | {
	      effect_type: "Particle System Burst";
	      particle_system_z_offset?: ZOffset4;
	      particle_system: ParticleSystem1;
	      particle_system_y_offset?: YOffset3;
	      particle_system_emitter_scale?: EmitterScale1;
	      particle_system_location: Location2;
	    };
	export type Blue8 = number;
	export type Red8 = number;
	export type Green8 = number;
	export type DistanceFromSourcePixels = number;
	export type DistanceFromDestinationPixels = number;
	export type Source = "Self" | "Ground Target" | "Target Entity" | "Summoner";
	export type Destination = "Self" | "Ground Target" | "Target Entity" | "Summoner";
	/**
	 * This sprite will be drawn subtractively.
	 */
	export type DecalSprite1 = string;
	export type Min8 = number;
	export type Max8 = number;
	export type Location = "Self" | "Ground Target" | "Target Entity" | "Summoner";
	export type MaxAlpha1 = number;
	export type Min9 = number;
	export type Max9 = number;
	/**
	 * If spawning on the ground, this will be height above ground. If spawning on targets, it will spawn at their height midpoints, plus this offset.
	 */
	export type ZOffset2 = number;
	export type Min10 = number;
	export type Max10 = number;
	export type Min11 = number;
	export type Max11 = number;
	/**
	 * If true, smoke will be spawned at the explosion location.
	 */
	export type ShowSmoke1 = boolean;
	/**
	 * There is a default explosion sound, but you can override it here.
	 */
	export type Sound2 = string;
	export type Min12 = number;
	export type Max12 = number;
	export type Location1 = "Self" | "Ground Target" | "Target Entity" | "Summoner";
	export type Blue9 = number;
	export type Red9 = number;
	export type Green9 = number;
	export type Blue10 = number;
	export type Red10 = number;
	export type Green10 = number;
	/**
	 * Can be useful for depth-sorting. For example, a Y offset of 1 will spawn the explosion in front of whatever is explosing.
	 */
	export type YOffset2 = number;
	/**
	 * If true, there will be a brief slow-down of the game when the explosion occurs to make it feel more impactful. Use sparingly.
	 */
	export type SlowMotionPulse1 = boolean;
	export type Min13 = number;
	export type Max13 = number;
	export type Min14 = number;
	export type Max14 = number;
	/**
	 * Will be ignored if Sprite is set.
	 */
	export type Shape =
	  | "Pixel"
	  | "Disk"
	  | "Square"
	  | "Line"
	  | "Star"
	  | "Circle"
	  | "Ring"
	  | "Sphere"
	  | "Flare"
	  | "Spark"
	  | "Explosion"
	  | "Cloud"
	  | "Smoke"
	  | "Snow";
	/**
	 * This is proportional to the game's base gravity.
	 */
	export type Gravity = number;
	export type Min15 = number;
	export type Max15 = number;
	export type Blue11 = number;
	export type Red11 = number;
	export type Green11 = number;
	export type Sprite = string;
	export type Min16 = number;
	export type Max16 = number;
	export type XScale = number;
	/**
	 * How much speed the particles should gain or lose per second.
	 */
	export type Acceleration = number;
	/**
	 * Whether the particles should shrink over the course of their lifetimes.
	 */
	export type Shrinking = boolean;
	export type AlphaValue = number;
	export type Min17 = number;
	export type Max17 = number;
	/**
	 * This is an amount that will be randomly added or removed from the particle's rotation each step.
	 */
	export type OrientationWiggle = number;
	export type Min18 = number;
	export type Max18 = number;
	/**
	 * If true, the particle will rotate relative to the direction it is moving.
	 */
	export type OrientationRelative = boolean;
	export type OrientationChangeSec = number;
	/**
	 * If set, this particle will use the properties of the parent particle, but will override any values you have specified here.
	 */
	export type Parent = string;
	/**
	 * This is an amount that will be randomly added or removed from the particle's size each step.
	 */
	export type SizeWiggle = number;
	export type YScale = number;
	export type Lighting = "Lit" | "Unlit" | "Additive";
	export type ParticleNameInternal = string;
	/**
	 * Note that this will be ignored if you set the particle to 'Shrinking'.
	 */
	export type SizeChangePerSecond = number;
	export type Min19 = number;
	export type Max19 = number;
	/**
	 * If set, the particles will always move away from the center of the source.
	 */
	export type BlastOutward = boolean;
	export type Source1 = "Self" | "Ground Target" | "Target Entity" | "Summoner";
	export type Min20 = number;
	export type Max20 = number;
	export type Min21 = number;
	export type Max21 = number;
	/**
	 * Billboard bursts are good for shooting things up and out. Ground bursts are good for making smoke rings and such.
	 */
	export type Perspective = "Billboard" | "Isometric";
	/**
	 * If set, the spawn radius will be treated as grid spaces instead of pixels.
	 */
	export type SpawnRadiusAsGrid = boolean;
	/**
	 * If set, the radius of the spawning will scale relative to the caster's 'scale' modifier. Useful for keeping particles lined up with telegraphs.
	 */
	export type ScaledSpawnRadius = boolean;
	/**
	 * If checked, the particles will spawn at z=0 instead of on a target or caster.
	 */
	export type SpawnOnGround = boolean;
	/**
	 * If spawning on the ground, this will be height above ground. If spawning on targets, it will spawn at their height midpoints, plus this offset.
	 */
	export type ZOffset3 = number;
	/**
	 * If spawning on the ground, this will be height above ground. If spawning on targets, it will spawn at their height midpoints, plus this offset.
	 */
	export type ZOffset4 = number;
	export type ParticleSystem1 = string;
	/**
	 * Can be useful for depth-sorting. For example, a Y offset of 1 will spawn the explosion in front of whatever is explosing.
	 */
	export type YOffset3 = number;
	export type EmitterScale1 = number;
	export type Location2 = "Self" | "Ground Target" | "Target Entity" | "Summoner";
	export type Condition =
	  | {
	      target_entity: TargetEntity10;
	      casting_state: Casting;
	      abilities?: Abilities;
	      condition_type?: "Ability";
	    }
	  | {
	      target_entity: TargetEntity11;
	      datafield_evaluation: Evaluation;
	      condition_type?: "Datafield";
	    }
	  | {
	      daytime: DuringDaytime;
	      condition_type?: "Daylight";
	    }
	  | {
	      combat: InCombat;
	      condition_type?: "Combat";
	    }
	  | {
	      insight_modifier?: InsightModifier;
	      evaluation: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      minutes_passed: MinutesSinceTimestamp;
	      timestamp: Timestamp2;
	      condition_type?: "Timestamp";
	    }
	  | {
	      moon: ActiveMoon;
	      condition_type?: "Moon";
	    }
	  | {
	      quest_status: QuestStatus;
	      quest: QuestToCheck;
	      condition_type?: "Quest";
	    }
	  | {
	      following: Following;
	      artisan: Buddy;
	      condition_type?: "Artisan Following";
	    }
	  | {
	      prerequisite: Insight2;
	      unlock_text?: InsightTooltip;
	      condition_type?: "Insight";
	    }
	  | {
	      proximity_range: DistanceRequiredGridSpaces;
	      proximity_targets: Targets1;
	      proximity_quantity: NumberOfTargets;
	      proximity_ignores_stealth: IgnoreStealthedTargets;
	      condition_type?: "Proximity";
	    }
	  | {
	      target_entity: TargetEntity12;
	      hp_evaluation: HealthEvaluation;
	      condition_type?: "Health";
	    }
	  | {
	      require_all: RequireAll3;
	      items: Items3;
	      condition_type?: "Item Equipped";
	    }
	  | {
	      items: Items4;
	      condition_type?: "Item Wielding";
	    }
	  | {
	      num_pieces: NumberOfPiecesEquipped;
	      equipment_set: EquipmentSet1;
	      condition_type?: "Wearing Equipment Set";
	    }
	  | {
	      buff_num_targets?: NumberOfTargets1;
	      buff_target: TargetEntity13;
	      buffs: Buffs6;
	      buff_check_self: CheckSelf;
	      buff_require_all: RequireAll4;
	      buff_target_filter?: BuffTargetFilter;
	      buff_own_only: OwnBuffsOnly;
	      buff_stack_evaluation?: Stacks6;
	      buff_proximity?: BuffTargetRange;
	      condition_type?: "Buffs";
	    }
	  | {
	      boss: Boss;
	      condition_type?: "Boss Defeated";
	    }
	  | {
	      comparison: NumberSummoned;
	      summoned_filter?: SummonedEntitiesFilter;
	      condition_type?: "Summoned Entities";
	    };
	/**
	 * Which entity's ability to query.
	 */
	export type TargetEntity10 = "Self" | "Other";
	/**
	 * If set, the ability's casting state must match this checkbox.
	 */
	export type Casting = boolean;
	/**
	 * Which entity's data fields to query.
	 */
	export type TargetEntity11 = "Self" | "Other";
	export type DuringDaytime = boolean;
	export type InCombat = boolean;
	export type Insight1 = string;
	/**
	 * How much the 'Minutes Since Timestamp' should be adjusted (up or down) for each point invested in the Insight.
	 */
	export type ChangePerPoint7 = number;
	/**
	 * If greater than 0, then this many minutes will have passed since the timestamp was set. If less than 0, the timestamp will be this many minutes from now.
	 */
	export type MinutesSinceTimestamp = number;
	export type Timestamp2 = string;
	export type ActiveMoon = string;
	export type QuestStatus = "Complete" | "Started" | "Not Started";
	/**
	 * The quest whose status we are querying.
	 */
	export type QuestToCheck = string;
	export type Following = boolean;
	export type Buddy = string;
	export type Insight2 = string;
	export type EnglishText12 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText10 = string;
	export type Min22 = number;
	export type Max22 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll2 = boolean;
	export type Quantity3 = number;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude2 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags2 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants2 = boolean;
	export type Evaluation1 = "==" | "!=" | "<" | "<=" | ">" | ">=";
	export type Quantity4 = number;
	/**
	 * If checked, the proximity check will fail on targets that are stealthed.
	 */
	export type IgnoreStealthedTargets = boolean;
	/**
	 * Which entity's health to query.
	 */
	export type TargetEntity12 = "Self" | "Other";
	/**
	 * If checked, this condition will only be met if ALL of the items listed are equipped at the same time.
	 */
	export type RequireAll3 = boolean;
	/**
	 * If the player is wearing at least this many pieces, the condition will be met.
	 */
	export type NumberOfPiecesEquipped = number;
	export type EquipmentSet1 = string;
	export type Quantity5 = number;
	/**
	 * Which entity's buffs to query.
	 */
	export type TargetEntity13 = "Self" | "Other" | "All Entities";
	/**
	 * Obsolete--delete.
	 */
	export type CheckSelf = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on yourself at the same time.
	 */
	export type RequireAll4 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll5 = boolean;
	export type Quantity6 = number;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude3 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags3 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants3 = boolean;
	/**
	 * If checked, only buffs created by you will be checked. Otherwise, all buffs will be checked.
	 */
	export type OwnBuffsOnly = boolean;
	export type Quantity7 = number;
	export type Min23 = number;
	export type Max23 = number;
	export type Boss = string;
	export type Quantity8 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll6 = boolean;
	export type Quantity9 = number;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude4 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags4 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants4 = boolean;
	/**
	 * If false, then any of the conditions can be met for the actions to occur.
	 */
	export type RequireAllConditions = boolean;
	export type Trigger =
	  | {
	      attacker_distance?: AttackerDistance;
	      critical_damage?: CriticalHit;
	      target_filter?: TargetFilter;
	      items_used?: ItemsUsed;
	      direct_damage?: DirectDamage1;
	      abilities_used?: AbilitiesUsed;
	      damage_types?: DamageTypes1;
	      trigger_type?: "Take Damage";
	      health_threshold?: HealthThreshold;
	    }
	  | {
	      target_filter?: TargetFilter1;
	      trigger_type?: "Kill";
	    }
	  | {
	      seconds: Seconds;
	      trigger_type?: "Interval";
	    }
	  | {
	      trigger_type?: "Creation";
	    }
	  | {
	      target_filter?: MyKillerTargetFilter;
	      trigger_type?: "Death";
	    }
	  | {
	      trigger_type?: "Spawn";
	    }
	  | {
	      datafield: Datafield3;
	      trigger_type?: "Datafield Change";
	    }
	  | {
	      transition: TriggerTime;
	      trigger_type?: "Daylight Change";
	    }
	  | {
	      attacker_distance?: TargetDistance;
	      critical_damage?: CriticalHit1;
	      target_filter?: TargetFilter2;
	      items_used?: ItemsUsed1;
	      direct_damage?: DirectDamage2;
	      abilities_used?: AbilitiesUsed1;
	      damage_types?: DamageTypes2;
	      trigger_type?: "Deal Damage";
	      health_threshold?: HealthThreshold1;
	    }
	  | {
	      target_filter?: TargetFilter3;
	      items_used?: ItemsUsed2;
	      abilities_used?: Abilities1;
	      trigger_type?: "Ability Cast";
	    }
	  | {
	      target_filter?: TargetFilter4;
	      buffs: Buffs23;
	      apply_to_other: AppliedToOther;
	      trigger_type: "Buff Application";
	    }
	  | {
	      target_filter?: TargetFilter5;
	      buffs: Buffs26;
	      buff_on_self: CheckBuffsOnSelf;
	      buff_on_other: CheckBuffsOnOther;
	      trigger_type: "Buff Expiration";
	    }
	  | {
	      direct_healing?: DirectHealing;
	      trigger_type: "Healing Received";
	    }
	  | {
	      direct_healing?: DirectHealing1;
	      trigger_type: "Healing Sent";
	    }
	  | {
	      boss_phase: BossPhase;
	      trigger_type: "Boss Phase Start";
	    }
	  | {
	      buffs: Buffs27;
	      on_gain: TriggerOnStackGain;
	      on_loss: TriggerOnStackLoss;
	      each_stack: TriggerOnEachStack;
	      trigger_type: "Buff Stack Change";
	    }
	  | {
	      trigger_type: "Thrift";
	    }
	  | {
	      interval_seconds: Seconds1;
	      interval_offset: Offset;
	      trigger_type?: "Fixed Interval";
	    };
	export type Min24 = number;
	export type Max24 = number;
	/**
	 * If set, this trigger will only occur if receiving critical damage that matches this checkbox.
	 */
	export type CriticalHit = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll7 = boolean;
	export type Quantity10 = number;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude5 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags5 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants5 = boolean;
	/**
	 * If set, this trigger will only occur if the kind of damage received matches this checkbox (direct or periodic).
	 */
	export type DirectDamage1 = boolean;
	/**
	 * If set, this trigger will only occur if the damage taken drops your health below this percent.
	 */
	export type HealthThreshold = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll8 = boolean;
	export type Quantity11 = number;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude6 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags6 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants6 = boolean;
	export type Min25 = number;
	export type Max25 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll9 = boolean;
	export type Quantity12 = number;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude7 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags7 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants7 = boolean;
	export type Datafield3 = string;
	export type TriggerTime = "Day Start" | "Night Start" | "Both";
	export type Min26 = number;
	export type Max26 = number;
	/**
	 * If set, this trigger will only occur if receiving critical damage that matches this checkbox.
	 */
	export type CriticalHit1 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll10 = boolean;
	export type Quantity13 = number;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude8 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags8 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants8 = boolean;
	/**
	 * If set, this trigger will only occur if the kind of damage received matches this checkbox (direct or periodic).
	 */
	export type DirectDamage2 = boolean;
	/**
	 * If set, this trigger will only occur if the damage dealt drops the target's health below this percent.
	 */
	export type HealthThreshold1 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll11 = boolean;
	export type Quantity14 = number;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude9 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags9 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants9 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll12 = boolean;
	export type Quantity15 = number;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude10 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags10 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants10 = boolean;
	/**
	 * If set, this trigger will occur when the caster applies a buff to something else, as opposed to the caster gaining the buff.
	 */
	export type AppliedToOther = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll13 = boolean;
	export type Quantity16 = number;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude11 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags11 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants11 = boolean;
	/**
	 * If set, buffs expiring on yourself will be checked.
	 */
	export type CheckBuffsOnSelf = boolean;
	/**
	 * If set, buffs you have applied to other targets will be checked.
	 */
	export type CheckBuffsOnOther = boolean;
	/**
	 * If set, then the healing must match this checkbox. Indirect healing comes from buffs, while direct healing comes from all other sources.
	 */
	export type DirectHealing = boolean;
	/**
	 * If set, then the healing must match this checkbox. Indirect healing comes from buffs, while direct healing comes from all other sources.
	 */
	export type DirectHealing1 = boolean;
	export type BossPhase = string;
	/**
	 * If set, this trigger will occur when the buff stack count increases.
	 */
	export type TriggerOnStackGain = boolean;
	/**
	 * If set, this trigger will occur when the buff stack count decreases.
	 */
	export type TriggerOnStackLoss = boolean;
	/**
	 * If true, this trigger will occur for each stack that is gained or lost in one go. If false, this trigger will only occur once, regardless of how many stacks are gained or lost.
	 */
	export type TriggerOnEachStack = boolean;
	/**
	 * How many seconds between this interval firing. This interval is synchronized to the game clock.
	 */
	export type Seconds1 =
	  | {
	      style?: "Number";
	      number: number;
	    }
	  | {
	      datafield: string;
	      style?: "Datafield";
	    };
	/**
	 * How many seconds to offset the interval by.
	 */
	export type Offset =
	  | {
	      style?: "Number";
	      number: number;
	    }
	  | {
	      datafield: string;
	      style?: "Datafield";
	    };
	export type EnglishText13 = string;
	export type NameInternal = string;
	/**
	 * The sound this item makes when being placed in the inventory.
	 */
	export type InventorySound = string;
	export type UIIcon3 = string;
	export type IgnoreInLevelViewer = boolean;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup4 = string;
	/**
	 * What workstation the player must be near to craft this recipe.
	 */
	export type Station3 = string;
	export type ResearchNode6 = string;
	export type ChangePerPoint8 = number;
	export type UnlockedBy4 = string;
	/**
	 * Change this number to increase or decrease the number of materials required to craft this item.
	 */
	export type EffortModifier3 = number;
	export type EnglishText14 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText11 = string;
	/**
	 * A number that is connected to the relative power level of this thing.
	 */
	export type Level = number;
	export type EnglishText15 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText12 = string;
	/**
	 * How many days it takes for this moon to come around again. Moons can overlap. One moon must have a 1-day cycle -- that will be the default moon, and will determine the default night colors.
	 */
	export type DaysPerCycle = number;
	export type Blue12 = number;
	export type Red12 = number;
	export type Green12 = number;
	export type Blue13 = number;
	export type Red13 = number;
	export type Green13 = number;
	export type EnglishText16 = string;
	/**
	 * If checked, then only one buff of this type can be active at a time.
	 */
	export type Exclusive = boolean;
	export type EnglishText17 = string;
	/**
	 * How the actor animates while not actively moving.
	 */
	export type StationaryVisuals =
	  | {
	      animation?: Animation;
	      style?: "Stand";
	      babbler?: Babbler;
	    }
	  | {
	      animation?: Animation1;
	      z_baseline: BaselineAltitudePixels;
	      style: "Fly";
	      babbler?: Babbler1;
	      z_sine?: AltitudeSineWave;
	      flaps?: FlappingVerticalMovements;
	    };
	/**
	 * Defaults to 'idle.
	 */
	export type Animation = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation1 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler1 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed2 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude1 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds = number;
	export type MovementVisuals =
	  | {
	      hop_speed: HopVerticalSpeed;
	      animation?: HopAnimationName;
	      hop_anticipation?: HopAnticipationSeconds;
	      style: "Hop";
	      babbler?: Babbler2;
	      hop_followthrough?: PostHopFollowthroughSeconds;
	    }
	  | {
	      run_vertical_speed: RunVerticalBounceSpeed;
	      animation?: RunAnimationName;
	      style: "Run";
	      babbler?: Babbler3;
	    }
	  | {
	      animation?: CrawlAnimationName;
	      style: "Crawl";
	      babbler?: Babbler4;
	    }
	  | {
	      animation?: Animation2;
	      z_baseline: BaselineAltitudePixels1;
	      style: "Fly";
	      babbler?: Babbler5;
	      z_sine?: AltitudeSineWave1;
	      flaps?: FlappingVerticalMovements1;
	    };
	/**
	 * As a percentage of base gravity. This is fairly sensitive.
	 */
	export type HopVerticalSpeed = number;
	/**
	 * Defaults to 'hop' but can be overridden.
	 */
	export type HopAnimationName = string;
	/**
	 * How long to hold before rising off the ground, to make room for a pre-hop animation.
	 */
	export type HopAnticipationSeconds = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler2 = string;
	/**
	 * How long to hold after landing on the ground from a hop, to make room for animations.
	 */
	export type PostHopFollowthroughSeconds = number;
	/**
	 * How fast the character should pop up off the ground with each leg movement. As a percentage of base gravity. This is fairly sensitive.
	 */
	export type RunVerticalBounceSpeed = number;
	/**
	 * Defaults to 'run' but can be overridden.
	 */
	export type RunAnimationName = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler3 = string;
	/**
	 * Defaults to 'crawl' but can be overridden.
	 */
	export type CrawlAnimationName = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler4 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation2 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels1 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler5 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed3 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude2 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance1 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds1 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds1 = number;
	/**
	 * Relative to the global movement speed.
	 */
	export type MovementSpeed = number;
	/**
	 * If set, the boss will play this spine animation during the dialogue sequence.
	 */
	export type BossSpineAnimation = string;
	export type BossDialogueMoment =
	  | {
	      speech: {
	        text: {
	          text: EnglishText18;
	        };
	        emotion?: Emoji;
	        speaker: Speaker;
	      };
	      requirements?: MomentRequirements;
	      style: "Dialogue";
	    }
	  | {
	      requirements?: MomentRequirements;
	      style: "Emote";
	      emotes: Emotes;
	    };
	export type EnglishText18 = string;
	export type Emoji = string;
	export type Speaker = string;
	export type Requirement =
	  | {
	      quest_status: QuestStatus1;
	      style: "Quest";
	      quest: QuestToCheck1;
	    }
	  | {
	      style: "Equipped";
	      item: Item1;
	    }
	  | {
	      style: "Time";
	      time: Time;
	    }
	  | {
	      items_owned: Items14;
	      style: "Items Owned";
	    }
	  | {
	      insight: Insight3;
	      insight_status: InsightStatus;
	      style: "Insight";
	    }
	  | {
	      following: Following1;
	      artisan?: Artisan;
	      style: "Artisan Following";
	    }
	  | {
	      comfort: Comfort;
	      comfort_status: ComfortStatus;
	      style: "Comfort";
	    }
	  | {
	      style: "Inventory Evaluation";
	      comparisons: InventoryEvaluation;
	    }
	  | {
	      style: "Area";
	      area: AreaToCheck;
	      item_id: Entity;
	    }
	  | {
	      style: "Teleporter Active";
	      teleporter_active: ActiveState;
	      teleporter_area?: TeleporterArea;
	    }
	  | {
	      invert: Invert;
	      group_requirements: MomentRequirements1;
	      require_all: RequireAll14;
	      style: "Requirement Group";
	    }
	  | {
	      following?: Following2;
	      pet?: Pet;
	      style: "Pet";
	      stage?: PetStage;
	    }
	  | {
	      style: "Boss Defeated";
	      boss: Boss1;
	    }
	  | {
	      exclusive?: Exclusive1;
	      same_room: SameRoom;
	      item_ids: Entities;
	      distance: Distance;
	      style: "Entity Proximity";
	    };
	export type QuestStatus1 = "Complete" | "Started" | "Not Started";
	/**
	 * The quest whose status we are querying.
	 */
	export type QuestToCheck1 = string;
	/**
	 * The player must be wearing this item.
	 */
	export type Item1 = string;
	export type Time = "Day" | "Night";
	export type Quantity17 = number;
	export type Insight3 = string;
	export type InsightStatus = "Complete" | "Available" | "Locked";
	/**
	 * If false, then this will only trigger if the artisan is not following.
	 */
	export type Following1 = boolean;
	/**
	 * Leave unset to query whether any artisans are either following or not following. Otherwise, this will query the specific artisan you have chosen.
	 */
	export type Artisan = string;
	export type Comfort = string;
	export type ComfortStatus = "Complete" | "Available";
	export type Item2 = string;
	export type Quantity18 = number;
	export type AreaToCheck = string;
	/**
	 * The entity that must be in the area for the requirement to pass.
	 */
	export type Entity = string;
	/**
	 * The teleporter must be in this state.
	 */
	export type ActiveState = boolean;
	/**
	 * If not set, this requirement will check for 'any' teleporters.
	 */
	export type TeleporterArea = string;
	/**
	 * If set, then this requirement group will 'pass' if its requirements are NOT met.
	 */
	export type Invert = boolean;
	/**
	 * If set to false, then this requirement group will pass if any of its requirements are met.
	 */
	export type RequireAll14 = boolean;
	/**
	 * If set, then this will only trigger if the pet's following state matches this.
	 */
	export type Following2 = boolean;
	/**
	 * If unset, then this requirement will be met if any of your pets match it.
	 */
	export type Pet = string;
	export type Boss1 = string;
	/**
	 * Only consider this requirement met if NONE of the listed entities are within the range.
	 */
	export type Exclusive1 = boolean;
	/**
	 * If true, this requirement will check whether the entity is in the same room as the player. If outdoors, it will use distance.
	 */
	export type SameRoom = boolean;
	export type EntityType = string;
	/**
	 * How far from the player (in grid spaces) the entity should be for this requirement to be met.
	 */
	export type Distance = number;
	export type Character = string;
	export type Emoji1 = string;
	/**
	 * How the actor animates while not actively moving.
	 */
	export type StationaryVisuals1 =
	  | {
	      animation?: Animation3;
	      style?: "Stand";
	      babbler?: Babbler6;
	    }
	  | {
	      animation?: Animation4;
	      z_baseline: BaselineAltitudePixels2;
	      style: "Fly";
	      babbler?: Babbler7;
	      z_sine?: AltitudeSineWave2;
	      flaps?: FlappingVerticalMovements2;
	    };
	/**
	 * Defaults to 'idle.
	 */
	export type Animation3 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler6 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation4 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels2 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler7 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed4 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude3 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance2 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds2 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds2 = number;
	export type MovementVisuals1 =
	  | {
	      hop_speed: HopVerticalSpeed1;
	      animation?: HopAnimationName1;
	      hop_anticipation?: HopAnticipationSeconds1;
	      style: "Hop";
	      babbler?: Babbler8;
	      hop_followthrough?: PostHopFollowthroughSeconds1;
	    }
	  | {
	      run_vertical_speed: RunVerticalBounceSpeed1;
	      animation?: RunAnimationName1;
	      style: "Run";
	      babbler?: Babbler9;
	    }
	  | {
	      animation?: CrawlAnimationName1;
	      style: "Crawl";
	      babbler?: Babbler10;
	    }
	  | {
	      animation?: Animation5;
	      z_baseline: BaselineAltitudePixels3;
	      style: "Fly";
	      babbler?: Babbler11;
	      z_sine?: AltitudeSineWave3;
	      flaps?: FlappingVerticalMovements3;
	    };
	/**
	 * As a percentage of base gravity. This is fairly sensitive.
	 */
	export type HopVerticalSpeed1 = number;
	/**
	 * Defaults to 'hop' but can be overridden.
	 */
	export type HopAnimationName1 = string;
	/**
	 * How long to hold before rising off the ground, to make room for a pre-hop animation.
	 */
	export type HopAnticipationSeconds1 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler8 = string;
	/**
	 * How long to hold after landing on the ground from a hop, to make room for animations.
	 */
	export type PostHopFollowthroughSeconds1 = number;
	/**
	 * How fast the character should pop up off the ground with each leg movement. As a percentage of base gravity. This is fairly sensitive.
	 */
	export type RunVerticalBounceSpeed1 = number;
	/**
	 * Defaults to 'run' but can be overridden.
	 */
	export type RunAnimationName1 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler9 = string;
	/**
	 * Defaults to 'crawl' but can be overridden.
	 */
	export type CrawlAnimationName1 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler10 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation5 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels3 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler11 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed5 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude4 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance3 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds3 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds3 = number;
	/**
	 * Relative to the global movement speed.
	 */
	export type MovementSpeed1 = number;
	/**
	 * If set, the boss will always cast this ability instantly after finishing the prior ability, ignoring normal behavioral cooldowns and range requirements.
	 */
	export type Instant = boolean;
	/**
	 * The weight choosing this followup ability relative to the other followup abilities in this list.
	 */
	export type Weight = number;
	export type Ability4 = string;
	/**
	 * The boss can randomly ignore the post-ability pause, and instead go right into the next ability.
	 */
	export type PostAbilityPauseIgnoreChance = number;
	export type Ability5 = string;
	export type Min27 = number;
	export type Max27 = number;
	/**
	 * If set, the boss will choose a random quest marker from the list, instead of the nearest one.
	 */
	export type ChooseRandom = boolean;
	export type Condition1 =
	  | {
	      casting_state: Casting1;
	      abilities?: Abilities3;
	      condition_type?: "Ability";
	    }
	  | {
	      datafield_evaluation: Evaluation2;
	      condition_type?: "Datafield";
	    }
	  | {
	      daytime: DuringDaytime1;
	      condition_type?: "Daylight";
	    }
	  | {
	      combat: InCombat1;
	      condition_type?: "Combat";
	    }
	  | {
	      insight_modifier?: InsightModifier1;
	      evaluation: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      minutes_passed: MinutesSinceTimestamp1;
	      timestamp: Timestamp3;
	      condition_type?: "Timestamp";
	    }
	  | {
	      moon: ActiveMoon1;
	      condition_type?: "Moon";
	    }
	  | {
	      quest_status: QuestStatus2;
	      quest: QuestToCheck2;
	      condition_type?: "Quest";
	    }
	  | {
	      following: Following3;
	      artisan: Buddy1;
	      condition_type?: "Artisan Following";
	    }
	  | {
	      prerequisite: Insight5;
	      unlock_text?: InsightTooltip1;
	      condition_type?: "Insight";
	    }
	  | {
	      proximity_range: DistanceRequiredGridSpaces1;
	      proximity_targets: Targets2;
	      proximity_quantity: NumberOfTargets2;
	      proximity_ignores_stealth: IgnoreStealthedTargets1;
	      condition_type?: "Proximity";
	    }
	  | {
	      hp_evaluation: HealthEvaluation1;
	      condition_type?: "Health";
	    }
	  | {
	      require_all: RequireAll16;
	      items: Items16;
	      condition_type?: "Item Equipped";
	    }
	  | {
	      items: Items17;
	      condition_type?: "Item Wielding";
	    }
	  | {
	      num_pieces: NumberOfPiecesEquipped1;
	      equipment_set: EquipmentSet2;
	      condition_type?: "Wearing Equipment Set";
	    }
	  | {
	      buff_num_targets?: NumberOfTargets3;
	      buff_target: TargetEntity14;
	      buffs: Buffs30;
	      buff_check_self: CheckSelf1;
	      buff_require_all: RequireAll17;
	      buff_target_filter?: BuffTargetFilter1;
	      buff_own_only: OwnBuffsOnly1;
	      buff_stack_evaluation?: Stacks17;
	      buff_proximity?: BuffTargetRange1;
	      condition_type?: "Buffs";
	    }
	  | {
	      boss: Boss2;
	      condition_type?: "Boss Defeated";
	    }
	  | {
	      comparison: NumberSummoned1;
	      summoned_filter?: SummonedEntitiesFilter1;
	      condition_type?: "Summoned Entities";
	    };
	/**
	 * If set, the ability's casting state must match this checkbox.
	 */
	export type Casting1 = boolean;
	export type DuringDaytime1 = boolean;
	export type InCombat1 = boolean;
	export type Insight4 = string;
	/**
	 * How much the 'Minutes Since Timestamp' should be adjusted (up or down) for each point invested in the Insight.
	 */
	export type ChangePerPoint9 = number;
	/**
	 * If greater than 0, then this many minutes will have passed since the timestamp was set. If less than 0, the timestamp will be this many minutes from now.
	 */
	export type MinutesSinceTimestamp1 = number;
	export type Timestamp3 = string;
	export type ActiveMoon1 = string;
	export type QuestStatus2 = "Complete" | "Started" | "Not Started";
	/**
	 * The quest whose status we are querying.
	 */
	export type QuestToCheck2 = string;
	export type Following3 = boolean;
	export type Buddy1 = string;
	export type Insight5 = string;
	export type EnglishText19 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText13 = string;
	export type Min28 = number;
	export type Max28 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll15 = boolean;
	export type Quantity19 = number;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude12 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags12 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants12 = boolean;
	export type Evaluation3 = "==" | "!=" | "<" | "<=" | ">" | ">=";
	export type Quantity20 = number;
	/**
	 * If checked, the proximity check will fail on targets that are stealthed.
	 */
	export type IgnoreStealthedTargets1 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the items listed are equipped at the same time.
	 */
	export type RequireAll16 = boolean;
	/**
	 * If the player is wearing at least this many pieces, the condition will be met.
	 */
	export type NumberOfPiecesEquipped1 = number;
	export type EquipmentSet2 = string;
	export type Quantity21 = number;
	/**
	 * Which entity's buffs to query.
	 */
	export type TargetEntity14 = "Self" | "Other" | "All Entities";
	/**
	 * Obsolete--delete.
	 */
	export type CheckSelf1 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on yourself at the same time.
	 */
	export type RequireAll17 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll18 = boolean;
	export type Quantity22 = number;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude13 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags13 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants13 = boolean;
	/**
	 * If checked, only buffs created by you will be checked. Otherwise, all buffs will be checked.
	 */
	export type OwnBuffsOnly1 = boolean;
	export type Quantity23 = number;
	export type Min29 = number;
	export type Max29 = number;
	export type Boss2 = string;
	export type Quantity24 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll19 = boolean;
	export type Quantity25 = number;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude14 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags14 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants14 = boolean;
	/**
	 * If true, then every condition must be met. If false, then only one of the conditions must be met.
	 */
	export type RequireAllConditions1 = boolean;
	/**
	 * Affects how frequently this ability is chosen.
	 */
	export type Weight1 = number;
	export type Targeting =
	  | {
	      direction: Direction1;
	      style: "Fixed Direction";
	    }
	  | {
	      style: "Toward Entity";
	      range?: Range1;
	      targets: PotentialTargets1;
	      choose_random?: ChooseRandom1;
	    };
	/**
	 * The direction (in degrees) that the boss will cast this ability.
	 */
	export type Direction1 = number;
	export type Min30 = number;
	export type Max30 = number;
	/**
	 * If set, the boss will choose a random quest marker from the list, instead of the nearest one.
	 */
	export type ChooseRandom1 = boolean;
	/**
	 * The boss can add some randomness to the direction of this ability's cast (in degrees).
	 */
	export type DirectionRandomness = number;
	export type MinSeconds = number;
	export type MaxSeconds = number;
	/**
	 * Used for sorting the phases in the GC sidebar.
	 */
	export type Order = number;
	/**
	 * Higher number means you can see more.
	 */
	export type ZoomLevel = number;
	/**
	 * If set, this music will play during this phase. If unset, there will be no music during this phase.
	 */
	export type Music = string;
	export type Boss3 = string;
	export type DescriptionInternal1 = string;
	export type NameInternal1 = string;
	export type Object1 = string;
	/**
	 * If true, this resource will snap to the grid when placed. Only applies to non-solid objects.
	 */
	export type GridSnapping = boolean;
	/**
	 * Whether this item must have a floor under it to be validly placed in the world.
	 */
	export type RequiresFloor = boolean;
	/**
	 * If false, the object will always render itself at its normal color and won't be darkened or brightened by lighting.
	 */
	export type UseLighting1 = boolean;
	export type WorldSprite3 = string;
	/**
	 * Whether the player walks over the top of this item.
	 */
	export type Underfoot = boolean;
	export type UIIcon4 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler12 = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup5 = string;
	export type OutputQuantity3 = number;
	export type ResearchNode7 = string;
	export type Style3 = "Additive" | "Multiplicative";
	export type ChangePerPoint10 = number;
	/**
	 * What workstation the player must be near to craft this recipe.
	 */
	export type Station4 = string;
	export type ResearchNode8 = string;
	export type ChangePerPoint11 = number;
	export type UnlockedBy5 = string;
	/**
	 * Change this number to increase or decrease the number of materials required to craft this item.
	 */
	export type EffortModifier4 = number;
	/**
	 * The sound to play when this is placed in the editor or in Build Mode.
	 */
	export type PlacementSound2 = string;
	export type Sprite1 = string;
	/**
	 * Change this if the in-game shadow ends up too big or too small for the object.
	 */
	export type ScaleModifier = number;
	export type EnglishText20 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText14 = string;
	/**
	 * Whether this item can be X-flipped in the Editor.
	 */
	export type Flippable1 = boolean;
	/**
	 * Relative to the object's origin
	 */
	export type YOffset4 = number;
	/**
	 * If set, the particle system will be drawn behind the object
	 */
	export type Behind = boolean;
	export type EmitterScale2 = number;
	/**
	 * If set, the particle will anchor to this spine bone, and the X and Y offsets will be relative to the bone's position
	 */
	export type SpineBone = string;
	export type ParticleSystem2 = string;
	/**
	 * Relative to the object's origin
	 */
	export type XOffset = number;
	export type State = string;
	export type EnglishText21 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText15 = string;
	export type Object2 = string;
	/**
	 * If using a Spine sprite, the object will try to play an animation with this name when it is spawned.
	 */
	export type SpineIdle = string;
	/**
	 * Whether this item must have a floor under it to be validly placed in the world.
	 */
	export type RequiresFloor1 = boolean;
	/**
	 * If false, the object will always render itself at its normal color and won't be darkened or brightened by lighting.
	 */
	export type UseLighting2 = boolean;
	export type WorldSprite4 = string;
	export type UIIcon5 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler13 = string;
	/**
	 * If false, then crafted items in the Progression Map will not display this station as a prerequisite. Useful to resolve 'infinite looping' issues, for example with the Basic Workstation, which is required to construct itself.
	 */
	export type CountAsProgressionRequirement = boolean;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup6 = string;
	/**
	 * The sound to play when this is placed in the editor or in Build Mode.
	 */
	export type PlacementSound3 = string;
	export type OutputQuantity4 = number;
	export type ResearchNode9 = string;
	export type Style4 = "Additive" | "Multiplicative";
	export type ChangePerPoint12 = number;
	/**
	 * What workstation the player must be near to craft this recipe.
	 */
	export type Station5 = string;
	export type ResearchNode10 = string;
	export type ChangePerPoint13 = number;
	export type UnlockedBy6 = string;
	/**
	 * Change this number to increase or decrease the number of materials required to craft this item.
	 */
	export type EffortModifier5 = number;
	export type EnglishText22 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText16 = string;
	/**
	 * Whether the tile should be X-flipped randomly when placed.
	 */
	export type Flippable2 = boolean;
	export type EnglishText23 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText17 = string;
	export type AssemblyUIStartSound = string;
	/**
	 * Where the player must be standing to catch this fish. Includes all children of this area.
	 */
	export type Area = string;
	/**
	 * If set, the fish will not be catchable in this area (and its children)
	 */
	export type Exclude15 = boolean;
	/**
	 * If set, this item will not be fishable if the player has already acquired one.
	 */
	export type Singleton = boolean;
	export type UnlockedBy8 = string;
	export type EnglishText24 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText18 = string;
	/**
	 * If set, this fish will be considered a 'whopper' and will only be catchable via special Whopper Pools.
	 */
	export type Whopper = boolean;
	/**
	 * Higher number means it is more common to find this item when fishing.
	 */
	export type Frequency = number;
	export type UsableOnEquipment = boolean;
	export type DisplayAsPercent = boolean;
	/**
	 * How many decimals to display.
	 */
	export type DecimalPrecision = number;
	/**
	 * The lowest this stat can go.
	 */
	export type ValueMin = number;
	/**
	 * This stat will be indented under its parent where possible.
	 */
	export type ParentStat = string;
	/**
	 * The order in which the stats appear in a stat breakdown.
	 */
	export type Order1 = number;
	export type UsableOnBuffs = boolean;
	/**
	 * The highest this stat can go.
	 */
	export type ValueMax = number;
	/**
	 * The starting point of this stat, all else equal.
	 */
	export type ValueDefault = number;
	export type ShowOnPlayerUI = boolean;
	export type EnglishText25 = string;
	/**
	 * When equipment gets 'stat points', each stat point will boost this stat by this amount.
	 */
	export type ValuePoint = number;
	export type EnglishText26 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText19 = string;
	export type ResearchCollected = string;
	export type Interact = string;
	export type ComfortLost = string;
	/**
	 * For example, when you ask them to follow you, but they can't because they are researching.
	 */
	export type ActionBlocked = string;
	export type ResearchStart = string;
	export type FollowEnd = string;
	export type ComfortGained = string;
	export type FollowStart = string;
	/**
	 * The GMS object to use for the buddy in the world.
	 */
	export type WorldObject = string;
	/**
	 * The sprite to use for the buddy's banner in the Home UI.
	 */
	export type BannerPortrait = string;
	export type Blue14 = number;
	export type Red14 = number;
	export type Green14 = number;
	/**
	 * The sprite to use behind the buddy's banner in the Home UI.
	 */
	export type BannerBackground = string;
	export type WorldSprite5 = string;
	/**
	 * If set, the artisan will not follow the player unless this thing is finished.
	 */
	export type FollowingUnlock = string;
	/**
	 * Whether the buddy's sprite should flip to face the player during dialogue.
	 */
	export type LooksAtPlayer = boolean;
	export type Personality = string;
	export type Pronouns = string;
	/**
	 * A handful of words for a quick overview of the character
	 */
	export type Brief = string;
	export type UIIcon6 = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup7 = string;
	export type Blue15 = number;
	export type Red15 = number;
	export type Green15 = number;
	/**
	 * Once this quest is complete, the Buddy's insights will be visible.
	 */
	export type InsightUnlocker = string;
	export type EnglishText27 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText20 = string;
	export type Blue16 = number;
	export type Red16 = number;
	export type Green16 = number;
	export type EnglishText28 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText21 = string;
	/**
	 * An action to be performed on the targets that have been captured by this Action Group. For example, targets caught in a telegraph, yourself, etc...
	 */
	export type Action1 =
	  | {
	      badge_modifiers?: InsightModifiers;
	      damage_success_sound?: ImpactSound1;
	      damage_profile: DamageProfile;
	      datafield_modifiers?: DatafieldMultipliers1;
	      target_filter?: TargetFilters1;
	      damage_failure_sound?: FailureSound1;
	      unlocked_by?: UnlockedBy9;
	      damage_entity?: EntityToDamage;
	      damage_steal_health?: StealHealth;
	      action_type?: "Damage";
	      chance?: ActionProbability;
	      damage_followup?: FollowupActions;
	    }
	  | {
	      heal_target_filter?: TargetFilters3;
	      heal_failure_sound?: FailureSound2;
	      healing_entity?: EntityToHeal;
	      heal_success_sound?: HealSound;
	      unlocked_by?: UnlockedBy11;
	      healing_percentage: Healing;
	      action_type?: "Heal";
	      chance?: ActionProbability1;
	    }
	  | {
	      action_type?: "Clear Terrain";
	    }
	  | {
	      move_style?: MovementStyle;
	      move_distance_modifier?: MoveDistanceStatModifiers;
	      move_sounds?: MovementSounds;
	      move_end_action_groups?: ActionGroups1;
	      unlocked_by?: UnlockedBy13;
	      move_animations?: MovementAnimations;
	      move_destination: EntityDestination;
	      move_direction?: Direction2;
	      move_speed: Speed6;
	      traverses_water: MoveOverWater;
	      move_grid_distance: MovementDistanceGridSpaces;
	      move_entity: EntityBeingMoved;
	      action_type?: "Move";
	      chance?: ActionProbability2;
	      move_direction_randomness?: DirectionRandomness1;
	      move_speed_stat_modifier?: MoveSpeedStatModifiers;
	    }
	  | {
	      sound_location: SoundLocation1;
	      sound_as_voice?: PlayAsVoice1;
	      unlocked_by?: UnlockedBy15;
	      sound_probability: SoundProbability;
	      sound_id: Sound4;
	      action_type?: "Play Sound";
	    }
	  | {
	      drop_loot?: DropLoot1;
	      unlocked_by?: UnlockedBy17;
	      destroy_target_filter?: TargetFilters4;
	      destroy_entity: EntityToDestroy;
	      action_type?: "Destroy";
	      chance?: ActionProbability3;
	    }
	  | {
	      camera_shake_amount: CameraShakeAmount;
	      unlocked_by?: UnlockedBy19;
	      action_type?: "Shake Camera";
	    }
	  | {
	      visual_effect: VisualEffect2;
	      action_type: "Visual Effect";
	    }
	  | {
	      items_to_lose: ItemsToLose;
	      action_type?: "Lose Items";
	      chance?: ActionProbability4;
	    }
	  | {
	      items_to_gain: ItemsToGain;
	      unlocked_by?: UnlockedBy21;
	      action_type?: "Gain Items";
	      chance?: ActionProbability5;
	    }
	  | {
	      pickup_target_filter?: PickupTargetFilter;
	      unlocked_by?: UnlockedBy23;
	      action_type?: "Pickup";
	    }
	  | {
	      target_filter?: TargetFilters5;
	      buffs: BuffsToApply;
	      unlocked_by?: UnlockedBy25;
	      action_type?: "Buff";
	      chance?: ActionProbability6;
	    }
	  | {
	      datafield_change_type: ChangeType;
	      datafield_change_target: DatafieldOwner3;
	      datafield_change_value: Value2;
	      unlocked_by?: UnlockedBy27;
	      datafield_id: DataField2;
	      action_type?: "Change Datafield";
	    }
	  | {
	      require_line_of_sight?: RequireLineOfSight1;
	      spawn_item: EntityToCreate;
	      summoned?: EntityIsSummoned1;
	      action_type?: "Create Entity";
	      distance_range?: SpawnDistance1;
	      non_overlap: AttemptNonOverlap1;
	      spawn_location?: NewEntityLocation1;
	    }
	  | {
	      unlocked_by?: UnlockedBy29;
	      projectile: Projectile;
	      action_type?: "Fire Projectile";
	    }
	  | {
	      action_type?: "Fishing";
	    }
	  | {
	      buffs_to_remove?: BuffsToRemove;
	      buff_target: Target;
	      target_filter?: TargetFilters6;
	      unlocked_by?: UnlockedBy31;
	      negative?: RemoveNegativeBuffs1;
	      positive?: RemovePositiveBuffs1;
	      stacks?: Stacks27;
	      action_type?: "Remove Buff";
	      chance?: ActionProbability7;
	    }
	  | {
	      action_type?: "Change Juke Charges";
	      chance?: ActionProbability8;
	      charges: ChargeIncrementAmount;
	    }
	  | {
	      leap_impact_action_groups?: ActionGroups5;
	      leap_start_sounds?: LeapStartSounds;
	      move_animations?: MovementAnimations1;
	      move_destination: LeapDestination;
	      leap_duration: LeapDuration;
	      traverses_water?: LeapTraversesWater;
	      leap_followthrough_seconds?: FollowthroughSeconds;
	      action_type?: "Leap";
	      leap_land_sounds?: LeapLandingSounds;
	      gravity_modifier?: GravityModifier;
	      telegraph_pullthrough: ShowTelegraphDuringCast;
	    }
	  | {
	      knock_direction_randomness?: DirectionRandomness2;
	      unlocked_by?: UnlockedBy33;
	      knock_distance: DistanceGridSpaces;
	      knock_end_actions?: ActionGroups6;
	      knock_direction_offset?: DirectionOffset1;
	      knock_sounds?: KnockSounds;
	      action_type?: "Knockback";
	      chance?: ActionProbability9;
	      knock_direction_datafield?: DirectionDatafield;
	      knocked_entity: EntityToKnockBack;
	    };
	export type Insight6 = string;
	export type ChangePerPoint14 = number;
	export type EnglishText29 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText22 = string;
	/**
	 * This sound will only play if damage is dealt.
	 */
	export type ImpactSound1 = string;
	export type DataField1 = string;
	export type DatafieldOwner2 = "Self" | "Target Entity";
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll20 = boolean;
	export type Quantity26 = number;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude16 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags15 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants15 = boolean;
	/**
	 * This sound will play if no targets were damaged.
	 */
	export type FailureSound1 = string;
	export type UnlockedBy10 = string;
	export type EnglishText30 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText23 = string;
	export type EntityToDamage = "Target Entity" | "Self" | "Summoner";
	/**
	 * This will steal health from the target and give it to the caster, proportional to the damage dealt.
	 */
	export type StealHealth = number;
	/**
	 * The chance that this action will occur.
	 */
	export type Chance2 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll21 = boolean;
	export type Quantity27 = number;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude17 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags16 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants16 = boolean;
	/**
	 * If set, this followup action will only be performed on up to this number of targets.
	 */
	export type FollowupTargetLimit = number;
	/**
	 * If set, the followup action will only apply to targets that had this outcome.
	 */
	export type FollowupTargetConstraint = "Damaged" | "Critically Hit" | "Uncritically Hit";
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll22 = boolean;
	export type Quantity28 = number;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude18 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags17 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants17 = boolean;
	/**
	 * This sound will play if no targets were healed.
	 */
	export type FailureSound2 = string;
	export type EntityToHeal = "Target Entity" | "Self" | "Summoner";
	/**
	 * This sound will only play if healing occurred (the recipient was below maximum health).
	 */
	export type HealSound = string;
	export type UnlockedBy12 = string;
	export type EnglishText31 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText24 = string;
	/**
	 * The healing amount will be automatically calculated based on the level of the user.
	 */
	export type Healing = number;
	/**
	 * The chance that this action will occur.
	 */
	export type Chance3 = number;
	export type MovementStyle = "Ease In" | "Linear" | "Instant";
	export type ModifierType = "Add" | "Multiply";
	export type Stat1 = string;
	export type Sound3 = string;
	export type ChanceOfPlaying = number;
	export type UnlockedBy14 = string;
	export type EnglishText32 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText25 = string;
	export type AnimationName = string;
	export type Looping1 = boolean;
	export type EntityDestination = "Ground Target" | "Target Entity" | "Self" | "Summoner";
	/**
	 * In degrees. 0 is towards the destination, 180 is away from the destination.
	 */
	export type Direction2 = number;
	/**
	 * How much faster you will travel the distance, compared to your baseline speed. If zero, you will instantly teleport.
	 */
	export type Speed6 = number;
	/**
	 * If true, you will move over water, even if you normally cannot.
	 */
	export type MoveOverWater = boolean;
	export type Min31 = number;
	export type Max31 = number;
	export type EntityBeingMoved = "Self" | "Target Entity" | "Summoner";
	/**
	 * The chance that this action will occur.
	 */
	export type Chance4 = number;
	/**
	 * The movement direction will be randomly modified (up or down) by up to this amount.
	 */
	export type DirectionRandomness1 = number;
	export type ModifierType1 = "Add" | "Multiply";
	export type Stat2 = string;
	export type SoundLocation1 = "Self" | "Ground Target" | "Target Entity" | "Summoner" | "Global";
	/**
	 * If true, then this will be considered a 'voice' sound. Each entity can only play one 'Voice' sound at a time.
	 */
	export type PlayAsVoice1 = boolean;
	export type UnlockedBy16 = string;
	export type EnglishText33 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText26 = string;
	export type SoundProbability = number;
	export type Sound4 = string;
	/**
	 * If true, and the destroyed entity has loot tables, it will drop loot as if it were destroyed by the player dealing damage to it.
	 */
	export type DropLoot1 = boolean;
	export type UnlockedBy18 = string;
	export type EnglishText34 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText27 = string;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll23 = boolean;
	export type Quantity29 = number;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude19 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags18 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants18 = boolean;
	export type EntityToDestroy = "Target Entity" | "Self" | "Summoner";
	/**
	 * The chance that this action will occur.
	 */
	export type Chance5 = number;
	export type CameraShakeAmount = number;
	export type UnlockedBy20 = string;
	export type EnglishText35 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText28 = string;
	export type VisualEffect2 =
	  | {
	      electric_arc_color: Color5;
	      effect_type: "Electric Arc";
	      electric_arc_source_distance?: DistanceFromSourcePixels1;
	      electric_arc_destination_distance?: DistanceFromDestinationPixels1;
	      electric_arc_source: Source2;
	      electric_arc_destination: Destination2;
	    }
	  | {
	      effect_type: "Ground Decal";
	      decal_sprite: DecalSprite2;
	      decal_duration?: DecalDurationSeconds2;
	      decal_location: Location3;
	      decal_max_alpha?: MaxAlpha2;
	      decal_scale?: DecalScale2;
	    }
	  | {
	      explosion_z_offset?: ZOffset5;
	      effect_type: "Explosion";
	      explosion_random_delay?: RandomDelaySeconds2;
	      explosion_random_distance?: RandomDistanceGridSpaces2;
	      explosion_smoke?: ShowSmoke2;
	      explosion_sound?: Sound5;
	      explosion_scale?: ExplosionScale2;
	      explosion_location: Location4;
	      explosion_highlight_color?: HighlightColor2;
	      explosion_color: BaseColor2;
	      explosion_y_offset?: YOffset5;
	      explosion_slomo_burst: SlowMotionPulse2;
	    }
	  | {
	      effect_type: "Particle Burst";
	      burst_particle: Particle;
	      bursts: Bursts1;
	    }
	  | {
	      effect_type: "Particle System Burst";
	      particle_system_z_offset?: ZOffset7;
	      particle_system: ParticleSystem3;
	      particle_system_y_offset?: YOffset6;
	      particle_system_emitter_scale?: EmitterScale3;
	      particle_system_location: Location5;
	    };
	export type Blue17 = number;
	export type Red17 = number;
	export type Green17 = number;
	export type DistanceFromSourcePixels1 = number;
	export type DistanceFromDestinationPixels1 = number;
	export type Source2 = "Self" | "Ground Target" | "Target Entity" | "Summoner";
	export type Destination2 = "Self" | "Ground Target" | "Target Entity" | "Summoner";
	/**
	 * This sprite will be drawn subtractively.
	 */
	export type DecalSprite2 = string;
	export type Min32 = number;
	export type Max32 = number;
	export type Location3 = "Self" | "Ground Target" | "Target Entity" | "Summoner";
	export type MaxAlpha2 = number;
	export type Min33 = number;
	export type Max33 = number;
	/**
	 * If spawning on the ground, this will be height above ground. If spawning on targets, it will spawn at their height midpoints, plus this offset.
	 */
	export type ZOffset5 = number;
	export type Min34 = number;
	export type Max34 = number;
	export type Min35 = number;
	export type Max35 = number;
	/**
	 * If true, smoke will be spawned at the explosion location.
	 */
	export type ShowSmoke2 = boolean;
	/**
	 * There is a default explosion sound, but you can override it here.
	 */
	export type Sound5 = string;
	export type Min36 = number;
	export type Max36 = number;
	export type Location4 = "Self" | "Ground Target" | "Target Entity" | "Summoner";
	export type Blue18 = number;
	export type Red18 = number;
	export type Green18 = number;
	export type Blue19 = number;
	export type Red19 = number;
	export type Green19 = number;
	/**
	 * Can be useful for depth-sorting. For example, a Y offset of 1 will spawn the explosion in front of whatever is explosing.
	 */
	export type YOffset5 = number;
	/**
	 * If true, there will be a brief slow-down of the game when the explosion occurs to make it feel more impactful. Use sparingly.
	 */
	export type SlowMotionPulse2 = boolean;
	export type Min37 = number;
	export type Max37 = number;
	/**
	 * If set, the particles will always move away from the center of the source.
	 */
	export type BlastOutward1 = boolean;
	export type Source3 = "Self" | "Ground Target" | "Target Entity" | "Summoner";
	export type Min38 = number;
	export type Max38 = number;
	export type Min39 = number;
	export type Max39 = number;
	/**
	 * Billboard bursts are good for shooting things up and out. Ground bursts are good for making smoke rings and such.
	 */
	export type Perspective1 = "Billboard" | "Isometric";
	/**
	 * If set, the spawn radius will be treated as grid spaces instead of pixels.
	 */
	export type SpawnRadiusAsGrid1 = boolean;
	/**
	 * If set, the radius of the spawning will scale relative to the caster's 'scale' modifier. Useful for keeping particles lined up with telegraphs.
	 */
	export type ScaledSpawnRadius1 = boolean;
	/**
	 * If checked, the particles will spawn at z=0 instead of on a target or caster.
	 */
	export type SpawnOnGround1 = boolean;
	/**
	 * If spawning on the ground, this will be height above ground. If spawning on targets, it will spawn at their height midpoints, plus this offset.
	 */
	export type ZOffset6 = number;
	/**
	 * If spawning on the ground, this will be height above ground. If spawning on targets, it will spawn at their height midpoints, plus this offset.
	 */
	export type ZOffset7 = number;
	export type ParticleSystem3 = string;
	/**
	 * Can be useful for depth-sorting. For example, a Y offset of 1 will spawn the explosion in front of whatever is explosing.
	 */
	export type YOffset6 = number;
	export type EmitterScale3 = number;
	export type Location5 = "Self" | "Ground Target" | "Target Entity" | "Summoner";
	export type Item3 = string;
	export type Quantity30 = number;
	/**
	 * The chance that this action will occur.
	 */
	export type Chance6 = number;
	export type Item4 = string;
	export type Min40 = number;
	export type Max40 = number;
	export type UnlockedBy22 = string;
	export type EnglishText36 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText29 = string;
	/**
	 * The chance that this action will occur.
	 */
	export type Chance7 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll24 = boolean;
	export type Quantity32 = number;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude20 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags19 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants19 = boolean;
	export type UnlockedBy24 = string;
	export type EnglishText37 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText30 = string;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll25 = boolean;
	export type Quantity33 = number;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude21 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags20 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants20 = boolean;
	/**
	 * The number of stacks applied can be multiplied by the number of targets captured.
	 */
	export type MultiplyStacksByTargets = boolean;
	export type BuffTarget1 = "Self" | "Summoner" | "Target Entity";
	/**
	 * If set, and if the buff deals damage, this will modify its damage.
	 */
	export type DamageModifier1 = number;
	/**
	 * How many stacks of the buff to apply. Stacks will build up within instances of buffs, and then will overflow into new instances if the maximum stacks are reached for the current instance.
	 */
	export type Stacks25 = number;
	/**
	 * If set, and if the buff can heal, this will set how much health it restores (based on the level of the user).
	 */
	export type HealingPercentage2 = number;
	export type UnlockedBy26 = string;
	export type EnglishText38 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText31 = string;
	/**
	 * The chance that this action will occur.
	 */
	export type Chance8 = number;
	export type ChangeType = "Set" | "Increment";
	export type DatafieldOwner3 = "Self" | "Target Entity" | "Summoner";
	export type Value2 = number;
	export type UnlockedBy28 = string;
	export type EnglishText39 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText32 = string;
	export type DataField2 = string;
	/**
	 * If false, the new entity can spawn just about anywhere, including THROUGH WALLS!
	 */
	export type RequireLineOfSight1 = boolean;
	export type EntityToCreate = string;
	/**
	 * 'Summoned' entities exist on behalf of their creators, and their actions will cast blame to the creator. Defaults to false.
	 */
	export type EntityIsSummoned1 = boolean;
	export type Min41 = number;
	export type Max41 = number;
	/**
	 * Whether spawning will attempt to find a clear space.
	 */
	export type AttemptNonOverlap1 = boolean;
	/**
	 * Where the new entity will be created.
	 */
	export type NewEntityLocation1 = "Ground Target" | "Self" | "Target Entity" | "Summoner";
	export type UnlockedBy30 = string;
	export type EnglishText40 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText33 = string;
	export type Projectile =
	  | {
	      time_in_flight: FlightTimeSeconds;
	      ground_impact_action_groups?: ActionGroups2;
	      multiples?: LobMultipleProjectiles;
	      style?: "Lob";
	    }
	  | {
	      lifetime_range: LifetimeSeconds;
	      acceleration?: AccelerationPixelsSec2;
	      style?: "Bullet";
	      bullet_multiples?: FireMultipleProjectiles;
	      z_behavior?: ZBehavior;
	      bullet_impact_action_groups?: ActionGroups3;
	      expiration_action_groups?: ActionGroups4;
	      speed_range: SpeedPixelsSec;
	      width: HitboxWidthPixels;
	    };
	export type Min42 = number;
	export type Max42 = number;
	export type Min43 = number;
	export type Max43 = number;
	export type Min44 = number;
	export type Max44 = number;
	export type Min45 = number;
	export type Max45 = number;
	/**
	 * The probability of this batch of projectiles firing.
	 */
	export type BatchChance = number;
	export type Min46 = number;
	export type Max46 = number;
	export type AccelerationPixelsSec2 = number;
	export type Min47 = number;
	export type Max47 = number;
	export type Min48 = number;
	export type Max48 = number;
	/**
	 * The probability of this batch of projectiles firing.
	 */
	export type BatchChance1 = number;
	export type ZStyle = "Linear" | "Cubic";
	/**
	 * What proportion of the projectile's life it takes to reach the Z target..
	 */
	export type ZTime = number;
	/**
	 * How high the bullet will end up being off the ground (in pixels).
	 */
	export type ZTarget = number;
	export type Min49 = number;
	export type Max49 = number;
	export type HitboxWidthPixels = number;
	export type Buff3 = string;
	export type Target = "Self" | "Summoner" | "Target Entity";
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll26 = boolean;
	export type Quantity36 = number;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude22 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags21 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants21 = boolean;
	export type UnlockedBy32 = string;
	export type EnglishText41 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText34 = string;
	export type RemoveNegativeBuffs1 = boolean;
	export type RemovePositiveBuffs1 = boolean;
	/**
	 * How many stacks of the buff to remove. If unset, all stacks will be removed.
	 */
	export type Stacks27 = number;
	/**
	 * The chance that this action will occur.
	 */
	export type Chance9 = number;
	/**
	 * The chance that this action will occur.
	 */
	export type Chance10 = number;
	/**
	 * How many charges of Juke to change.
	 */
	export type ChargeIncrementAmount = number;
	export type Sound6 = string;
	export type ChanceOfPlaying1 = number;
	export type AnimationName1 = string;
	export type Looping2 = boolean;
	export type LeapDestination = "Ground Target" | "Target Entity" | "Self" | "Summoner";
	/**
	 * How many seconds the leaper will be airborne.
	 */
	export type LeapDuration = number;
	/**
	 * If true, the leaper will not be stopped by water.
	 */
	export type LeapTraversesWater = boolean;
	/**
	 * You can give some time after the leap for an animation to play. The leaping entity will be immobile while this animation plays.
	 */
	export type FollowthroughSeconds = number;
	export type Sound7 = string;
	export type ChanceOfPlaying2 = number;
	/**
	 * If your leap is going too high, turn gravity down.
	 */
	export type GravityModifier = number;
	/**
	 * If checked, the telegraph for this movement outcome will be drawn during the initial ability cast, not just while the entity is midair.
	 */
	export type ShowTelegraphDuringCast = boolean;
	/**
	 * The knock direction will be randomly modified (up or down) by up to this amount.
	 */
	export type DirectionRandomness2 = number;
	export type UnlockedBy34 = string;
	export type EnglishText42 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText35 = string;
	/**
	 * How far the entity will be knocked back.
	 */
	export type DistanceGridSpaces = number;
	/**
	 * In degrees. 0 is away from the caster, 180 is toward the caster.
	 */
	export type DirectionOffset1 = number;
	export type Sound8 = string;
	export type ChanceOfPlaying3 = number;
	/**
	 * The chance that this action will occur.
	 */
	export type Chance11 = number;
	/**
	 * If true, the knock direction will be settable in the editor the 'Knockback Direction' datafield. This means the knockback won't be away from the caster by default.
	 */
	export type DirectionDatafield = boolean;
	export type EntityToKnockBack = "Target Entity" | "Self" | "Summoner";
	export type Min50 = number;
	export type Max50 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll27 = boolean;
	export type Quantity37 = number;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude23 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags22 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants22 = boolean;
	export type UnlockedBy36 = string;
	export type EnglishText43 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText36 = string;
	/**
	 * If true, the actions in this action group will always attempt to be performed on the caster.
	 */
	export type CastOnSelf = boolean;
	export type X = number;
	export type Y = number;
	export type ScaleModifier1 = number;
	export type UnlockedBy38 = string;
	export type EnglishText44 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText37 = string;
	export type X1 = boolean;
	export type Y1 = boolean;
	export type Shape1 =
	  | {
	      color?: EditorColor;
	      shape?: "circle";
	      offset?: Offset2;
	      arc?: Arc;
	      scale?: ScaleModifier2;
	      unlocked_by?: UnlockedBy39;
	      radius: Radius;
	      mirror?: Mirror1;
	      name?: NameInternal2;
	    }
	  | {
	      color?: EditorColor1;
	      shape?: "triangles";
	      offset?: Offset3;
	      scale?: ScaleModifier3;
	      unlocked_by?: UnlockedBy41;
	      mirror?: Mirror2;
	      points: Points;
	      name?: NameInternal3;
	    };
	export type Blue20 = number;
	export type Red20 = number;
	export type Green20 = number;
	export type X2 = number;
	export type Y2 = number;
	export type SpreadDegrees = number;
	export type DirectionDegrees = number;
	export type ScaleModifier2 = number;
	export type UnlockedBy40 = string;
	export type EnglishText45 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText38 = string;
	export type Inner = number;
	export type Outer = number;
	export type X3 = boolean;
	export type Y3 = boolean;
	export type NameInternal2 = string;
	export type Blue21 = number;
	export type Red21 = number;
	export type Green21 = number;
	export type X4 = number;
	export type Y4 = number;
	export type ScaleModifier3 = number;
	export type UnlockedBy42 = string;
	export type EnglishText46 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText39 = string;
	export type X5 = boolean;
	export type Y5 = boolean;
	export type X6 = number;
	export type Y6 = number;
	export type NameInternal3 = string;
	export type NameInternal4 = string;
	export type RotateWithAimDirection = boolean;
	/**
	 * This will be the scale before the animation begins. The scale will always end at 1, so the telegraph matches reality when the animation is finished.
	 */
	export type ScaleStart = number;
	export type Start = number;
	export type End = number;
	export type Style5 = "Ease Out Elastic" | "Ease Out Back" | "Ease Out Cubic" | "Linear";
	export type Start1 = number;
	export type End1 = number;
	export type Start2 = number;
	export type End2 = number;
	/**
	 * If true, the caster will be included as a target if the caster is inside the telegraph.
	 */
	export type IncludeCasterAsViableTarget = boolean;
	export type NameInternal5 = string;
	/**
	 * The sprite to draw below the main sprite. Subimages must correspond with the Sprite.
	 */
	export type UnderSprite1 = string;
	/**
	 * The primary sprite of the tile.
	 */
	export type MainSprite1 = string;
	export type Blue22 = number;
	export type Red22 = number;
	export type Green22 = number;
	/**
	 * This is a large sprite that will be drawn underwater if this tile is at a shoreline. It helps create a sense of the water getting deeper.
	 */
	export type ShelfUnderwaterSprite1 = string;
	/**
	 * If this tile is against water, the Shoreline Water Sprite will be drawn in the water to convey how the tile interacts with the water.
	 */
	export type ShorelineUnderwaterSprite1 = string;
	/**
	 * The sprite to use when displaying the tile in the UI (e.g. Build Mode).
	 */
	export type Icon1 = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup8 = string;
	/**
	 * The sound to play when this tile is placed in the editor or in Build Mode.
	 */
	export type PlacementSound4 = string;
	/**
	 * The sound to play when the player walks on this tile.
	 */
	export type FootstepSound1 = string;
	/**
	 * Whether the tile should be X-flipped randomly when placed.
	 */
	export type Flippable3 = boolean;
	export type EnglishText47 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText40 = string;
	/**
	 * The probability of a given tile having Dapples on it.
	 */
	export type SpawnChance1 = number;
	export type Blue23 = number;
	export type Red23 = number;
	export type Green23 = number;
	export type Object3 = string;
	/**
	 * If false, the object will always render itself at its normal color and won't be darkened or brightened by lighting.
	 */
	export type UseLighting3 = boolean;
	export type WorldSprite6 = string;
	export type UIIcon7 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler14 = string;
	/**
	 * If false, this item can be placed in water.
	 */
	export type RequiresLand = boolean;
	/**
	 * When first spawned in the world, this thing can randomly scale itself down (to a minimum) to add variety. This scale should be preserved between sessions, so this will only apply to newly-created instances of this asset.
	 */
	export type RandomScalingMinimum = number;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup9 = string;
	export type EnglishText48 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText41 = string;
	/**
	 * How many grid spaces away the player can build.
	 */
	export type BuildModeRange = number;
	export type Weapon = number;
	export type Gloves = number;
	export type Boots = number;
	export type Helm = number;
	export type Trinket1 = number;
	export type Suit = number;
	/**
	 * How many real-world minutes it takes for a cleared terrain tile to respawn after being destroyed.
	 */
	export type ClearedTileRespawnMinutes = number;
	export type SecondsAtLevel1 = number;
	export type SecondsChangePerLevel = number;
	export type MinSeconds1 = number;
	export type MaxSeconds1 = number;
	/**
	 * Linear increase in crafting cost for items that have pre-set qualities, such as armor that has built-in stats.
	 */
	export type CraftingCostGrowthPerQuality = number;
	/**
	 * The default number of times the player must craft an item to reach the first skill level.
	 */
	export type NumCraftsForLevel1 = number;
	/**
	 * How many more items must be crafted each skill level, relative to the prior skill level. 100% means double.
	 */
	export type CostGrowthPerSkillLevel = number;
	export type CostReduction = number;
	export type OutputIncrease = number;
	/**
	 * How many more seconds each reseach node takes as you go deeper in the tree.
	 */
	export type ResearchTimeGrowthPerLevel = number;
	/**
	 * All healing items have the same cooldown. Adjust it here.
	 */
	export type HealingCooldownSeconds = number;
	/**
	 * The amount of effort (materials) it takes per component of a research node. More effort means more components.
	 */
	export type ResearchEffortPerComponent = number;
	export type HomeTeleportCooldownSeconds = number;
	/**
	 * Linear increase in crafting cost per level.
	 */
	export type CraftingCostGrowthPerLevel = number;
	/**
	 * How many seconds it takes to kill a standard boss.
	 */
	export type BossTimeToKill = number;
	/**
	 * How many real-world minutes it takes to go through a full day-night cycle in-game.
	 */
	export type MinutesPerGameDay = number;
	/**
	 * Compounding increase in Damage Per Second per level.
	 */
	export type DPSGrowthLevel = number;
	/**
	 * How fast things move baseline in tiles per second.
	 */
	export type BaseGameplayMoveSpeed = number;
	export type SecondsAtLevel11 = number;
	export type SecondsChangePerLevel1 = number;
	export type MinSeconds2 = number;
	export type MaxSeconds2 = number;
	export type SecondsAtLevel12 = number;
	export type SecondsChangePerLevel2 = number;
	export type MinSeconds3 = number;
	export type MaxSeconds3 = number;
	/**
	 * How many real-world minutes it takes for a typical world element to respawn after being destroyed.
	 */
	export type WorldElementRespawnMinutes = number;
	/**
	 * Seconds to research a starting node for an Artisan.
	 */
	export type ResearchBaseSeconds = number;
	/**
	 * At level 1, the player won't have full HP until their armor is equipped. This number represents the proportion of their 'armored' healt the player will start with.
	 */
	export type PlayerBaseHP = number;
	export type EnglishText49 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText42 = string;
	/**
	 * The amount of effort (materials) it takes per component to craft an item. More effort means more components. Item tags add categorical multipliers.
	 */
	export type CraftingEffortPerComponent = number;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup10 = string;
	export type NameInternal6 = string;
	/**
	 * Unless otherwise specified, we will try to play the animation using this Spine name when we enter this animation state.
	 */
	export type DefaultSpineAnimationName = string;
	/**
	 * If no animation information is present for this state, it can fall back to another state.
	 */
	export type FallbackState = string;
	/**
	 * Describe scenarios in which this animation state is used.
	 */
	export type Description9 = string;
	export type Name15 = string;
	/**
	 * A unique sound to be played when this item is collected into your body.
	 */
	export type CollectionSound = string;
	export type EquipmentSet3 = string;
	export type WorldSprite7 = string;
	/**
	 * The sound this item makes when being placed in the inventory.
	 */
	export type InventorySound1 = string;
	/**
	 * By default, wieldables cannot be stacked in the inventory. To conserve space, you can make some wieldables stackable if they are consumable.
	 */
	export type Stackable = boolean;
	/**
	 * The sound this item makes when brought out into the player's hand.
	 */
	export type WieldSound = string;
	export type UIIcon8 = string;
	/**
	 * The sound this thing makes when used (fired, swung, etc).
	 */
	export type UseSound = string;
	export type ScaleModifier4 = number;
	/**
	 * By default, we will attempt to use the mote ID.
	 */
	export type SpineAttachmentName = string;
	export type IgnoreInLevelViewer1 = boolean;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup11 = string;
	export type Ability6 = string;
	export type OutputQuantity5 = number;
	export type ResearchNode11 = string;
	export type Style6 = "Additive" | "Multiplicative";
	export type ChangePerPoint15 = number;
	/**
	 * What workstation the player must be near to craft this recipe.
	 */
	export type Station6 = string;
	export type ResearchNode12 = string;
	export type ChangePerPoint16 = number;
	export type UnlockedBy43 = string;
	/**
	 * Change this number to increase or decrease the number of materials required to craft this item.
	 */
	export type EffortModifier6 = number;
	/**
	 * By default, wieldable items require the player to manually pick them up off the ground. You can uncheck this box to make the items auto-pickup instead.
	 */
	export type ManualPickup = boolean;
	export type Type1 = string;
	export type EnglishText50 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText43 = string;
	/**
	 * A number that is connected to the relative power level of this thing.
	 */
	export type Level1 = number;
	export type EnglishText51 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText44 = string;
	export type Min51 = number;
	export type Max51 = number;
	/**
	 * This group can inherit gain from a parent group.
	 */
	export type ParentGroup = string;
	/**
	 * The name of this group of sounds.
	 */
	export type Name17 = string;
	/**
	 * All sounds in this group will have their gain multiplied by this number at all times. This will also multiply with parent groups. So for example, if this group has a gain modifier of 0.5, and its parent also has a gain modifier of 0.5, then sounds in this group will have a final gain of 0.25.
	 */
	export type GainModifier = number;
	export type Icon2 = string;
	export type EnglishText52 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText45 = string;
	/**
	 * The particle system's string ID in the Game Maker project.
	 */
	export type Name19 = string;
	export type Requirement1 =
	  | {
	      quest_status: QuestStatus3;
	      style: "Quest";
	      quest: QuestToCheck3;
	    }
	  | {
	      style: "Equipped";
	      item: Item5;
	    }
	  | {
	      style: "Time";
	      time: Time1;
	    }
	  | {
	      items_owned: Items28;
	      style: "Items Owned";
	    }
	  | {
	      insight: Insight7;
	      insight_status: InsightStatus1;
	      style: "Insight";
	    }
	  | {
	      following: Following4;
	      artisan?: Artisan1;
	      style: "Artisan Following";
	    }
	  | {
	      comfort: Comfort1;
	      comfort_status: ComfortStatus1;
	      style: "Comfort";
	    }
	  | {
	      style: "Inventory Evaluation";
	      comparisons: InventoryEvaluation1;
	    }
	  | {
	      style: "Area";
	      area: AreaToCheck1;
	      item_id: Entity1;
	    }
	  | {
	      style: "Teleporter Active";
	      teleporter_active: ActiveState1;
	      teleporter_area?: TeleporterArea1;
	    }
	  | {
	      invert: Invert1;
	      group_requirements: Requirements1;
	      require_all: RequireAll28;
	      style: "Requirement Group";
	    }
	  | {
	      following?: Following5;
	      pet?: Pet1;
	      style: "Pet";
	      stage?: PetStage1;
	    }
	  | {
	      style: "Boss Defeated";
	      boss: Boss4;
	    };
	export type QuestStatus3 = "Complete" | "Started" | "Not Started";
	/**
	 * The quest whose status we are querying.
	 */
	export type QuestToCheck3 = string;
	/**
	 * The player must be wearing this item.
	 */
	export type Item5 = string;
	export type Time1 = "Day" | "Night";
	export type Quantity38 = number;
	export type Insight7 = string;
	export type InsightStatus1 = "Complete" | "Available" | "Locked";
	/**
	 * If false, then this will only trigger if the artisan is not following.
	 */
	export type Following4 = boolean;
	/**
	 * Leave unset to query whether any artisans are either following or not following. Otherwise, this will query the specific artisan you have chosen.
	 */
	export type Artisan1 = string;
	export type Comfort1 = string;
	export type ComfortStatus1 = "Complete" | "Available";
	export type Item6 = string;
	export type Quantity39 = number;
	export type AreaToCheck1 = string;
	/**
	 * The entity that must be in the area for the requirement to pass.
	 */
	export type Entity1 = string;
	/**
	 * The teleporter must be in this state.
	 */
	export type ActiveState1 = boolean;
	/**
	 * If not set, this requirement will check for 'any' teleporters.
	 */
	export type TeleporterArea1 = string;
	/**
	 * If set, then this requirement group will 'pass' if its requirements are NOT met.
	 */
	export type Invert1 = boolean;
	/**
	 * If set to false, then this requirement group will pass if any of its requirements are met.
	 */
	export type RequireAll28 = boolean;
	/**
	 * If set, then this will only trigger if the pet's following state matches this.
	 */
	export type Following5 = boolean;
	/**
	 * If unset, then this requirement will be met if any of your pets match it.
	 */
	export type Pet1 = string;
	export type Boss4 = string;
	export type EnglishText53 = string;
	export type Emoji2 = string;
	export type NameInternal7 = string;
	/**
	 * How the actor animates while not actively moving.
	 */
	export type StationaryVisuals2 =
	  | {
	      animation?: Animation6;
	      style?: "Stand";
	      babbler?: Babbler15;
	    }
	  | {
	      animation?: Animation7;
	      z_baseline: BaselineAltitudePixels4;
	      style: "Fly";
	      babbler?: Babbler16;
	      z_sine?: AltitudeSineWave4;
	      flaps?: FlappingVerticalMovements4;
	    };
	/**
	 * Defaults to 'idle.
	 */
	export type Animation6 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler15 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation7 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels4 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler16 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed7 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude5 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance4 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds4 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds4 = number;
	export type MovementVisuals2 =
	  | {
	      hop_speed: HopVerticalSpeed2;
	      animation?: HopAnimationName2;
	      hop_anticipation?: HopAnticipationSeconds2;
	      style: "Hop";
	      babbler?: Babbler17;
	      hop_followthrough?: PostHopFollowthroughSeconds2;
	    }
	  | {
	      run_vertical_speed: RunVerticalBounceSpeed2;
	      animation?: RunAnimationName2;
	      style: "Run";
	      babbler?: Babbler18;
	    }
	  | {
	      animation?: CrawlAnimationName2;
	      style: "Crawl";
	      babbler?: Babbler19;
	    }
	  | {
	      animation?: Animation8;
	      z_baseline: BaselineAltitudePixels5;
	      style: "Fly";
	      babbler?: Babbler20;
	      z_sine?: AltitudeSineWave5;
	      flaps?: FlappingVerticalMovements5;
	    };
	/**
	 * As a percentage of base gravity. This is fairly sensitive.
	 */
	export type HopVerticalSpeed2 = number;
	/**
	 * Defaults to 'hop' but can be overridden.
	 */
	export type HopAnimationName2 = string;
	/**
	 * How long to hold before rising off the ground, to make room for a pre-hop animation.
	 */
	export type HopAnticipationSeconds2 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler17 = string;
	/**
	 * How long to hold after landing on the ground from a hop, to make room for animations.
	 */
	export type PostHopFollowthroughSeconds2 = number;
	/**
	 * How fast the character should pop up off the ground with each leg movement. As a percentage of base gravity. This is fairly sensitive.
	 */
	export type RunVerticalBounceSpeed2 = number;
	/**
	 * Defaults to 'run' but can be overridden.
	 */
	export type RunAnimationName2 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler18 = string;
	/**
	 * Defaults to 'crawl' but can be overridden.
	 */
	export type CrawlAnimationName2 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler19 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation8 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels5 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler20 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed8 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude6 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance5 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds5 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds5 = number;
	/**
	 * Relative to the global movement speed.
	 */
	export type MovementSpeed2 = number;
	export type Condition2 =
	  | {
	      dock_tile: Dock1;
	      terrain_tile: Terrain;
	      type?: "Standing on Tile Type";
	      floor_tile: Floor;
	    }
	  | {
	      interior_tiles: InteriorTileArea;
	      type?: "Room Size";
	    }
	  | {
	      type?: "Be Indoors";
	    }
	  | {
	      whole_building: WholeBuilding;
	      item_tally: {
	        comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	        value0?: Items29;
	        value1?: number;
	      };
	      type?: "Item Tally";
	    }
	  | {
	      num_rooms: NumberOfRooms;
	      type?: "Number of Rooms";
	    }
	  | {
	      destination_items: TargetItems;
	      whole_building: WholeBuilding1;
	      distance: TileDistance;
	      source_items: SourceItems;
	      type?: "Item Relationships";
	    };
	export type Dock1 = boolean;
	export type Terrain = boolean;
	export type Floor = boolean;
	/**
	 * If true, the entire building will be checked instead of just the Artisan's room.
	 */
	export type WholeBuilding = boolean;
	/**
	 * If true, the entire building will be checked instead of just the Artisan's room.
	 */
	export type WholeBuilding1 = boolean;
	export type EnglishText54 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText46 = string;
	export type Egg = string;
	/**
	 * The egg will periodically jiggle and make a sound while hatching.
	 */
	export type EggSounds = string;
	/**
	 * This is to show the preview image in the Game Changer.
	 */
	export type PreviewSkin = string;
	/**
	 * A small sound the creature can make at random, for added personality.
	 */
	export type ChirpSound = string;
	export type Scale1 = number;
	export type SkinName = string;
	/**
	 * If false, the object will always render itself at its normal color and won't be darkened or brightened by lighting.
	 */
	export type UseLighting4 = boolean;
	/**
	 * Who the creature will attempt to cast this ability on.
	 */
	export type Target1 = "Enemy" | "Player";
	/**
	 * How the actor animates while not actively moving.
	 */
	export type StationaryVisuals3 =
	  | {
	      animation?: Animation9;
	      style?: "Stand";
	      babbler?: Babbler21;
	    }
	  | {
	      animation?: Animation10;
	      z_baseline: BaselineAltitudePixels6;
	      style: "Fly";
	      babbler?: Babbler22;
	      z_sine?: AltitudeSineWave6;
	      flaps?: FlappingVerticalMovements6;
	    };
	/**
	 * Defaults to 'idle.
	 */
	export type Animation9 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler21 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation10 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels6 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler22 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed9 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude7 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance6 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds6 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds6 = number;
	export type MovementVisuals3 =
	  | {
	      hop_speed: HopVerticalSpeed3;
	      animation?: HopAnimationName3;
	      hop_anticipation?: HopAnticipationSeconds3;
	      style: "Hop";
	      babbler?: Babbler23;
	      hop_followthrough?: PostHopFollowthroughSeconds3;
	    }
	  | {
	      run_vertical_speed: RunVerticalBounceSpeed3;
	      animation?: RunAnimationName3;
	      style: "Run";
	      babbler?: Babbler24;
	    }
	  | {
	      animation?: CrawlAnimationName3;
	      style: "Crawl";
	      babbler?: Babbler25;
	    }
	  | {
	      animation?: Animation11;
	      z_baseline: BaselineAltitudePixels7;
	      style: "Fly";
	      babbler?: Babbler26;
	      z_sine?: AltitudeSineWave7;
	      flaps?: FlappingVerticalMovements7;
	    };
	/**
	 * As a percentage of base gravity. This is fairly sensitive.
	 */
	export type HopVerticalSpeed3 = number;
	/**
	 * Defaults to 'hop' but can be overridden.
	 */
	export type HopAnimationName3 = string;
	/**
	 * How long to hold before rising off the ground, to make room for a pre-hop animation.
	 */
	export type HopAnticipationSeconds3 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler23 = string;
	/**
	 * How long to hold after landing on the ground from a hop, to make room for animations.
	 */
	export type PostHopFollowthroughSeconds3 = number;
	/**
	 * How fast the character should pop up off the ground with each leg movement. As a percentage of base gravity. This is fairly sensitive.
	 */
	export type RunVerticalBounceSpeed3 = number;
	/**
	 * Defaults to 'run' but can be overridden.
	 */
	export type RunAnimationName3 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler24 = string;
	/**
	 * Defaults to 'crawl' but can be overridden.
	 */
	export type CrawlAnimationName3 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler25 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation11 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels7 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler26 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed10 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude8 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance7 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds7 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds7 = number;
	/**
	 * Relative to the global movement speed.
	 */
	export type MovementSpeed3 = number;
	/**
	 * If checked, this ability fall back to Enabled if no 'Enablement' criteria are met. If unchecked, it will default to disabled.
	 */
	export type EnabledByDefault = boolean;
	/**
	 * This enablement will be met if the pet is at least at this stage of growth.
	 */
	export type Stage = "Baby" | "Adult" | "Embiggened";
	/**
	 * This enablement will be met if this mastery is active.
	 */
	export type Mastery = string;
	/**
	 * If checked, this ability will be enabled when the stage and mastery requirements are met. If unchecked, the ability will be disabled if the criteria are met.
	 */
	export type Enables = boolean;
	export type Ability8 = string;
	export type MinSeconds4 = number;
	export type MaxSeconds4 = number;
	export type WorldSprite8 = string;
	export type Baby = number;
	export type Embiggened = number;
	/**
	 * Whether this buff changes this stat additively or multiplicatively.
	 */
	export type ModifierStyle = "Add" | "Multiply";
	export type Stat3 = string;
	export type MasteryDeactivatesSynergy = boolean;
	export type Mastery1 = string;
	/**
	 * If checked, the pet will be unable to use their attack unless they can find a path to the target.
	 */
	export type AbilityRequiresMelee = boolean;
	export type Blue24 = number;
	export type Red24 = number;
	export type Green24 = number;
	export type Width2 = number;
	export type Height2 = number;
	export type UIIcon9 = string;
	/**
	 * The sound the pet will make when its ability is activated.
	 */
	export type AbilityActivationSound = string;
	export type EnglishText55 = string;
	export type AbilityCooldownSeconds = number;
	export type EnglishText56 = string;
	/**
	 * The sound the pet will make when you tell it to begin following you.
	 */
	export type FollowSound = string;
	/**
	 * The sound the pet will make when you tell it to go back to its nest.
	 */
	export type StopFollowingSound = string;
	export type EnglishText57 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText47 = string;
	/**
	 * The sound the pet will make when you open its UI (once it is hatched).
	 */
	export type UIOpenSound = string;
	export type EnglishText58 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText48 = string;
	/**
	 * The object that members of this species will use.
	 */
	export type Object4 = string;
	export type Blue25 = number;
	export type Red25 = number;
	export type Green25 = number;
	export type WorldSprite9 = string;
	export type Width3 = number;
	export type Height3 = number;
	export type UIIcon10 = string;
	export type EnglishText59 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText49 = string;
	/**
	 * The name of the attachment slot (from Spine).
	 */
	export type SlotName = string;
	/**
	 * If this Spine has multiple tracks, which track must these animations be playing on?
	 */
	export type AnimationTrack = number;
	/**
	 * The name of the attachment slot (from Spine).
	 */
	export type Slot = string;
	export type Inactive = number;
	export type Active = number;
	export type Inactive1 = string;
	export type Active1 = string;
	/**
	 * For your internal reference.
	 */
	export type TrackName = string;
	/**
	 * Whether this is a Spine sprite.
	 */
	export type Spine = boolean;
	/**
	 * The name of the sprite in the GMS project.
	 */
	export type Name23 = string;
	export type Artisan2 = string;
	/**
	 * What this insight is unlocked by (if anything)
	 */
	export type UnlockedBy44 = string;
	export type Icon3 = string;
	/**
	 * Change this number to increase or decrease the number of materials required to research this Insight.
	 */
	export type EffortModifier7 = number;
	/**
	 * Adjust the baseline time to research this insight by changing this number. E.g. a multiplier of 0.5 will cut the research time in half.
	 */
	export type TimeModifier = number;
	export type EnglishText60 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText50 = string;
	/**
	 * The maximum number of points that can be invested into this Insight.
	 */
	export type MaximumPoints = number;
	export type EnglishText61 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText51 = string;
	/**
	 * A collection of rules about how a certain kind of data is structured, accessed, and validated.
	 */
	export type Schema = Schema1 & Schema2;
	export type Name24 = string;
	export type Type2 =
	  | "Collection"
	  | "List"
	  | "Text"
	  | "Number"
	  | "Choice"
	  | "Constant"
	  | "Schema Reference"
	  | "Mote Reference";
	export type Description12 = string;
	export type Schema2 =
	  | {
	      maximumValue?: MaximumValue;
	      exclusiveMaximum?: MaximumIsExclusive;
	      multipleOf?: MultipleOf;
	      minimumValue?: MinimumValue;
	      exclusiveMinimum?: MinimumIsExclusive;
	      _type?: "Number";
	      type?: "number";
	    }
	  | {
	      properties?: PropertyDefinitions;
	      minProperties?: MinimumProperties;
	      _type?: "Collection";
	      type?: "object";
	      maxProperties?: MaximumProperties;
	    };
	/**
	 * The highest allowed value for this number.
	 */
	export type MaximumValue = number;
	/**
	 * If true, the number cannot equal the maximum value -- it must be less.
	 */
	export type MaximumIsExclusive = boolean;
	/**
	 * If set, the number in the data must be a multiple of this number.
	 */
	export type MultipleOf = number;
	/**
	 * The lowest allowed value for this number.
	 */
	export type MinimumValue = number;
	/**
	 * If true, the number cannot equal the minimum value -- it must be greater.
	 */
	export type MinimumIsExclusive = boolean;
	export type MinimumProperties = number;
	export type MaximumProperties = number;
	export type Blue26 = number;
	export type Red26 = number;
	export type Green26 = number;
	export type Icon4 = string;
	/**
	 * The order in which this thing should appear in the Editor selector.
	 */
	export type Order2 = number;
	/**
	 * When in this editor category, how the editor should select things and interact with the world.
	 */
	export type SpawnMode = "Items" | "Tiles" | "Areas" | "Scenes";
	export type Name25 = string;
	export type Min52 = number;
	export type Max52 = number;
	/**
	 * If true, this data field will be preserved as it exists in the World Editor on each instance.
	 */
	export type SaveToBaseWorld = boolean;
	/**
	 * If a world element has this data field and exists out in the world, the data field will be preserved between game sessions as the player saves and loads.
	 */
	export type SaveToGameplay = boolean;
	/**
	 * If true, this data field can be edited in the World Editor.
	 */
	export type Editable = boolean;
	/**
	 * How this data is stored in a buffer.
	 */
	export type DataType = "u8" | "u16" | "u32" | "s8" | "s16" | "s32" | "f32";
	/**
	 * The UID pool that this data field should pull from in the Editor.
	 */
	export type EditorUIDPool = "cl2_items";
	export type UIIcon11 = string;
	/**
	 * If you pick up a world element that has this data field, the data field can be preserved when the item is in your inventory.
	 */
	export type SaveToInventory = boolean;
	/**
	 * An explanation of what this data field is intended to be used for.
	 */
	export type Description13 = string;
	/**
	 * A human-readable name for this data field.
	 */
	export type Name26 = string;
	/**
	 * A text string used to choose which image to display.
	 */
	export type SpineKeyword = string;
	export type EquipmentSet4 = string;
	/**
	 * The sound this item makes when being placed in the inventory.
	 */
	export type InventorySound2 = string;
	export type UIIcon12 = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup12 = string;
	/**
	 * What workstation the player must be near to craft this recipe.
	 */
	export type Station7 = string;
	export type ResearchNode13 = string;
	export type ChangePerPoint17 = number;
	export type UnlockedBy45 = string;
	/**
	 * Change this number to increase or decrease the number of materials required to craft this item.
	 */
	export type EffortModifier8 = number;
	export type ArmorType = string;
	export type EnglishText62 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText52 = string;
	/**
	 * A number that is connected to the relative power level of this thing.
	 */
	export type Level2 = number;
	export type EnglishText63 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText53 = string;
	/**
	 * If false, the object will always render itself at its normal color and won't be darkened or brightened by lighting.
	 */
	export type UseLighting5 = boolean;
	export type WorldSprite10 = string;
	export type Width4 = number;
	export type Height4 = number;
	export type UIIcon13 = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup13 = string;
	export type EnglishText64 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText54 = string;
	export type EnglishText65 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText55 = string;
	export type DamageType2 = string;
	export type Resistance = number;
	/**
	 * Name of this damage profile. For internal use.
	 */
	export type Name29 = string;
	/**
	 * If using a Spine sprite, the object will try to play an animation with this name when it is spawned.
	 */
	export type SpineIdle1 = string;
	/**
	 * If true, this resource will snap to the grid when placed. Only applies to non-solid objects.
	 */
	export type GridSnapping1 = boolean;
	/**
	 * A unique sound to be played when this item is collected into your body.
	 */
	export type CollectionSound1 = string;
	/**
	 * If false, the object will always render itself at its normal color and won't be darkened or brightened by lighting.
	 */
	export type UseLighting6 = boolean;
	export type WorldSprite11 = string;
	export type CanExistOnFloors = boolean;
	export type Width5 = number;
	export type Height5 = number;
	export type UIIcon14 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler27 = string;
	/**
	 * If false, this item can be placed in water.
	 */
	export type RequiresLand1 = boolean;
	export type ScaleModifier5 = number;
	export type IgnoreInLevelViewer2 = boolean;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup14 = string;
	export type EnglishText66 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText56 = string;
	/**
	 * A unique sound to be played when this item is collected into your body.
	 */
	export type CollectionSound2 = string;
	/**
	 * If false, the object will always render itself at its normal color and won't be darkened or brightened by lighting.
	 */
	export type UseLighting7 = boolean;
	/**
	 * If set, this component will be considered 'bait'. This number represents how many additional fish you will catch when using it.
	 */
	export type BaitPower = number;
	export type WorldSprite12 = string;
	export type UIIcon15 = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup15 = string;
	export type OutputQuantity6 = number;
	export type ResearchNode14 = string;
	export type Style7 = "Additive" | "Multiplicative";
	export type ChangePerPoint18 = number;
	/**
	 * What workstation the player must be near to craft this recipe.
	 */
	export type Station8 = string;
	export type ResearchNode15 = string;
	export type ChangePerPoint19 = number;
	export type UnlockedBy46 = string;
	/**
	 * Change this number to increase or decrease the number of materials required to craft this item.
	 */
	export type EffortModifier9 = number;
	export type EnglishText67 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText57 = string;
	/**
	 * If true, and this has a set Bait Power, the bait will boost Whopper catches instead of normal fish.
	 */
	export type WhopperBait = boolean;
	/**
	 * Higher effort items are considered more rare or harder to reach, and recipes will call for fewer of them. Lower effort items will be considered 'cheap', and therefore recipes will demand more of them.
	 */
	export type EffortModifier10 = number;
	export type EnglishText68 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText58 = string;
	export type Blue27 = number;
	export type Red27 = number;
	export type Green27 = number;
	/**
	 * How many pieces of the set the user must be wearing to gain this bonus.
	 */
	export type Pieces = number;
	export type Amount1 = number;
	export type Stat4 = string;
	export type EnglishText69 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText59 = string;
	/**
	 * If set, this icon will display next to the storyline in the sidebar
	 */
	export type Icon5 = string;
	export type EnglishText70 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText60 = string;
	export type EnglishText71 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText61 = string;
	/**
	 * If true, this item will not be rendered, but it will still exist and perform mechanics.
	 */
	export type Invisible = boolean;
	/**
	 * If true, this item stop rendering while underneath a building's roof.
	 */
	export type HideUnderRoof = boolean;
	export type Object5 = string;
	/**
	 * If using a Spine sprite, the environmental object will try to play an animation with this name when it is spawned.
	 */
	export type SpineIdle2 = string;
	/**
	 * If true, this resource will snap to the grid when placed. Only applies to non-solid objects.
	 */
	export type GridSnapping2 = boolean;
	/**
	 * If true, this item will prevent abilities from targeting things through it via telegraphs.
	 */
	export type BlocksAbilities = boolean;
	/**
	 * If false, the object will always render itself at its normal color and won't be darkened or brightened by lighting.
	 */
	export type UseLighting8 = boolean;
	export type WorldSprite13 = string;
	export type Blue28 = number;
	export type Red28 = number;
	export type Green28 = number;
	/**
	 * Whether the player walks over the top of this item.
	 */
	export type Underfoot1 = boolean;
	/**
	 * If set, this game element will adjust its level to match the player's level at the time it is spawned, plus this number.
	 */
	export type RelativeLevel = number;
	export type UIIcon16 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler28 = string;
	/**
	 * If false, this item can be placed in water.
	 */
	export type RequiresLand2 = boolean;
	/**
	 * If set, the subimages will be modifiable via the Editor. Doesn't apply to world elements using Spine sprites.
	 */
	export type EditableSubimages = boolean;
	export type ScaleModifier6 = number;
	export type Condition3 =
	  | {
	      casting_state: Casting2;
	      abilities?: Abilities4;
	      condition_type?: "Ability";
	    }
	  | {
	      datafield_evaluation: Evaluation4;
	      condition_type?: "Datafield";
	    }
	  | {
	      daytime: DuringDaytime2;
	      condition_type?: "Daylight";
	    }
	  | {
	      combat: InCombat2;
	      condition_type?: "Combat";
	    }
	  | {
	      insight_modifier?: InsightModifier2;
	      evaluation: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      minutes_passed: MinutesSinceTimestamp2;
	      timestamp: Timestamp4;
	      condition_type?: "Timestamp";
	    }
	  | {
	      moon: ActiveMoon2;
	      condition_type?: "Moon";
	    }
	  | {
	      quest_status: QuestStatus4;
	      quest: QuestToCheck4;
	      condition_type?: "Quest";
	    }
	  | {
	      following: Following6;
	      artisan: Buddy3;
	      condition_type?: "Artisan Following";
	    }
	  | {
	      prerequisite: Insight10;
	      unlock_text?: InsightTooltip2;
	      condition_type?: "Insight";
	    }
	  | {
	      proximity_range: DistanceRequiredGridSpaces2;
	      proximity_targets: Targets3;
	      proximity_quantity: NumberOfTargets4;
	      proximity_ignores_stealth: IgnoreStealthedTargets2;
	      condition_type?: "Proximity";
	    }
	  | {
	      hp_evaluation: HealthEvaluation2;
	      condition_type?: "Health";
	    }
	  | {
	      require_all: RequireAll30;
	      items: Items31;
	      condition_type?: "Item Equipped";
	    }
	  | {
	      items: Items32;
	      condition_type?: "Item Wielding";
	    }
	  | {
	      num_pieces: NumberOfPiecesEquipped2;
	      equipment_set: EquipmentSet6;
	      condition_type?: "Wearing Equipment Set";
	    }
	  | {
	      buff_num_targets?: NumberOfTargets5;
	      buff_target: TargetEntity15;
	      buffs: Buffs53;
	      buff_check_self: CheckSelf2;
	      buff_require_all: RequireAll31;
	      buff_target_filter?: BuffTargetFilter2;
	      buff_own_only: OwnBuffsOnly2;
	      buff_stack_evaluation?: Stacks31;
	      buff_proximity?: BuffTargetRange2;
	      condition_type?: "Buffs";
	    }
	  | {
	      boss: Boss5;
	      condition_type?: "Boss Defeated";
	    }
	  | {
	      comparison: NumberSummoned2;
	      summoned_filter?: SummonedEntitiesFilter2;
	      condition_type?: "Summoned Entities";
	    };
	/**
	 * If set, the ability's casting state must match this checkbox.
	 */
	export type Casting2 = boolean;
	export type DuringDaytime2 = boolean;
	export type InCombat2 = boolean;
	export type Insight9 = string;
	/**
	 * How much the 'Minutes Since Timestamp' should be adjusted (up or down) for each point invested in the Insight.
	 */
	export type ChangePerPoint20 = number;
	/**
	 * If greater than 0, then this many minutes will have passed since the timestamp was set. If less than 0, the timestamp will be this many minutes from now.
	 */
	export type MinutesSinceTimestamp2 = number;
	export type Timestamp4 = string;
	export type ActiveMoon2 = string;
	export type QuestStatus4 = "Complete" | "Started" | "Not Started";
	/**
	 * The quest whose status we are querying.
	 */
	export type QuestToCheck4 = string;
	export type Following6 = boolean;
	export type Buddy3 = string;
	export type Insight10 = string;
	export type EnglishText72 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText62 = string;
	export type Min53 = number;
	export type Max53 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll29 = boolean;
	export type Quantity40 = number;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude24 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags23 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants23 = boolean;
	export type Evaluation5 = "==" | "!=" | "<" | "<=" | ">" | ">=";
	export type Quantity41 = number;
	/**
	 * If checked, the proximity check will fail on targets that are stealthed.
	 */
	export type IgnoreStealthedTargets2 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the items listed are equipped at the same time.
	 */
	export type RequireAll30 = boolean;
	/**
	 * If the player is wearing at least this many pieces, the condition will be met.
	 */
	export type NumberOfPiecesEquipped2 = number;
	export type EquipmentSet6 = string;
	export type Quantity42 = number;
	/**
	 * Which entity's buffs to query.
	 */
	export type TargetEntity15 = "Self" | "Other" | "All Entities";
	/**
	 * Obsolete--delete.
	 */
	export type CheckSelf2 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on yourself at the same time.
	 */
	export type RequireAll31 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll32 = boolean;
	export type Quantity43 = number;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude25 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags24 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants24 = boolean;
	/**
	 * If checked, only buffs created by you will be checked. Otherwise, all buffs will be checked.
	 */
	export type OwnBuffsOnly2 = boolean;
	export type Quantity44 = number;
	export type Min54 = number;
	export type Max54 = number;
	export type Boss5 = string;
	export type Quantity45 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll33 = boolean;
	export type Quantity46 = number;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude26 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags25 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants25 = boolean;
	/**
	 * If true, then every condition must be met. If false, then only one of the conditions must be met.
	 */
	export type RequireAllConditions2 = boolean;
	export type State1 = string;
	/**
	 * A brief decription about this group for internal reference.
	 */
	export type PriorityGroupNameInternal = string;
	export type Duration =
	  | {
	      duration_type?: "Time";
	      time: TimeSeconds;
	    }
	  | {
	      duration_type?: "Animation";
	    }
	  | {
	      duration_type?: "Indefinite";
	    };
	export type Min55 = number;
	export type Max55 = number;
	export type Condition4 =
	  | {
	      casting_state: Casting3;
	      abilities?: Abilities5;
	      condition_type?: "Ability";
	    }
	  | {
	      datafield_evaluation: Evaluation6;
	      condition_type?: "Datafield";
	    }
	  | {
	      daytime: DuringDaytime3;
	      condition_type?: "Daylight";
	    }
	  | {
	      combat: InCombat3;
	      condition_type?: "Combat";
	    }
	  | {
	      insight_modifier?: InsightModifier3;
	      evaluation: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      minutes_passed: MinutesSinceTimestamp3;
	      timestamp: Timestamp5;
	      condition_type?: "Timestamp";
	    }
	  | {
	      moon: ActiveMoon3;
	      condition_type?: "Moon";
	    }
	  | {
	      quest_status: QuestStatus5;
	      quest: QuestToCheck5;
	      condition_type?: "Quest";
	    }
	  | {
	      following: Following7;
	      artisan: Buddy4;
	      condition_type?: "Artisan Following";
	    }
	  | {
	      prerequisite: Insight12;
	      unlock_text?: InsightTooltip3;
	      condition_type?: "Insight";
	    }
	  | {
	      proximity_range: DistanceRequiredGridSpaces3;
	      proximity_targets: Targets4;
	      proximity_quantity: NumberOfTargets6;
	      proximity_ignores_stealth: IgnoreStealthedTargets3;
	      condition_type?: "Proximity";
	    }
	  | {
	      hp_evaluation: HealthEvaluation3;
	      condition_type?: "Health";
	    }
	  | {
	      require_all: RequireAll35;
	      items: Items36;
	      condition_type?: "Item Equipped";
	    }
	  | {
	      items: Items37;
	      condition_type?: "Item Wielding";
	    }
	  | {
	      num_pieces: NumberOfPiecesEquipped3;
	      equipment_set: EquipmentSet7;
	      condition_type?: "Wearing Equipment Set";
	    }
	  | {
	      buff_num_targets?: NumberOfTargets7;
	      buff_target: TargetEntity16;
	      buffs: Buffs60;
	      buff_check_self: CheckSelf3;
	      buff_require_all: RequireAll36;
	      buff_target_filter?: BuffTargetFilter3;
	      buff_own_only: OwnBuffsOnly3;
	      buff_stack_evaluation?: Stacks35;
	      buff_proximity?: BuffTargetRange3;
	      condition_type?: "Buffs";
	    }
	  | {
	      boss: Boss6;
	      condition_type?: "Boss Defeated";
	    }
	  | {
	      comparison: NumberSummoned3;
	      summoned_filter?: SummonedEntitiesFilter3;
	      condition_type?: "Summoned Entities";
	    };
	/**
	 * If set, the ability's casting state must match this checkbox.
	 */
	export type Casting3 = boolean;
	export type DuringDaytime3 = boolean;
	export type InCombat3 = boolean;
	export type Insight11 = string;
	/**
	 * How much the 'Minutes Since Timestamp' should be adjusted (up or down) for each point invested in the Insight.
	 */
	export type ChangePerPoint21 = number;
	/**
	 * If greater than 0, then this many minutes will have passed since the timestamp was set. If less than 0, the timestamp will be this many minutes from now.
	 */
	export type MinutesSinceTimestamp3 = number;
	export type Timestamp5 = string;
	export type ActiveMoon3 = string;
	export type QuestStatus5 = "Complete" | "Started" | "Not Started";
	/**
	 * The quest whose status we are querying.
	 */
	export type QuestToCheck5 = string;
	export type Following7 = boolean;
	export type Buddy4 = string;
	export type Insight12 = string;
	export type EnglishText73 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText63 = string;
	export type Min56 = number;
	export type Max56 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll34 = boolean;
	export type Quantity47 = number;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude27 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags26 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants26 = boolean;
	export type Evaluation7 = "==" | "!=" | "<" | "<=" | ">" | ">=";
	export type Quantity48 = number;
	/**
	 * If checked, the proximity check will fail on targets that are stealthed.
	 */
	export type IgnoreStealthedTargets3 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the items listed are equipped at the same time.
	 */
	export type RequireAll35 = boolean;
	/**
	 * If the player is wearing at least this many pieces, the condition will be met.
	 */
	export type NumberOfPiecesEquipped3 = number;
	export type EquipmentSet7 = string;
	export type Quantity49 = number;
	/**
	 * Which entity's buffs to query.
	 */
	export type TargetEntity16 = "Self" | "Other" | "All Entities";
	/**
	 * Obsolete--delete.
	 */
	export type CheckSelf3 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on yourself at the same time.
	 */
	export type RequireAll36 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll37 = boolean;
	export type Quantity50 = number;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude28 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags27 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants27 = boolean;
	/**
	 * If checked, only buffs created by you will be checked. Otherwise, all buffs will be checked.
	 */
	export type OwnBuffsOnly3 = boolean;
	export type Quantity51 = number;
	export type Min57 = number;
	export type Max57 = number;
	export type Boss6 = string;
	export type Quantity52 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll38 = boolean;
	export type Quantity53 = number;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude29 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags28 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants28 = boolean;
	/**
	 * If true, then every condition must be met. If false, then only one of the conditions must be met.
	 */
	export type RequireAllConditions3 = boolean;
	export type State3 = string;
	export type Min58 = number;
	export type Max58 = number;
	export type Name34 = string;
	export type Track = number;
	export type RandomizedStart = boolean;
	export type Looping3 = boolean;
	/**
	 * This is the name of the variable used for the state in the game's code. Only lowercase letters and underscores.
	 */
	export type StateNameInternal = string;
	/**
	 * When first spawned in the world, this thing can randomly scale itself down (to a minimum) to add variety. This scale should be preserved between sessions, so this will only apply to newly-created instances of this asset.
	 */
	export type RandomScalingMinimum1 = number;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup16 = string;
	export type EnglishText74 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText64 = string;
	/**
	 * Whether the item should be X-flipped randomly when placed.
	 */
	export type Flippable4 = boolean;
	/**
	 * A number that is connected to the relative power level of this thing.
	 */
	export type Level3 = number;
	/**
	 * Relative to the object's origin
	 */
	export type YOffset7 = number;
	/**
	 * If set, the particle system will be drawn behind the object
	 */
	export type Behind1 = boolean;
	export type EmitterScale4 = number;
	/**
	 * If set, the particle will anchor to this spine bone, and the X and Y offsets will be relative to the bone's position
	 */
	export type SpineBone1 = string;
	export type ParticleSystem5 = string;
	/**
	 * Relative to the object's origin
	 */
	export type XOffset1 = number;
	export type State4 = string;
	export type EnglishText75 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText65 = string;
	export type QuestMarker = string;
	export type Blue29 = number;
	export type Red29 = number;
	export type Green29 = number;
	export type EnglishText76 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText66 = string;
	/**
	 * If set, this sprite will be drawn alongside the quest marker text.
	 */
	export type Sprite3 = string;
	/**
	 * If set, the text will only appear if the player is within this distance of the quest marker.
	 */
	export type Proximity = number;
	export type EnglishText77 = string;
	export type Emoji3 = string;
	export type Speaker1 = string;
	export type EnglishText78 = string;
	/**
	 * What stage of the pet's life this quest is available during.
	 */
	export type PetStage2 = "Baby" | "Adult";
	export type Pet3 = string;
	export type EnglishText79 = string;
	/**
	 * For sorting in the Game Changer.
	 */
	export type Order3 = number;
	export type QuestMoment =
	  | {
	      speech: {
	        text: {
	          text: EnglishText80;
	        };
	        emotion?: Emoji4;
	        speaker: Speaker2;
	      };
	      requirements?: MomentRequirements;
	      style: "Dialogue";
	    }
	  | {
	      requirements?: MomentRequirements;
	      style: "Emote";
	      emotes: Emotes1;
	    }
	  | {
	      bonus?: ItemsAreBonus;
	      style: "Gain Item";
	      items: ItemsToGain1;
	    }
	  | {
	      pin: WhatToPin;
	      style: "Pin";
	    }
	  | {
	      artisan: Buddy5;
	      style: "Artisan Follow";
	    }
	  | {
	      drops: Drops;
	      bonus?: ItemsAreBonus1;
	      style: "Drop Item";
	    }
	  | {
	      artisan: Artisan3;
	      style: "Artisan Stop Following";
	    }
	  | {
	      style: "Set Area Discovered";
	      area: Area1;
	    }
	  | {
	      style: "Close a Quest";
	      quest_to_close: Quest1;
	    }
	  | {
	      pause_duration: PauseSeconds;
	      style: "Pause";
	    }
	  | {
	      style: "Camera Target Set";
	      camera_target: CameraTargetEntity;
	    }
	  | {
	      style: "Camera Target Unset";
	    }
	  | {
	      zoom_amount: ZoomAmount;
	      style: "Camera Zoom";
	    };
	export type EnglishText80 = string;
	export type Emoji4 = string;
	export type Speaker2 = string;
	export type Character1 = string;
	export type Emoji5 = string;
	/**
	 * If checked, these items will not be included in the progression map.
	 */
	export type ItemsAreBonus = boolean;
	export type Quantity54 = number;
	export type WhatToPin = string;
	export type Buddy5 = string;
	/**
	 * Who or what will drop these items. If not present, the items will fly out of the player.
	 */
	export type Dropper = string;
	export type Item7 = string;
	export type Quantity55 = number;
	/**
	 * If checked, these items will not be included in the progression map.
	 */
	export type ItemsAreBonus1 = boolean;
	export type Artisan3 = string;
	export type Area1 = string;
	/**
	 * This quest will be set as 'complete', regardless of whether it has been started or not. Its end moments will be skipped.
	 */
	export type Quest1 = string;
	/**
	 * How long to pause before moving to the next quest moment.
	 */
	export type PauseSeconds = number;
	export type CameraTargetEntity = string;
	/**
	 * Higher number means you can see more.
	 */
	export type ZoomAmount = number;
	export type QuestMarker1 = string;
	export type EnglishText81 = string;
	/**
	 * If 0, this text will just display next to a point on the map. Otherwise, it will appear inside a radius.
	 */
	export type RadiusGridSpaces = number;
	export type Objective =
	  | {
	      style: "Turn-in Items";
	      items: Items40;
	    }
	  | {
	      ability_requirements?: AbilityUsageRequirements;
	      ability_quantity?: NumberOfTimes;
	      ability_targets?: TargetS;
	      style: "Ability Usage";
	      ability: AbilityToUse;
	      objective_id: ObjectiveID;
	    }
	  | {
	      require_player: RequirePlayerInvolvement;
	      destroy_targets: TargetS1;
	      destroy_quantity?: Quantity60;
	      style: "Destroy";
	      target_home?: TargetHome;
	      destroy_requirements?: DestructionRequirements;
	      objective_id: ObjectiveID1;
	    }
	  | {
	      consume_quantity: Quantity62;
	      style: "Consume Item";
	      objective_id: ObjectiveID2;
	      consume_items: ItemsToConsume;
	    }
	  | {
	      interface: Interface;
	      style: "Open Interface";
	      objective_id: ObjectiveID3;
	    }
	  | {
	      marker_proximity?: QuestMarkerProximity;
	      placement_quantity: Quantity63;
	      style: "Place Item";
	      placement_area?: RequiredArea;
	      objective_id: ObjectiveID4;
	      placement_item: Item10;
	    }
	  | {
	      craft_quantity: Quantity64;
	      item_to_craft: ItemToCraft;
	      style: "Craft Item";
	      objective_id: ObjectiveID5;
	    }
	  | {
	      style: "Get Custom Loot";
	      items: ItemsToDrop1;
	      custom_loot: CustomLootDrops;
	    }
	  | {
	      interact_targets: TargetS2;
	      interact_requirements?: Requirements5;
	      interact_duration?: InteractionDuration;
	      interact_outcomes?: InteractionOutcomes;
	      interact_text?: InteractionText;
	      style: "Interact";
	      interact_target_home?: TargetHome1;
	      interact_color?: InteractionBarColor;
	      interact_quantity?: Quantity67;
	      objective_id: ObjectiveID6;
	      interact_sound?: InteractionFinishSound;
	    }
	  | {
	      style: "Acquire Item";
	      quantity: Quantity68;
	      objective_id: ObjectiveID7;
	      item: Item11;
	    };
	/**
	 * How many of this item to turn in.
	 */
	export type Quantity56 = number;
	export type AbilityUsageRequirement =
	  | {
	      style: "Time";
	      time: Time2;
	    }
	  | {
	      following: Following8;
	      artisan?: Artisan4;
	      style: "Artisan Following";
	    }
	  | {
	      style: "Equipped";
	      item: Item8;
	    }
	  | {
	      items_owned: Items41;
	      style: "Items Owned";
	    }
	  | {
	      style: "Area";
	      area: AreaToCheck2;
	      item_id: Entity2;
	    }
	  | {
	      following?: Following9;
	      pet?: Pet4;
	      style: "Pet";
	      stage?: PetStage3;
	    };
	export type Time2 = "Day" | "Night";
	/**
	 * If false, then this will only trigger if the artisan is not following.
	 */
	export type Following8 = boolean;
	/**
	 * Leave unset to query whether any artisans are either following or not following. Otherwise, this will query the specific artisan you have chosen.
	 */
	export type Artisan4 = string;
	/**
	 * The player must be wearing this item.
	 */
	export type Item8 = string;
	export type Quantity57 = number;
	export type AreaToCheck2 = string;
	/**
	 * The entity that must be in the area for the requirement to pass.
	 */
	export type Entity2 = string;
	/**
	 * If set, then this will only trigger if the pet's following state matches this.
	 */
	export type Following9 = boolean;
	/**
	 * If unset, then this requirement will be met if any of your pets match it.
	 */
	export type Pet4 = string;
	/**
	 * How many times the ability must be used to meet the quest objective.
	 */
	export type NumberOfTimes = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll39 = boolean;
	export type Quantity58 = number;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude30 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags29 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants29 = boolean;
	/**
	 * The player must use this ability to meet the quest objective.
	 */
	export type AbilityToUse = string;
	/**
	 * A unique number used to save and load this objective's progress to/from disk.
	 */
	export type ObjectiveID = number;
	/**
	 * If checked, this will require the player (or something the player created/owns) to destroy the target. Otherwise, any kind of destruction will count.
	 */
	export type RequirePlayerInvolvement = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll40 = boolean;
	export type Quantity59 = number;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude31 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags30 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants30 = boolean;
	/**
	 * How many things must be destroyed.
	 */
	export type Quantity60 = number;
	/**
	 * If set, destruction will only count if the target is originally from this area, even if the target has wandered away.
	 */
	export type TargetHome = string;
	export type DestructionRequirement =
	  | {
	      style: "Time";
	      time: Time3;
	    }
	  | {
	      following: Following10;
	      artisan?: Artisan5;
	      style: "Artisan Following";
	    }
	  | {
	      style: "Equipped";
	      item: Item9;
	    }
	  | {
	      style: "Ability Used";
	      ability: Ability9;
	    }
	  | {
	      items_owned: Items44;
	      style: "Items Owned";
	    }
	  | {
	      style: "Area";
	      area: AreaToCheck3;
	      item_id: Entity3;
	    }
	  | {
	      following?: Following11;
	      pet?: Pet5;
	      style: "Pet";
	      stage?: PetStage4;
	    };
	export type Time3 = "Day" | "Night";
	/**
	 * If false, then this will only trigger if the artisan is not following.
	 */
	export type Following10 = boolean;
	/**
	 * Leave unset to query whether any artisans are either following or not following. Otherwise, this will query the specific artisan you have chosen.
	 */
	export type Artisan5 = string;
	/**
	 * The player must be wearing this item.
	 */
	export type Item9 = string;
	/**
	 * The destruction will only count if this ability is used to do it.
	 */
	export type Ability9 = string;
	export type Quantity61 = number;
	export type AreaToCheck3 = string;
	/**
	 * The entity that must be in the area for the requirement to pass.
	 */
	export type Entity3 = string;
	/**
	 * If set, then this will only trigger if the pet's following state matches this.
	 */
	export type Following11 = boolean;
	/**
	 * If unset, then this requirement will be met if any of your pets match it.
	 */
	export type Pet5 = string;
	/**
	 * A unique number used to save and load this objective's progress to/from disk.
	 */
	export type ObjectiveID1 = number;
	/**
	 * How many items must be consumed.
	 */
	export type Quantity62 = number;
	/**
	 * A unique number used to save and load this objective's progress to/from disk.
	 */
	export type ObjectiveID2 = number;
	/**
	 * Once the player has viewed this interface, the quest objective will be completed.
	 */
	export type Interface =
	  | "Build Mode"
	  | "Insights"
	  | "Crafting"
	  | "Comforts"
	  | "Home"
	  | "Death"
	  | "Quests"
	  | "Equipment"
	  | "Map"
	  | "Teleport List"
	  | "Teleport Sequence"
	  | "Pet"
	  | "Death to Boss";
	/**
	 * A unique number used to save and load this objective's progress to/from disk.
	 */
	export type ObjectiveID3 = number;
	export type ProximityGridSpaces = number;
	/**
	 * How many of this item must be placed.
	 */
	export type Quantity63 = number;
	/**
	 * Where this item must be placed.
	 */
	export type RequiredArea = string;
	/**
	 * A unique number used to save and load this objective's progress to/from disk.
	 */
	export type ObjectiveID4 = number;
	export type Item10 = string;
	/**
	 * How many of this item must be crafted.
	 */
	export type Quantity64 = number;
	export type ItemToCraft = string;
	/**
	 * A unique number used to save and load this objective's progress to/from disk.
	 */
	export type ObjectiveID5 = number;
	/**
	 * How many of this item will drop. Once the player has all of these items, this objective will be considered complete.
	 */
	export type Quantity65 = number;
	/**
	 * The probability for this loot group to occur.
	 */
	export type DropChance = number;
	/**
	 * When this loot group is able to drop.
	 */
	export type TimeOfDay = "Always" | "Day" | "Night";
	export type Min59 = number;
	export type Max59 = number;
	/**
	 * What event will cause this loot to drop.
	 */
	export type Trigger1 = "Death" | "Damage";
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll41 = boolean;
	export type Quantity66 = number;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude32 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags31 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants31 = boolean;
	/**
	 * How long the player must interact with the target to complete this objective.
	 */
	export type InteractionDuration = number;
	export type QuestInteractionOutcome =
	  | {
	      datafield: Datafield5;
	      value: Value3;
	      type: "Set Datafield";
	    }
	  | {
	      type: "Destroy";
	    };
	export type Datafield5 = string;
	/**
	 * The new value to set the datafield to.
	 */
	export type Value3 = number;
	export type EnglishText82 = string;
	/**
	 * If set, interaction will only count if the target is originally from this area, even if the target has wandered away.
	 */
	export type TargetHome1 = string;
	export type Blue30 = number;
	export type Red30 = number;
	export type Green30 = number;
	/**
	 * How many times the player must perform this interaction.
	 */
	export type Quantity67 = number;
	/**
	 * A unique number used to save and load this objective's progress to/from disk.
	 */
	export type ObjectiveID6 = number;
	/**
	 * The sound that will play when the player finishes interacting with the target.
	 */
	export type InteractionFinishSound = string;
	/**
	 * How many of this item to acquire.
	 */
	export type Quantity68 = number;
	/**
	 * A unique number used to save and load this objective's progress to/from disk.
	 */
	export type ObjectiveID7 = number;
	/**
	 * Which item must be acquired. Note that this objective only counts items acquired after you have started the quest.
	 */
	export type Item11 = string;
	export type QuestMoment1 =
	  | {
	      speech: {
	        text: {
	          text: EnglishText83;
	        };
	        emotion?: Emoji6;
	        speaker: Speaker3;
	      };
	      requirements?: MomentRequirements;
	      style: "Dialogue";
	    }
	  | {
	      requirements?: MomentRequirements;
	      style: "Emote";
	      emotes: Emotes2;
	    }
	  | {
	      bonus?: ItemsAreBonus2;
	      style: "Gain Item";
	      items: ItemsToGain2;
	    }
	  | {
	      pin: WhatToPin1;
	      style: "Pin";
	    }
	  | {
	      artisan: Buddy6;
	      style: "Artisan Follow";
	    }
	  | {
	      drops: Drops1;
	      bonus?: ItemsAreBonus3;
	      style: "Drop Item";
	    }
	  | {
	      artisan: Artisan6;
	      style: "Artisan Stop Following";
	    }
	  | {
	      style: "Set Area Discovered";
	      area: Area2;
	    }
	  | {
	      style: "Close a Quest";
	      quest_to_close: Quest2;
	    }
	  | {
	      pause_duration: PauseSeconds1;
	      style: "Pause";
	    }
	  | {
	      style: "Camera Target Set";
	      camera_target: CameraTargetEntity1;
	    }
	  | {
	      style: "Camera Target Unset";
	    }
	  | {
	      zoom_amount: ZoomAmount1;
	      style: "Camera Zoom";
	    };
	export type EnglishText83 = string;
	export type Emoji6 = string;
	export type Speaker3 = string;
	export type Character2 = string;
	export type Emoji7 = string;
	/**
	 * If checked, these items will not be included in the progression map.
	 */
	export type ItemsAreBonus2 = boolean;
	export type Quantity69 = number;
	export type WhatToPin1 = string;
	export type Buddy6 = string;
	/**
	 * Who or what will drop these items. If not present, the items will fly out of the player.
	 */
	export type Dropper1 = string;
	export type Item12 = string;
	export type Quantity70 = number;
	/**
	 * If checked, these items will not be included in the progression map.
	 */
	export type ItemsAreBonus3 = boolean;
	export type Artisan6 = string;
	export type Area2 = string;
	/**
	 * This quest will be set as 'complete', regardless of whether it has been started or not. Its end moments will be skipped.
	 */
	export type Quest2 = string;
	/**
	 * How long to pause before moving to the next quest moment.
	 */
	export type PauseSeconds1 = number;
	export type CameraTargetEntity1 = string;
	/**
	 * Higher number means you can see more.
	 */
	export type ZoomAmount1 = number;
	export type Storyline1 = string;
	/**
	 * For automatic interactions, whether this interaction will only occur if it is in the same room as the interaction target.
	 */
	export type RequireSameRoom = boolean;
	/**
	 * If the requirements are met, this interactor will be shown on the world map.
	 */
	export type ShowOnMap = boolean;
	/**
	 * The interactor can optionally check for distance to an entity other than the player.
	 */
	export type AutomaticInteractionTarget = string;
	/**
	 * Who or what must be present for this quest to advance.
	 */
	export type Initiator = string;
	/**
	 * How far away from the interaction target (in grid spaces) the quest giver will automatically begin speaking.
	 */
	export type AutomaticInteractionProximity = number;
	/**
	 * For automatic interactions, whether this interaction will only occur if it is in the same room as the interaction target.
	 */
	export type RequireSameRoom1 = boolean;
	/**
	 * If the requirements are met, this interactor will be shown on the world map.
	 */
	export type ShowOnMap1 = boolean;
	/**
	 * The interactor can optionally check for distance to an entity other than the player.
	 */
	export type AutomaticInteractionTarget1 = string;
	/**
	 * Who or what must be present for this quest to advance.
	 */
	export type Initiator1 = string;
	/**
	 * How far away from the interaction target (in grid spaces) the quest giver will automatically begin speaking.
	 */
	export type AutomaticInteractionProximity1 = number;
	/**
	 * If true, this quest will not be shown in the progression map.
	 */
	export type IgnoreInProgressionMap = boolean;
	export type Name36 = string;
	export type IndoorMusic = string;
	/**
	 * When the player enters this area, whether the name of the area should appear on-screen.
	 */
	export type ShowNameUponEntering = boolean;
	export type OutdoorMusicDay = string;
	/**
	 * If true, the player can enter build mode in this area. Tru by default.
	 */
	export type BuildModeAllowed = boolean;
	export type Blue31 = number;
	export type Red31 = number;
	export type Green31 = number;
	/**
	 * The sounds that should play if the player is outdoors in the day.
	 */
	export type AmbientDayTrack = string;
	/**
	 * An area that this area can inherit certain properties from, like music and ambience.
	 */
	export type ParentArea = string;
	/**
	 * If true, this area will display its name on the world map once discovered.
	 */
	export type Discoverable = boolean;
	/**
	 * Uncheck this to have no ambience play in this zone.
	 */
	export type PlayAmbience = boolean;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup17 = string;
	export type OutdoorMusicNight = string;
	export type ColorGradingProfile = string;
	/**
	 * The sounds that should play if the player is not indoors.
	 */
	export type AmbientNightTrack = string;
	export type EnglishText84 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText67 = string;
	export type ApplicationSound = string;
	/**
	 * While the player has this buff, an additional sound can be added in to the player's swing sound.
	 */
	export type SwingSoundOverlay = string;
	export type Blue32 = number;
	export type Red32 = number;
	export type Green32 = number;
	export type LoopingAnimationName = string;
	/**
	 * 0% is the foot of the entity, 100% is the very top of its hitbox.
	 */
	export type VerticalPosition = number;
	export type SpineSprite = string;
	/**
	 * Positive goes up, negative goes down. You can move the sprite up or down relative to its anchor by a fixed number of pixels.
	 */
	export type ZOffsetPixels = number;
	export type Type3 = string;
	export type Blue33 = number;
	export type Red33 = number;
	export type Green33 = number;
	export type DurationSeconds = number;
	export type MaximumStacks = number;
	/**
	 * If set, an object will spawn that plays this sprite's spine animation when the buff is applied.
	 */
	export type ApplicationSpineSprite = string;
	/**
	 * Whether this buff changes this stat additively or multiplicatively.
	 */
	export type ModifierStyle1 = "Add" | "Multiply";
	/**
	 * How much to modify the stat by.
	 */
	export type Amount2 = number;
	/**
	 * When pulling the Other Stat, whether we should use the stats of the entity that sent the buff, or the entity that received the buff.
	 */
	export type StatSource = "Sender" | "Receiver";
	/**
	 * Whether this to boost the main stat by adding this stat to it, or by multiplying this stat with it.
	 */
	export type ModifierStyle2 = "Add" | "Multiply";
	export type Stat5 = string;
	/**
	 * If true, then the other stat will be mutliplied by the number of stacks before being applied.
	 */
	export type MultiplyByStacks = boolean;
	export type Stat6 = string;
	/**
	 * If true, then the stat bonus will be mutliplied by the number of stacks.
	 */
	export type MultiplyByStacks1 = boolean;
	export type Effect =
	  | {
	      damage_pool: DamagePool;
	      damage_profile: DamageProfile;
	      outcome?: "Damage";
	      consume_stored_damage: ConsumeStoredDamage;
	    }
	  | {
	      outcome?: "Heal";
	      consume_stored_healing: ConsumeStoredDamage1;
	      healing_pool: HealingPool;
	      healing_percentage: HealingPercent;
	    }
	  | {
	      outcome?: "Buff";
	      buff: BuffToApply;
	    }
	  | {
	      outcome?: "Expire";
	    }
	  | {
	      outcome?: "Change Stacks";
	      stack_change_style: Style8;
	      amount: AmountToChange;
	    }
	  | {
	      outcome?: "Set Stacks";
	      amount: AmountToSet;
	    }
	  | {
	      outcome?: "Remove Buff";
	      buff_to_remove: BuffToRemove;
	    }
	  | {
	      outcome?: "Change Timer";
	      timer_change_style: Style9;
	      amount: AmountToChangeBy;
	    }
	  | {
	      new_timer: TimerSecondsToSet;
	      outcome?: "Set Timer";
	    }
	  | {
	      outcome?: "Particle Burst";
	      burst_particle: Particle;
	      bursts: Bursts2;
	    };
	/**
	 * Whether this damage is based on the total damage that has ever been stored into this buff, or whether to use the remaining damage after consumption.
	 */
	export type DamagePool = "Total" | "Remaining";
	/**
	 * Whenever a buff is applied, it can have damage and healing values stored in it.
	 */
	export type ConsumeStoredDamage = boolean;
	/**
	 * Whenever a buff is applied, it can have damage and healing values stored in it.
	 */
	export type ConsumeStoredDamage1 = boolean;
	/**
	 * Whether this damage is based on the total healing that has ever been stored into this buff, or whether to use the remaining healing after consumption.
	 */
	export type HealingPool = "Total" | "Remaining";
	/**
	 * Multiplies against the healing pool and then heals the user for this amount.
	 */
	export type HealingPercent = number;
	/**
	 * This new buff will be applied to the entity afflicted by the current buff.
	 */
	export type BuffToApply = string;
	/**
	 * Whether change the existing stacks by adding or multiplying.
	 */
	export type Style8 = "Add" | "Multiply";
	export type AmountToChange = number;
	export type AmountToSet = number;
	/**
	 * This will remove a buff if it is present.
	 */
	export type BuffToRemove = string;
	/**
	 * How to change the buff's timer.
	 */
	export type Style9 = "Add" | "Multiply";
	export type AmountToChangeBy = number;
	/**
	 * This will change the buff's remaining timer to this value.
	 */
	export type TimerSecondsToSet = number;
	export type Min60 = number;
	export type Max60 = number;
	/**
	 * If set, the particles will always move away from the center of the source.
	 */
	export type BlastOutward2 = boolean;
	export type Min61 = number;
	export type Max61 = number;
	export type Min62 = number;
	export type Max62 = number;
	/**
	 * Billboard bursts are good for shooting things up and out. Ground bursts are good for making smoke rings and such.
	 */
	export type Perspective2 = "Billboard" | "Isometric";
	/**
	 * If set, the spawn radius will be treated as grid spaces instead of pixels.
	 */
	export type SpawnRadiusAsGrid2 = boolean;
	/**
	 * If set, the radius of the spawning will scale relative to the caster's 'scale' modifier. Useful for keeping particles lined up with telegraphs.
	 */
	export type ScaledSpawnRadius2 = boolean;
	/**
	 * If checked, the particles will spawn at z=0 instead of on a target or caster.
	 */
	export type SpawnOnGround2 = boolean;
	/**
	 * If spawning on the ground, this will be height above ground. If spawning on targets, it will spawn at their height midpoints, plus this offset.
	 */
	export type ZOffset8 = number;
	/**
	 * If set, this buff will only show the text description and won't show any other information.
	 */
	export type OnlyShowDescription = boolean;
	export type ExpiresUponDeath = boolean;
	/**
	 * When attempting to apply the buff to a target that already has the maximum instances of the buff, you can purge the oldest instance of the buff to apply a new instance.
	 */
	export type ReplaceOldest = boolean;
	export type ExpirationSound = string;
	/**
	 * How many independent applications of this buff can be present on an entity at one time. If unset, then there is no limit.
	 */
	export type MaximumInstances = number;
	export type CustomVFXObject = string;
	/**
	 * When this buff gets applied where there is an existing buff, and either we are at the maximum instances or we are adding stacks, what happens to the timer of the existing buff?
	 */
	export type TimerRefreshBehavior =
	  | {
	      seconds: Seconds2;
	      style?: "Extend";
	      extension_max?: ExtensionMaxDuration;
	    }
	  | {
	      style?: "Refresh";
	    }
	  | {
	      style?: "None";
	    };
	/**
	 * Each time this buff is reapplied, its timer will be extended by this many seconds.
	 */
	export type Seconds2 = number;
	/**
	 * How many seconds the buff can be extended to. Can go beyond the baseline duration.
	 */
	export type ExtensionMaxDuration = number;
	export type UIIcon17 = string;
	export type Positive = boolean;
	/**
	 * If true, negative buffs cannot be applied to a world element who has this buff.
	 */
	export type PreventsNegativeBuffs = boolean;
	export type ReapplicationSound = string;
	/**
	 * If true, this buff can stun all enemies, including bosses.
	 */
	export type BossStun = boolean;
	export type EnglishText85 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText68 = string;
	/**
	 * If true, this buff will stun the target, rendering it unable to do anything for the duration.
	 */
	export type Stun = boolean;
	/**
	 * If set, the particles will always move away from the center of the emitter.
	 */
	export type BlastOutward3 = boolean;
	/**
	 * The gap in time between emitting particles. If set to 0, it will emit particles every frame (but at a performance cost.
	 */
	export type EmitIntervalSeconds = number;
	export type Min63 = number;
	export type Max63 = number;
	/**
	 * At 100% scale, the emitter will roughly match the hitbox of the world element that it is attached to. However, you can grow or shrink the emitter to make the particles more tightly packed or farther apart.
	 */
	export type EmitterScale5 = number;
	/**
	 * If set, the particles will use the world element as an anchor point, so they will no longer be 'left behind' if the world element moves.
	 */
	export type Local = boolean;
	/**
	 * If set, the buff will show the amount of damage stored in it instead of the number of stacks.
	 */
	export type ShowDamageInsteadOfStacks = boolean;
	export type EnglishText86 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText69 = string;
	/**
	 * For identification in the Game Changer
	 */
	export type IconInternal = string;
	/**
	 * For identifiaction in the Game Changer
	 */
	export type FamilyNameInternal = string;
	/**
	 * The sprite to draw below the main sprite. Subimages must correspond with the Sprite.
	 */
	export type UnderSprite2 = string;
	/**
	 * The primary sprite of the tile.
	 */
	export type MainSprite2 = string;
	export type Blue34 = number;
	export type Red34 = number;
	export type Green34 = number;
	/**
	 * The sprite to use when displaying the tile in the UI (e.g. Build Mode).
	 */
	export type Icon6 = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup18 = string;
	/**
	 * The sound to play when this tile is placed in the editor or in Build Mode.
	 */
	export type PlacementSound5 = string;
	export type OutputQuantity7 = number;
	export type ResearchNode16 = string;
	export type Style10 = "Additive" | "Multiplicative";
	export type ChangePerPoint22 = number;
	/**
	 * What workstation the player must be near to craft this recipe.
	 */
	export type Station9 = string;
	export type ResearchNode17 = string;
	export type ChangePerPoint23 = number;
	export type UnlockedBy47 = string;
	/**
	 * Change this number to increase or decrease the number of materials required to craft this item.
	 */
	export type EffortModifier11 = number;
	/**
	 * The sound to play when the player walks on this tile.
	 */
	export type FootstepSound2 = string;
	export type EnglishText87 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText70 = string;
	/**
	 * Whether the tile should be X-flipped randomly when placed.
	 */
	export type Flippable5 = boolean;
	export type EnglishText88 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText71 = string;
	/**
	 * The probability of a given tile having Dapples on it.
	 */
	export type SpawnChance2 = number;
	export type Blue35 = number;
	export type Red35 = number;
	export type Green35 = number;
	export type Blue36 = number;
	export type Red36 = number;
	export type Green36 = number;
	export type Icon7 = string;
	export type Blue37 = number;
	export type Red37 = number;
	export type Green37 = number;
	/**
	 * The order in which this thing should appear in the crafting menu.
	 */
	export type Order4 = number;
	export type Name40 = string;
	/**
	 * If set, the camera will use this zoom level while locked on to this camera anchor. Higher values mean you can see more.
	 */
	export type Zoom = number;
	/**
	 * 100% means the camera goes all the way to the anchor. 50% keeps it halfway between the player and the anchor.
	 */
	export type BiasAmount = number;
	/**
	 * How close the player must get for the camera anchor to lock in.
	 */
	export type RadiusGrid = number;
	export type NameInternal8 = string;
	export type Buff5 = string;
	export type Stacks40 = number;
	/**
	 * This sound will play the instant the ability begins casting.
	 */
	export type StartCastSound = string;
	export type UsableInCombat = boolean;
	export type CooldownSeconds1 = number;
	export type ModifierType2 = "Add" | "Multiply";
	export type Stat7 = string;
	/**
	 * At what point in the cast the cooldown will trigger.
	 */
	export type CooldownTriggerPercentage = number;
	export type Min64 = number;
	export type Max64 = number;
	export type Min65 = number;
	export type Max65 = number;
	export type EnglishText89 = string;
	export type CastDurationSeconds = number;
	export type UIIcon18 = string;
	export type Condition5 =
	  | {
	      daytime: DuringDaytime4;
	      condition_type?: "Daylight";
	    }
	  | {
	      moon: ActiveMoon4;
	      condition_type?: "Moon";
	    }
	  | {
	      quest_status: QuestStatus6;
	      quest: QuestToCheck6;
	      condition_type?: "Quest";
	    }
	  | {
	      following: Following12;
	      artisan: Buddy7;
	      condition_type?: "Artisan Following";
	    }
	  | {
	      prerequisite: Insight13;
	      unlock_text?: InsightTooltip4;
	      condition_type?: "Insight";
	    };
	export type DuringDaytime4 = boolean;
	export type ActiveMoon4 = string;
	export type QuestStatus6 = "Complete" | "Started" | "Not Started";
	/**
	 * The quest whose status we are querying.
	 */
	export type QuestToCheck6 = string;
	export type Following12 = boolean;
	export type Buddy7 = string;
	export type Insight13 = string;
	export type EnglishText90 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText72 = string;
	export type RequireAllConditions4 = boolean;
	/**
	 * If the conditions are met at the start of the cast, the telegraph scale will be multiplied by this amount.
	 */
	export type Multiplier = number;
	/**
	 * For previewing the ability in the Game Changer.
	 */
	export type PreviewSprite = string;
	export type Type4 = "Damage" | "Stacks";
	/**
	 * Which buff to use for the hotbar display.
	 */
	export type Buff6 = string;
	/**
	 * The number will be multiplied against this number when displayed.
	 */
	export type Multiplier1 = number;
	export type JukeChargesRequired = number;
	export type Min66 = number;
	export type Max66 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll42 = boolean;
	export type Quantity71 = number;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude33 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags32 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants32 = boolean;
	/**
	 * How many seconds it takes for each charge to come back.
	 */
	export type RechargeSeconds = number;
	export type ModifierType3 = "Add" | "Multiply";
	export type Stat8 = string;
	export type MaxCharges = number;
	export type AnimationName2 = string;
	export type Start3 = number;
	export type End3 = number;
	export type Start4 = number;
	export type End4 = number;
	/**
	 * What this ability is called.
	 */
	export type Name41 = string;
	/**
	 * If true, this loot group will be considered a 'bonus' and will not be counted as part of the normal effort calculations.
	 */
	export type ConsiderAsBonus = boolean;
	/**
	 * The probability for this loot group to occur.
	 */
	export type DropChance1 = number;
	/**
	 * When this loot group is able to drop.
	 */
	export type TimeOfDay1 = "Always" | "Day" | "Night";
	export type Min67 = number;
	export type Max67 = number;
	export type UnlockedBy48 = string;
	/**
	 * If set, the 'Drop Quantity' value will multiply against the value retrieved from this data field.
	 */
	export type DatafieldQuantityLink = string;
	/**
	 * What event will cause this loot to drop.
	 */
	export type Trigger2 = "Death" | "Damage";
	/**
	 * If true, this loot group will not be shown in the progression map.
	 */
	export type IgnoreInProgressionMap1 = boolean;
	/**
	 * Whether to include this loot group when listing the 'sources' of an item in its tooltip.
	 */
	export type IncludeAsSource = boolean;
	/**
	 * How the actor animates while not actively moving.
	 */
	export type StationaryVisuals4 =
	  | {
	      animation?: Animation12;
	      style?: "Stand";
	      babbler?: Babbler29;
	    }
	  | {
	      animation?: Animation13;
	      z_baseline: BaselineAltitudePixels8;
	      style: "Fly";
	      babbler?: Babbler30;
	      z_sine?: AltitudeSineWave8;
	      flaps?: FlappingVerticalMovements8;
	    };
	/**
	 * Defaults to 'idle.
	 */
	export type Animation12 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler29 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation13 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels8 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler30 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed12 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude9 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance8 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds8 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds8 = number;
	export type MovementVisuals4 =
	  | {
	      hop_speed: HopVerticalSpeed4;
	      animation?: HopAnimationName4;
	      hop_anticipation?: HopAnticipationSeconds4;
	      style: "Hop";
	      babbler?: Babbler31;
	      hop_followthrough?: PostHopFollowthroughSeconds4;
	    }
	  | {
	      run_vertical_speed: RunVerticalBounceSpeed4;
	      animation?: RunAnimationName4;
	      style: "Run";
	      babbler?: Babbler32;
	    }
	  | {
	      animation?: CrawlAnimationName4;
	      style: "Crawl";
	      babbler?: Babbler33;
	    }
	  | {
	      animation?: Animation14;
	      z_baseline: BaselineAltitudePixels9;
	      style: "Fly";
	      babbler?: Babbler34;
	      z_sine?: AltitudeSineWave9;
	      flaps?: FlappingVerticalMovements9;
	    };
	/**
	 * As a percentage of base gravity. This is fairly sensitive.
	 */
	export type HopVerticalSpeed4 = number;
	/**
	 * Defaults to 'hop' but can be overridden.
	 */
	export type HopAnimationName4 = string;
	/**
	 * How long to hold before rising off the ground, to make room for a pre-hop animation.
	 */
	export type HopAnticipationSeconds4 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler31 = string;
	/**
	 * How long to hold after landing on the ground from a hop, to make room for animations.
	 */
	export type PostHopFollowthroughSeconds4 = number;
	/**
	 * How fast the character should pop up off the ground with each leg movement. As a percentage of base gravity. This is fairly sensitive.
	 */
	export type RunVerticalBounceSpeed4 = number;
	/**
	 * Defaults to 'run' but can be overridden.
	 */
	export type RunAnimationName4 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler32 = string;
	/**
	 * Defaults to 'crawl' but can be overridden.
	 */
	export type CrawlAnimationName4 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler33 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation14 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels9 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler34 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed13 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude10 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance9 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds9 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds9 = number;
	/**
	 * Relative to the global movement speed.
	 */
	export type MovementSpeed4 = number;
	export type Object6 = string;
	/**
	 * How the actor animates while not actively moving.
	 */
	export type StationaryVisuals5 =
	  | {
	      animation?: Animation15;
	      style?: "Stand";
	      babbler?: Babbler35;
	    }
	  | {
	      animation?: Animation16;
	      z_baseline: BaselineAltitudePixels10;
	      style: "Fly";
	      babbler?: Babbler36;
	      z_sine?: AltitudeSineWave10;
	      flaps?: FlappingVerticalMovements10;
	    };
	/**
	 * Defaults to 'idle.
	 */
	export type Animation15 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler35 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation16 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels10 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler36 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed14 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude11 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance10 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds10 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds10 = number;
	export type MovementVisuals5 =
	  | {
	      hop_speed: HopVerticalSpeed5;
	      animation?: HopAnimationName5;
	      hop_anticipation?: HopAnticipationSeconds5;
	      style: "Hop";
	      babbler?: Babbler37;
	      hop_followthrough?: PostHopFollowthroughSeconds5;
	    }
	  | {
	      run_vertical_speed: RunVerticalBounceSpeed5;
	      animation?: RunAnimationName5;
	      style: "Run";
	      babbler?: Babbler38;
	    }
	  | {
	      animation?: CrawlAnimationName5;
	      style: "Crawl";
	      babbler?: Babbler39;
	    }
	  | {
	      animation?: Animation17;
	      z_baseline: BaselineAltitudePixels11;
	      style: "Fly";
	      babbler?: Babbler40;
	      z_sine?: AltitudeSineWave11;
	      flaps?: FlappingVerticalMovements11;
	    };
	/**
	 * As a percentage of base gravity. This is fairly sensitive.
	 */
	export type HopVerticalSpeed5 = number;
	/**
	 * Defaults to 'hop' but can be overridden.
	 */
	export type HopAnimationName5 = string;
	/**
	 * How long to hold before rising off the ground, to make room for a pre-hop animation.
	 */
	export type HopAnticipationSeconds5 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler37 = string;
	/**
	 * How long to hold after landing on the ground from a hop, to make room for animations.
	 */
	export type PostHopFollowthroughSeconds5 = number;
	/**
	 * How fast the character should pop up off the ground with each leg movement. As a percentage of base gravity. This is fairly sensitive.
	 */
	export type RunVerticalBounceSpeed5 = number;
	/**
	 * Defaults to 'run' but can be overridden.
	 */
	export type RunAnimationName5 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler38 = string;
	/**
	 * Defaults to 'crawl' but can be overridden.
	 */
	export type CrawlAnimationName5 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler39 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation17 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels11 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler40 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed15 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude12 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance11 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds11 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds11 = number;
	/**
	 * Relative to the global movement speed.
	 */
	export type MovementSpeed5 = number;
	/**
	 * If unchecked, the creature will try to go to a different state when this one ends.
	 */
	export type Repeatable = boolean;
	export type Min68 = number;
	export type Max68 = number;
	/**
	 * How far away the creature will look to find a viable target or location to use this ability (in grid spaces)
	 */
	export type DetectionRadius = number;
	/**
	 * Affects the probability of choosing this state.
	 */
	export type Weight2 = number;
	/**
	 * The ability the creature will attempt to cast.
	 */
	export type Ability11 = string;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll43 = boolean;
	export type Quantity72 = number;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude34 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags33 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants33 = boolean;
	export type NameInternal9 = string;
	/**
	 * How the actor animates while not actively moving.
	 */
	export type StationaryVisuals6 =
	  | {
	      animation?: Animation18;
	      style?: "Stand";
	      babbler?: Babbler41;
	    }
	  | {
	      animation?: Animation19;
	      z_baseline: BaselineAltitudePixels12;
	      style: "Fly";
	      babbler?: Babbler42;
	      z_sine?: AltitudeSineWave12;
	      flaps?: FlappingVerticalMovements12;
	    };
	/**
	 * Defaults to 'idle.
	 */
	export type Animation18 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler41 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation19 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels12 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler42 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed16 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude13 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance12 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds12 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds12 = number;
	export type MovementVisuals6 =
	  | {
	      hop_speed: HopVerticalSpeed6;
	      animation?: HopAnimationName6;
	      hop_anticipation?: HopAnticipationSeconds6;
	      style: "Hop";
	      babbler?: Babbler43;
	      hop_followthrough?: PostHopFollowthroughSeconds6;
	    }
	  | {
	      run_vertical_speed: RunVerticalBounceSpeed6;
	      animation?: RunAnimationName6;
	      style: "Run";
	      babbler?: Babbler44;
	    }
	  | {
	      animation?: CrawlAnimationName6;
	      style: "Crawl";
	      babbler?: Babbler45;
	    }
	  | {
	      animation?: Animation20;
	      z_baseline: BaselineAltitudePixels13;
	      style: "Fly";
	      babbler?: Babbler46;
	      z_sine?: AltitudeSineWave13;
	      flaps?: FlappingVerticalMovements13;
	    };
	/**
	 * As a percentage of base gravity. This is fairly sensitive.
	 */
	export type HopVerticalSpeed6 = number;
	/**
	 * Defaults to 'hop' but can be overridden.
	 */
	export type HopAnimationName6 = string;
	/**
	 * How long to hold before rising off the ground, to make room for a pre-hop animation.
	 */
	export type HopAnticipationSeconds6 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler43 = string;
	/**
	 * How long to hold after landing on the ground from a hop, to make room for animations.
	 */
	export type PostHopFollowthroughSeconds6 = number;
	/**
	 * How fast the character should pop up off the ground with each leg movement. As a percentage of base gravity. This is fairly sensitive.
	 */
	export type RunVerticalBounceSpeed6 = number;
	/**
	 * Defaults to 'run' but can be overridden.
	 */
	export type RunAnimationName6 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler44 = string;
	/**
	 * Defaults to 'crawl' but can be overridden.
	 */
	export type CrawlAnimationName6 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler45 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation20 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels13 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler46 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed17 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude14 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance13 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds13 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds13 = number;
	/**
	 * Relative to the global movement speed.
	 */
	export type MovementSpeed6 = number;
	/**
	 * How the actor animates while not actively moving.
	 */
	export type StationaryVisuals7 =
	  | {
	      animation?: Animation21;
	      style?: "Stand";
	      babbler?: Babbler47;
	    }
	  | {
	      animation?: Animation22;
	      z_baseline: BaselineAltitudePixels14;
	      style: "Fly";
	      babbler?: Babbler48;
	      z_sine?: AltitudeSineWave14;
	      flaps?: FlappingVerticalMovements14;
	    };
	/**
	 * Defaults to 'idle.
	 */
	export type Animation21 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler47 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation22 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels14 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler48 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed18 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude15 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance14 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds14 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds14 = number;
	export type MovementVisuals7 =
	  | {
	      hop_speed: HopVerticalSpeed7;
	      animation?: HopAnimationName7;
	      hop_anticipation?: HopAnticipationSeconds7;
	      style: "Hop";
	      babbler?: Babbler49;
	      hop_followthrough?: PostHopFollowthroughSeconds7;
	    }
	  | {
	      run_vertical_speed: RunVerticalBounceSpeed7;
	      animation?: RunAnimationName7;
	      style: "Run";
	      babbler?: Babbler50;
	    }
	  | {
	      animation?: CrawlAnimationName7;
	      style: "Crawl";
	      babbler?: Babbler51;
	    }
	  | {
	      animation?: Animation23;
	      z_baseline: BaselineAltitudePixels15;
	      style: "Fly";
	      babbler?: Babbler52;
	      z_sine?: AltitudeSineWave15;
	      flaps?: FlappingVerticalMovements15;
	    };
	/**
	 * As a percentage of base gravity. This is fairly sensitive.
	 */
	export type HopVerticalSpeed7 = number;
	/**
	 * Defaults to 'hop' but can be overridden.
	 */
	export type HopAnimationName7 = string;
	/**
	 * How long to hold before rising off the ground, to make room for a pre-hop animation.
	 */
	export type HopAnticipationSeconds7 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler49 = string;
	/**
	 * How long to hold after landing on the ground from a hop, to make room for animations.
	 */
	export type PostHopFollowthroughSeconds7 = number;
	/**
	 * How fast the character should pop up off the ground with each leg movement. As a percentage of base gravity. This is fairly sensitive.
	 */
	export type RunVerticalBounceSpeed7 = number;
	/**
	 * Defaults to 'run' but can be overridden.
	 */
	export type RunAnimationName7 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler50 = string;
	/**
	 * Defaults to 'crawl' but can be overridden.
	 */
	export type CrawlAnimationName7 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler51 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation23 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels15 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler52 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed19 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude16 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance15 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds15 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds15 = number;
	/**
	 * Relative to the global movement speed.
	 */
	export type MovementSpeed7 = number;
	/**
	 * How far away the creature will notice things to be attracted to.
	 */
	export type DetectionRange = number;
	/**
	 * The chance the creature looks for an attractant instead of just roaming around.
	 */
	export type AttractionProbability = number;
	/**
	 * How the actor animates while not actively moving.
	 */
	export type StationaryVisuals8 =
	  | {
	      animation?: Animation24;
	      style?: "Stand";
	      babbler?: Babbler53;
	    }
	  | {
	      animation?: Animation25;
	      z_baseline: BaselineAltitudePixels16;
	      style: "Fly";
	      babbler?: Babbler54;
	      z_sine?: AltitudeSineWave16;
	      flaps?: FlappingVerticalMovements16;
	    };
	/**
	 * Defaults to 'idle.
	 */
	export type Animation24 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler53 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation25 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels16 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler54 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed20 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude17 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance16 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds16 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds16 = number;
	export type MovementVisuals8 =
	  | {
	      hop_speed: HopVerticalSpeed8;
	      animation?: HopAnimationName8;
	      hop_anticipation?: HopAnticipationSeconds8;
	      style: "Hop";
	      babbler?: Babbler55;
	      hop_followthrough?: PostHopFollowthroughSeconds8;
	    }
	  | {
	      run_vertical_speed: RunVerticalBounceSpeed8;
	      animation?: RunAnimationName8;
	      style: "Run";
	      babbler?: Babbler56;
	    }
	  | {
	      animation?: CrawlAnimationName8;
	      style: "Crawl";
	      babbler?: Babbler57;
	    }
	  | {
	      animation?: Animation26;
	      z_baseline: BaselineAltitudePixels17;
	      style: "Fly";
	      babbler?: Babbler58;
	      z_sine?: AltitudeSineWave17;
	      flaps?: FlappingVerticalMovements17;
	    };
	/**
	 * As a percentage of base gravity. This is fairly sensitive.
	 */
	export type HopVerticalSpeed8 = number;
	/**
	 * Defaults to 'hop' but can be overridden.
	 */
	export type HopAnimationName8 = string;
	/**
	 * How long to hold before rising off the ground, to make room for a pre-hop animation.
	 */
	export type HopAnticipationSeconds8 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler55 = string;
	/**
	 * How long to hold after landing on the ground from a hop, to make room for animations.
	 */
	export type PostHopFollowthroughSeconds8 = number;
	/**
	 * How fast the character should pop up off the ground with each leg movement. As a percentage of base gravity. This is fairly sensitive.
	 */
	export type RunVerticalBounceSpeed8 = number;
	/**
	 * Defaults to 'run' but can be overridden.
	 */
	export type RunAnimationName8 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler56 = string;
	/**
	 * Defaults to 'crawl' but can be overridden.
	 */
	export type CrawlAnimationName8 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler57 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation26 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels17 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler58 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed21 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude18 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance17 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds17 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds17 = number;
	/**
	 * Relative to the global movement speed.
	 */
	export type MovementSpeed8 = number;
	/**
	 * How far away the creature will be attracted to these targets. Overrides baseline detection range.
	 */
	export type DetectionRange1 = number;
	/**
	 * How strongly the creature is attracted to these targets.
	 */
	export type Weight3 = number;
	/**
	 * If unchecked, the creature will go back to idle when done roaming. Otherwise, it will sometimes roam again.
	 */
	export type Repeatable1 = boolean;
	export type Min69 = number;
	export type Max69 = number;
	/**
	 * How the actor animates while not actively moving.
	 */
	export type StationaryVisuals9 =
	  | {
	      animation?: Animation27;
	      style?: "Stand";
	      babbler?: Babbler59;
	    }
	  | {
	      animation?: Animation28;
	      z_baseline: BaselineAltitudePixels18;
	      style: "Fly";
	      babbler?: Babbler60;
	      z_sine?: AltitudeSineWave18;
	      flaps?: FlappingVerticalMovements18;
	    };
	/**
	 * Defaults to 'idle.
	 */
	export type Animation27 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler59 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation28 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels18 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler60 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed22 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude19 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance18 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds18 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds18 = number;
	export type MovementVisuals9 =
	  | {
	      hop_speed: HopVerticalSpeed9;
	      animation?: HopAnimationName9;
	      hop_anticipation?: HopAnticipationSeconds9;
	      style: "Hop";
	      babbler?: Babbler61;
	      hop_followthrough?: PostHopFollowthroughSeconds9;
	    }
	  | {
	      run_vertical_speed: RunVerticalBounceSpeed9;
	      animation?: RunAnimationName9;
	      style: "Run";
	      babbler?: Babbler62;
	    }
	  | {
	      animation?: CrawlAnimationName9;
	      style: "Crawl";
	      babbler?: Babbler63;
	    }
	  | {
	      animation?: Animation29;
	      z_baseline: BaselineAltitudePixels19;
	      style: "Fly";
	      babbler?: Babbler64;
	      z_sine?: AltitudeSineWave19;
	      flaps?: FlappingVerticalMovements19;
	    };
	/**
	 * As a percentage of base gravity. This is fairly sensitive.
	 */
	export type HopVerticalSpeed9 = number;
	/**
	 * Defaults to 'hop' but can be overridden.
	 */
	export type HopAnimationName9 = string;
	/**
	 * How long to hold before rising off the ground, to make room for a pre-hop animation.
	 */
	export type HopAnticipationSeconds9 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler61 = string;
	/**
	 * How long to hold after landing on the ground from a hop, to make room for animations.
	 */
	export type PostHopFollowthroughSeconds9 = number;
	/**
	 * How fast the character should pop up off the ground with each leg movement. As a percentage of base gravity. This is fairly sensitive.
	 */
	export type RunVerticalBounceSpeed9 = number;
	/**
	 * Defaults to 'run' but can be overridden.
	 */
	export type RunAnimationName9 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler62 = string;
	/**
	 * Defaults to 'crawl' but can be overridden.
	 */
	export type CrawlAnimationName9 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler63 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation29 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels19 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler64 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed23 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude20 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance19 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds19 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds19 = number;
	/**
	 * Relative to the global movement speed.
	 */
	export type MovementSpeed9 = number;
	/**
	 * How far away the creature will notice things to be repelled by.
	 */
	export type DetectionRange2 = number;
	/**
	 * The chance the creature looks for an repellant instead of just roaming around.
	 */
	export type RepelProbability = number;
	/**
	 * How the actor animates while not actively moving.
	 */
	export type StationaryVisuals10 =
	  | {
	      animation?: Animation30;
	      style?: "Stand";
	      babbler?: Babbler65;
	    }
	  | {
	      animation?: Animation31;
	      z_baseline: BaselineAltitudePixels20;
	      style: "Fly";
	      babbler?: Babbler66;
	      z_sine?: AltitudeSineWave20;
	      flaps?: FlappingVerticalMovements20;
	    };
	/**
	 * Defaults to 'idle.
	 */
	export type Animation30 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler65 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation31 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels20 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler66 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed24 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude21 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance20 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds20 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds20 = number;
	export type MovementVisuals10 =
	  | {
	      hop_speed: HopVerticalSpeed10;
	      animation?: HopAnimationName10;
	      hop_anticipation?: HopAnticipationSeconds10;
	      style: "Hop";
	      babbler?: Babbler67;
	      hop_followthrough?: PostHopFollowthroughSeconds10;
	    }
	  | {
	      run_vertical_speed: RunVerticalBounceSpeed10;
	      animation?: RunAnimationName10;
	      style: "Run";
	      babbler?: Babbler68;
	    }
	  | {
	      animation?: CrawlAnimationName10;
	      style: "Crawl";
	      babbler?: Babbler69;
	    }
	  | {
	      animation?: Animation32;
	      z_baseline: BaselineAltitudePixels21;
	      style: "Fly";
	      babbler?: Babbler70;
	      z_sine?: AltitudeSineWave21;
	      flaps?: FlappingVerticalMovements21;
	    };
	/**
	 * As a percentage of base gravity. This is fairly sensitive.
	 */
	export type HopVerticalSpeed10 = number;
	/**
	 * Defaults to 'hop' but can be overridden.
	 */
	export type HopAnimationName10 = string;
	/**
	 * How long to hold before rising off the ground, to make room for a pre-hop animation.
	 */
	export type HopAnticipationSeconds10 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler67 = string;
	/**
	 * How long to hold after landing on the ground from a hop, to make room for animations.
	 */
	export type PostHopFollowthroughSeconds10 = number;
	/**
	 * How fast the character should pop up off the ground with each leg movement. As a percentage of base gravity. This is fairly sensitive.
	 */
	export type RunVerticalBounceSpeed10 = number;
	/**
	 * Defaults to 'run' but can be overridden.
	 */
	export type RunAnimationName10 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler68 = string;
	/**
	 * Defaults to 'crawl' but can be overridden.
	 */
	export type CrawlAnimationName10 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler69 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation32 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels21 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler70 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed25 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude22 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance21 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds21 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds21 = number;
	/**
	 * Relative to the global movement speed.
	 */
	export type MovementSpeed10 = number;
	/**
	 * How far away the creature will be attracted to these targets. Overrides baseline detection range.
	 */
	export type DetectionRange3 = number;
	/**
	 * How strongly the creature is repelled by these targets.
	 */
	export type Weight4 = number;
	/**
	 * Affects the probability of choosing the Roaming state.
	 */
	export type Weight5 = number;
	export type Min70 = number;
	export type Max70 = number;
	/**
	 * If unchecked, the creature will try to go to a different state when this one ends.
	 */
	export type Repeatable2 = boolean;
	/**
	 * Affects the probability of choosing the Idle state over other states.
	 */
	export type Weight6 = number;
	/**
	 * How long the creature must be outside the deaggro radius before exiting combat.
	 */
	export type DeaggroDuration = number;
	export type SpineSkin = string;
	/**
	 * If set, this thing cannot be stunned. Only applies to creatures, since nothing else can be stunned by default.
	 */
	export type Stun1 = boolean;
	/**
	 * Move the health bar up or down to better position it relative to the world element's visual size. Positive numbers go up.
	 */
	export type HealthBarVerticalOffset = number;
	/**
	 * If false, the object will always render itself at its normal color and won't be darkened or brightened by lighting.
	 */
	export type UseLighting9 = boolean;
	/**
	 * If true, this creature will respond angrily if something damages the items it wants to protect.
	 */
	export type RespondToDamage = boolean;
	/**
	 * If true, this creature will respond angrily if something destroys the items it wants to protect.
	 */
	export type RespondToDestruction = boolean;
	export type MovementVisuals11 =
	  | {
	      hop_speed: HopVerticalSpeed11;
	      animation?: HopAnimationName11;
	      hop_anticipation?: HopAnticipationSeconds11;
	      style: "Hop";
	      babbler?: Babbler71;
	      hop_followthrough?: PostHopFollowthroughSeconds11;
	    }
	  | {
	      run_vertical_speed: RunVerticalBounceSpeed11;
	      animation?: RunAnimationName11;
	      style: "Run";
	      babbler?: Babbler72;
	    }
	  | {
	      animation?: CrawlAnimationName11;
	      style: "Crawl";
	      babbler?: Babbler73;
	    }
	  | {
	      animation?: Animation33;
	      z_baseline: BaselineAltitudePixels22;
	      style: "Fly";
	      babbler?: Babbler74;
	      z_sine?: AltitudeSineWave22;
	      flaps?: FlappingVerticalMovements22;
	    };
	/**
	 * As a percentage of base gravity. This is fairly sensitive.
	 */
	export type HopVerticalSpeed11 = number;
	/**
	 * Defaults to 'hop' but can be overridden.
	 */
	export type HopAnimationName11 = string;
	/**
	 * How long to hold before rising off the ground, to make room for a pre-hop animation.
	 */
	export type HopAnticipationSeconds11 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler71 = string;
	/**
	 * How long to hold after landing on the ground from a hop, to make room for animations.
	 */
	export type PostHopFollowthroughSeconds11 = number;
	/**
	 * How fast the character should pop up off the ground with each leg movement. As a percentage of base gravity. This is fairly sensitive.
	 */
	export type RunVerticalBounceSpeed11 = number;
	/**
	 * Defaults to 'run' but can be overridden.
	 */
	export type RunAnimationName11 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler72 = string;
	/**
	 * Defaults to 'crawl' but can be overridden.
	 */
	export type CrawlAnimationName11 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler73 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation33 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels22 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler74 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed26 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude23 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance22 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds22 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds22 = number;
	/**
	 * Relative to the global movement speed.
	 */
	export type MovementSpeed11 = number;
	export type Min71 = number;
	export type Max71 = number;
	/**
	 * The sound the creature will make when it begins running away from something.
	 */
	export type FleeSound = string;
	/**
	 * How likely it is for the creature to flee when its health drops below the threshold.
	 */
	export type Probablity = number;
	/**
	 * When the creature's health drops below this threshold, it can flee.
	 */
	export type HealthThreshold2 = number;
	/**
	 * Plays when receiving damage that has been mitigated.
	 */
	export type Minor = string;
	/**
	 * Plays when receiving damage that hasn't been mitigated.
	 */
	export type Major = string;
	export type Chance12 = number;
	export type WorldSprite14 = string;
	/**
	 * How close (in grid spaces) you need to be to another creature of the same family who is in combat before you also get involved to help them.
	 */
	export type FriendlyHelpRange = number;
	/**
	 * If set, this game element will adjust its level to match the player's level at the time it is spawned, plus this number.
	 */
	export type RelativeLevel1 = number;
	export type Width6 = number;
	export type Height6 = number;
	export type UIIcon19 = string;
	export type Family = string;
	export type AggroRadius = number;
	export type DeaggroRadius = number;
	export type ScaleModifier7 = number;
	export type IgnoreInLevelViewer3 = boolean;
	/**
	 * When first spawned in the world, this thing can randomly scale itself down (to a minimum) to add variety. This scale should be preserved between sessions, so this will only apply to newly-created instances of this asset.
	 */
	export type RandomScalingMinimum2 = number;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup19 = string;
	/**
	 * By default, max HP is relative to the level of the creature. Change this value to further customize its max HP.
	 */
	export type HPModifier = number;
	export type ResistanceProfile1 = string;
	/**
	 * When destroyed, this world element will respawn using the base respawn minutes combined with this multiplier. Higher multiplier means longer time between respawns.
	 */
	export type RespawnTimeMultiplier = number;
	/**
	 * A number that is connected to the relative power level of this thing.
	 */
	export type Level4 = number;
	/**
	 * How the actor animates while not actively moving.
	 */
	export type StationaryVisuals11 =
	  | {
	      animation?: Animation34;
	      style?: "Stand";
	      babbler?: Babbler75;
	    }
	  | {
	      animation?: Animation35;
	      z_baseline: BaselineAltitudePixels23;
	      style: "Fly";
	      babbler?: Babbler76;
	      z_sine?: AltitudeSineWave23;
	      flaps?: FlappingVerticalMovements23;
	    };
	/**
	 * Defaults to 'idle.
	 */
	export type Animation34 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler75 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation35 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels23 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler76 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed27 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude24 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance23 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds23 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds23 = number;
	export type MovementVisuals12 =
	  | {
	      hop_speed: HopVerticalSpeed12;
	      animation?: HopAnimationName12;
	      hop_anticipation?: HopAnticipationSeconds12;
	      style: "Hop";
	      babbler?: Babbler77;
	      hop_followthrough?: PostHopFollowthroughSeconds12;
	    }
	  | {
	      run_vertical_speed: RunVerticalBounceSpeed12;
	      animation?: RunAnimationName12;
	      style: "Run";
	      babbler?: Babbler78;
	    }
	  | {
	      animation?: CrawlAnimationName12;
	      style: "Crawl";
	      babbler?: Babbler79;
	    }
	  | {
	      animation?: Animation36;
	      z_baseline: BaselineAltitudePixels24;
	      style: "Fly";
	      babbler?: Babbler80;
	      z_sine?: AltitudeSineWave24;
	      flaps?: FlappingVerticalMovements24;
	    };
	/**
	 * As a percentage of base gravity. This is fairly sensitive.
	 */
	export type HopVerticalSpeed12 = number;
	/**
	 * Defaults to 'hop' but can be overridden.
	 */
	export type HopAnimationName12 = string;
	/**
	 * How long to hold before rising off the ground, to make room for a pre-hop animation.
	 */
	export type HopAnticipationSeconds12 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler77 = string;
	/**
	 * How long to hold after landing on the ground from a hop, to make room for animations.
	 */
	export type PostHopFollowthroughSeconds12 = number;
	/**
	 * How fast the character should pop up off the ground with each leg movement. As a percentage of base gravity. This is fairly sensitive.
	 */
	export type RunVerticalBounceSpeed12 = number;
	/**
	 * Defaults to 'run' but can be overridden.
	 */
	export type RunAnimationName12 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler78 = string;
	/**
	 * Defaults to 'crawl' but can be overridden.
	 */
	export type CrawlAnimationName12 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler79 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation36 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels24 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler80 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed28 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude25 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance24 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds24 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds24 = number;
	/**
	 * Relative to the global movement speed.
	 */
	export type MovementSpeed12 = number;
	/**
	 * How the actor animates while not actively moving.
	 */
	export type StationaryVisuals12 =
	  | {
	      animation?: Animation37;
	      style?: "Stand";
	      babbler?: Babbler81;
	    }
	  | {
	      animation?: Animation38;
	      z_baseline: BaselineAltitudePixels25;
	      style: "Fly";
	      babbler?: Babbler82;
	      z_sine?: AltitudeSineWave25;
	      flaps?: FlappingVerticalMovements25;
	    };
	/**
	 * Defaults to 'idle.
	 */
	export type Animation37 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler81 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation38 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels25 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler82 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed29 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude26 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance25 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds25 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds25 = number;
	export type MovementVisuals13 =
	  | {
	      hop_speed: HopVerticalSpeed13;
	      animation?: HopAnimationName13;
	      hop_anticipation?: HopAnticipationSeconds13;
	      style: "Hop";
	      babbler?: Babbler83;
	      hop_followthrough?: PostHopFollowthroughSeconds13;
	    }
	  | {
	      run_vertical_speed: RunVerticalBounceSpeed13;
	      animation?: RunAnimationName13;
	      style: "Run";
	      babbler?: Babbler84;
	    }
	  | {
	      animation?: CrawlAnimationName13;
	      style: "Crawl";
	      babbler?: Babbler85;
	    }
	  | {
	      animation?: Animation39;
	      z_baseline: BaselineAltitudePixels26;
	      style: "Fly";
	      babbler?: Babbler86;
	      z_sine?: AltitudeSineWave26;
	      flaps?: FlappingVerticalMovements26;
	    };
	/**
	 * As a percentage of base gravity. This is fairly sensitive.
	 */
	export type HopVerticalSpeed13 = number;
	/**
	 * Defaults to 'hop' but can be overridden.
	 */
	export type HopAnimationName13 = string;
	/**
	 * How long to hold before rising off the ground, to make room for a pre-hop animation.
	 */
	export type HopAnticipationSeconds13 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler83 = string;
	/**
	 * How long to hold after landing on the ground from a hop, to make room for animations.
	 */
	export type PostHopFollowthroughSeconds13 = number;
	/**
	 * How fast the character should pop up off the ground with each leg movement. As a percentage of base gravity. This is fairly sensitive.
	 */
	export type RunVerticalBounceSpeed13 = number;
	/**
	 * Defaults to 'run' but can be overridden.
	 */
	export type RunAnimationName13 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler84 = string;
	/**
	 * Defaults to 'crawl' but can be overridden.
	 */
	export type CrawlAnimationName13 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler85 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation39 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels26 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler86 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed30 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude27 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance26 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds26 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds26 = number;
	/**
	 * Relative to the global movement speed.
	 */
	export type MovementSpeed13 = number;
	/**
	 * If set, the creature will always cast this ability instantly after finishing the prior ability, ignoring normal behavioral cooldowns.
	 */
	export type Instant1 = boolean;
	/**
	 * The weight choosing this followup ability relative to the other followup abilities in this list.
	 */
	export type Weight7 = number;
	export type Ability12 = string;
	/**
	 * The creature can randomly ignore the post-ability pause, and instead go right into the next ability.
	 */
	export type PostAbilityPauseIgnoreChance1 = number;
	export type MinSeconds5 = number;
	export type MaxSeconds5 = number;
	/**
	 * Affects how frequently this ability is chosen.
	 */
	export type Weight8 = number;
	export type Ability13 = string;
	/**
	 * If possible, the creature can add some randomness to the direction of this ability's cast (in degrees).
	 */
	export type DirectionRandomness3 = number;
	export type MinSeconds6 = number;
	export type MaxSeconds6 = number;
	export type MinSeconds7 = number;
	export type MaxSeconds7 = number;
	/**
	 * Whether the creature will attack the player when the player gets into aggro range.
	 */
	export type AggroOntoPlayer = boolean;
	/**
	 * The sound the creature will make when it begins attacking something
	 */
	export type AggroSound = string;
	/**
	 * Higher effort items are considered more rare or harder to reach, and recipes will call for fewer of them. Lower effort items will be considered 'cheap', and therefore recipes will demand more of them.
	 */
	export type EffortModifier12 = number;
	export type EnglishText91 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText73 = string;
	export type EnglishText92 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText74 = string;
	export type Condition6 =
	  | {
	      dock_tile: Dock2;
	      terrain_tile: Terrain1;
	      type?: "Standing on Tile Type";
	      floor_tile: Floor1;
	    }
	  | {
	      interior_tiles: InteriorTileArea1;
	      type?: "Room Size";
	    }
	  | {
	      type?: "Be Indoors";
	    }
	  | {
	      whole_building: WholeBuilding2;
	      item_tally: {
	        comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	        value0?: Items50;
	        value1?: number;
	      };
	      type?: "Item Tally";
	    }
	  | {
	      num_rooms: NumberOfRooms1;
	      type?: "Number of Rooms";
	    }
	  | {
	      destination_items: TargetItems1;
	      whole_building: WholeBuilding3;
	      distance: TileDistance1;
	      source_items: SourceItems1;
	      type?: "Item Relationships";
	    };
	export type Dock2 = boolean;
	export type Terrain1 = boolean;
	export type Floor1 = boolean;
	/**
	 * If true, the entire building will be checked instead of just the Artisan's room.
	 */
	export type WholeBuilding2 = boolean;
	/**
	 * If true, the entire building will be checked instead of just the Artisan's room.
	 */
	export type WholeBuilding3 = boolean;
	export type EnglishText93 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText75 = string;
	/**
	 * Which buddy this comfort belongs to.
	 */
	export type Buddy8 = string;
	/**
	 * Used to order this comfort in the Artisan's list.
	 */
	export type OrderIndex = number;
	export type UnlockedBy49 = string;
	export type UIIcon20 = string;
	export type EnglishText94 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText76 = string;
	export type EnglishText95 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText77 = string;
	/**
	 * How much faster your Insight research will go when you have unlocked this comfort.
	 */
	export type InsightSpeedBonus = number;
	/**
	 * The sprite to draw below the main sprite. Subimages must correspond with the Sprite.
	 */
	export type UnderSprite3 = string;
	/**
	 * If this tile ends up touching water, it will be replaced with this tile.
	 */
	export type ShoreTile = string;
	/**
	 * The primary sprite of the tile.
	 */
	export type MainSprite3 = string;
	export type Blue38 = number;
	export type Red38 = number;
	export type Green38 = number;
	export type Neighbor = string;
	/**
	 * If this group is chosen, this is the chance that it will actually spawn its spice.
	 */
	export type SpawnChance3 = number;
	/**
	 * This is a large sprite that will be drawn underwater if this tile is at a shoreline. It helps create a sense of the water getting deeper.
	 */
	export type ShelfUnderwaterSprite2 = string;
	/**
	 * If this tile is against water, the Shoreline Water Sprite will be drawn in the water to convey how the tile interacts with the water.
	 */
	export type ShorelineUnderwaterSprite2 = string;
	/**
	 * The sprite to use when displaying the tile in the UI (e.g. Build Mode).
	 */
	export type Icon8 = string;
	/**
	 * If this tile gets cleared via Build Mode, it will be replaced with its 'Cleared Tile' version temporarily. If a tile has a 'Cleared Tile' then it cannot be built on until it is cleared.
	 */
	export type ClearedTile = string;
	/**
	 * Determines how this tile will be depth-sorted against other terrain tiles.
	 */
	export type DepthPriority = number;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup20 = string;
	/**
	 * The sound to play when this tile is placed in the editor or in Build Mode.
	 */
	export type PlacementSound6 = string;
	/**
	 * The sound to play when the player walks on this tile.
	 */
	export type FootstepSound3 = string;
	/**
	 * Cleared terrain tiles will allow floors to be placed on them by default. You can override this default behavior.
	 */
	export type DisallowFloors = boolean;
	/**
	 * When this tile gets cleared, you can customize the sprite that will blast off of it. If not specified, it will just make a smoke blast.
	 */
	export type ClearTileParticleSprite = string;
	/**
	 * Whether the tile should be X-flipped randomly when placed.
	 */
	export type Flippable6 = boolean;
	export type EnglishText96 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText78 = string;
	/**
	 * The probability of a given tile having Dapples on it.
	 */
	export type SpawnChance4 = number;
	export type Blue39 = number;
	export type Red39 = number;
	export type Green39 = number;
	export type Blue40 = number;
	export type Red40 = number;
	export type Green40 = number;
	export type Blue41 = number;
	export type Red41 = number;
	export type Green41 = number;
	/**
	 * The minimum 'Effort' for items to be considered of this quality.
	 */
	export type Effort = number;
	export type EnglishText97 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText79 = string;
	export type HighlightThreshold = number;
	export type BlueMultiplier = number;
	export type Brightness1 = number;
	export type ShadowThreshold = number;
	export type Saturation = number;
	export type RedMultiplier = number;
	export type GreenMultiplier = number;
	export type ShadowMultiplier = number;
	export type LightLevels = number;
	export type DarkLevels = number;
	export type HighlightMultiplier = number;
	export type ProfileNameInternal = string;
	export type Sprite4 = string;
	/**
	 * During dialogue moments, this emoji will play this sound when displayed.
	 */
	export type Sound9 = string;
	export type NameInternal10 = string;
	export type Insight14 = string;
	/**
	 * How much the regrowth time should be adjusted for each point invested in the Insight.
	 */
	export type ChangePerPoint24 = number;
	/**
	 * The baseline chance for a fertilized seedpack of this type to turn into a 'shiny' version of the plant. This opens access to bonus loot groups.
	 */
	export type ShinyChance = number;
	/**
	 * If false, the object will always render itself at its normal color and won't be darkened or brightened by lighting.
	 */
	export type UseLighting10 = boolean;
	export type GardenBed1 = string;
	export type WorldSprite15 = string;
	/**
	 * How many times this seedpack will regrow into the target plant after it is first planted.
	 */
	export type NumberOfRegrows = number;
	export type GrowsInto = string;
	/**
	 * @minItems 1
	 */
	export type RegrowBoostingInsights = [
	  {
	    insight?: Insight15;
	    regrows_per_point?: RegrowsPerPoint;
	  },
	  ...{
	    insight?: Insight15;
	    regrows_per_point?: RegrowsPerPoint;
	  }[]
	];
	export type Insight15 = string;
	export type RegrowsPerPoint = number;
	export type UIIcon21 = string;
	export type Insight16 = string;
	/**
	 * This chance only applies if the Insight is fully researched (it doesn't apply point by point if the Insight has multiple points.
	 */
	export type AddedChance = number;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup21 = string;
	export type OutputQuantity8 = number;
	export type ResearchNode18 = string;
	export type Style11 = "Additive" | "Multiplicative";
	export type ChangePerPoint25 = number;
	/**
	 * What workstation the player must be near to craft this recipe.
	 */
	export type Station10 = string;
	export type ResearchNode19 = string;
	export type ChangePerPoint26 = number;
	export type UnlockedBy50 = string;
	/**
	 * Change this number to increase or decrease the number of materials required to craft this item.
	 */
	export type EffortModifier13 = number;
	export type EnglishText98 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText80 = string;
	export type FreeRegrowInsight = string;
	/**
	 * Every time the seed pack grows up, it will have this chance to not consume a Regrow.
	 */
	export type FreeRegrowChance = number;
	export type EnglishText99 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText81 = string;
	export type MinutesToGrow = number;
	export type SortOrder = number;
	export type Pet6 = string;
	/**
	 * The stage of the pet's life that this mastery becomes available.
	 */
	export type PetStage5 = "Adult" | "Embiggened";
	export type Icon9 = string;
	export type EnglishText100 = string;
	export type EnglishText101 = string;
	/**
	 * How the actor animates while not actively moving.
	 */
	export type StationaryVisuals13 =
	  | {
	      animation?: Animation40;
	      style?: "Stand";
	      babbler?: Babbler87;
	    }
	  | {
	      animation?: Animation41;
	      z_baseline: BaselineAltitudePixels27;
	      style: "Fly";
	      babbler?: Babbler88;
	      z_sine?: AltitudeSineWave27;
	      flaps?: FlappingVerticalMovements27;
	    };
	/**
	 * Defaults to 'idle.
	 */
	export type Animation40 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler87 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation41 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels27 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler88 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed31 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude28 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance27 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds27 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds27 = number;
	export type MovementVisuals14 =
	  | {
	      hop_speed: HopVerticalSpeed14;
	      animation?: HopAnimationName14;
	      hop_anticipation?: HopAnticipationSeconds14;
	      style: "Hop";
	      babbler?: Babbler89;
	      hop_followthrough?: PostHopFollowthroughSeconds14;
	    }
	  | {
	      run_vertical_speed: RunVerticalBounceSpeed14;
	      animation?: RunAnimationName14;
	      style: "Run";
	      babbler?: Babbler90;
	    }
	  | {
	      animation?: CrawlAnimationName14;
	      style: "Crawl";
	      babbler?: Babbler91;
	    }
	  | {
	      animation?: Animation42;
	      z_baseline: BaselineAltitudePixels28;
	      style: "Fly";
	      babbler?: Babbler92;
	      z_sine?: AltitudeSineWave28;
	      flaps?: FlappingVerticalMovements28;
	    };
	/**
	 * As a percentage of base gravity. This is fairly sensitive.
	 */
	export type HopVerticalSpeed14 = number;
	/**
	 * Defaults to 'hop' but can be overridden.
	 */
	export type HopAnimationName14 = string;
	/**
	 * How long to hold before rising off the ground, to make room for a pre-hop animation.
	 */
	export type HopAnticipationSeconds14 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler89 = string;
	/**
	 * How long to hold after landing on the ground from a hop, to make room for animations.
	 */
	export type PostHopFollowthroughSeconds14 = number;
	/**
	 * How fast the character should pop up off the ground with each leg movement. As a percentage of base gravity. This is fairly sensitive.
	 */
	export type RunVerticalBounceSpeed14 = number;
	/**
	 * Defaults to 'run' but can be overridden.
	 */
	export type RunAnimationName14 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler90 = string;
	/**
	 * Defaults to 'crawl' but can be overridden.
	 */
	export type CrawlAnimationName14 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler91 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation42 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels28 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler92 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed32 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude29 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance28 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds28 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds28 = number;
	/**
	 * Relative to the global movement speed.
	 */
	export type MovementSpeed14 = number;
	export type SpineSkin1 = string;
	/**
	 * If false, the object will always render itself at its normal color and won't be darkened or brightened by lighting.
	 */
	export type UseLighting11 = boolean;
	export type Item13 = string;
	export type Quantity73 = number;
	export type Blue42 = number;
	export type Red42 = number;
	export type Green42 = number;
	/**
	 * Plays when receiving damage that has been mitigated.
	 */
	export type Minor1 = string;
	/**
	 * Plays when receiving damage that hasn't been mitigated.
	 */
	export type Major1 = string;
	export type Chance13 = number;
	export type WorldSprite16 = string;
	/**
	 * If set, this game element will adjust its level to match the player's level at the time it is spawned, plus this number.
	 */
	export type RelativeLevel2 = number;
	export type Width7 = number;
	export type Height7 = number;
	export type UIIcon22 = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup22 = string;
	/**
	 * Baseline boss HP is defined in the Game Balance motes. Change this value to further customize its max HP.
	 */
	export type HPModifier1 = number;
	export type ResistanceProfile2 = string;
	/**
	 * The animation to play when the boss dies.
	 */
	export type Animation43 = string;
	/**
	 * The sound to play when the boss dies.
	 */
	export type DeathSound = string;
	/**
	 * The particle burst to play when the boss dies.
	 */
	export type ParticleBurst = string;
	/**
	 * A number that is connected to the relative power level of this thing.
	 */
	export type Level5 = number;
	export type EnglishText102 = string;
	/**
	 * A song or collection of songs that can play in a given context.
	 */
	export type Music1 = Music2 & Music3;
	export type Style12 = "Looping" | "Playlist";
	/**
	 * For internal reference
	 */
	export type Name49 = string;
	export type Music3 =
	  | {
	      loop: Loop;
	      loop_combat?: LoopCombatOverlay;
	      style?: "Looping";
	      pause_seconds?: PauseSeconds2;
	      loop_in_seconds?: LoopInSeconds;
	      intro?: Intro;
	      intro_combat?: IntroCombatOverlay;
	      name?: Name50;
	    }
	  | {
	      style?: "Playlist";
	      tracks: Tracks;
	      name?: Name51;
	    };
	/**
	 * The main part of the track that will play on a loop.
	 */
	export type Loop = string;
	/**
	 * A track to play synchronized with the Combat track while in combat.
	 */
	export type LoopCombatOverlay = string;
	/**
	 * If this track stops and then resumes within this time frame, it will pick up where it left off and continue looping. Otherwise, it will start over, replaying its its intro.
	 */
	export type PauseSeconds2 = number;
	/**
	 * The amount of time after the Intro begins playing for the loop to start. By default, the loop will begin playing when the Intro ends, but you can have them overlap by setting this value.
	 */
	export type LoopInSeconds = number;
	/**
	 * The sound that plays before the loop.
	 */
	export type Intro = string;
	/**
	 * A track to play synchronized with the Intro track while in combat.
	 */
	export type IntroCombatOverlay = string;
	/**
	 * For internal reference
	 */
	export type Name50 = string;
	/**
	 * For internal reference
	 */
	export type Name51 = string;
	export type Blue43 = number;
	export type Red43 = number;
	export type Green43 = number;
	/**
	 * Plays when receiving damage that has been mitigated.
	 */
	export type Minor2 = string;
	/**
	 * Plays when receiving damage that hasn't been mitigated.
	 */
	export type Major2 = string;
	export type Chance14 = number;
	export type WorldSprite17 = string;
	export type Width8 = number;
	export type Height8 = number;
	export type UIIcon23 = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup23 = string;
	export type EnglishText103 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText82 = string;
	/**
	 * If checked, this door won't open until the player is out of combat.
	 */
	export type ClosedDuringCombat = boolean;
	/**
	 * Structural base items will vote on their preferred roof. The roof type with the most votes will be displayed.
	 */
	export type PreferredRoof1 = string;
	export type DoorOpenSound1 = string;
	export type WorldSprite18 = string;
	export type DoorCloseSound1 = string;
	export type UIIcon24 = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup24 = string;
	/**
	 * The sound to play when this is placed in the editor or in Build Mode.
	 */
	export type PlacementSound7 = string;
	export type OutputQuantity9 = number;
	export type ResearchNode20 = string;
	export type Style13 = "Additive" | "Multiplicative";
	export type ChangePerPoint27 = number;
	/**
	 * What workstation the player must be near to craft this recipe.
	 */
	export type Station11 = string;
	export type ResearchNode21 = string;
	export type ChangePerPoint28 = number;
	export type UnlockedBy51 = string;
	/**
	 * Change this number to increase or decrease the number of materials required to craft this item.
	 */
	export type EffortModifier14 = number;
	export type EnglishText104 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText83 = string;
	/**
	 * Entities that the door will open for (like the player) must at least this far away (in grid spaces) before the door will close.
	 */
	export type CloseDistance = number;
	export type EnglishText105 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText84 = string;
	export type Blue44 = number;
	export type Red44 = number;
	export type Green44 = number;
	export type ProgressBarHeightPixels = number;
	/**
	 * The path to the video in the Game Maker project's included files.
	 */
	export type VideoFilePath = string;
	export type Blue45 = number;
	export type Red45 = number;
	export type Green45 = number;
	export type ProgressBarBackgroundAlpha = number;
	export type ProgressBarAlpha = number;
	export type TimestampSeconds = number;
	/**
	 * For developer use.
	 */
	export type VideoName = string;
	export type Blue46 = number;
	export type Red46 = number;
	export type Green46 = number;
	/**
	 * Make this cutscene quieter or louder.
	 */
	export type AudioGainModifier = number;
	/**
	 * If false, the object will always render itself at its normal color and won't be darkened or brightened by lighting.
	 */
	export type UseLighting12 = boolean;
	export type WorldSprite19 = string;
	export type Blue47 = number;
	export type Red47 = number;
	export type Green47 = number;
	export type UIIcon25 = string;
	/**
	 * If false, this item can be placed in water.
	 */
	export type RequiresLand3 = boolean;
	export type OutputQuantity10 = number;
	export type ResearchNode22 = string;
	export type Style14 = "Additive" | "Multiplicative";
	export type ChangePerPoint29 = number;
	/**
	 * What workstation the player must be near to craft this recipe.
	 */
	export type Station12 = string;
	export type ResearchNode23 = string;
	export type ChangePerPoint30 = number;
	export type UnlockedBy52 = string;
	/**
	 * Change this number to increase or decrease the number of materials required to craft this item.
	 */
	export type EffortModifier15 = number;
	export type EnglishText106 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText85 = string;
	/**
	 * The height of the hitbox for this fence. Important for making the fence easily clickable via the Editor or build mode.
	 */
	export type HitboxHeight = number;
	export type EnglishText107 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText86 = string;
	export type WorldSprite20 = string;
	/**
	 * If set, Juicebox will follow the player once this thing is finished.
	 */
	export type FollowingUnlock1 = string;
	export type Width9 = number;
	export type Height9 = number;
	export type UIIcon26 = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup25 = string;
	export type Blue48 = number;
	export type Red48 = number;
	export type Green48 = number;
	export type EnglishText108 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText87 = string;
	/**
	 * The sprite to draw below the main sprite. Subimages must correspond with the Sprite.
	 */
	export type UnderSprite4 = string;
	/**
	 * The primary sprite of the tile.
	 */
	export type MainSprite4 = string;
	export type Blue49 = number;
	export type Red49 = number;
	export type Green49 = number;
	/**
	 * The sprite to use when displaying the tile in the UI (e.g. Build Mode).
	 */
	export type Icon10 = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup26 = string;
	/**
	 * The sound to play when this tile is placed in the editor or in Build Mode.
	 */
	export type PlacementSound8 = string;
	export type OutputQuantity11 = number;
	export type ResearchNode24 = string;
	export type Style15 = "Additive" | "Multiplicative";
	export type ChangePerPoint31 = number;
	/**
	 * What workstation the player must be near to craft this recipe.
	 */
	export type Station13 = string;
	export type ResearchNode25 = string;
	export type ChangePerPoint32 = number;
	export type UnlockedBy53 = string;
	/**
	 * Change this number to increase or decrease the number of materials required to craft this item.
	 */
	export type EffortModifier16 = number;
	/**
	 * The sound to play when the player walks on this tile.
	 */
	export type FootstepSound4 = string;
	export type EnglishText109 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText88 = string;
	/**
	 * Whether the tile should be X-flipped randomly when placed.
	 */
	export type Flippable7 = boolean;
	export type EnglishText110 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText89 = string;
	/**
	 * The probability of a given tile having Dapples on it.
	 */
	export type SpawnChance5 = number;
	export type Blue50 = number;
	export type Red50 = number;
	export type Green50 = number;
	/**
	 * Structural base items will vote on their preferred roof. The roof type with the most votes will be displayed.
	 */
	export type PreferredRoof2 = string;
	export type WorldSprite21 = string;
	export type UIIcon27 = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup27 = string;
	export type OutputQuantity12 = number;
	export type ResearchNode26 = string;
	export type Style16 = "Additive" | "Multiplicative";
	export type ChangePerPoint33 = number;
	/**
	 * What workstation the player must be near to craft this recipe.
	 */
	export type Station14 = string;
	export type ResearchNode27 = string;
	export type ChangePerPoint34 = number;
	export type UnlockedBy54 = string;
	/**
	 * Change this number to increase or decrease the number of materials required to craft this item.
	 */
	export type EffortModifier17 = number;
	/**
	 * The sound to play when this is placed in the editor or in Build Mode.
	 */
	export type PlacementSound9 = string;
	export type EnglishText111 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText90 = string;
	/**
	 * How many tiles away this pillar can support walls or doors.
	 */
	export type PillarSupportDistance = number;
	export type EnglishText112 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText91 = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup28 = string;
	export type Name58 = string;
	/**
	 * A world element that can be harvested or picked up.
	 */
	export type Resource = Resource1 & Resource2;
	/**
	 * If true, this item will draw under terrain but above water, and it cannot be placed on land.
	 */
	export type WaterLayer = boolean;
	export type Object7 = string;
	/**
	 * Whether to show the celebration UI when acquiring this item.
	 */
	export type CelebratePickup = boolean;
	/**
	 * If true, this resource will snap to the grid when placed. Only applies to non-solid objects.
	 */
	export type GridSnapping3 = boolean;
	/**
	 * A unique sound to be played when this item is collected into your body.
	 */
	export type CollectionSound3 = string;
	/**
	 * Whether this resource can be picked up by the player. If pickupable, the resource cannot be damaged and cannot drop loot.
	 */
	export type Pickupable = boolean;
	/**
	 * If false, the object will always render itself at its normal color and won't be darkened or brightened by lighting.
	 */
	export type UseLighting13 = boolean;
	export type WorldSprite22 = string;
	export type Blue51 = number;
	export type Red51 = number;
	export type Green51 = number;
	export type CanExistOnFloors1 = boolean;
	/**
	 * Whether the player walks over the top of this resource.
	 */
	export type Underfoot2 = boolean;
	/**
	 * If set, this game element will adjust its level to match the player's level at the time it is spawned, plus this number.
	 */
	export type RelativeLevel3 = number;
	export type UIIcon28 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler93 = string;
	/**
	 * If false, this item can be placed in water.
	 */
	export type RequiresLand4 = boolean;
	export type ScaleModifier8 = number;
	export type Condition7 =
	  | {
	      casting_state: Casting4;
	      abilities?: Abilities6;
	      condition_type?: "Ability";
	    }
	  | {
	      datafield_evaluation: Evaluation8;
	      condition_type?: "Datafield";
	    }
	  | {
	      daytime: DuringDaytime5;
	      condition_type?: "Daylight";
	    }
	  | {
	      combat: InCombat4;
	      condition_type?: "Combat";
	    }
	  | {
	      insight_modifier?: InsightModifier4;
	      evaluation: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      minutes_passed: MinutesSinceTimestamp4;
	      timestamp: Timestamp6;
	      condition_type?: "Timestamp";
	    }
	  | {
	      moon: ActiveMoon5;
	      condition_type?: "Moon";
	    }
	  | {
	      quest_status: QuestStatus7;
	      quest: QuestToCheck7;
	      condition_type?: "Quest";
	    }
	  | {
	      following: Following13;
	      artisan: Buddy9;
	      condition_type?: "Artisan Following";
	    }
	  | {
	      prerequisite: Insight18;
	      unlock_text?: InsightTooltip5;
	      condition_type?: "Insight";
	    }
	  | {
	      proximity_range: DistanceRequiredGridSpaces4;
	      proximity_targets: Targets7;
	      proximity_quantity: NumberOfTargets8;
	      proximity_ignores_stealth: IgnoreStealthedTargets4;
	      condition_type?: "Proximity";
	    }
	  | {
	      hp_evaluation: HealthEvaluation4;
	      condition_type?: "Health";
	    }
	  | {
	      require_all: RequireAll45;
	      items: Items52;
	      condition_type?: "Item Equipped";
	    }
	  | {
	      items: Items53;
	      condition_type?: "Item Wielding";
	    }
	  | {
	      num_pieces: NumberOfPiecesEquipped4;
	      equipment_set: EquipmentSet8;
	      condition_type?: "Wearing Equipment Set";
	    }
	  | {
	      buff_num_targets?: NumberOfTargets9;
	      buff_target: TargetEntity17;
	      buffs: Buffs78;
	      buff_check_self: CheckSelf4;
	      buff_require_all: RequireAll46;
	      buff_target_filter?: BuffTargetFilter4;
	      buff_own_only: OwnBuffsOnly4;
	      buff_stack_evaluation?: Stacks45;
	      buff_proximity?: BuffTargetRange4;
	      condition_type?: "Buffs";
	    }
	  | {
	      boss: Boss8;
	      condition_type?: "Boss Defeated";
	    }
	  | {
	      comparison: NumberSummoned4;
	      summoned_filter?: SummonedEntitiesFilter4;
	      condition_type?: "Summoned Entities";
	    };
	/**
	 * If set, the ability's casting state must match this checkbox.
	 */
	export type Casting4 = boolean;
	export type DuringDaytime5 = boolean;
	export type InCombat4 = boolean;
	export type Insight17 = string;
	/**
	 * How much the 'Minutes Since Timestamp' should be adjusted (up or down) for each point invested in the Insight.
	 */
	export type ChangePerPoint35 = number;
	/**
	 * If greater than 0, then this many minutes will have passed since the timestamp was set. If less than 0, the timestamp will be this many minutes from now.
	 */
	export type MinutesSinceTimestamp4 = number;
	export type Timestamp6 = string;
	export type ActiveMoon5 = string;
	export type QuestStatus7 = "Complete" | "Started" | "Not Started";
	/**
	 * The quest whose status we are querying.
	 */
	export type QuestToCheck7 = string;
	export type Following13 = boolean;
	export type Buddy9 = string;
	export type Insight18 = string;
	export type EnglishText113 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText92 = string;
	export type Min72 = number;
	export type Max72 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll44 = boolean;
	export type Quantity74 = number;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude35 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags34 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants34 = boolean;
	export type Evaluation9 = "==" | "!=" | "<" | "<=" | ">" | ">=";
	export type Quantity75 = number;
	/**
	 * If checked, the proximity check will fail on targets that are stealthed.
	 */
	export type IgnoreStealthedTargets4 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the items listed are equipped at the same time.
	 */
	export type RequireAll45 = boolean;
	/**
	 * If the player is wearing at least this many pieces, the condition will be met.
	 */
	export type NumberOfPiecesEquipped4 = number;
	export type EquipmentSet8 = string;
	export type Quantity76 = number;
	/**
	 * Which entity's buffs to query.
	 */
	export type TargetEntity17 = "Self" | "Other" | "All Entities";
	/**
	 * Obsolete--delete.
	 */
	export type CheckSelf4 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on yourself at the same time.
	 */
	export type RequireAll46 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll47 = boolean;
	export type Quantity77 = number;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude36 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags35 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants35 = boolean;
	/**
	 * If checked, only buffs created by you will be checked. Otherwise, all buffs will be checked.
	 */
	export type OwnBuffsOnly4 = boolean;
	export type Quantity78 = number;
	export type Min73 = number;
	export type Max73 = number;
	export type Boss8 = string;
	export type Quantity79 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll48 = boolean;
	export type Quantity80 = number;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude37 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags36 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants36 = boolean;
	/**
	 * If true, then every condition must be met. If false, then only one of the conditions must be met.
	 */
	export type RequireAllConditions5 = boolean;
	export type State5 = string;
	/**
	 * A brief decription about this group for internal reference.
	 */
	export type PriorityGroupNameInternal1 = string;
	export type Duration1 =
	  | {
	      duration_type?: "Time";
	      time: TimeSeconds1;
	    }
	  | {
	      duration_type?: "Animation";
	    }
	  | {
	      duration_type?: "Indefinite";
	    };
	export type Min74 = number;
	export type Max74 = number;
	export type Condition8 =
	  | {
	      casting_state: Casting5;
	      abilities?: Abilities7;
	      condition_type?: "Ability";
	    }
	  | {
	      datafield_evaluation: Evaluation10;
	      condition_type?: "Datafield";
	    }
	  | {
	      daytime: DuringDaytime6;
	      condition_type?: "Daylight";
	    }
	  | {
	      combat: InCombat5;
	      condition_type?: "Combat";
	    }
	  | {
	      insight_modifier?: InsightModifier5;
	      evaluation: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      minutes_passed: MinutesSinceTimestamp5;
	      timestamp: Timestamp7;
	      condition_type?: "Timestamp";
	    }
	  | {
	      moon: ActiveMoon6;
	      condition_type?: "Moon";
	    }
	  | {
	      quest_status: QuestStatus8;
	      quest: QuestToCheck8;
	      condition_type?: "Quest";
	    }
	  | {
	      following: Following14;
	      artisan: Buddy10;
	      condition_type?: "Artisan Following";
	    }
	  | {
	      prerequisite: Insight20;
	      unlock_text?: InsightTooltip6;
	      condition_type?: "Insight";
	    }
	  | {
	      proximity_range: DistanceRequiredGridSpaces5;
	      proximity_targets: Targets8;
	      proximity_quantity: NumberOfTargets10;
	      proximity_ignores_stealth: IgnoreStealthedTargets5;
	      condition_type?: "Proximity";
	    }
	  | {
	      hp_evaluation: HealthEvaluation5;
	      condition_type?: "Health";
	    }
	  | {
	      require_all: RequireAll50;
	      items: Items57;
	      condition_type?: "Item Equipped";
	    }
	  | {
	      items: Items58;
	      condition_type?: "Item Wielding";
	    }
	  | {
	      num_pieces: NumberOfPiecesEquipped5;
	      equipment_set: EquipmentSet9;
	      condition_type?: "Wearing Equipment Set";
	    }
	  | {
	      buff_num_targets?: NumberOfTargets11;
	      buff_target: TargetEntity18;
	      buffs: Buffs85;
	      buff_check_self: CheckSelf5;
	      buff_require_all: RequireAll51;
	      buff_target_filter?: BuffTargetFilter5;
	      buff_own_only: OwnBuffsOnly5;
	      buff_stack_evaluation?: Stacks49;
	      buff_proximity?: BuffTargetRange5;
	      condition_type?: "Buffs";
	    }
	  | {
	      boss: Boss9;
	      condition_type?: "Boss Defeated";
	    }
	  | {
	      comparison: NumberSummoned5;
	      summoned_filter?: SummonedEntitiesFilter5;
	      condition_type?: "Summoned Entities";
	    };
	/**
	 * If set, the ability's casting state must match this checkbox.
	 */
	export type Casting5 = boolean;
	export type DuringDaytime6 = boolean;
	export type InCombat5 = boolean;
	export type Insight19 = string;
	/**
	 * How much the 'Minutes Since Timestamp' should be adjusted (up or down) for each point invested in the Insight.
	 */
	export type ChangePerPoint36 = number;
	/**
	 * If greater than 0, then this many minutes will have passed since the timestamp was set. If less than 0, the timestamp will be this many minutes from now.
	 */
	export type MinutesSinceTimestamp5 = number;
	export type Timestamp7 = string;
	export type ActiveMoon6 = string;
	export type QuestStatus8 = "Complete" | "Started" | "Not Started";
	/**
	 * The quest whose status we are querying.
	 */
	export type QuestToCheck8 = string;
	export type Following14 = boolean;
	export type Buddy10 = string;
	export type Insight20 = string;
	export type EnglishText114 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText93 = string;
	export type Min75 = number;
	export type Max75 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll49 = boolean;
	export type Quantity81 = number;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude38 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags37 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants37 = boolean;
	export type Evaluation11 = "==" | "!=" | "<" | "<=" | ">" | ">=";
	export type Quantity82 = number;
	/**
	 * If checked, the proximity check will fail on targets that are stealthed.
	 */
	export type IgnoreStealthedTargets5 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the items listed are equipped at the same time.
	 */
	export type RequireAll50 = boolean;
	/**
	 * If the player is wearing at least this many pieces, the condition will be met.
	 */
	export type NumberOfPiecesEquipped5 = number;
	export type EquipmentSet9 = string;
	export type Quantity83 = number;
	/**
	 * Which entity's buffs to query.
	 */
	export type TargetEntity18 = "Self" | "Other" | "All Entities";
	/**
	 * Obsolete--delete.
	 */
	export type CheckSelf5 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on yourself at the same time.
	 */
	export type RequireAll51 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll52 = boolean;
	export type Quantity84 = number;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude39 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags38 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants38 = boolean;
	/**
	 * If checked, only buffs created by you will be checked. Otherwise, all buffs will be checked.
	 */
	export type OwnBuffsOnly5 = boolean;
	export type Quantity85 = number;
	export type Min76 = number;
	export type Max76 = number;
	export type Boss9 = string;
	export type Quantity86 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll53 = boolean;
	export type Quantity87 = number;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude40 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags39 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants39 = boolean;
	/**
	 * If true, then every condition must be met. If false, then only one of the conditions must be met.
	 */
	export type RequireAllConditions6 = boolean;
	export type State7 = string;
	export type Min77 = number;
	export type Max77 = number;
	export type Name59 = string;
	export type Track1 = number;
	export type RandomizedStart1 = boolean;
	export type Looping4 = boolean;
	/**
	 * This is the name of the variable used for the state in the game's code. Only lowercase letters and underscores.
	 */
	export type StateNameInternal1 = string;
	export type IgnoreInLevelViewer4 = boolean;
	/**
	 * When first spawned in the world, this thing can randomly scale itself down (to a minimum) to add variety. This scale should be preserved between sessions, so this will only apply to newly-created instances of this asset.
	 */
	export type RandomScalingMinimum3 = number;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup29 = string;
	/**
	 * If set to false, this world element will not respawn once it has been destroyed. Defaults to true if unset.
	 */
	export type Respawnable = boolean;
	export type EnglishText115 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText94 = string;
	/**
	 * What proportion of this tile should spawn this resource.
	 */
	export type Coverage = number;
	/**
	 * When destroyed, this world element will respawn using the base respawn minutes combined with this multiplier. Higher multiplier means longer time between respawns.
	 */
	export type RespawnTimeMultiplier1 = number;
	/**
	 * A number that is connected to the relative power level of this thing.
	 */
	export type Level6 = number;
	/**
	 * Higher effort items are considered more rare or harder to reach, and recipes will call for fewer of them. Lower effort items will be considered 'cheap', and therefore recipes will demand more of them.
	 */
	export type EffortModifier18 = number;
	export type EnglishText116 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText95 = string;
	export type Resource2 =
	  | {
	      pickupable?: 1;
	      manual_pickup?: ManualPickup1;
	    }
	  | {
	      loot?: Loot2;
	      death_sounds?: DestructionSounds3;
	      pickupable?: 0;
	      injury_sounds?: InjurySounds3;
	      hp_modifier?: HPModifier2;
	      resistance_profile?: ResistanceProfile3;
	    };
	/**
	 * If true, the player must manually interact with the resource to pick it up.
	 */
	export type ManualPickup1 = boolean;
	/**
	 * If true, this loot group will be considered a 'bonus' and will not be counted as part of the normal effort calculations.
	 */
	export type ConsiderAsBonus1 = boolean;
	/**
	 * The probability for this loot group to occur.
	 */
	export type DropChance2 = number;
	/**
	 * When this loot group is able to drop.
	 */
	export type TimeOfDay2 = "Always" | "Day" | "Night";
	export type Min78 = number;
	export type Max78 = number;
	export type UnlockedBy55 = string;
	/**
	 * If set, the 'Drop Quantity' value will multiply against the value retrieved from this data field.
	 */
	export type DatafieldQuantityLink1 = string;
	/**
	 * What event will cause this loot to drop.
	 */
	export type Trigger3 = "Death" | "Damage";
	/**
	 * If true, this loot group will not be shown in the progression map.
	 */
	export type IgnoreInProgressionMap2 = boolean;
	/**
	 * Whether to include this loot group when listing the 'sources' of an item in its tooltip.
	 */
	export type IncludeAsSource1 = boolean;
	/**
	 * Plays when receiving damage that has been mitigated.
	 */
	export type Minor3 = string;
	/**
	 * Plays when receiving damage that hasn't been mitigated.
	 */
	export type Major3 = string;
	export type Chance15 = number;
	/**
	 * By default, this world element will have a max HP relative to its level. Change this value to further customize its max HP.
	 */
	export type HPModifier2 = number;
	export type ResistanceProfile3 = string;
	export type UIIcon29 = string;
	/**
	 * An explanation of what this data field is intended to be used for.
	 */
	export type Description28 = string;
	/**
	 * A human-readable name for this timestamp.
	 */
	export type Name61 = string;
	export type BackSlope = string;
	export type VerticalFiller = string;
	export type BackEdge = string;
	export type FrontSlope = string;
	export type CenterPeak = string;
	export type FrontEdge = string;
	export type EnglishText117 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText96 = string;
	/**
	 * Any items with this tag will also be given the parent tag. E.g. 'Sword' tag would have a parent tag of 'Weapon,' because all swords are weapons.
	 */
	export type ParentTag = string;
	/**
	 * Items with this tag will appear in this editor category.
	 */
	export type EditorCategory1 = string;
	/**
	 * Whether items that have this tag are able to take damage.
	 */
	export type Invulnerable = boolean;
	/**
	 * If unchecked, this tag will not be present on items in the game world. Useful for tags that only exist to aggregate other tags for editor purposes.
	 */
	export type SettableOnItems = boolean;
	/**
	 * How many times this item should be crafted to gain the first crafting efficiency level.
	 */
	export type NumCraftsForFirstSkillLevel = number;
	/**
	 * The sound this item makes when being placed in the inventory.
	 */
	export type InventorySound3 = string;
	export type UIIcon30 = string;
	/**
	 * Recipes with this tag will go into this category.
	 */
	export type RecipeCategory1 = string;
	/**
	 * If true, items with this tag will be visible in the Build Mode selector and placeable in Build Mode.
	 */
	export type BuildModeAccessible = boolean;
	/**
	 * Whether items that have this tag will respawn after destroyed in the world.
	 */
	export type Respawnable1 = boolean;
	/**
	 * Items with this tag will multiply the baseline crafting effort by this amount when calculating their component requirements.
	 */
	export type CraftingEffortMultiplier = number;
	/**
	 * If an item has multiple tags, the highest priority tag will be displayed on interfaces. For example, you may want something with 'Plant' and 'Component' to just always display 'Component.' In this case, the 'Component' tag should have a higher priority.
	 */
	export type TagPriority = number;
	export type EnglishText118 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText97 = string;
	/**
	 * A unique character that lives in the game world.
	 */
	export type Character3 = Character4 & Character5;
	export type EnglishText119 = string;
	export type Emoji9 = string;
	export type GroupNameInternal = string;
	export type TopicNameInternal = string;
	export type Personality1 = string;
	export type Pronouns1 = string;
	/**
	 * A handful of words for a quick overview of the character
	 */
	export type Brief1 = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup30 = string;
	export type Species = string;
	export type EnglishText120 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText98 = string;
	export type Character5 = {
	  name_color?: NameColor4;
	  front_horn: FrontHorn;
	  back_horn: BackHorn;
	  scale: Scale2;
	  head_scale: HeadScale;
	  face: Face;
	  species?: "species_tendraam";
	};
	export type Blue52 = number;
	export type Red52 = number;
	export type Green52 = number;
	export type FrontHorn = "Slope Dope" | "Tall Bull" | "Leia Blossom" | "Freshly Shorn" | "Yak Flex";
	export type BackHorn = "Slope Dope" | "Tall Bull" | "Leia Blossom" | "Freshly Shorn" | "Yak Flex";
	export type Scale2 = number;
	export type HeadScale = number;
	export type Face = "Cute" | "Angsty" | "Strong" | "Leafy" | "Drab";
	/**
	 * The sound this item makes when consumed.
	 */
	export type ConsumeSound = string;
	export type Effect1 =
	  | {
	      unlocked_by?: UnlockedBy56;
	      type?: "Heal";
	      healing_percentage: Healing1;
	    }
	  | {
	      unlocked_by?: UnlockedBy58;
	      buff: BuffToApply1;
	      type?: "Buff";
	      healing_percentage?: Healing2;
	    };
	export type UnlockedBy57 = string;
	export type EnglishText121 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText99 = string;
	/**
	 * The healing amount will be automatically calculated based on the level of the item.
	 */
	export type Healing1 = number;
	export type UnlockedBy59 = string;
	export type EnglishText122 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText100 = string;
	export type BuffToApply1 = string;
	/**
	 * If the buff can heal, heal with this amount. The healing amount will be automatically calculated based on the level of the item.
	 */
	export type Healing2 = number;
	export type WorldSprite23 = string;
	/**
	 * The sound this item makes when being placed in the inventory.
	 */
	export type InventorySound4 = string;
	export type UIIcon31 = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup31 = string;
	export type OutputQuantity13 = number;
	export type ResearchNode28 = string;
	export type Style17 = "Additive" | "Multiplicative";
	export type ChangePerPoint37 = number;
	/**
	 * What workstation the player must be near to craft this recipe.
	 */
	export type Station15 = string;
	export type ResearchNode29 = string;
	export type ChangePerPoint38 = number;
	export type UnlockedBy60 = string;
	/**
	 * Change this number to increase or decrease the number of materials required to craft this item.
	 */
	export type EffortModifier19 = number;
	export type Type5 = string;
	export type EnglishText123 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText101 = string;
	/**
	 * A number that is connected to the relative power level of this thing.
	 */
	export type Level7 = number;
	export type EnglishText124 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText102 = string;
	export type Filter41 = string;
	export type Modifier5 = number;
	export type DamageType3 = string;
	export type DamageAmount1 = number;
	/**
	 * Name of this damage profile. For internal use.
	 */
	export type Name65 = string;
	
	export interface Schemas {
	  cl2_boss_gate: BossGate;
	  cl2_nest: PetNest;
	  cl2_wall: BuildingWall;
	  cl2_outpost: Scene;
	  cl2_progression_priors: ProgressionPriors;
	  earparty_sound: EarpartySound;
	  dock_tile: Dock;
	  cl2_damage_type: DamageType;
	  gms_object: Object;
	  cl2_trinket: Trinket;
	  cl2_moon: Moon;
	  cl2_buff_type: BuffType;
	  cl2_boss_phase: BossPhase1;
	  cl2_decor: Decor;
	  cl2_station: CraftingStation;
	  cl2_fishing: Fishing;
	  cl2_stats: Stat;
	  artisan: Buddy2;
	  cl2_ability_action_groups: ActionGroups;
	  impassable_tile: ImpassableTile;
	  cl2_chest: Chest;
	  cl2_quest_moment_requirement: MomentRequirements;
	  cl2_game_balance: GameBalance;
	  cl2_schematic: Schematic;
	  cl2_animstate: AnimationState;
	  cl2_wieldable: Wieldable;
	  earparty_group: EarpartyGroup1;
	  cl2_wip_item: UnimplementedItem;
	  gms_particle_asset: ParticleSystem4;
	  cl2_chat: Chat;
	  cl2_pet: Pet2;
	  cl2_npc_species: CharacterSpecies;
	  cl2_boss_dialogue: BossDialogueSequence2;
	  cl2_sub_damage_profile: DamageProfile;
	  cl2_reactions: Reactions;
	  gms_sprite: Sprite2;
	  research_node: Insight8;
	  schema2: Schema;
	  cl2_particle_type: Particle;
	  cl2_editor_category: EditorCategory;
	  cl2_datafield: Datafield4;
	  cl2_armor: Armor;
	  light_emitter: LightEmitter;
	  cl2_pet_egg: PetEgg;
	  cl2_resistance_profile: ResistanceProfile;
	  cl2_key_item: KeyItem;
	  cl2_item_component: Component;
	  cl2_equipment_set: EquipmentSet5;
	  cl2_storyline: Storyline;
	  cl2_env_item: EnvironmentalObject;
	  cl2_quest: Quest;
	  cl2_area: Area3;
	  cl2_shadow: Shadow;
	  cl2_buff: Buff4;
	  cl2_creature_family: CreatureFamily;
	  garden_bed: GardenBed;
	  recipe_category: RecipeCategory;
	  cl2_camera_anchor: CameraAnchor;
	  cl2_ability: Ability10;
	  cl2_creature: Creature;
	  cl2_artisan_glads: Comfort2;
	  terrain_tile: Terrain2;
	  cl2_quest_requirement: Requirements8;
	  cl2_item_quality: ItemQuality;
	  cl2_colorgrade_profile: ColorGrading;
	  cl2_immunities: Immunities;
	  cl2_emoji: Emoji8;
	  seed_pack: SeedPack;
	  cl2_telegraph: Telegraph;
	  cl2_mastery: PetMastery;
	  cl2_boss: Boss7;
	  cl2_music: Music1;
	  gc_wip: WIP;
	  cl2_player: Player;
	  cl2_door: BuildingDoor;
	  video: Video;
	  cl2_fence: Fence;
	  cl2_juicebox: Juicebox;
	  floor_tile: Floor2;
	  cl2_pillar: BuildingPillar;
	  cl2_quest_marker: QuestMarker2;
	  resource: Resource;
	  cl2_timestamp: Timestamp8;
	  cl2_roof: BuildingRoof;
	  cl2_item_tag: ItemTag;
	  cl2_npc: Character3;
	  cl2_consumable: Consumable;
	  cl2_hitbox: Hitbox;
	  cl2_damage_profile: DamageProfile1;
	}
	export interface BossGate {
	  door_open_sound?: DoorOpenSound;
	  sprite: WorldSprite;
	  door_close_sound?: DoorCloseSound;
	  uicon: UIIcon;
	  hitbox: Hitbox;
	  description?: Description;
	  wip?: WIP;
	  name: Name;
	}
	export interface Hitbox {
	  solid: Solid;
	  size: Size;
	  mask: Type;
	}
	export interface Size {
	  width: Width;
	  height: Height;
	}
	export interface Description {
	  text: EnglishText;
	  description?: TranslatorHelperText;
	}
	/**
	 * Here you can indicate aspects of this element that should be considered a 'work in progress.' This means that it has elements that are either unfinished or need to be reworked.
	 */
	export interface WIP {
	  balance: BalanceNeeded;
	  text: TextNeeded;
	  integration: IntegrationNeeded;
	  audio: AudioNeeded;
	  draft: MoteIsDraft;
	  visuals: VisualsNeeded;
	  mechanics: MechanicsNeeded;
	  comments?: Comments;
	}
	/**
	 * Leave comments to explain tasks or things that need to be done to no longer consider this element 'WIP'.
	 */
	export interface Comments {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Name {
	  text: EnglishText1;
	  description?: TranslatorHelperText1;
	}
	export interface PetNest {
	  using_lighting: UseLighting;
	  priors?: ProgressionPriors;
	  sprite: WorldSprite1;
	  light_emitter?: LightEmitter;
	  size: Size1;
	  uicon: UIIcon1;
	  editor_group?: EditorGroup;
	  recipe?: Recipe;
	  description?: Description1;
	  wip?: WIP;
	  name: Name1;
	}
	/**
	 * When viewing the progression tree, are there certain items you would consider to be prerequisites to this item?
	 */
	export interface ProgressionPriors {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface LightEmitter {
	  color: Color;
	  sine_waves?: SineWaves;
	  alpha: Brightness;
	  grid_range: TileRadius;
	  datafield_evaluation?: DatafieldEvaluation;
	}
	/**
	 * Because lighting colors add together when blended, bear in mind that using partial RGB values (e.g. 100 instead of 255) will end up stacking if these lights are placed in proximity to one another. So two orange lights will create yellow in the intermediate space between them.
	 */
	export interface Color {
	  b: Blue;
	  r: Red;
	  g: Green;
	}
	/**
	 * You can add sine waves to make the light emitter flicker or fade in and out.
	 */
	export interface SineWaves {
	  [k: string]: {
	    order: number;
	    element: SineWave;
	  };
	}
	/**
	 * This will produce a fluctuating number that will be added to its specified property.
	 */
	export interface SineWave {
	  speed: Speed;
	  affects: Affects;
	  amplitude: Amplitude;
	}
	/**
	 * Only display this light emitter if a data field on this object matches a criteria.
	 */
	export interface DatafieldEvaluation {
	  comparison: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value0: string;
	  value1: number;
	}
	export interface Size1 {
	  width: Width1;
	  height: Height1;
	}
	export interface Recipe {
	  components: Ingredients;
	  output_quantity?: OutputQuantity;
	  badge_output_modifiers?: OutputModifiedByResearch;
	  station: Station;
	  badge_cost_modifiers?: CostModifiedByResearch;
	  source?: UnlockedBy;
	  artisans?: ArtisansRequired;
	  effort_modifier?: EffortModifier;
	}
	export interface Ingredients {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface OutputModifiedByResearch {
	  [k: string]: {
	    order: number;
	    element: {
	      badge_id: ResearchNode;
	      style: Style;
	      value: ChangePerPoint;
	    };
	  };
	}
	export interface CostModifiedByResearch {
	  [k: string]: {
	    order: number;
	    element: {
	      badge_id: ResearchNode1;
	      value: ChangePerPoint1;
	    };
	  };
	}
	export interface ArtisansRequired {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Description1 {
	  text: EnglishText2;
	  description?: TranslatorHelperText2;
	}
	export interface Name1 {
	  text: EnglishText3;
	  description?: TranslatorHelperText3;
	}
	export interface BuildingWall {
	  roof_vote: PreferredRoof;
	  sprite: WorldSprite2;
	  uicon: UIIcon2;
	  editor_group?: EditorGroup1;
	  recipe?: Recipe1;
	  placement_sound: PlacementSound;
	  description: Description2;
	  wip?: WIP;
	  name: Name2;
	}
	export interface Recipe1 {
	  components: Ingredients1;
	  output_quantity?: OutputQuantity1;
	  badge_output_modifiers?: OutputModifiedByResearch1;
	  station: Station1;
	  badge_cost_modifiers?: CostModifiedByResearch1;
	  source?: UnlockedBy1;
	  artisans?: ArtisansRequired1;
	  effort_modifier?: EffortModifier1;
	}
	export interface Ingredients1 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface OutputModifiedByResearch1 {
	  [k: string]: {
	    order: number;
	    element: {
	      badge_id: ResearchNode2;
	      style: Style1;
	      value: ChangePerPoint2;
	    };
	  };
	}
	export interface CostModifiedByResearch1 {
	  [k: string]: {
	    order: number;
	    element: {
	      badge_id: ResearchNode3;
	      value: ChangePerPoint3;
	    };
	  };
	}
	export interface ArtisansRequired1 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Description2 {
	  text: EnglishText4;
	  description?: TranslatorHelperText4;
	}
	export interface Name2 {
	  text: EnglishText5;
	  description?: TranslatorHelperText5;
	}
	/**
	 * A place in the world that gets layered on top of the world map.
	 */
	export interface Scene {
	  color?: Color1;
	  phases: Phases;
	  editor_group?: EditorGroup2;
	  description?: DescriptionInternal;
	  wip?: WIP;
	  name: SceneName;
	}
	/**
	 * What color the scene will show as in the editor map.
	 */
	export interface Color1 {
	  b: Blue1;
	  r: Red1;
	  g: Green1;
	}
	/**
	 * The phases will be prioritized in the order they appear in this list. Phases farther down the list have a higher priority.
	 */
	export interface Phases {
	  [k: string]: {
	    order: number;
	    element: Phase;
	  };
	}
	export interface Phase {
	  phase_id: UniqueID;
	  unlocked_by?: UnlockedBy2;
	  transition?: TransitionVisuals;
	  name?: PhaseNameInternal;
	}
	export interface FullscreenColor {
	  b?: Blue2;
	  r?: Red2;
	  g?: Green2;
	}
	/**
	 * If set, this text will be displayed during the 'Hold' portion of the transition.
	 */
	export interface TextOverlay {
	  text: EnglishText6;
	}
	export interface Effects {
	  [k: string]: {
	    order?: number;
	    element?: TransitionEffect;
	  };
	}
	export interface TransitionEffect {
	  effect: VisualEffect;
	  play_on_tiles: PlayOnTiles;
	  chance?: Chance;
	  play_on_entities: PlayOnEntities;
	  targets?: Targets;
	}
	export interface DecalDurationSeconds {
	  value0?: Min;
	  value1?: Max;
	}
	/**
	 * The decal will choose a random scale between these numbers.
	 */
	export interface DecalScale {
	  value0?: Min1;
	  value1?: Max1;
	}
	/**
	 * Set this to spawn the explosion a random delay.
	 */
	export interface RandomDelaySeconds {
	  value0?: Min2;
	  value1?: Max2;
	}
	/**
	 * Set this to spawn the explosion a random distance away.
	 */
	export interface RandomDistanceGridSpaces {
	  value0?: Min3;
	  value1?: Max3;
	}
	export interface ExplosionScale {
	  value0?: Min4;
	  value1?: Max4;
	}
	export interface HighlightColor {
	  b?: Blue3;
	  r?: Red3;
	  g?: Green3;
	}
	export interface BaseColor {
	  b?: Blue4;
	  r?: Red4;
	  g?: Green4;
	}
	/**
	 * The entities to which the effect will be applied.
	 */
	export interface Targets {
	  [k: string]: {
	    order?: number;
	    element?: Filter;
	  };
	}
	export interface Filter {
	  buffs?: Buffs;
	  exclude?: Exclude;
	  require_all_tags?: RequireAllTags;
	  combatants_only?: Combatants;
	  datafield_evaluations?: DatafieldEvaluations;
	  items?: Items;
	}
	export interface Buffs {
	  buffs: Buffs1;
	  require_all: RequireAll;
	  stacks?: Stacks;
	}
	export interface Buffs1 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface SceneName {
	  text: EnglishText7;
	}
	/**
	 * A sound asset controlled by the Earparty audio engine. Earparty Sounds can contain multiple audio files, which are played as variations of the Earparty Sound.
	 */
	export interface EarpartySound {
	  falloff?: Falloff;
	  group: EarpartyGroup;
	  variability?: Variability;
	  seconds_cooldown?: CooldownSeconds;
	  probability?: PlayChance;
	  priority: Priority;
	  auto_pitch?: AutoPitch;
	  looping?: Looping;
	  wip?: WIP;
	  non_repeating_number?: NonRepeatingInterval;
	  name: NameFromGMSProject;
	  gain: Gain;
	}
	/**
	 * If the sound is played positionally, the range for it to longer be audible.
	 */
	export interface Falloff {
	  value0: Min5;
	  value1: Max5;
	}
	export interface Dock {
	  undersprite?: UnderSprite;
	  sprite: MainSprite;
	  map_color: MapColor;
	  shore_interaction?: WaterInteraction;
	  uicon: Icon;
	  editor_group?: EditorGroup3;
	  placement_sound?: PlacementSound1;
	  recipe?: Recipe2;
	  footstep_sound: FootstepSound;
	  description?: Description3;
	  flippable: Flippable;
	  wip?: WIP;
	  name: Name3;
	  dapples?: SunlightDappling;
	}
	/**
	 * The color to draw this tile on the map.
	 */
	export interface MapColor {
	  b: Blue5;
	  r: Red5;
	  g: Green5;
	}
	/**
	 * If set, this tile will be allowed to touch water.
	 */
	export interface WaterInteraction {
	  shelf_sprite?: ShelfUnderwaterSprite;
	  shore_sprite: ShorelineUnderwaterSprite;
	}
	export interface Recipe2 {
	  components: Ingredients2;
	  output_quantity?: OutputQuantity2;
	  badge_output_modifiers?: OutputModifiedByResearch2;
	  station: Station2;
	  badge_cost_modifiers?: CostModifiedByResearch2;
	  source?: UnlockedBy3;
	  artisans?: ArtisansRequired2;
	  effort_modifier?: EffortModifier2;
	}
	export interface Ingredients2 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface OutputModifiedByResearch2 {
	  [k: string]: {
	    order: number;
	    element: {
	      badge_id: ResearchNode4;
	      style: Style2;
	      value: ChangePerPoint4;
	    };
	  };
	}
	export interface CostModifiedByResearch2 {
	  [k: string]: {
	    order: number;
	    element: {
	      badge_id: ResearchNode5;
	      value: ChangePerPoint5;
	    };
	  };
	}
	export interface ArtisansRequired2 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Description3 {
	  text: EnglishText8;
	  description?: TranslatorHelperText6;
	}
	export interface Name3 {
	  text: EnglishText9;
	  description?: TranslatorHelperText7;
	}
	export interface SunlightDappling {
	  dapple_chance: SpawnChance;
	  dapple_colors: Colors;
	}
	/**
	 * The color to use for the sunlight dapples.
	 */
	export interface Colors {
	  [k: string]: {
	    order: number;
	    element: {
	      b: Blue6;
	      r: Red6;
	      g: Green6;
	    };
	  };
	}
	export interface DamageType {
	  color?: Color2;
	  aggregator: Aggregator;
	  resistance_stat?: ResistanceStat;
	  parent?: ParentDamageType;
	  boosts?: Boosts;
	  wip?: WIP;
	  name: Name4;
	}
	/**
	 * When you deal this kind of damage, what color its damage popout numbers are.
	 */
	export interface Color2 {
	  b: Blue7;
	  r: Red7;
	  g: Green7;
	}
	/**
	 * Stats that can boost this damage.
	 */
	export interface Boosts {
	  [k: string]: {
	    order: number;
	    element: {
	      direct_only?: DirectDamage;
	      modifier_style: BoostStyle;
	      stat: BoostingStat;
	    };
	  };
	}
	export interface Name4 {
	  text: EnglishText10;
	  description?: TranslatorHelperText8;
	}
	/**
	 * An object asset found in the Game Maker project.
	 */
	export interface Object {
	  wip?: WIP;
	  name: Name5;
	}
	/**
	 * A unique equippable item that conveys a passive benefit.
	 */
	export interface Trinket {
	  equipment_set?: EquipmentSet;
	  reactions?: Reactions;
	  priors?: ProgressionPriors;
	  equipment_default_stats?: DefaultStats;
	  inventory_sound: InventorySound;
	  uicon: UIIcon3;
	  level_viewer_ignore?: IgnoreInLevelViewer;
	  editor_group?: EditorGroup4;
	  recipe?: Recipe3;
	  description: Description4;
	  wip?: WIP;
	  level: Level;
	  name: Name6;
	}
	export interface Reactions {
	  [k: string]: {
	    order: number;
	    element: Reaction;
	  };
	}
	export interface Reaction {
	  actions: Actions;
	  conditions?: Conditions;
	  require_all_conditions: RequireAllConditions;
	  triggers: Triggers;
	  description?: TooltipDescription;
	  name: NameInternal;
	}
	export interface Actions {
	  [k: string]: {
	    order: number;
	    element: Action;
	  };
	}
	/**
	 * The new entity will spawn a random range away from the chosen location, up to this number of grid spaces.
	 */
	export interface SpawnDistance {
	  value0?: Min6;
	  value1?: Max6;
	}
	/**
	 * How much this damage is boosted or suppressed by points spent in Insights.
	 */
	export interface InsightDamageModifiers {
	  [k: string]: {
	    order?: number;
	    element?: {
	      badge_id: Insight;
	      value: ChangePerPoint6;
	      tooltip_text?: InsightTooltipText;
	    };
	  };
	}
	/**
	 * Explain how the insight changes the damage of this ability. This text will appear on the Insight's tooltip page.
	 */
	export interface InsightTooltipText {
	  text: EnglishText11;
	  description?: TranslatorHelperText9;
	}
	export interface DamageProfile {
	  buff_damage_source?: BuffDamageSource;
	  modifiers?: Modifiers;
	  can_crit?: CanCrit;
	  damage_types: DamageTypes;
	}
	/**
	 * If set, you can pull damage from the damage pool of a buff, and use that amount to calculate this ability's damage outcome.
	 */
	export interface BuffDamageSource {
	  buff_target: BuffTarget;
	  buff_id: Buff1;
	  own_only: OwnOnly;
	  consume: ConsumeDamage;
	  amount: Amount;
	}
	/**
	 * Whether to deal extra or reduced damage to certain things, or certain kinds of things.
	 */
	export interface Modifiers {
	  [k: string]: {
	    order: number;
	    element: {
	      key: Filter1;
	      value: Modifier;
	    };
	  };
	}
	/**
	 * What kind of damage to deal, and what percent of the 'normal' amount to deal. The actual damage dealt will be calculated based on factors such as the level of the user (or item used), cast times, and stats of the attacker.
	 */
	export interface DamageTypes {
	  [k: string]: {
	    order: number;
	    element: {
	      key: DamageType1;
	      value: DamageAmount;
	    };
	  };
	}
	/**
	 * Deal more or less damage, depending on data fields.
	 */
	export interface DatafieldMultipliers {
	  [k: string]: {
	    order?: number;
	    element?: {
	      datafield_id?: DataField;
	      datafield_owner?: DatafieldOwner;
	    };
	  };
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface TargetFilters {
	  [k: string]: {
	    order?: number;
	    element?: Filter2;
	  };
	}
	export interface Filter2 {
	  buffs?: Buffs2;
	  exclude?: Exclude1;
	  require_all_tags?: RequireAllTags1;
	  combatants_only?: Combatants1;
	  datafield_evaluations?: DatafieldEvaluations1;
	  items?: Items1;
	}
	export interface Buffs2 {
	  buffs: Buffs3;
	  require_all: RequireAll1;
	  stacks?: Stacks2;
	}
	export interface Buffs3 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks2 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity1;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations1 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items1 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface LootItems {
	  [k: string]: {
	    order?: number;
	    element?: {
	      probability?: Chance1;
	      quantity?: Quantity2;
	      item?: Item;
	    };
	  };
	}
	export interface Quantity2 {
	  value0?: Min7;
	  value1?: Max7;
	}
	export interface Color3 {
	  b?: Blue8;
	  r?: Red8;
	  g?: Green8;
	}
	export interface DecalDurationSeconds1 {
	  value0?: Min8;
	  value1?: Max8;
	}
	/**
	 * The decal will choose a random scale between these numbers.
	 */
	export interface DecalScale1 {
	  value0?: Min9;
	  value1?: Max9;
	}
	/**
	 * Set this to spawn the explosion a random delay.
	 */
	export interface RandomDelaySeconds1 {
	  value0?: Min10;
	  value1?: Max10;
	}
	/**
	 * Set this to spawn the explosion a random distance away.
	 */
	export interface RandomDistanceGridSpaces1 {
	  value0?: Min11;
	  value1?: Max11;
	}
	export interface ExplosionScale1 {
	  value0?: Min12;
	  value1?: Max12;
	}
	export interface HighlightColor1 {
	  b?: Blue9;
	  r?: Red9;
	  g?: Green9;
	}
	export interface BaseColor1 {
	  b?: Blue10;
	  r?: Red10;
	  g?: Green10;
	}
	export interface Particle {
	  life?: LifeSeconds;
	  speed?: Speed1;
	  shape?: Shape;
	  p_gravity?: Gravity;
	  p_direction?: Direction;
	  colors?: Colors1;
	  sprite?: Sprite;
	  p_direction_increase?: DirectionChangeDegreesSec;
	  x_scale?: XScale;
	  acceleration?: Acceleration;
	  shrinking?: Shrinking;
	  alpha?: Alpha;
	  size?: Size2;
	  orientation_wiggle?: OrientationWiggle;
	  orientation?: Orientation;
	  orientation_relative?: OrientationRelative;
	  orientation_increase?: OrientationChangeSec;
	  parent?: Parent;
	  size_wiggle?: SizeWiggle;
	  y_scale?: YScale;
	  lighting_style?: Lighting;
	  wip?: WIP;
	  name?: ParticleNameInternal;
	  size_increase?: SizeChangePerSecond;
	}
	export interface LifeSeconds {
	  value0: Min13;
	  value1: Max13;
	}
	/**
	 * How fast (in pixels per second) the particles should blast out.
	 */
	export interface Speed1 {
	  value0: Min14;
	  value1: Max14;
	}
	/**
	 * The direction the particles should go at their defined speed.
	 */
	export interface Direction {
	  value0: Min15;
	  value1: Max15;
	}
	/**
	 * How the particles should cycle through colors over their lifetime.
	 */
	export interface Colors1 {
	  [k: string]: {
	    order: number;
	    element: Color4;
	  };
	}
	export interface Color4 {
	  b: Blue11;
	  r: Red11;
	  g: Green11;
	}
	/**
	 * The particles can change direction as they fly.
	 */
	export interface DirectionChangeDegreesSec {
	  value0: Min16;
	  value1: Max16;
	}
	/**
	 * How the particles should change their alpha values over their lifetime.
	 */
	export interface Alpha {
	  [k: string]: {
	    order: number;
	    element: AlphaValue;
	  };
	}
	export interface Size2 {
	  value0: Min17;
	  value1: Max17;
	}
	/**
	 * The rotations of the individual particles (in degrees)
	 */
	export interface Orientation {
	  value0: Min18;
	  value1: Max18;
	}
	export interface Bursts {
	  [k: string]: {
	    order?: number;
	    element?: Burst;
	  };
	}
	export interface Burst {
	  spawn_radius: SpawnRadiusPixels;
	  outward_blast: BlastOutward;
	  location: Source1;
	  direction?: BurstDirection;
	  num_particles: NumberOfParticles;
	  perspective: Perspective;
	  radius_as_grid?: SpawnRadiusAsGrid;
	  scaled_radius?: ScaledSpawnRadius;
	  spawn_at_ground?: SpawnOnGround;
	  z_offset?: ZOffset3;
	}
	/**
	 * How far from the source the particles will spawn.
	 */
	export interface SpawnRadiusPixels {
	  value0?: Min19;
	  value1?: Max19;
	}
	export interface BurstDirection {
	  value0?: Min20;
	  value1?: Max20;
	}
	export interface NumberOfParticles {
	  value0?: Min21;
	  value1?: Max21;
	}
	export interface Conditions {
	  [k: string]: {
	    order: number;
	    element: Condition;
	  };
	}
	/**
	 * Which abilities are we evaluating?
	 */
	export interface Abilities {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface Evaluation {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value0?: string;
	  value1?: number;
	}
	/**
	 * The 'minutes since timestamp' value can be modified up or down based on an Insight.
	 */
	export interface InsightModifier {
	  insight?: Insight1;
	  amount?: ChangePerPoint7;
	}
	/**
	 * If set, this description will appear on the Research Node to explain what it is unlocking.
	 */
	export interface InsightTooltip {
	  text: EnglishText12;
	  description?: TranslatorHelperText10;
	}
	export interface DistanceRequiredGridSpaces {
	  value0?: Min22;
	  value1?: Max22;
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface Targets1 {
	  [k: string]: {
	    order?: number;
	    element?: Filter3;
	  };
	}
	export interface Filter3 {
	  buffs?: Buffs4;
	  exclude?: Exclude2;
	  require_all_tags?: RequireAllTags2;
	  combatants_only?: Combatants2;
	  datafield_evaluations?: DatafieldEvaluations2;
	  items?: Items2;
	}
	export interface Buffs4 {
	  buffs: Buffs5;
	  require_all: RequireAll2;
	  stacks?: Stacks4;
	}
	export interface Buffs5 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks4 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity3;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations2 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items2 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface NumberOfTargets {
	  comparison?: Evaluation1;
	  quantity?: Quantity4;
	}
	export interface HealthEvaluation {
	  hp_percentage?: number;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Items3 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The condition will be met if the player is wielding any of these items.
	 */
	export interface Items4 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, then targets other than yourself will be evaluated.
	 */
	export interface NumberOfTargets1 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity5;
	}
	export interface Buffs6 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface BuffTargetFilter {
	  [k: string]: {
	    order?: number;
	    element?: Filter4;
	  };
	}
	export interface Filter4 {
	  buffs?: Buffs7;
	  exclude?: Exclude3;
	  require_all_tags?: RequireAllTags3;
	  combatants_only?: Combatants3;
	  datafield_evaluations?: DatafieldEvaluations3;
	  items?: Items5;
	}
	export interface Buffs7 {
	  buffs: Buffs8;
	  require_all: RequireAll5;
	  stacks?: Stacks5;
	}
	export interface Buffs8 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks5 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity6;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations3 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items5 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface Stacks6 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity7;
	}
	/**
	 * How close or far (in grid spaces) the entities must be to be considered for this condition.
	 */
	export interface BuffTargetRange {
	  value0?: Min23;
	  value1?: Max23;
	}
	export interface NumberSummoned {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity8;
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface SummonedEntitiesFilter {
	  [k: string]: {
	    order?: number;
	    element?: Filter5;
	  };
	}
	export interface Filter5 {
	  buffs?: Buffs9;
	  exclude?: Exclude4;
	  require_all_tags?: RequireAllTags4;
	  combatants_only?: Combatants4;
	  datafield_evaluations?: DatafieldEvaluations4;
	  items?: Items6;
	}
	export interface Buffs9 {
	  buffs: Buffs10;
	  require_all: RequireAll6;
	  stacks?: Stacks7;
	}
	export interface Buffs10 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks7 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity9;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations4 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items6 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface Triggers {
	  [k: string]: {
	    order: number;
	    element: Trigger;
	  };
	}
	/**
	 * If set, this trigger will only occur if the attacker is within this many grid spaces.
	 */
	export interface AttackerDistance {
	  value0?: Min24;
	  value1?: Max24;
	}
	/**
	 * My attacker must match one of these filters.
	 */
	export interface TargetFilter {
	  [k: string]: {
	    order?: number;
	    element?: Filter6;
	  };
	}
	export interface Filter6 {
	  buffs?: Buffs11;
	  exclude?: Exclude5;
	  require_all_tags?: RequireAllTags5;
	  combatants_only?: Combatants5;
	  datafield_evaluations?: DatafieldEvaluations5;
	  items?: Items7;
	}
	export interface Buffs11 {
	  buffs: Buffs12;
	  require_all: RequireAll7;
	  stacks?: Stacks8;
	}
	export interface Buffs12 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks8 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity10;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations5 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items7 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, this trigger will only occur if one of these items were used to deal damage to me.
	 */
	export interface ItemsUsed {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, this trigger will only occur if one of these abilities were used to deal damage to me.
	 */
	export interface AbilitiesUsed {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, this trigger will only occur if one of these damage types is used to harm me.
	 */
	export interface DamageTypes1 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The thing I killed must match one of these filters.
	 */
	export interface TargetFilter1 {
	  [k: string]: {
	    order?: number;
	    element?: Filter7;
	  };
	}
	export interface Filter7 {
	  buffs?: Buffs13;
	  exclude?: Exclude6;
	  require_all_tags?: RequireAllTags6;
	  combatants_only?: Combatants6;
	  datafield_evaluations?: DatafieldEvaluations6;
	  items?: Items8;
	}
	export interface Buffs13 {
	  buffs: Buffs14;
	  require_all: RequireAll8;
	  stacks?: Stacks9;
	}
	export interface Buffs14 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks9 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity11;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations6 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items8 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * How many seconds will pass between this trigger occurring.
	 */
	export interface Seconds {
	  value0?: Min25;
	  value1?: Max25;
	}
	/**
	 * The thing that killed me must match one of these filters.
	 */
	export interface MyKillerTargetFilter {
	  [k: string]: {
	    order?: number;
	    element?: Filter8;
	  };
	}
	export interface Filter8 {
	  buffs?: Buffs15;
	  exclude?: Exclude7;
	  require_all_tags?: RequireAllTags7;
	  combatants_only?: Combatants7;
	  datafield_evaluations?: DatafieldEvaluations7;
	  items?: Items9;
	}
	export interface Buffs15 {
	  buffs: Buffs16;
	  require_all: RequireAll9;
	  stacks?: Stacks10;
	}
	export interface Buffs16 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks10 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity12;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations7 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items9 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, this trigger will only occur if the target is within this many grid spaces.
	 */
	export interface TargetDistance {
	  value0?: Min26;
	  value1?: Max26;
	}
	/**
	 * My attacker must match one of these filters.
	 */
	export interface TargetFilter2 {
	  [k: string]: {
	    order?: number;
	    element?: Filter9;
	  };
	}
	export interface Filter9 {
	  buffs?: Buffs17;
	  exclude?: Exclude8;
	  require_all_tags?: RequireAllTags8;
	  combatants_only?: Combatants8;
	  datafield_evaluations?: DatafieldEvaluations8;
	  items?: Items10;
	}
	export interface Buffs17 {
	  buffs: Buffs18;
	  require_all: RequireAll10;
	  stacks?: Stacks11;
	}
	export interface Buffs18 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks11 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity13;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations8 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items10 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, this trigger will only occur if one of these items were used to deal damage.
	 */
	export interface ItemsUsed1 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, this trigger will only occur if one of these abilities were used to deal damage.
	 */
	export interface AbilitiesUsed1 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, this trigger will only occur if one of these damage types is used.
	 */
	export interface DamageTypes2 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * This trigger will only be met if the ability has a target that matches this filter.
	 */
	export interface TargetFilter3 {
	  [k: string]: {
	    order?: number;
	    element?: Filter10;
	  };
	}
	export interface Filter10 {
	  buffs?: Buffs19;
	  exclude?: Exclude9;
	  require_all_tags?: RequireAllTags9;
	  combatants_only?: Combatants9;
	  datafield_evaluations?: DatafieldEvaluations9;
	  items?: Items11;
	}
	export interface Buffs19 {
	  buffs: Buffs20;
	  require_all: RequireAll11;
	  stacks?: Stacks12;
	}
	export interface Buffs20 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks12 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity14;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations9 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items11 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, this trigger will only occur if one of these items were used to cast an ability.
	 */
	export interface ItemsUsed2 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * This trigger will only occur when one of these abilities are cast.
	 */
	export interface Abilities1 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If applying a buff to another target, the target must match this filter. If receiving a buff from a target, that target must match this filter.
	 */
	export interface TargetFilter4 {
	  [k: string]: {
	    order?: number;
	    element?: Filter11;
	  };
	}
	export interface Filter11 {
	  buffs?: Buffs21;
	  exclude?: Exclude10;
	  require_all_tags?: RequireAllTags10;
	  combatants_only?: Combatants10;
	  datafield_evaluations?: DatafieldEvaluations10;
	  items?: Items12;
	}
	export interface Buffs21 {
	  buffs: Buffs22;
	  require_all: RequireAll12;
	  stacks?: Stacks13;
	}
	export interface Buffs22 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks13 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity15;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations10 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items12 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * This trigger will only occur if one of these buffs get applied to the target.
	 */
	export interface Buffs23 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The target of the buff must match this filter. If receiving a buff from a target, that target must match this filter.
	 */
	export interface TargetFilter5 {
	  [k: string]: {
	    order?: number;
	    element?: Filter12;
	  };
	}
	export interface Filter12 {
	  buffs?: Buffs24;
	  exclude?: Exclude11;
	  require_all_tags?: RequireAllTags11;
	  combatants_only?: Combatants11;
	  datafield_evaluations?: DatafieldEvaluations11;
	  items?: Items13;
	}
	export interface Buffs24 {
	  buffs: Buffs25;
	  require_all: RequireAll13;
	  stacks?: Stacks14;
	}
	export interface Buffs25 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks14 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity16;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations11 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items13 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface Buffs26 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface Buffs27 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Describe this reaction, so it can be displayed in a tooltip. If a description is given, then the tooltip will also pull up any available information about this reaction's ability casts, buffs, damage, etc...
	 */
	export interface TooltipDescription {
	  text: EnglishText13;
	}
	/**
	 * You can allocate stats for this item to have on it by default when obtained. This will not affect already-obtained items.
	 */
	export interface DefaultStats {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Recipe3 {
	  components: Ingredients3;
	  station: Station3;
	  badge_cost_modifiers?: CostModifiedByResearch3;
	  source?: UnlockedBy4;
	  artisans?: ArtisansRequired3;
	  effort_modifier?: EffortModifier3;
	}
	export interface Ingredients3 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface CostModifiedByResearch3 {
	  [k: string]: {
	    order: number;
	    element: {
	      badge_id: ResearchNode6;
	      value: ChangePerPoint8;
	    };
	  };
	}
	export interface ArtisansRequired3 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Description4 {
	  text: EnglishText14;
	  description?: TranslatorHelperText11;
	}
	export interface Name6 {
	  text: EnglishText15;
	  description?: TranslatorHelperText12;
	}
	export interface Moon {
	  days_per_cycle: DaysPerCycle;
	  low_quality_night_color: NightColorLowQuality;
	  wip?: WIP;
	  high_quality_night_color: NightColorHighQuality;
	  name: Name7;
	}
	/**
	 * What colors to use for night when Low Quality lighting is enabled.
	 */
	export interface NightColorLowQuality {
	  b: Blue12;
	  r: Red12;
	  g: Green12;
	}
	/**
	 * What colors to use for night when High Quality lighting is enabled.
	 */
	export interface NightColorHighQuality {
	  b: Blue13;
	  r: Red13;
	  g: Green13;
	}
	export interface Name7 {
	  text: EnglishText16;
	}
	export interface BuffType {
	  exclusive?: Exclusive;
	  wip?: WIP;
	  name: Name8;
	}
	export interface Name8 {
	  text: EnglishText17;
	}
	export interface BossPhase1 {
	  movement?: MotionOverride;
	  reactions?: Reactions;
	  ending_sequence?: BossDialogueSequence;
	  opening_sequence?: BossDialogueSequence1;
	  abilities?: Abilities2;
	  order: Order;
	  zoom_level?: ZoomLevel;
	  music?: Music;
	  boss: Boss3;
	  description?: DescriptionInternal1;
	  wip?: WIP;
	  name: NameInternal1;
	}
	export interface MotionOverride {
	  stationary?: StationaryVisuals;
	  moving?: MovementVisuals;
	  movespeed?: MovementSpeed;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave {
	  [k: string]: {
	    order?: number;
	    element?: SineWave1;
	  };
	}
	export interface SineWave1 {
	  speed?: Speed2;
	  amplitude?: Amplitude1;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent;
	  };
	}
	export interface FlapEvent {
	  distance?: VerticalDistance;
	  recovery_seconds?: RecoveryDurationSeconds;
	  impulse_seconds?: ImpulseDurationSeconds;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave1 {
	  [k: string]: {
	    order?: number;
	    element?: SineWave2;
	  };
	}
	export interface SineWave2 {
	  speed?: Speed3;
	  amplitude?: Amplitude2;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements1 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent1;
	  };
	}
	export interface FlapEvent1 {
	  distance?: VerticalDistance1;
	  recovery_seconds?: RecoveryDurationSeconds1;
	  impulse_seconds?: ImpulseDurationSeconds1;
	}
	export interface BossDialogueSequence {
	  animation?: BossSpineAnimation;
	  moments: DialogueMoments;
	}
	export interface DialogueMoments {
	  [k: string]: {
	    order: number;
	    element: BossDialogueMoment;
	  };
	}
	/**
	 * Conditions that must be true for the quest to proceed.
	 */
	export interface MomentRequirements {
	  [k: string]: {
	    order: number;
	    element: Requirement;
	  };
	}
	/**
	 * The player must have at least these quantities of these items.
	 */
	export interface Items14 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      key?: string;
	      value?: Quantity17;
	    };
	  };
	}
	export interface InventoryEvaluation {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: Item2;
	      value1?: Quantity18;
	    };
	  };
	}
	/**
	 * Conditions that must be true for the quest to proceed.
	 */
	export interface MomentRequirements1 {
	  [k: string]: {
	    order: number;
	    element: Requirement;
	  };
	}
	export interface PetStage {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  stage?: "Egg" | "Baby" | "Adult" | "Embiggened";
	}
	export interface Entities {
	  [k: string]: {
	    order?: number;
	    element?: EntityType;
	  };
	}
	/**
	 * Characters or actors can convey emojis.
	 */
	export interface Emotes {
	  [k: string]: {
	    order?: number;
	    element?: {
	      key?: Character;
	      value?: Emoji1;
	    };
	  };
	}
	export interface BossDialogueSequence1 {
	  animation?: BossSpineAnimation;
	  moments: DialogueMoments;
	}
	/**
	 * What abilities the boss will use during this phase.
	 */
	export interface Abilities2 {
	  [k: string]: {
	    order: number;
	    element: BossAbilityAI;
	  };
	}
	export interface BossAbilityAI {
	  movement?: MotionOverride1;
	  followup_abilities?: FollowupAbilities;
	  post_ability_pause_ignore_chance?: PostAbilityPauseIgnoreChance;
	  ability_id: Ability5;
	  destination?: Destination1;
	  conditions?: AbilityUsageConditions;
	  weight: Weight1;
	  targeting?: Targeting;
	  direction_randomness?: DirectionRandomness;
	  post_ability_pause?: PostAbilityPause;
	}
	export interface MotionOverride1 {
	  stationary?: StationaryVisuals1;
	  moving?: MovementVisuals1;
	  movespeed?: MovementSpeed1;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave2 {
	  [k: string]: {
	    order?: number;
	    element?: SineWave3;
	  };
	}
	export interface SineWave3 {
	  speed?: Speed4;
	  amplitude?: Amplitude3;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements2 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent2;
	  };
	}
	export interface FlapEvent2 {
	  distance?: VerticalDistance2;
	  recovery_seconds?: RecoveryDurationSeconds2;
	  impulse_seconds?: ImpulseDurationSeconds2;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave3 {
	  [k: string]: {
	    order?: number;
	    element?: SineWave4;
	  };
	}
	export interface SineWave4 {
	  speed?: Speed5;
	  amplitude?: Amplitude4;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements3 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent3;
	  };
	}
	export interface FlapEvent3 {
	  distance?: VerticalDistance3;
	  recovery_seconds?: RecoveryDurationSeconds3;
	  impulse_seconds?: ImpulseDurationSeconds3;
	}
	/**
	 * If set, these abilities will be cast after the current one. These abilities must already be listed in this phase's abilities, or they will be ignored.
	 */
	export interface FollowupAbilities {
	  [k: string]: {
	    order: number;
	    element: FollowupAbility;
	  };
	}
	export interface FollowupAbility {
	  instant: Instant;
	  weight: Weight;
	  ability: Ability4;
	}
	/**
	 * If set, the boss will move to this destination before casting the ability.
	 */
	export interface Destination1 {
	  range?: Range;
	  targets: PotentialTargets;
	  choose_random?: ChooseRandom;
	}
	/**
	 * The boss will only choose quest markers that are within this range.
	 */
	export interface Range {
	  value0: Min27;
	  value1: Max27;
	}
	/**
	 * The boss will choose the nearest of the quest markers listed here.
	 */
	export interface PotentialTargets {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	/**
	 * If set, the boss will only use this ability if its conditions are met.
	 */
	export interface AbilityUsageConditions {
	  conditions: Conditions1;
	  require_all_conditions: RequireAllConditions1;
	}
	export interface Conditions1 {
	  [k: string]: {
	    order: number;
	    element: Condition1;
	  };
	}
	/**
	 * Which abilities are we evaluating?
	 */
	export interface Abilities3 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface Evaluation2 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value0?: string;
	  value1?: number;
	}
	/**
	 * The 'minutes since timestamp' value can be modified up or down based on an Insight.
	 */
	export interface InsightModifier1 {
	  insight?: Insight4;
	  amount?: ChangePerPoint9;
	}
	/**
	 * If set, this description will appear on the Research Node to explain what it is unlocking.
	 */
	export interface InsightTooltip1 {
	  text: EnglishText19;
	  description?: TranslatorHelperText13;
	}
	export interface DistanceRequiredGridSpaces1 {
	  value0?: Min28;
	  value1?: Max28;
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface Targets2 {
	  [k: string]: {
	    order?: number;
	    element?: Filter13;
	  };
	}
	export interface Filter13 {
	  buffs?: Buffs28;
	  exclude?: Exclude12;
	  require_all_tags?: RequireAllTags12;
	  combatants_only?: Combatants12;
	  datafield_evaluations?: DatafieldEvaluations12;
	  items?: Items15;
	}
	export interface Buffs28 {
	  buffs: Buffs29;
	  require_all: RequireAll15;
	  stacks?: Stacks15;
	}
	export interface Buffs29 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks15 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity19;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations12 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items15 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface NumberOfTargets2 {
	  comparison?: Evaluation3;
	  quantity?: Quantity20;
	}
	export interface HealthEvaluation1 {
	  hp_percentage?: number;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Items16 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The condition will be met if the player is wielding any of these items.
	 */
	export interface Items17 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, then targets other than yourself will be evaluated.
	 */
	export interface NumberOfTargets3 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity21;
	}
	export interface Buffs30 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface BuffTargetFilter1 {
	  [k: string]: {
	    order?: number;
	    element?: Filter14;
	  };
	}
	export interface Filter14 {
	  buffs?: Buffs31;
	  exclude?: Exclude13;
	  require_all_tags?: RequireAllTags13;
	  combatants_only?: Combatants13;
	  datafield_evaluations?: DatafieldEvaluations13;
	  items?: Items18;
	}
	export interface Buffs31 {
	  buffs: Buffs32;
	  require_all: RequireAll18;
	  stacks?: Stacks16;
	}
	export interface Buffs32 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks16 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity22;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations13 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items18 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface Stacks17 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity23;
	}
	/**
	 * How close or far (in grid spaces) the entities must be to be considered for this condition.
	 */
	export interface BuffTargetRange1 {
	  value0?: Min29;
	  value1?: Max29;
	}
	export interface NumberSummoned1 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity24;
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface SummonedEntitiesFilter1 {
	  [k: string]: {
	    order?: number;
	    element?: Filter15;
	  };
	}
	export interface Filter15 {
	  buffs?: Buffs33;
	  exclude?: Exclude14;
	  require_all_tags?: RequireAllTags14;
	  combatants_only?: Combatants14;
	  datafield_evaluations?: DatafieldEvaluations14;
	  items?: Items19;
	}
	export interface Buffs33 {
	  buffs: Buffs34;
	  require_all: RequireAll19;
	  stacks?: Stacks18;
	}
	export interface Buffs34 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks18 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity25;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations14 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items19 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The boss will only choose targets that are within this range.
	 */
	export interface Range1 {
	  value0?: Min30;
	  value1?: Max30;
	}
	/**
	 * The boss will choose the nearest target that matches these types.
	 */
	export interface PotentialTargets1 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, the boss will wait for this many seconds after using this ability before moving on to the next ability.
	 */
	export interface PostAbilityPause {
	  value0: MinSeconds;
	  value1: MaxSeconds;
	}
	export interface Decor {
	  object?: Object1;
	  grid_snapping?: GridSnapping;
	  requires_floor: RequiresFloor;
	  using_lighting: UseLighting1;
	  priors?: ProgressionPriors;
	  sprite: WorldSprite3;
	  underfoot?: Underfoot;
	  light_emitter?: LightEmitter;
	  uicon: UIIcon4;
	  babbler?: Babbler12;
	  hitbox: Hitbox;
	  editor_group?: EditorGroup5;
	  recipe?: Recipe4;
	  placement_sound: PlacementSound2;
	  shadow?: Shadow;
	  description: Description5;
	  tags: Categories;
	  flippable?: Flippable1;
	  wip?: WIP;
	  particle_emitters?: ParticleEmitters;
	  name: Name9;
	}
	export interface Recipe4 {
	  components: Ingredients4;
	  output_quantity?: OutputQuantity3;
	  badge_output_modifiers?: OutputModifiedByResearch3;
	  station: Station4;
	  badge_cost_modifiers?: CostModifiedByResearch4;
	  source?: UnlockedBy5;
	  artisans?: ArtisansRequired4;
	  effort_modifier?: EffortModifier4;
	}
	export interface Ingredients4 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface OutputModifiedByResearch3 {
	  [k: string]: {
	    order: number;
	    element: {
	      badge_id: ResearchNode7;
	      style: Style3;
	      value: ChangePerPoint10;
	    };
	  };
	}
	export interface CostModifiedByResearch4 {
	  [k: string]: {
	    order: number;
	    element: {
	      badge_id: ResearchNode8;
	      value: ChangePerPoint11;
	    };
	  };
	}
	export interface ArtisansRequired4 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Shadow {
	  sprite?: Sprite1;
	  scale?: ScaleModifier;
	}
	export interface Description5 {
	  text: EnglishText20;
	  description?: TranslatorHelperText14;
	}
	export interface Categories {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface ParticleEmitters {
	  [k: string]: {
	    order: number;
	    element: ParticleEmitter;
	  };
	}
	export interface ParticleEmitter {
	  y_offset: YOffset4;
	  behind?: Behind;
	  emitter_scale?: EmitterScale2;
	  spine_bone?: SpineBone;
	  particle_system: ParticleSystem2;
	  x_offset: XOffset;
	  states?: RequiredStates;
	}
	/**
	 * If set, the particle system will only emit if the object is in one of these states
	 */
	export interface RequiredStates {
	  [k: string]: {
	    order: number;
	    element: State;
	  };
	}
	export interface Name9 {
	  text: EnglishText21;
	  description?: TranslatorHelperText15;
	}
	export interface CraftingStation {
	  object?: Object2;
	  spine_idle?: SpineIdle;
	  requires_floor: RequiresFloor1;
	  using_lighting: UseLighting2;
	  station_assembly_sounds?: AssemblySounds;
	  sprite: WorldSprite4;
	  light_emitter?: LightEmitter;
	  uicon: UIIcon5;
	  babbler?: Babbler13;
	  use_as_prior: CountAsProgressionRequirement;
	  hitbox: Hitbox;
	  editor_group?: EditorGroup6;
	  placement_sound: PlacementSound3;
	  recipe?: Recipe5;
	  shadow?: Shadow;
	  description: Description6;
	  flippable?: Flippable2;
	  wip?: WIP;
	  name: Name10;
	  station_open_sound?: AssemblyUIStartSound;
	}
	/**
	 * Order them from least intense to most intense.
	 */
	export interface AssemblySounds {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Recipe5 {
	  components: Ingredients5;
	  output_quantity?: OutputQuantity4;
	  badge_output_modifiers?: OutputModifiedByResearch4;
	  station: Station5;
	  badge_cost_modifiers?: CostModifiedByResearch5;
	  source?: UnlockedBy6;
	  artisans?: ArtisansRequired5;
	  effort_modifier?: EffortModifier5;
	}
	export interface Ingredients5 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface OutputModifiedByResearch4 {
	  [k: string]: {
	    order: number;
	    element: {
	      badge_id: ResearchNode9;
	      style: Style4;
	      value: ChangePerPoint12;
	    };
	  };
	}
	export interface CostModifiedByResearch5 {
	  [k: string]: {
	    order: number;
	    element: {
	      badge_id: ResearchNode10;
	      value: ChangePerPoint13;
	    };
	  };
	}
	export interface ArtisansRequired5 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Description6 {
	  text: EnglishText22;
	  description?: TranslatorHelperText16;
	}
	export interface Name10 {
	  text: EnglishText23;
	  description?: TranslatorHelperText17;
	}
	/**
	 * If set, this item can be obtained via fishing.
	 */
	export interface Fishing {
	  sources: FishingSources;
	  singleton: Singleton;
	  unlocked_by?: UnlockedBy7;
	  whopper: Whopper;
	  weight: Frequency;
	}
	export interface FishingSources {
	  [k: string]: {
	    order: number;
	    element: {
	      area_id: Area;
	      exclusion: Exclude15;
	    };
	  };
	}
	export interface UnlockedBy7 {
	  prerequisite: UnlockedBy8;
	  unlock_text?: UnlockDescription;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription {
	  text: EnglishText24;
	  description?: TranslatorHelperText18;
	}
	export interface Stat {
	  primary_tags?: PrimaryStatForItemTypes;
	  usable_on_equipment: UsableOnEquipment;
	  display_percent: DisplayAsPercent;
	  display_precision?: DecimalPrecision;
	  min_value?: ValueMin;
	  parent?: ParentStat;
	  naming_priority: Order1;
	  usable_on_buffs: UsableOnBuffs;
	  max_value?: ValueMax;
	  default_value: ValueDefault;
	  show_on_player_ui: ShowOnPlayerUI;
	  description?: Description7;
	  wip?: WIP;
	  value_per_point?: ValuePoint;
	  name: Name11;
	}
	/**
	 * If this stat appears on an item and is marked as a 'Primary' stat for that kind of item, this stat will appear first. For example, armor items have 'Hit Points' as a primary stat.
	 */
	export interface PrimaryStatForItemTypes {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Description7 {
	  text: EnglishText25;
	}
	export interface Name11 {
	  text: EnglishText26;
	  description?: TranslatorHelperText19;
	}
	/**
	 * A companion character who can help with crafting and research.
	 */
	export interface Buddy2 {
	  sounds: Sounds;
	  object: WorldObject;
	  banner_portrait?: BannerPortrait;
	  color_dark: UIColorDark;
	  banner_background?: BannerBackground;
	  priors?: ProgressionPriors;
	  sprite: WorldSprite5;
	  follow_unlock?: FollowingUnlock;
	  looks_at_player: LooksAtPlayer;
	  background_info?: BackgroundInformation;
	  uicon: UIIcon6;
	  hitbox: Hitbox;
	  editor_group?: EditorGroup7;
	  color_mid: UIColorMid;
	  insight_unlock?: InsightUnlocker;
	  description: Description8;
	  wip?: WIP;
	  color_bright: UIColorBright;
	  name: BuddyName;
	}
	export interface Sounds {
	  research_collect: ResearchCollected;
	  interact: Interact;
	  comfort_lost: ComfortLost;
	  blocked: ActionBlocked;
	  research_start: ResearchStart;
	  follow_end: FollowEnd;
	  comfort_gained: ComfortGained;
	  follow_start: FollowStart;
	}
	/**
	 * The color to use for the buddy's UI backgrounds.
	 */
	export interface UIColorDark {
	  b: Blue14;
	  r: Red14;
	  g: Green14;
	}
	/**
	 * For developer use. Just for establishing background information.
	 */
	export interface BackgroundInformation {
	  personality?: Personality;
	  notes?: Notes;
	  pronouns?: Pronouns;
	  brief?: Brief;
	}
	/**
	 * Information about this character's background and their role in the game world.
	 */
	export interface Notes {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	/**
	 * The color to use for the buddy's UI midtones.
	 */
	export interface UIColorMid {
	  b: Blue15;
	  r: Red15;
	  g: Green15;
	}
	/**
	 * Backstory text displayed in the buddy's UI menu.
	 */
	export interface Description8 {
	  text: EnglishText27;
	  description?: TranslatorHelperText20;
	}
	/**
	 * The color to use for the buddy's UI highlights.
	 */
	export interface UIColorBright {
	  b: Blue16;
	  r: Red16;
	  g: Green16;
	}
	export interface BuddyName {
	  text: EnglishText28;
	  description?: TranslatorHelperText21;
	}
	export interface ActionGroups {
	  [k: string]: {
	    order: number;
	    element: ActionGroup;
	  };
	}
	export interface ActionGroup {
	  actions: Actions1;
	  targeting_range?: TargetingRangeInGridSpaces;
	  target_filter?: ActionGroupTargetFilter;
	  unlocked_by?: UnlockedBy35;
	  targets_self: CastOnSelf;
	  telegraph?: Telegraph;
	  name?: NameInternal5;
	}
	export interface Actions1 {
	  [k: string]: {
	    order: number;
	    element: Action1;
	  };
	}
	/**
	 * How much this damage is boosted or suppressed by points spent in Insights.
	 */
	export interface InsightModifiers {
	  [k: string]: {
	    order?: number;
	    element?: {
	      badge_id: Insight6;
	      value: ChangePerPoint14;
	      tooltip_text?: InsightTooltipText1;
	    };
	  };
	}
	/**
	 * Explain how the insight changes the damage of this ability. This text will appear on the Insight's tooltip page.
	 */
	export interface InsightTooltipText1 {
	  text: EnglishText29;
	  description?: TranslatorHelperText22;
	}
	/**
	 * Deal more or less damage, depending on data fields.
	 */
	export interface DatafieldMultipliers1 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      datafield_id?: DataField1;
	      datafield_owner?: DatafieldOwner2;
	    };
	  };
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface TargetFilters1 {
	  [k: string]: {
	    order?: number;
	    element?: Filter16;
	  };
	}
	export interface Filter16 {
	  buffs?: Buffs35;
	  exclude?: Exclude16;
	  require_all_tags?: RequireAllTags15;
	  combatants_only?: Combatants15;
	  datafield_evaluations?: DatafieldEvaluations15;
	  items?: Items20;
	}
	export interface Buffs35 {
	  buffs: Buffs36;
	  require_all: RequireAll20;
	  stacks?: Stacks19;
	}
	export interface Buffs36 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks19 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity26;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations15 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items20 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface UnlockedBy9 {
	  prerequisite: UnlockedBy10;
	  unlock_text?: UnlockDescription1;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription1 {
	  text: EnglishText30;
	  description?: TranslatorHelperText23;
	}
	export interface ActionProbability {
	  chance: Chance2;
	}
	export interface FollowupActions {
	  [k: string]: {
	    order?: number;
	    element?: FollowupAction;
	  };
	}
	/**
	 * A followup action will have the targets from the prior action passed into it. Those targets can be further constrained or narrowed down before enacting the followup actions.
	 */
	export interface FollowupAction {
	  actions: Actions1;
	  target_filter?: TargetFilters2;
	  target_limit?: FollowupTargetLimit;
	  target_constraint?: FollowupTargetConstraint;
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface TargetFilters2 {
	  [k: string]: {
	    order?: number;
	    element?: Filter17;
	  };
	}
	export interface Filter17 {
	  buffs?: Buffs37;
	  exclude?: Exclude17;
	  require_all_tags?: RequireAllTags16;
	  combatants_only?: Combatants16;
	  datafield_evaluations?: DatafieldEvaluations16;
	  items?: Items21;
	}
	export interface Buffs37 {
	  buffs: Buffs38;
	  require_all: RequireAll21;
	  stacks?: Stacks20;
	}
	export interface Buffs38 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks20 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity27;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations16 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items21 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface TargetFilters3 {
	  [k: string]: {
	    order?: number;
	    element?: Filter18;
	  };
	}
	export interface Filter18 {
	  buffs?: Buffs39;
	  exclude?: Exclude18;
	  require_all_tags?: RequireAllTags17;
	  combatants_only?: Combatants17;
	  datafield_evaluations?: DatafieldEvaluations17;
	  items?: Items22;
	}
	export interface Buffs39 {
	  buffs: Buffs40;
	  require_all: RequireAll22;
	  stacks?: Stacks21;
	}
	export interface Buffs40 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks21 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity28;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations17 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items22 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface UnlockedBy11 {
	  prerequisite: UnlockedBy12;
	  unlock_text?: UnlockDescription2;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription2 {
	  text: EnglishText31;
	  description?: TranslatorHelperText24;
	}
	export interface ActionProbability1 {
	  chance: Chance3;
	}
	export interface MoveDistanceStatModifiers {
	  [k: string]: {
	    order?: number;
	    element?: Modifier1;
	  };
	}
	export interface Modifier1 {
	  type?: ModifierType;
	  stat?: Stat1;
	}
	/**
	 * If a movement is successful, these sounds will play.
	 */
	export interface MovementSounds {
	  [k: string]: {
	    order?: number;
	    element?: {
	      sound?: Sound3;
	      chance?: ChanceOfPlaying;
	    };
	  };
	}
	export interface ActionGroups1 {
	  [k: string]: {
	    order: number;
	    element: ActionGroup;
	  };
	}
	export interface UnlockedBy13 {
	  prerequisite: UnlockedBy14;
	  unlock_text?: UnlockDescription3;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription3 {
	  text: EnglishText32;
	  description?: TranslatorHelperText25;
	}
	/**
	 * One of these animations will be chosen to play during the movement.
	 */
	export interface MovementAnimations {
	  animations?: AnimationsList;
	}
	export interface AnimationsList {
	  [k: string]: {
	    order?: number;
	    element?: {
	      animation?: AnimationName;
	      looping?: Looping1;
	    };
	  };
	}
	/**
	 * The distance this ability will attempt to move the target.
	 */
	export interface MovementDistanceGridSpaces {
	  value0?: Min31;
	  value1?: Max31;
	}
	export interface ActionProbability2 {
	  chance: Chance4;
	}
	export interface MoveSpeedStatModifiers {
	  [k: string]: {
	    order?: number;
	    element?: Modifier2;
	  };
	}
	export interface Modifier2 {
	  type?: ModifierType1;
	  stat?: Stat2;
	}
	export interface UnlockedBy15 {
	  prerequisite: UnlockedBy16;
	  unlock_text?: UnlockDescription4;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription4 {
	  text: EnglishText33;
	  description?: TranslatorHelperText26;
	}
	export interface UnlockedBy17 {
	  prerequisite: UnlockedBy18;
	  unlock_text?: UnlockDescription5;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription5 {
	  text: EnglishText34;
	  description?: TranslatorHelperText27;
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface TargetFilters4 {
	  [k: string]: {
	    order?: number;
	    element?: Filter19;
	  };
	}
	export interface Filter19 {
	  buffs?: Buffs41;
	  exclude?: Exclude19;
	  require_all_tags?: RequireAllTags18;
	  combatants_only?: Combatants18;
	  datafield_evaluations?: DatafieldEvaluations18;
	  items?: Items23;
	}
	export interface Buffs41 {
	  buffs: Buffs42;
	  require_all: RequireAll23;
	  stacks?: Stacks22;
	}
	export interface Buffs42 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks22 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity29;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations18 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items23 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface ActionProbability3 {
	  chance: Chance5;
	}
	export interface UnlockedBy19 {
	  prerequisite: UnlockedBy20;
	  unlock_text?: UnlockDescription6;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription6 {
	  text: EnglishText35;
	  description?: TranslatorHelperText28;
	}
	export interface Color5 {
	  b?: Blue17;
	  r?: Red17;
	  g?: Green17;
	}
	export interface DecalDurationSeconds2 {
	  value0?: Min32;
	  value1?: Max32;
	}
	/**
	 * The decal will choose a random scale between these numbers.
	 */
	export interface DecalScale2 {
	  value0?: Min33;
	  value1?: Max33;
	}
	/**
	 * Set this to spawn the explosion a random delay.
	 */
	export interface RandomDelaySeconds2 {
	  value0?: Min34;
	  value1?: Max34;
	}
	/**
	 * Set this to spawn the explosion a random distance away.
	 */
	export interface RandomDistanceGridSpaces2 {
	  value0?: Min35;
	  value1?: Max35;
	}
	export interface ExplosionScale2 {
	  value0?: Min36;
	  value1?: Max36;
	}
	export interface HighlightColor2 {
	  b?: Blue18;
	  r?: Red18;
	  g?: Green18;
	}
	export interface BaseColor2 {
	  b?: Blue19;
	  r?: Red19;
	  g?: Green19;
	}
	export interface Bursts1 {
	  [k: string]: {
	    order?: number;
	    element?: Burst1;
	  };
	}
	export interface Burst1 {
	  spawn_radius: SpawnRadiusPixels1;
	  outward_blast: BlastOutward1;
	  location: Source3;
	  direction?: BurstDirection1;
	  num_particles: NumberOfParticles1;
	  perspective: Perspective1;
	  radius_as_grid?: SpawnRadiusAsGrid1;
	  scaled_radius?: ScaledSpawnRadius1;
	  spawn_at_ground?: SpawnOnGround1;
	  z_offset?: ZOffset6;
	}
	/**
	 * How far from the source the particles will spawn.
	 */
	export interface SpawnRadiusPixels1 {
	  value0?: Min37;
	  value1?: Max37;
	}
	export interface BurstDirection1 {
	  value0?: Min38;
	  value1?: Max38;
	}
	export interface NumberOfParticles1 {
	  value0?: Min39;
	  value1?: Max39;
	}
	export interface ItemsToLose {
	  [k: string]: {
	    order?: number;
	    element?: {
	      item_id?: Item3;
	      quantity?: Quantity30;
	    };
	  };
	}
	export interface ActionProbability4 {
	  chance: Chance6;
	}
	export interface ItemsToGain {
	  [k: string]: {
	    order?: number;
	    element?: {
	      item_id?: Item4;
	      quantity?: Quantity31;
	    };
	  };
	}
	export interface Quantity31 {
	  value0?: Min40;
	  value1?: Max40;
	}
	export interface UnlockedBy21 {
	  prerequisite: UnlockedBy22;
	  unlock_text?: UnlockDescription7;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription7 {
	  text: EnglishText36;
	  description?: TranslatorHelperText29;
	}
	export interface ActionProbability5 {
	  chance: Chance7;
	}
	/**
	 * If set, only targets that match this filter will be picked up.
	 */
	export interface PickupTargetFilter {
	  [k: string]: {
	    order?: number;
	    element?: Filter20;
	  };
	}
	export interface Filter20 {
	  buffs?: Buffs43;
	  exclude?: Exclude20;
	  require_all_tags?: RequireAllTags19;
	  combatants_only?: Combatants19;
	  datafield_evaluations?: DatafieldEvaluations19;
	  items?: Items24;
	}
	export interface Buffs43 {
	  buffs: Buffs44;
	  require_all: RequireAll24;
	  stacks?: Stacks23;
	}
	export interface Buffs44 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks23 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity32;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations19 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items24 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface UnlockedBy23 {
	  prerequisite: UnlockedBy24;
	  unlock_text?: UnlockDescription8;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription8 {
	  text: EnglishText37;
	  description?: TranslatorHelperText30;
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface TargetFilters5 {
	  [k: string]: {
	    order?: number;
	    element?: Filter21;
	  };
	}
	export interface Filter21 {
	  buffs?: Buffs45;
	  exclude?: Exclude21;
	  require_all_tags?: RequireAllTags20;
	  combatants_only?: Combatants20;
	  datafield_evaluations?: DatafieldEvaluations20;
	  items?: Items25;
	}
	export interface Buffs45 {
	  buffs: Buffs46;
	  require_all: RequireAll25;
	  stacks?: Stacks24;
	}
	export interface Buffs46 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks24 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity33;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations20 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items25 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface BuffsToApply {
	  [k: string]: {
	    order?: number;
	    element?: {
	      stacks_multiply_by_targets?: MultiplyStacksByTargets;
	      buff_target: BuffTarget1;
	      damage_modifier?: DamageModifier1;
	      buff: string;
	      stacks?: Stacks25;
	      healing_percentage?: HealingPercentage2;
	    };
	  };
	}
	export interface UnlockedBy25 {
	  prerequisite: UnlockedBy26;
	  unlock_text?: UnlockDescription9;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription9 {
	  text: EnglishText38;
	  description?: TranslatorHelperText31;
	}
	export interface ActionProbability6 {
	  chance: Chance8;
	}
	export interface UnlockedBy27 {
	  prerequisite: UnlockedBy28;
	  unlock_text?: UnlockDescription10;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription10 {
	  text: EnglishText39;
	  description?: TranslatorHelperText32;
	}
	/**
	 * The new entity will spawn a random range away from the chosen location, up to this number of grid spaces.
	 */
	export interface SpawnDistance1 {
	  value0?: Min41;
	  value1?: Max41;
	}
	export interface UnlockedBy29 {
	  prerequisite: UnlockedBy30;
	  unlock_text?: UnlockDescription11;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription11 {
	  text: EnglishText40;
	  description?: TranslatorHelperText33;
	}
	/**
	 * This determines how long the projectile will take to reach its destination. Its vertical height and horizontal move speed will adjust to ensure it is airborne for this amount of time.
	 */
	export interface FlightTimeSeconds {
	  value0?: Min42;
	  value1?: Max42;
	}
	export interface ActionGroups2 {
	  [k: string]: {
	    order: number;
	    element: ActionGroup;
	  };
	}
	export interface LobMultipleProjectiles {
	  [k: string]: {
	    order?: number;
	    element?: ProjectileBatch;
	  };
	}
	export interface ProjectileBatch {
	  direction_from_target?: DirectionFromTarget;
	  distance_from_target?: DistanceFromTargetGridSpaces;
	  quantity?: Quantity34;
	  chance?: BatchChance;
	}
	export interface DirectionFromTarget {
	  value0?: Min43;
	  value1?: Max43;
	}
	export interface DistanceFromTargetGridSpaces {
	  value0?: Min44;
	  value1?: Max44;
	}
	/**
	 * How many projectiles to fire in this batch.
	 */
	export interface Quantity34 {
	  value0?: Min45;
	  value1?: Max45;
	}
	export interface LifetimeSeconds {
	  value0?: Min46;
	  value1?: Max46;
	}
	export interface FireMultipleProjectiles {
	  [k: string]: {
	    order?: number;
	    element?: ProjectileBatch1;
	  };
	}
	export interface ProjectileBatch1 {
	  direction?: DirectionOffset;
	  quantity?: Quantity35;
	  chance?: BatchChance1;
	}
	/**
	 * This will be added to the baseline aim direction.
	 */
	export interface DirectionOffset {
	  value0?: Min47;
	  value1?: Max47;
	}
	/**
	 * How many projectiles to fire in this batch.
	 */
	export interface Quantity35 {
	  value0?: Min48;
	  value1?: Max48;
	}
	export interface ZBehavior {
	  z_style?: ZStyle;
	  z_time?: ZTime;
	  z_target?: ZTarget;
	}
	export interface ActionGroups3 {
	  [k: string]: {
	    order: number;
	    element: ActionGroup;
	  };
	}
	export interface ActionGroups4 {
	  [k: string]: {
	    order: number;
	    element: ActionGroup;
	  };
	}
	export interface SpeedPixelsSec {
	  value0?: Min49;
	  value1?: Max49;
	}
	export interface BuffsToRemove {
	  [k: string]: {
	    order?: number;
	    element?: Buff3;
	  };
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface TargetFilters6 {
	  [k: string]: {
	    order?: number;
	    element?: Filter22;
	  };
	}
	export interface Filter22 {
	  buffs?: Buffs47;
	  exclude?: Exclude22;
	  require_all_tags?: RequireAllTags21;
	  combatants_only?: Combatants21;
	  datafield_evaluations?: DatafieldEvaluations21;
	  items?: Items26;
	}
	export interface Buffs47 {
	  buffs: Buffs48;
	  require_all: RequireAll26;
	  stacks?: Stacks26;
	}
	export interface Buffs48 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks26 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity36;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations21 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items26 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface UnlockedBy31 {
	  prerequisite: UnlockedBy32;
	  unlock_text?: UnlockDescription12;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription12 {
	  text: EnglishText41;
	  description?: TranslatorHelperText34;
	}
	export interface ActionProbability7 {
	  chance: Chance9;
	}
	export interface ActionProbability8 {
	  chance: Chance10;
	}
	export interface ActionGroups5 {
	  [k: string]: {
	    order: number;
	    element: ActionGroup;
	  };
	}
	export interface LeapStartSounds {
	  [k: string]: {
	    order?: number;
	    element?: {
	      sound?: Sound6;
	      chance?: ChanceOfPlaying1;
	    };
	  };
	}
	/**
	 * One of these animations will be chosen to play during the movement.
	 */
	export interface MovementAnimations1 {
	  animations?: AnimationsList1;
	}
	export interface AnimationsList1 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      animation?: AnimationName1;
	      looping?: Looping2;
	    };
	  };
	}
	export interface LeapLandingSounds {
	  [k: string]: {
	    order?: number;
	    element?: {
	      sound?: Sound7;
	      chance?: ChanceOfPlaying2;
	    };
	  };
	}
	export interface UnlockedBy33 {
	  prerequisite: UnlockedBy34;
	  unlock_text?: UnlockDescription13;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription13 {
	  text: EnglishText42;
	  description?: TranslatorHelperText35;
	}
	export interface ActionGroups6 {
	  [k: string]: {
	    order: number;
	    element: ActionGroup;
	  };
	}
	/**
	 * If a knockback is successful, these sounds will play.
	 */
	export interface KnockSounds {
	  [k: string]: {
	    order?: number;
	    element?: {
	      sound?: Sound8;
	      chance?: ChanceOfPlaying3;
	    };
	  };
	}
	export interface ActionProbability9 {
	  chance: Chance11;
	}
	/**
	 * When targeting a location, how far (or close) this action group can target.
	 */
	export interface TargetingRangeInGridSpaces {
	  value0: Min50;
	  value1: Max50;
	}
	/**
	 * If set, this action group will only be performed on targets that match the filter.
	 */
	export interface ActionGroupTargetFilter {
	  [k: string]: {
	    order: number;
	    element: Filter23;
	  };
	}
	export interface Filter23 {
	  buffs?: Buffs49;
	  exclude?: Exclude23;
	  require_all_tags?: RequireAllTags22;
	  combatants_only?: Combatants22;
	  datafield_evaluations?: DatafieldEvaluations22;
	  items?: Items27;
	}
	export interface Buffs49 {
	  buffs: Buffs50;
	  require_all: RequireAll27;
	  stacks?: Stacks28;
	}
	export interface Buffs50 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks28 {
	  comparison: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1: Quantity37;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations22 {
	  [k: string]: {
	    order: number;
	    element: {
	      comparison: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0: string;
	      value1: number;
	    };
	  };
	}
	export interface Items27 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface UnlockedBy35 {
	  prerequisite: UnlockedBy36;
	  unlock_text?: UnlockDescription14;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription14 {
	  text: EnglishText43;
	  description?: TranslatorHelperText36;
	}
	/**
	 * A collection of shapes used for abilities, targeting, and interactions.
	 */
	export interface Telegraph {
	  shape_collections: ShapeCollections;
	  rotate_with_aim?: RotateWithAimDirection;
	  animations?: TelegraphAnimations;
	  targets_self: IncludeCasterAsViableTarget;
	}
	export interface ShapeCollections {
	  [k: string]: {
	    order: number;
	    element: ShapeCollection;
	  };
	}
	export interface ShapeCollection {
	  offset?: Offset1;
	  scale?: ScaleModifier1;
	  unlocked_by?: UnlockedBy37;
	  mirror?: Mirror;
	  shapes: Shapes;
	  name?: NameInternal4;
	}
	export interface Offset1 {
	  x: X;
	  y: Y;
	}
	export interface UnlockedBy37 {
	  prerequisite: UnlockedBy38;
	  unlock_text?: UnlockDescription15;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription15 {
	  text: EnglishText44;
	  description?: TranslatorHelperText37;
	}
	export interface Mirror {
	  x: X1;
	  y: Y1;
	}
	export interface Shapes {
	  [k: string]: {
	    order: number;
	    element: Shape1;
	  };
	}
	/**
	 * You can optionally customize this shape's color in the editor, so it stands out from other shapes.
	 */
	export interface EditorColor {
	  b?: Blue20;
	  r?: Red20;
	  g?: Green20;
	}
	export interface Offset2 {
	  x?: X2;
	  y?: Y2;
	}
	export interface Arc {
	  spread?: SpreadDegrees;
	  angle?: DirectionDegrees;
	}
	export interface UnlockedBy39 {
	  prerequisite: UnlockedBy40;
	  unlock_text?: UnlockDescription16;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription16 {
	  text: EnglishText45;
	  description?: TranslatorHelperText38;
	}
	/**
	 * In grid spaces.
	 */
	export interface Radius {
	  value0?: Inner;
	  value1?: Outer;
	}
	export interface Mirror1 {
	  x?: X3;
	  y?: Y3;
	}
	/**
	 * You can optionally customize this shape's color in the editor, so it stands out from other shapes.
	 */
	export interface EditorColor1 {
	  b?: Blue21;
	  r?: Red21;
	  g?: Green21;
	}
	export interface Offset3 {
	  x?: X4;
	  y?: Y4;
	}
	export interface UnlockedBy41 {
	  prerequisite: UnlockedBy42;
	  unlock_text?: UnlockDescription17;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription17 {
	  text: EnglishText46;
	  description?: TranslatorHelperText39;
	}
	export interface Mirror2 {
	  x?: X5;
	  y?: Y5;
	}
	/**
	 * Relative to the collection's origin.
	 */
	export interface Points {
	  [k: string]: {
	    order?: number;
	    element?: {
	      x?: X6;
	      y?: Y6;
	    };
	  };
	}
	export interface TelegraphAnimations {
	  scale?: Scale;
	  shake?: Shake;
	}
	export interface Scale {
	  start_value: ScaleStart;
	  times: ScaleAnimationTime;
	  style: Style5;
	}
	export interface ScaleAnimationTime {
	  value0: Start;
	  value1: End;
	}
	export interface Shake {
	  values: ShakeAmount;
	  times: ShakeTime;
	}
	export interface ShakeAmount {
	  value0: Start1;
	  value1: End1;
	}
	export interface ShakeTime {
	  value0: Start2;
	  value1: End2;
	}
	export interface ImpassableTile {
	  undersprite?: UnderSprite1;
	  sprite: MainSprite1;
	  map_color: MapColor1;
	  shore_interaction?: WaterInteraction1;
	  uicon: Icon1;
	  editor_group?: EditorGroup8;
	  placement_sound?: PlacementSound4;
	  footstep_sound: FootstepSound1;
	  flippable: Flippable3;
	  wip?: WIP;
	  name: Name12;
	  dapples?: SunlightDappling1;
	}
	/**
	 * The color to draw this tile on the map.
	 */
	export interface MapColor1 {
	  b: Blue22;
	  r: Red22;
	  g: Green22;
	}
	/**
	 * If set, this tile will be allowed to touch water.
	 */
	export interface WaterInteraction1 {
	  shelf_sprite?: ShelfUnderwaterSprite1;
	  shore_sprite: ShorelineUnderwaterSprite1;
	}
	export interface Name12 {
	  text: EnglishText47;
	  description?: TranslatorHelperText40;
	}
	export interface SunlightDappling1 {
	  dapple_chance: SpawnChance1;
	  dapple_colors: Colors2;
	}
	/**
	 * The color to use for the sunlight dapples.
	 */
	export interface Colors2 {
	  [k: string]: {
	    order: number;
	    element: {
	      b: Blue23;
	      r: Red23;
	      g: Green23;
	    };
	  };
	}
	/**
	 * A thing that can hold stuff.
	 */
	export interface Chest {
	  death_sounds?: DestructionSounds;
	  object?: Object3;
	  using_lighting?: UseLighting3;
	  sprite: WorldSprite6;
	  data_fields?: DataFields;
	  light_emitter?: LightEmitter;
	  uicon: UIIcon7;
	  babbler?: Babbler14;
	  requires_land?: RequiresLand;
	  hitbox: Hitbox;
	  random_scaling?: RandomScalingMinimum;
	  editor_group?: EditorGroup9;
	  shadow?: Shadow;
	  wip?: WIP;
	  name: Name13;
	}
	/**
	 * Sound effects to play when this thing is destroyed.
	 */
	export interface DestructionSounds {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	/**
	 * Attaching data fields to this world element will make them readable by other game mechanics/elements. Can be used to store custom data on a world element.
	 */
	export interface DataFields {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Name13 {
	  text: EnglishText48;
	  description?: TranslatorHelperText41;
	}
	/**
	 * A collection of variables used to control the pacing and flow of the game.
	 */
	export interface GameBalance {
	  buildmode_range: BuildModeRange;
	  equipment_stat_multipliers: EquipmentStatMultipliers;
	  tile_respawn_minutes: ClearedTileRespawnMinutes;
	  time_to_kill: TimeToKill;
	  crafting_growth_per_quality: CraftingCostGrowthPerQuality;
	  crafting_efficiencies: CraftingEfficiencies;
	  badge_research_seconds_by_depth: ResearchTimeGrowthPerLevel;
	  healing_cooldown: HealingCooldownSeconds;
	  badge_base_effort_per_component: ResearchEffortPerComponent;
	  home_teleport_cooldown: HomeTeleportCooldownSeconds;
	  crafting_growth_per_level: CraftingCostGrowthPerLevel;
	  boss_time_to_kill: BossTimeToKill;
	  minutes_per_game_day: MinutesPerGameDay;
	  dps_growth_per_level: DPSGrowthLevel;
	  movespeed_base: BaseGameplayMoveSpeed;
	  time_to_die: TimeToDie;
	  time_to_harvest: TimeToHarvest;
	  item_respawn_minutes: WorldElementRespawnMinutes;
	  badge_base_research_seconds: ResearchBaseSeconds;
	  wip?: WIP;
	  player_base_hp_mod: PlayerBaseHP;
	  name: Name14;
	  crafting_base_effort_per_component: CraftingEffortPerComponent;
	}
	/**
	 * Stats have a 'value per point', which is multiplied against these weights. For example, if a trinket has a weight of 0.5 and 'Haste' has a value per point of 10%, then a trinket with 1 point of haste will give 5% haste.
	 */
	export interface EquipmentStatMultipliers {
	  itg_weapon: Weapon;
	  itg_gloves: Gloves;
	  itg_pants: Boots;
	  itg_helm: Helm;
	  itg_trinket: Trinket1;
	  itg_chestarmor: Suit;
	}
	/**
	 * The rough number of seconds it should take the player to defeat a creature of equal level under constant hits.
	 */
	export interface TimeToKill {
	  start: SecondsAtLevel1;
	  per_level: SecondsChangePerLevel;
	  minimum: MinSeconds1;
	  maximum: MaxSeconds1;
	}
	/**
	 * How recipes for stackable items become more efficient over time as you craft more of them.
	 */
	export interface CraftingEfficiencies {
	  num_crafts: NumCraftsForLevel1;
	  growth_per_level: CostGrowthPerSkillLevel;
	  skill_levels: SkillLevels;
	}
	/**
	 * At each skill level, how do recipes become more efficient?
	 */
	export interface SkillLevels {
	  [k: string]: {
	    order: number;
	    element: {
	      cost: CostReduction;
	      output: OutputIncrease;
	    };
	  };
	}
	/**
	 * The rough number of seconds it should take the player to be killed by an equal level creature under constant hits.
	 */
	export interface TimeToDie {
	  start: SecondsAtLevel11;
	  per_level: SecondsChangePerLevel1;
	  minimum: MinSeconds2;
	  maximum: MaxSeconds2;
	}
	/**
	 * The rough number of seconds it should take the player to harvest a resource of equal level.
	 */
	export interface TimeToHarvest {
	  start: SecondsAtLevel12;
	  per_level: SecondsChangePerLevel2;
	  minimum: MinSeconds3;
	  maximum: MaxSeconds3;
	}
	/**
	 * The name of this gameplay balance mode.
	 */
	export interface Name14 {
	  text: EnglishText49;
	  description?: TranslatorHelperText42;
	}
	/**
	 * A pickupable recipe.
	 */
	export interface Schematic {
	  priors?: ProgressionPriors;
	  editor_group?: EditorGroup10;
	  wip?: WIP;
	  name: NameInternal6;
	}
	/**
	 * A state that a world element can be in which conveys information about how it should animate
	 */
	export interface AnimationState {
	  spine_name_default: DefaultSpineAnimationName;
	  fallback?: FallbackState;
	  description: Description9;
	  wip?: WIP;
	  name: Name15;
	}
	export interface Wieldable {
	  collection_sound?: CollectionSound;
	  fishing?: Fishing;
	  equipment_set?: EquipmentSet3;
	  reactions?: Reactions;
	  priors?: ProgressionPriors;
	  sprite?: WorldSprite7;
	  equipment_default_stats?: DefaultStats1;
	  inventory_sound: InventorySound1;
	  stackable?: Stackable;
	  wield_sound: WieldSound;
	  uicon: UIIcon8;
	  swing_sound: UseSound;
	  scale_modifier?: ScaleModifier4;
	  wield_spine_name?: SpineAttachmentName;
	  level_viewer_ignore?: IgnoreInLevelViewer1;
	  editor_group?: EditorGroup11;
	  ability?: Ability6;
	  recipe?: Recipe6;
	  manual_pickup?: ManualPickup;
	  type: Type1;
	  description: Description10;
	  wip?: WIP;
	  level: Level1;
	  name: Name16;
	}
	/**
	 * You can allocate stats for this item to have on it by default when obtained. This will not affect already-obtained items.
	 */
	export interface DefaultStats1 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Recipe6 {
	  components: Ingredients6;
	  output_quantity?: OutputQuantity5;
	  badge_output_modifiers?: OutputModifiedByResearch5;
	  station: Station6;
	  badge_cost_modifiers?: CostModifiedByResearch6;
	  source?: UnlockedBy43;
	  artisans?: ArtisansRequired6;
	  effort_modifier?: EffortModifier6;
	}
	export interface Ingredients6 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface OutputModifiedByResearch5 {
	  [k: string]: {
	    order: number;
	    element: {
	      badge_id: ResearchNode11;
	      style: Style6;
	      value: ChangePerPoint15;
	    };
	  };
	}
	export interface CostModifiedByResearch6 {
	  [k: string]: {
	    order: number;
	    element: {
	      badge_id: ResearchNode12;
	      value: ChangePerPoint16;
	    };
	  };
	}
	export interface ArtisansRequired6 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Description10 {
	  text: EnglishText50;
	  description?: TranslatorHelperText43;
	}
	export interface Name16 {
	  text: EnglishText51;
	  description?: TranslatorHelperText44;
	}
	/**
	 * A collection of earparty sounds that share a global Gain.
	 */
	export interface EarpartyGroup1 {
	  falloff?: Falloff1;
	  parent_group?: ParentGroup;
	  wip?: WIP;
	  name: Name17;
	  gain: GainModifier;
	}
	/**
	 * For positional sounds, the pixel range for the audio to no longer become audible.
	 */
	export interface Falloff1 {
	  value0: Min51;
	  value1: Max51;
	}
	/**
	 * Items that haven't yet been brought into the Game Changer, but exist as placeholders for UIDs.
	 */
	export interface UnimplementedItem {
	  uicon?: Icon2;
	  wip?: WIP;
	  name?: Name18;
	}
	export interface Name18 {
	  text: EnglishText52;
	  description?: TranslatorHelperText45;
	}
	/**
	 * A particle system asset defined in the Game Maker project.
	 */
	export interface ParticleSystem4 {
	  wip?: WIP;
	  name: Name19;
	}
	export interface Chat {
	  requirements?: Requirements;
	  moments: Moments;
	  wip?: WIP;
	  name: NameInternal7;
	}
	/**
	 * Conditions that must be true for the quest to proceed.
	 */
	export interface Requirements {
	  [k: string]: {
	    order: number;
	    element: Requirement1;
	  };
	}
	/**
	 * The player must have at least these quantities of these items.
	 */
	export interface Items28 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      key?: string;
	      value?: Quantity38;
	    };
	  };
	}
	export interface InventoryEvaluation1 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: Item6;
	      value1?: Quantity39;
	    };
	  };
	}
	/**
	 * Conditions that must be true for the quest to proceed.
	 */
	export interface Requirements1 {
	  [k: string]: {
	    order: number;
	    element: Requirement1;
	  };
	}
	export interface PetStage1 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  stage?: "Egg" | "Baby" | "Adult" | "Embiggened";
	}
	export interface Moments {
	  [k: string]: {
	    order: number;
	    element: Moment;
	  };
	}
	export interface Moment {
	  [k: string]: {
	    order: number;
	    element: {
	      text?: Dialogue;
	      speaker: string;
	      emoji?: Emoji2;
	    };
	  };
	}
	export interface Dialogue {
	  text: EnglishText53;
	}
	export interface Pet2 {
	  movement: Motion;
	  hatching: Hatching;
	  spine_skin: PreviewSkin;
	  chirp_sound?: ChirpSound;
	  appearances: Appearances;
	  using_lighting: UseLighting4;
	  priors?: ProgressionPriors;
	  abilities: AbilitySequence;
	  sprite: WorldSprite8;
	  synergies: Synergies;
	  ability_melee: AbilityRequiresMelee;
	  ui_color?: UIColor;
	  light_emitter?: LightEmitter;
	  size: Size3;
	  uicon: UIIcon9;
	  ability_sound?: AbilityActivationSound;
	  ability_name: AbilityName;
	  ability_cooldown: AbilityCooldownSeconds;
	  ability_description: AbilityDescription;
	  follow_sound?: FollowSound;
	  follow_stop_sound?: StopFollowingSound;
	  description: Description11;
	  wip?: WIP;
	  ui_sound?: UIOpenSound;
	  name: Name21;
	}
	export interface Motion {
	  stationary: StationaryVisuals2;
	  moving: MovementVisuals2;
	  movespeed: MovementSpeed2;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave4 {
	  [k: string]: {
	    order?: number;
	    element?: SineWave5;
	  };
	}
	export interface SineWave5 {
	  speed?: Speed7;
	  amplitude?: Amplitude5;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements4 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent4;
	  };
	}
	export interface FlapEvent4 {
	  distance?: VerticalDistance4;
	  recovery_seconds?: RecoveryDurationSeconds4;
	  impulse_seconds?: ImpulseDurationSeconds4;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave5 {
	  [k: string]: {
	    order?: number;
	    element?: SineWave6;
	  };
	}
	export interface SineWave6 {
	  speed?: Speed8;
	  amplitude?: Amplitude6;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements5 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent5;
	  };
	}
	export interface FlapEvent5 {
	  distance?: VerticalDistance5;
	  recovery_seconds?: RecoveryDurationSeconds5;
	  impulse_seconds?: ImpulseDurationSeconds5;
	}
	export interface Hatching {
	  hatching_requirements?: Requirements2;
	  egg: Egg;
	  egg_sound: EggSounds;
	}
	export interface Requirements2 {
	  [k: string]: {
	    order: number;
	    element: CheckMark;
	  };
	}
	export interface CheckMark {
	  requirements: CheckMarkConditions;
	  description: Name20;
	}
	export interface CheckMarkConditions {
	  [k: string]: {
	    order: number;
	    element: Condition2;
	  };
	}
	/**
	 * The number of spaces that are not occupied by structures (walls/doors/pillars).
	 */
	export interface InteriorTileArea {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: number;
	}
	/**
	 * Note that if you include an item tag and an item that also belongs to that tag, the item will be double-counted.
	 */
	export interface Items29 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface NumberOfRooms {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: number;
	}
	/**
	 * The items to check against the source items.
	 */
	export interface TargetItems {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value0?: {
	    [k: string]: {
	      order?: number;
	      element?: string;
	    };
	  };
	  value1?: number;
	}
	/**
	 * The evaluated number of source items must meet the tile distance requirement against the evaluated number of target items.
	 */
	export interface TileDistance {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: number;
	}
	/**
	 * The items used to check for relationships.
	 */
	export interface SourceItems {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value0?: {
	    [k: string]: {
	      order?: number;
	      element?: string;
	    };
	  };
	  value1?: number;
	}
	/**
	 * Describe these conditions in a short sentence. This will be next to a checkmark that will check once the requirements are complete.
	 */
	export interface Name20 {
	  text: EnglishText54;
	  description?: TranslatorHelperText46;
	}
	/**
	 * These appearances correspond with the three stages of a pet's life: Baby, Adult, and Embiggened.
	 */
	export interface Appearances {
	  [k: string]: {
	    order: number;
	    element: {
	      scale: Scale1;
	      skin_name: SkinName;
	    };
	  };
	}
	/**
	 * The abilities the pet will use in combat (in order).
	 */
	export interface AbilitySequence {
	  [k: string]: {
	    order: number;
	    element: Ability7;
	  };
	}
	/**
	 * The ability the pet will perform on command in combat.
	 */
	export interface Ability7 {
	  target: Target1;
	  movement?: MotionOverride2;
	  enabled_default: EnabledByDefault;
	  enablement?: Enablement;
	  ability: Ability8;
	  post_ability_pause: PostAbilityPause1;
	}
	export interface MotionOverride2 {
	  stationary?: StationaryVisuals3;
	  moving?: MovementVisuals3;
	  movespeed?: MovementSpeed3;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave6 {
	  [k: string]: {
	    order?: number;
	    element?: SineWave7;
	  };
	}
	export interface SineWave7 {
	  speed?: Speed9;
	  amplitude?: Amplitude7;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements6 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent6;
	  };
	}
	export interface FlapEvent6 {
	  distance?: VerticalDistance6;
	  recovery_seconds?: RecoveryDurationSeconds6;
	  impulse_seconds?: ImpulseDurationSeconds6;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave7 {
	  [k: string]: {
	    order?: number;
	    element?: SineWave8;
	  };
	}
	export interface SineWave8 {
	  speed?: Speed10;
	  amplitude?: Amplitude8;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements7 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent7;
	  };
	}
	export interface FlapEvent7 {
	  distance?: VerticalDistance7;
	  recovery_seconds?: RecoveryDurationSeconds7;
	  impulse_seconds?: ImpulseDurationSeconds7;
	}
	/**
	 * Links to pet stages or masteries that can either enable or disable this ability in the sequence. Enablements are evaluated starting at the end, and the first one met dictates whether the ability is enabled.
	 */
	export interface Enablement {
	  [k: string]: {
	    order: number;
	    element: AbilityEnablement;
	  };
	}
	export interface AbilityEnablement {
	  stage?: Stage;
	  mastery?: Mastery;
	  enables: Enables;
	}
	/**
	 * If set, the creature will wait for this many seconds after using this ability before moving on to the next ability.
	 */
	export interface PostAbilityPause1 {
	  value0: MinSeconds4;
	  value1: MaxSeconds4;
	}
	/**
	 * Passive benefits from having this pet with you.
	 */
	export interface Synergies {
	  [k: string]: {
	    order: number;
	    element: Synergy;
	  };
	}
	/**
	 * A passive benefit from having this pet with you.
	 */
	export interface Synergy {
	  reactions?: Reactions1;
	  stat_boost?: StatBoost;
	  mastery?: MasteryLink;
	}
	/**
	 * A set of reactions that get added to the player while this pet is following them.
	 */
	export interface Reactions1 {
	  reactions: Reactions;
	}
	/**
	 * Passive stat boost from having this pet with you.
	 */
	export interface StatBoost {
	  amounts: StatBoostAmount;
	  modifier_style: ModifierStyle;
	  stat: Stat3;
	}
	export interface StatBoostAmount {
	  value0: Baby;
	  value1: Embiggened;
	}
	/**
	 * You can activate (or deactivate) this synergy via specific masteries.
	 */
	export interface MasteryLink {
	  deactivates: MasteryDeactivatesSynergy;
	  mastery_id: Mastery1;
	}
	/**
	 * The color to use for this pet's UI.
	 */
	export interface UIColor {
	  b: Blue24;
	  r: Red24;
	  g: Green24;
	}
	export interface Size3 {
	  width: Width2;
	  height: Height2;
	}
	/**
	 * As shown in the pet interface.
	 */
	export interface AbilityName {
	  text: EnglishText55;
	}
	/**
	 * As shown in the pet interface.
	 */
	export interface AbilityDescription {
	  text: EnglishText56;
	}
	export interface Description11 {
	  text: EnglishText57;
	  description?: TranslatorHelperText47;
	}
	export interface Name21 {
	  text: EnglishText58;
	  description?: TranslatorHelperText48;
	}
	/**
	 * The visual information for how to display a type of character in the game world.
	 */
	export interface CharacterSpecies {
	  object: Object4;
	  name_color: NameColor;
	  sprite: WorldSprite9;
	  size: Hitbox1;
	  uicon: UIIcon10;
	  wip?: WIP;
	  name: Name22;
	}
	/**
	 * For when this name is displayed in a dialogue window.
	 */
	export interface NameColor {
	  b: Blue25;
	  r: Red25;
	  g: Green25;
	}
	export interface Hitbox1 {
	  width: Width3;
	  height: Height3;
	}
	export interface Name22 {
	  text: EnglishText59;
	  description?: TranslatorHelperText49;
	}
	export interface BossDialogueSequence2 {
	  animation?: BossSpineAnimation;
	  moments: DialogueMoments;
	}
	/**
	 * A sprite asset found in the Game Maker project.
	 */
	export interface Sprite2 {
	  blinks?: SpineBlinkTracks;
	  spine: Spine;
	  transitions?: SpineTransitions;
	  wip?: WIP;
	  name: Name23;
	}
	/**
	 * Each blink track will run independently, allowing you to have a character that blinks with multiple sets of eyes (or whatever it has).
	 */
	export interface SpineBlinkTracks {
	  [k: string]: {
	    order: number;
	    element: {
	      slots: AttachmentSlots;
	      track_name: TrackName;
	    };
	  };
	}
	export interface AttachmentSlots {
	  [k: string]: {
	    order: number;
	    element: {
	      slot: SlotName;
	      behaviors: Behaviors;
	    };
	  };
	}
	export interface Behaviors {
	  [k: string]: {
	    order: number;
	    element: Behavior;
	  };
	}
	export interface Behavior {
	  conditions?: Conditions2;
	  visuals: Visuals;
	}
	export interface Conditions2 {
	  playing_animations?: PlayingAnimation;
	  images?: OtherAttachmentImage;
	}
	/**
	 * Animations that must be playing for this blink group to be active. If no animations are specified, the blink will always run.
	 */
	export interface PlayingAnimation {
	  track: AnimationTrack;
	  animations: AnimationNames;
	}
	export interface AnimationNames {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	/**
	 * Check whether another attachment slot is set to a certain image name.
	 */
	export interface OtherAttachmentImage {
	  images: Attachment;
	  slot: Slot;
	}
	/**
	 * If any of these images are set in the slot, this condition is met.
	 */
	export interface Attachment {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Visuals {
	  alpha?: Alpha1;
	  image?: Image;
	}
	/**
	 * If set, will override the alpha of the attachment slot.
	 */
	export interface Alpha1 {
	  inactive: Inactive;
	  active: Active;
	}
	/**
	 * Name of the attachment image to set in this slot. Set to '-1' to remove the attachment image from the slot.
	 */
	export interface Image {
	  inactive: Inactive1;
	  active: Active1;
	}
	export interface SpineTransitions {
	  [k: string]: {
	    order: number;
	    element: TransitionGroup;
	  };
	}
	export interface TransitionGroup {
	  destination: To;
	  source: From;
	  transition: Transition;
	  transition_reversed?: TransitionReversed;
	}
	export interface To {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface From {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Transition {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface TransitionReversed {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Insight8 {
	  artisan: Artisan2;
	  priors?: ProgressionPriors;
	  source?: UnlockedBy44;
	  uicon: Icon3;
	  recipe?: MaterialRequirements;
	  time_modifier?: TimeModifier;
	  description: InsightDescription;
	  wip?: WIP;
	  points_max: MaximumPoints;
	  name: InsightName;
	}
	export interface MaterialRequirements {
	  components: Ingredients7;
	  effort_modifier: EffortModifier7;
	}
	export interface Ingredients7 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface InsightDescription {
	  text: EnglishText60;
	  description?: TranslatorHelperText50;
	}
	export interface InsightName {
	  text: EnglishText61;
	  description?: TranslatorHelperText51;
	}
	export interface Schema1 {
	  title?: Name24;
	  _type: Type2;
	  description?: Description12;
	  wip?: WIP;
	}
	export interface PropertyDefinitions {
	  [k: string]: {
	    order?: number;
	    element?: Schema2;
	  };
	}
	/**
	 * Categories for things to be placed into in the World Editor.
	 */
	export interface EditorCategory {
	  color: Color6;
	  icon: Icon4;
	  order: Order2;
	  spawn_mode: SpawnMode;
	  wip?: WIP;
	  name: Name25;
	}
	export interface Color6 {
	  b: Blue26;
	  r: Red26;
	  g: Green26;
	}
	/**
	 * A piece of information that a world element can have stored on it.
	 */
	export interface Datafield4 {
	  editor_range?: EditorRange;
	  saves_to_world: SaveToBaseWorld;
	  saves_to_entity_changes: SaveToGameplay;
	  starting_values: FirstSpawnValues;
	  editable?: Editable;
	  buffer_type: DataType;
	  editor_uid_pool?: EditorUIDPool;
	  uicon?: UIIcon11;
	  respawn_values?: RespawnValues;
	  saves_to_inventory: SaveToInventory;
	  description: Description13;
	  wip?: WIP;
	  name: Name26;
	}
	/**
	 * The range of values that this data field can be set to via the Editor.
	 */
	export interface EditorRange {
	  value0: Min52;
	  value1: Max52;
	}
	/**
	 * These values are randomly chosen when the world element is spawned.
	 */
	export interface FirstSpawnValues {
	  [k: string]: {
	    order: number;
	    element: {
	      locked: boolean;
	      weight: number;
	      item: number;
	    };
	  };
	}
	/**
	 * If this element is destroyed and then respawns, you can optionally have this data field reset to different values.
	 */
	export interface RespawnValues {
	  [k: string]: {
	    order: number;
	    element: {
	      locked: boolean;
	      weight: number;
	      item: number;
	    };
	  };
	}
	/**
	 * A piece of protective equipment worn by the player.
	 */
	export interface Armor {
	  spine_name: SpineKeyword;
	  equipment_set?: EquipmentSet4;
	  reactions?: Reactions;
	  priors?: ProgressionPriors;
	  equipment_default_stats?: DefaultStats2;
	  inventory_sound: InventorySound2;
	  uicon: UIIcon12;
	  editor_group?: EditorGroup12;
	  recipe?: Recipe7;
	  type: ArmorType;
	  description: Description14;
	  wip?: WIP;
	  level: Level2;
	  name: Name27;
	}
	/**
	 * You can allocate stats for this item to have on it by default when obtained. This will not affect already-obtained items.
	 */
	export interface DefaultStats2 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Recipe7 {
	  components: Ingredients8;
	  station: Station7;
	  badge_cost_modifiers?: CostModifiedByResearch7;
	  source?: UnlockedBy45;
	  artisans?: ArtisansRequired7;
	  effort_modifier?: EffortModifier8;
	}
	export interface Ingredients8 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface CostModifiedByResearch7 {
	  [k: string]: {
	    order: number;
	    element: {
	      badge_id: ResearchNode13;
	      value: ChangePerPoint17;
	    };
	  };
	}
	export interface ArtisansRequired7 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Description14 {
	  text: EnglishText62;
	  description?: TranslatorHelperText52;
	}
	export interface Name27 {
	  text: EnglishText63;
	  description?: TranslatorHelperText53;
	}
	export interface PetEgg {
	  using_lighting: UseLighting5;
	  priors?: ProgressionPriors;
	  sprite: WorldSprite10;
	  light_emitter?: LightEmitter;
	  size: Size4;
	  uicon: UIIcon13;
	  editor_group?: EditorGroup13;
	  description: Description15;
	  wip?: WIP;
	  name: Name28;
	}
	export interface Size4 {
	  width: Width4;
	  height: Height4;
	}
	export interface Description15 {
	  text: EnglishText64;
	  description?: TranslatorHelperText54;
	}
	export interface Name28 {
	  text: EnglishText65;
	  description?: TranslatorHelperText55;
	}
	export interface ResistanceProfile {
	  resistances: Resistances;
	  wip?: WIP;
	  name: Name29;
	}
	/**
	 * Any damage types not listed will have a resistance of zero -- so the entity will take full damage from that type.
	 */
	export interface Resistances {
	  [k: string]: {
	    order: number;
	    element: {
	      key: DamageType2;
	      value: Resistance;
	    };
	  };
	}
	/**
	 * A pickupable item that is used for important story moments.
	 */
	export interface KeyItem {
	  spine_idle?: SpineIdle1;
	  grid_snapping?: GridSnapping1;
	  collection_sound?: CollectionSound1;
	  using_lighting?: UseLighting6;
	  priors?: ProgressionPriors;
	  sprite: WorldSprite11;
	  can_exist_on_floors?: CanExistOnFloors;
	  light_emitter?: LightEmitter;
	  size: Size5;
	  uicon: UIIcon14;
	  babbler?: Babbler27;
	  requires_land?: RequiresLand1;
	  scale_modifier?: ScaleModifier5;
	  level_viewer_ignore?: IgnoreInLevelViewer2;
	  editor_group?: EditorGroup14;
	  wip?: WIP;
	  name: Name30;
	}
	export interface Size5 {
	  width: Width5;
	  height: Height5;
	}
	export interface Name30 {
	  text: EnglishText66;
	  description?: TranslatorHelperText56;
	}
	/**
	 * A simple item that is used for crafting.
	 */
	export interface Component {
	  collection_sound?: CollectionSound2;
	  fishing?: Fishing;
	  using_lighting: UseLighting7;
	  priors?: ProgressionPriors;
	  bait_num_fish_boost?: BaitPower;
	  sprite: WorldSprite12;
	  light_emitter?: LightEmitter;
	  uicon?: UIIcon15;
	  editor_group?: EditorGroup15;
	  recipe?: Recipe8;
	  description?: Description16;
	  whopper_bait?: WhopperBait;
	  wip?: WIP;
	  material_tags?: Materials;
	  effort_modifier?: EffortModifier10;
	  name: Name31;
	}
	export interface Recipe8 {
	  components: Ingredients9;
	  output_quantity?: OutputQuantity6;
	  badge_output_modifiers?: OutputModifiedByResearch6;
	  station: Station8;
	  badge_cost_modifiers?: CostModifiedByResearch8;
	  source?: UnlockedBy46;
	  artisans?: ArtisansRequired8;
	  effort_modifier?: EffortModifier9;
	}
	export interface Ingredients9 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface OutputModifiedByResearch6 {
	  [k: string]: {
	    order: number;
	    element: {
	      badge_id: ResearchNode14;
	      style: Style7;
	      value: ChangePerPoint18;
	    };
	  };
	}
	export interface CostModifiedByResearch8 {
	  [k: string]: {
	    order: number;
	    element: {
	      badge_id: ResearchNode15;
	      value: ChangePerPoint19;
	    };
	  };
	}
	export interface ArtisansRequired8 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Description16 {
	  text: EnglishText67;
	  description?: TranslatorHelperText57;
	}
	/**
	 * What is this thing made of? This is used for categorization and can otherwise be used by abilities, fulfillments, etc... to broadly categorize interactions.
	 */
	export interface Materials {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Name31 {
	  text: EnglishText68;
	  description?: TranslatorHelperText58;
	}
	export interface EquipmentSet5 {
	  color: Color7;
	  bonuses: Bonuses;
	  wip?: WIP;
	  name: Name32;
	}
	/**
	 * What color the set's name and item borders should be displayed on the UI.
	 */
	export interface Color7 {
	  b: Blue27;
	  r: Red27;
	  g: Green27;
	}
	export interface Bonuses {
	  [k: string]: {
	    order: number;
	    element: SetBonus;
	  };
	}
	export interface SetBonus {
	  num_pieces: Pieces;
	  reactions?: Reactions;
	  stats?: Stats;
	}
	export interface Stats {
	  [k: string]: {
	    order: number;
	    element: {
	      amount: Amount1;
	      stat: Stat4;
	    };
	  };
	}
	export interface Name32 {
	  text: EnglishText69;
	  description?: TranslatorHelperText59;
	}
	export interface Storyline {
	  icon?: Icon5;
	  description?: Description17;
	  wip?: WIP;
	  name: Name33;
	}
	/**
	 * If set, this description will appear at the top of the Storyline when it is being inspected.
	 */
	export interface Description17 {
	  text: EnglishText70;
	  description?: TranslatorHelperText60;
	}
	export interface Name33 {
	  text: EnglishText71;
	  description?: TranslatorHelperText61;
	}
	/**
	 * A basic object that can be used for environmental storytelling.
	 */
	export interface EnvironmentalObject {
	  invisible?: Invisible;
	  death_sounds?: DestructionSounds1;
	  hide_under_roof?: HideUnderRoof;
	  object?: Object5;
	  spine_idle?: SpineIdle2;
	  grid_snapping?: GridSnapping2;
	  blocks_abilities?: BlocksAbilities;
	  using_lighting: UseLighting8;
	  reactions?: Reactions;
	  sprite: WorldSprite13;
	  worldmap_tile_color?: WorldMapTileColor;
	  data_fields?: DataFields1;
	  underfoot: Underfoot1;
	  light_emitter?: LightEmitter;
	  relative_level?: RelativeLevel;
	  uicon?: UIIcon16;
	  babbler?: Babbler28;
	  requires_land?: RequiresLand2;
	  randomized_subimages?: EditableSubimages;
	  scale_modifier?: ScaleModifier6;
	  states?: EntityStates;
	  hitbox: Hitbox;
	  random_scaling?: RandomScalingMinimum1;
	  editor_group?: EditorGroup16;
	  shadow?: Shadow;
	  description?: Description18;
	  flippable: Flippable4;
	  wip?: WIP;
	  level?: Level3;
	  particle_emitters?: ParticleEmitters1;
	  name: Name35;
	}
	/**
	 * Sound effects to play when this thing is destroyed.
	 */
	export interface DestructionSounds1 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	/**
	 * If set, this item will be drawn on the world map as a colored tile.
	 */
	export interface WorldMapTileColor {
	  b: Blue28;
	  r: Red28;
	  g: Green28;
	}
	/**
	 * Attaching data fields to this world element will make them readable by other game mechanics/elements. Can be used to store custom data on a world element.
	 */
	export interface DataFields1 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	/**
	 * Define the animations and logic for how this entity enters and exits various states. These states can be interacted with via the Reactions system.
	 */
	export interface EntityStates {
	  priorities?: StatePriorities;
	  states: StateDefinitions;
	}
	/**
	 * On first spawn and on state refresh, this priority list will be checked. The first priority group whose conditions are met will be chosen. If no conditions are met, the Default State will be used.
	 */
	export interface StatePriorities {
	  [k: string]: {
	    order: number;
	    element: StatePriorityGroup;
	  };
	}
	export interface StatePriorityGroup {
	  conditions?: PriorityGroupConditions;
	  states: States;
	  name: PriorityGroupNameInternal;
	}
	/**
	 * If these conditions are met, then one of the states in this priority group will be chosen.
	 */
	export interface PriorityGroupConditions {
	  conditions: Conditions3;
	  require_all_conditions: RequireAllConditions2;
	}
	export interface Conditions3 {
	  [k: string]: {
	    order: number;
	    element: Condition3;
	  };
	}
	/**
	 * Which abilities are we evaluating?
	 */
	export interface Abilities4 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface Evaluation4 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value0?: string;
	  value1?: number;
	}
	/**
	 * The 'minutes since timestamp' value can be modified up or down based on an Insight.
	 */
	export interface InsightModifier2 {
	  insight?: Insight9;
	  amount?: ChangePerPoint20;
	}
	/**
	 * If set, this description will appear on the Research Node to explain what it is unlocking.
	 */
	export interface InsightTooltip2 {
	  text: EnglishText72;
	  description?: TranslatorHelperText62;
	}
	export interface DistanceRequiredGridSpaces2 {
	  value0?: Min53;
	  value1?: Max53;
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface Targets3 {
	  [k: string]: {
	    order?: number;
	    element?: Filter24;
	  };
	}
	export interface Filter24 {
	  buffs?: Buffs51;
	  exclude?: Exclude24;
	  require_all_tags?: RequireAllTags23;
	  combatants_only?: Combatants23;
	  datafield_evaluations?: DatafieldEvaluations23;
	  items?: Items30;
	}
	export interface Buffs51 {
	  buffs: Buffs52;
	  require_all: RequireAll29;
	  stacks?: Stacks29;
	}
	export interface Buffs52 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks29 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity40;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations23 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items30 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface NumberOfTargets4 {
	  comparison?: Evaluation5;
	  quantity?: Quantity41;
	}
	export interface HealthEvaluation2 {
	  hp_percentage?: number;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Items31 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The condition will be met if the player is wielding any of these items.
	 */
	export interface Items32 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, then targets other than yourself will be evaluated.
	 */
	export interface NumberOfTargets5 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity42;
	}
	export interface Buffs53 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface BuffTargetFilter2 {
	  [k: string]: {
	    order?: number;
	    element?: Filter25;
	  };
	}
	export interface Filter25 {
	  buffs?: Buffs54;
	  exclude?: Exclude25;
	  require_all_tags?: RequireAllTags24;
	  combatants_only?: Combatants24;
	  datafield_evaluations?: DatafieldEvaluations24;
	  items?: Items33;
	}
	export interface Buffs54 {
	  buffs: Buffs55;
	  require_all: RequireAll32;
	  stacks?: Stacks30;
	}
	export interface Buffs55 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks30 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity43;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations24 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items33 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface Stacks31 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity44;
	}
	/**
	 * How close or far (in grid spaces) the entities must be to be considered for this condition.
	 */
	export interface BuffTargetRange2 {
	  value0?: Min54;
	  value1?: Max54;
	}
	export interface NumberSummoned2 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity45;
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface SummonedEntitiesFilter2 {
	  [k: string]: {
	    order?: number;
	    element?: Filter26;
	  };
	}
	export interface Filter26 {
	  buffs?: Buffs56;
	  exclude?: Exclude26;
	  require_all_tags?: RequireAllTags25;
	  combatants_only?: Combatants25;
	  datafield_evaluations?: DatafieldEvaluations25;
	  items?: Items34;
	}
	export interface Buffs56 {
	  buffs: Buffs57;
	  require_all: RequireAll33;
	  stacks?: Stacks32;
	}
	export interface Buffs57 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks32 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity46;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations25 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items34 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * One of these states will be chosen at random.
	 */
	export interface States {
	  [k: string]: {
	    order: number;
	    element: State1;
	  };
	}
	/**
	 * The first state in this list will be the Default State.
	 */
	export interface StateDefinitions {
	  [k: string]: {
	    order: number;
	    element: State2;
	  };
	}
	/**
	 * The first state in the list will be the starting state when this first spawns.
	 */
	export interface State2 {
	  duration: Duration;
	  next_state?: NextStates;
	  animations?: Animations;
	  name: StateNameInternal;
	}
	export interface TimeSeconds {
	  value0?: Min55;
	  value1?: Max55;
	}
	export interface NextStates {
	  [k: string]: {
	    order: number;
	    element: NextStatePriorityGroup;
	  };
	}
	export interface NextStatePriorityGroup {
	  conditions?: PriorityGroupConditions1;
	  states: States1;
	}
	/**
	 * If these conditions are met, then one of the states in this priority group will be chosen.
	 */
	export interface PriorityGroupConditions1 {
	  conditions: Conditions4;
	  require_all_conditions: RequireAllConditions3;
	}
	export interface Conditions4 {
	  [k: string]: {
	    order: number;
	    element: Condition4;
	  };
	}
	/**
	 * Which abilities are we evaluating?
	 */
	export interface Abilities5 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface Evaluation6 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value0?: string;
	  value1?: number;
	}
	/**
	 * The 'minutes since timestamp' value can be modified up or down based on an Insight.
	 */
	export interface InsightModifier3 {
	  insight?: Insight11;
	  amount?: ChangePerPoint21;
	}
	/**
	 * If set, this description will appear on the Research Node to explain what it is unlocking.
	 */
	export interface InsightTooltip3 {
	  text: EnglishText73;
	  description?: TranslatorHelperText63;
	}
	export interface DistanceRequiredGridSpaces3 {
	  value0?: Min56;
	  value1?: Max56;
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface Targets4 {
	  [k: string]: {
	    order?: number;
	    element?: Filter27;
	  };
	}
	export interface Filter27 {
	  buffs?: Buffs58;
	  exclude?: Exclude27;
	  require_all_tags?: RequireAllTags26;
	  combatants_only?: Combatants26;
	  datafield_evaluations?: DatafieldEvaluations26;
	  items?: Items35;
	}
	export interface Buffs58 {
	  buffs: Buffs59;
	  require_all: RequireAll34;
	  stacks?: Stacks33;
	}
	export interface Buffs59 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks33 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity47;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations26 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items35 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface NumberOfTargets6 {
	  comparison?: Evaluation7;
	  quantity?: Quantity48;
	}
	export interface HealthEvaluation3 {
	  hp_percentage?: number;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Items36 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The condition will be met if the player is wielding any of these items.
	 */
	export interface Items37 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, then targets other than yourself will be evaluated.
	 */
	export interface NumberOfTargets7 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity49;
	}
	export interface Buffs60 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface BuffTargetFilter3 {
	  [k: string]: {
	    order?: number;
	    element?: Filter28;
	  };
	}
	export interface Filter28 {
	  buffs?: Buffs61;
	  exclude?: Exclude28;
	  require_all_tags?: RequireAllTags27;
	  combatants_only?: Combatants27;
	  datafield_evaluations?: DatafieldEvaluations27;
	  items?: Items38;
	}
	export interface Buffs61 {
	  buffs: Buffs62;
	  require_all: RequireAll37;
	  stacks?: Stacks34;
	}
	export interface Buffs62 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks34 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity50;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations27 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items38 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface Stacks35 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity51;
	}
	/**
	 * How close or far (in grid spaces) the entities must be to be considered for this condition.
	 */
	export interface BuffTargetRange3 {
	  value0?: Min57;
	  value1?: Max57;
	}
	export interface NumberSummoned3 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity52;
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface SummonedEntitiesFilter3 {
	  [k: string]: {
	    order?: number;
	    element?: Filter29;
	  };
	}
	export interface Filter29 {
	  buffs?: Buffs63;
	  exclude?: Exclude29;
	  require_all_tags?: RequireAllTags28;
	  combatants_only?: Combatants28;
	  datafield_evaluations?: DatafieldEvaluations28;
	  items?: Items39;
	}
	export interface Buffs63 {
	  buffs: Buffs64;
	  require_all: RequireAll38;
	  stacks?: Stacks36;
	}
	export interface Buffs64 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks36 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity53;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations28 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items39 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * One of these states will be chosen at random.
	 */
	export interface States1 {
	  [k: string]: {
	    order: number;
	    element: State3;
	  };
	}
	/**
	 * All of these animations will play. Unused tracks will have their animations cleared.
	 */
	export interface Animations {
	  [k: string]: {
	    order: number;
	    element: SpineAnimation;
	  };
	}
	export interface SpineAnimation {
	  speed?: Speed11;
	  animation_name: Name34;
	  track?: Track;
	  randomized_start?: RandomizedStart;
	  looping: Looping3;
	}
	export interface Speed11 {
	  value0: Min58;
	  value1: Max58;
	}
	export interface Description18 {
	  text: EnglishText74;
	  description?: TranslatorHelperText64;
	}
	export interface ParticleEmitters1 {
	  [k: string]: {
	    order: number;
	    element: ParticleEmitter1;
	  };
	}
	export interface ParticleEmitter1 {
	  y_offset: YOffset7;
	  behind?: Behind1;
	  emitter_scale?: EmitterScale4;
	  spine_bone?: SpineBone1;
	  particle_system: ParticleSystem5;
	  x_offset: XOffset1;
	  states?: RequiredStates1;
	}
	/**
	 * If set, the particle system will only emit if the object is in one of these states
	 */
	export interface RequiredStates1 {
	  [k: string]: {
	    order: number;
	    element: State4;
	  };
	}
	export interface Name35 {
	  text: EnglishText75;
	  description?: TranslatorHelperText65;
	}
	export interface Quest {
	  marker_world_text?: QuestMarkerWorldText;
	  clues?: Clues;
	  quest_end_requirements?: Requirements4;
	  quest_start_log?: QuestLogSummary;
	  pet_quest?: PetQuest;
	  priors?: ProgressionPriors;
	  order: Order3;
	  quest_start_moments?: QuestStartMoments;
	  item_highlights?: WorldElementHighlights;
	  map_markers?: MapMarkers;
	  objectives?: Objectives;
	  quest_start_requirements?: Requirements6;
	  quest_end_moments?: QuestEndMoments;
	  storyline: Storyline1;
	  quest_giver?: QuestGiver;
	  quest_receiver?: QuestReceiver;
	  ignore_in_progression_map?: IgnoreInProgressionMap;
	  wip?: WIP;
	  name: Name36;
	}
	/**
	 * You can display text in the world while this quest is active.
	 */
	export interface QuestMarkerWorldText {
	  [k: string]: {
	    order: number;
	    element: QuestMarkerText;
	  };
	}
	export interface QuestMarkerText {
	  marker: QuestMarker;
	  color?: TextColor;
	  text: Text;
	  sprite?: Sprite3;
	  proximity?: Proximity;
	}
	export interface TextColor {
	  b: Blue29;
	  r: Red29;
	  g: Green29;
	}
	export interface Text {
	  text: EnglishText76;
	  description?: TranslatorHelperText66;
	}
	/**
	 * Things characters can say about this quest while the quest is active.
	 */
	export interface Clues {
	  [k: string]: {
	    order: number;
	    element: {
	      phrases: Phrases;
	      speaker: Speaker1;
	    };
	  };
	}
	export interface Phrases {
	  [k: string]: {
	    order: number;
	    element: Clue;
	  };
	}
	export interface Clue {
	  requirements?: Requirements3;
	  phrase: {
	    text: Text1;
	    emoji?: Emoji3;
	  };
	}
	/**
	 * Conditions that must be true for the quest to proceed.
	 */
	export interface Requirements3 {
	  [k: string]: {
	    order: number;
	    element: Requirement1;
	  };
	}
	export interface Text1 {
	  text: EnglishText77;
	}
	/**
	 * Conditions that must be true for the quest to proceed.
	 */
	export interface Requirements4 {
	  [k: string]: {
	    order: number;
	    element: Requirement1;
	  };
	}
	export interface QuestLogSummary {
	  text: EnglishText78;
	}
	/**
	 * If set, this quest will be considered a 'pet quest'. Progress toward this quest will only occur if you have the specified pet with you.
	 */
	export interface PetQuest {
	  pet_stage: PetStage2;
	  pet: Pet3;
	  name: ShortName;
	}
	/**
	 * The name of this quest as displayed in the pet UI. Should be quite short.
	 */
	export interface ShortName {
	  text: EnglishText79;
	}
	/**
	 * A sequence of narrative events to tell the story of this quest.
	 */
	export interface QuestStartMoments {
	  [k: string]: {
	    order: number;
	    element: QuestMoment;
	  };
	}
	/**
	 * Characters or actors can convey emojis.
	 */
	export interface Emotes1 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      key?: Character1;
	      value?: Emoji5;
	    };
	  };
	}
	export interface ItemsToGain1 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      key?: string;
	      value?: Quantity54;
	    };
	  };
	}
	/**
	 * Characters can throw items out onto the ground.
	 */
	export interface Drops {
	  [k: string]: {
	    order?: number;
	    element?: {
	      dropper?: Dropper;
	      items?: ItemsToDrop;
	    };
	  };
	}
	export interface ItemsToDrop {
	  [k: string]: {
	    order?: number;
	    element?: {
	      item_id?: Item7;
	      quantity?: Quantity55;
	    };
	  };
	}
	/**
	 * Items to have a glow underneath them while this quest is active.
	 */
	export interface WorldElementHighlights {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	/**
	 * You can optionally have certain Quest Markers display on the world map while this quest is active.
	 */
	export interface MapMarkers {
	  [k: string]: {
	    order: number;
	    element: MapMarker;
	  };
	}
	export interface MapMarker {
	  marker: QuestMarker1;
	  text: TextForWorldMap;
	  radius: RadiusGridSpaces;
	}
	export interface TextForWorldMap {
	  text: EnglishText81;
	}
	export interface Objectives {
	  [k: string]: {
	    order: number;
	    element: Objective;
	  };
	}
	export interface Items40 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      key?: string;
	      value?: Quantity56;
	    };
	  };
	}
	/**
	 * Progress toward this objective will only count if these requirements are met at the time of using the ability.
	 */
	export interface AbilityUsageRequirements {
	  [k: string]: {
	    order?: number;
	    element?: AbilityUsageRequirement;
	  };
	}
	/**
	 * The player must have at least these quantities of these items.
	 */
	export interface Items41 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      key?: string;
	      value?: Quantity57;
	    };
	  };
	}
	export interface PetStage3 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  stage?: "Egg" | "Baby" | "Adult" | "Embiggened";
	}
	/**
	 * The ability must be used on targets that match these filters to count towards the objective.
	 */
	export interface TargetS {
	  [k: string]: {
	    order?: number;
	    element?: Filter30;
	  };
	}
	export interface Filter30 {
	  buffs?: Buffs65;
	  exclude?: Exclude30;
	  require_all_tags?: RequireAllTags29;
	  combatants_only?: Combatants29;
	  datafield_evaluations?: DatafieldEvaluations29;
	  items?: Items42;
	}
	export interface Buffs65 {
	  buffs: Buffs66;
	  require_all: RequireAll39;
	  stacks?: Stacks37;
	}
	export interface Buffs66 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks37 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity58;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations29 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items42 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Destruction of targets that match these filters will count towards the objective.
	 */
	export interface TargetS1 {
	  [k: string]: {
	    order?: number;
	    element?: Filter31;
	  };
	}
	export interface Filter31 {
	  buffs?: Buffs67;
	  exclude?: Exclude31;
	  require_all_tags?: RequireAllTags30;
	  combatants_only?: Combatants30;
	  datafield_evaluations?: DatafieldEvaluations30;
	  items?: Items43;
	}
	export interface Buffs67 {
	  buffs: Buffs68;
	  require_all: RequireAll40;
	  stacks?: Stacks38;
	}
	export interface Buffs68 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks38 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity59;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations30 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items43 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Progress toward this objective will only count if these requirements are met at the time of destruction.
	 */
	export interface DestructionRequirements {
	  [k: string]: {
	    order?: number;
	    element?: DestructionRequirement;
	  };
	}
	/**
	 * The player must have at least these quantities of these items.
	 */
	export interface Items44 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      key?: string;
	      value?: Quantity61;
	    };
	  };
	}
	export interface PetStage4 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  stage?: "Egg" | "Baby" | "Adult" | "Embiggened";
	}
	/**
	 * Any of these items will count toward this consumption objective.
	 */
	export interface ItemsToConsume {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * You can require this item be placed within a certain distance of a quest marker.
	 */
	export interface QuestMarkerProximity {
	  proximity?: ProximityGridSpaces;
	  quest_marker?: string;
	}
	export interface ItemsToDrop1 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      key?: string;
	      value?: Quantity65;
	    };
	  };
	}
	/**
	 * You can optionally force certain things in the world to drop the items in this quest objective while this quest is active.
	 */
	export interface CustomLootDrops {
	  [k: string]: {
	    order?: number;
	    element?: CustomLoot;
	  };
	}
	export interface CustomLoot {
	  loot?: LootGroup;
	  sources?: Sources;
	}
	export interface LootGroup {
	  drop_chance: DropChance;
	  time_requirement?: TimeOfDay;
	  item_tags_used?: ItemTagsUsed;
	  item_ids_used?: ItemsUsed3;
	  num_drops?: DropQuantity;
	  trigger: Trigger1;
	  areas?: Areas;
	}
	/**
	 * The kinds of items required to be used on this for loot to drop.
	 */
	export interface ItemTagsUsed {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Specific items required to be used on this for loot to drop.
	 */
	export interface ItemsUsed3 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * A random number of items will drop in this range. Once the player has acquired the req
	 */
	export interface DropQuantity {
	  value0?: Min59;
	  value1?: Max59;
	}
	/**
	 * If set, the loot will only drop from something within the listed areas.
	 */
	export interface Areas {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * What's going to drop this loot?
	 */
	export interface Sources {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The player must interact with a target that matches this filter.
	 */
	export interface TargetS2 {
	  [k: string]: {
	    order?: number;
	    element?: Filter32;
	  };
	}
	export interface Filter32 {
	  buffs?: Buffs69;
	  exclude?: Exclude32;
	  require_all_tags?: RequireAllTags31;
	  combatants_only?: Combatants31;
	  datafield_evaluations?: DatafieldEvaluations31;
	  items?: Items45;
	}
	export interface Buffs69 {
	  buffs: Buffs70;
	  require_all: RequireAll41;
	  stacks?: Stacks39;
	}
	export interface Buffs70 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks39 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity66;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations31 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items45 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Conditions that must be true for the quest to proceed.
	 */
	export interface Requirements5 {
	  [k: string]: {
	    order: number;
	    element: Requirement1;
	  };
	}
	export interface InteractionOutcomes {
	  [k: string]: {
	    order?: number;
	    element?: QuestInteractionOutcome;
	  };
	}
	/**
	 * The text that will appear when the player interacts with the target.
	 */
	export interface InteractionText {
	  text: EnglishText82;
	}
	/**
	 * The color of the progress bar that will appear when the player interacts with the target.
	 */
	export interface InteractionBarColor {
	  b?: Blue30;
	  r?: Red30;
	  g?: Green30;
	}
	/**
	 * Conditions that must be true for the quest to proceed.
	 */
	export interface Requirements6 {
	  [k: string]: {
	    order: number;
	    element: Requirement1;
	  };
	}
	/**
	 * A sequence of narrative events to tell the story of this quest.
	 */
	export interface QuestEndMoments {
	  [k: string]: {
	    order: number;
	    element: QuestMoment1;
	  };
	}
	/**
	 * Characters or actors can convey emojis.
	 */
	export interface Emotes2 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      key?: Character2;
	      value?: Emoji7;
	    };
	  };
	}
	export interface ItemsToGain2 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      key?: string;
	      value?: Quantity69;
	    };
	  };
	}
	/**
	 * Characters can throw items out onto the ground.
	 */
	export interface Drops1 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      dropper?: Dropper1;
	      items?: ItemsToDrop2;
	    };
	  };
	}
	export interface ItemsToDrop2 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      item_id?: Item12;
	      quantity?: Quantity70;
	    };
	  };
	}
	/**
	 * Who/what triggers the quest. If no giver is present, the quest will automatically trigger once requirements are met.
	 */
	export interface QuestGiver {
	  same_room?: RequireSameRoom;
	  show_on_map?: ShowOnMap;
	  interaction_target?: AutomaticInteractionTarget;
	  item: Initiator;
	  proximity?: AutomaticInteractionProximity;
	}
	/**
	 * Who/what triggers the quest. If no giver is present, the quest will automatically trigger once requirements are met.
	 */
	export interface QuestReceiver {
	  same_room?: RequireSameRoom1;
	  show_on_map?: ShowOnMap1;
	  interaction_target?: AutomaticInteractionTarget1;
	  item: Initiator1;
	  proximity?: AutomaticInteractionProximity1;
	}
	/**
	 * A region of the world.
	 */
	export interface Area3 {
	  indoor_music?: IndoorMusic;
	  show_name: ShowNameUponEntering;
	  outdoor_music_day?: OutdoorMusicDay;
	  buildmode_allowed?: BuildModeAllowed;
	  name_color?: NameColor1;
	  ambient_day?: AmbientDayTrack;
	  parent?: ParentArea;
	  discoverable?: Discoverable;
	  play_ambience: PlayAmbience;
	  editor_group?: EditorGroup17;
	  outdoor_music_night?: OutdoorMusicNight;
	  color_grading?: ColorGradingProfile;
	  wip?: WIP;
	  ambient_night?: AmbientNightTrack;
	  name: Name37;
	}
	/**
	 * When the name is displayed, what color the text should be.
	 */
	export interface NameColor1 {
	  b: Blue31;
	  r: Red31;
	  g: Green31;
	}
	export interface Name37 {
	  text: EnglishText84;
	  description?: TranslatorHelperText67;
	}
	export interface Buff4 {
	  application_sound?: ApplicationSound;
	  swing_sound_overlay?: SwingSoundOverlay;
	  color: Color8;
	  looping_spine_visual?: LoopingSpineVisual;
	  buff_type: Type3;
	  drop_color?: DropShadowColor;
	  duration?: DurationSeconds;
	  max_stacks: MaximumStacks;
	  application_spine?: ApplicationSpineSprite;
	  reactions?: Reactions;
	  stats?: Stats1;
	  effects?: Effects1;
	  show_description_only?: OnlyShowDescription;
	  expires_on_death: ExpiresUponDeath;
	  replace_oldest?: ReplaceOldest;
	  expiration_sound?: ExpirationSound;
	  max_instances?: MaximumInstances;
	  custom_visuals_object?: CustomVFXObject;
	  timer_behavior?: TimerRefreshBehavior;
	  uicon: UIIcon17;
	  positive: Positive;
	  prevents_negative_buffs?: PreventsNegativeBuffs;
	  reapplication_sound?: ReapplicationSound;
	  boss_stun?: BossStun;
	  description?: Description19;
	  wip?: WIP;
	  stun?: Stun;
	  particle_emitters?: ParticleEmitters2;
	  show_damage_instead_of_stacks?: ShowDamageInsteadOfStacks;
	  name: Name38;
	}
	export interface Color8 {
	  b: Blue32;
	  r: Red32;
	  g: Green32;
	}
	/**
	 * This will render a looping spine animation attached to the buff target for the duration of the buff.
	 */
	export interface LoopingSpineVisual {
	  animation: LoopingAnimationName;
	  z_anchor?: VerticalPosition;
	  sprite: SpineSprite;
	  z_offset?: ZOffsetPixels;
	}
	export interface DropShadowColor {
	  b: Blue33;
	  r: Red33;
	  g: Green33;
	}
	/**
	 * If set, this buff can modify the stats of the entity for the duration of its application.
	 */
	export interface Stats1 {
	  [k: string]: {
	    order: number;
	    element: StatBuff;
	  };
	}
	export interface StatBuff {
	  modifier_style: ModifierStyle1;
	  amount: Amount2;
	  otherstat_boosts?: BoostedByOtherStats;
	  stat: Stat6;
	  multiply_by_stacks: MultiplyByStacks1;
	}
	/**
	 * You can choose other stats to boost the gains of this stat.
	 */
	export interface BoostedByOtherStats {
	  [k: string]: {
	    order: number;
	    element: {
	      stat_source?: StatSource;
	      modifier_style: ModifierStyle2;
	      stat: Stat5;
	      multiply_by_stacks: MultiplyByStacks;
	    };
	  };
	}
	export interface Effects1 {
	  [k: string]: {
	    order: number;
	    element: Effect;
	  };
	}
	export interface Bursts2 {
	  [k: string]: {
	    order?: number;
	    element?: Burst2;
	  };
	}
	export interface Burst2 {
	  spawn_radius: SpawnRadiusPixels2;
	  outward_blast: BlastOutward2;
	  direction?: BurstDirection2;
	  num_particles: NumberOfParticles2;
	  perspective: Perspective2;
	  radius_as_grid?: SpawnRadiusAsGrid2;
	  scaled_radius?: ScaledSpawnRadius2;
	  spawn_at_ground?: SpawnOnGround2;
	  z_offset?: ZOffset8;
	}
	/**
	 * How far from the source the particles will spawn.
	 */
	export interface SpawnRadiusPixels2 {
	  value0?: Min60;
	  value1?: Max60;
	}
	export interface BurstDirection2 {
	  value0?: Min61;
	  value1?: Max61;
	}
	export interface NumberOfParticles2 {
	  value0?: Min62;
	  value1?: Max62;
	}
	/**
	 * A description of this buff to show on item tooltips.
	 */
	export interface Description19 {
	  text: EnglishText85;
	  description?: TranslatorHelperText68;
	}
	export interface ParticleEmitters2 {
	  [k: string]: {
	    order: number;
	    element: {
	      particle: Particle;
	      outward_blast: BlastOutward3;
	      interval: EmitIntervalSeconds;
	      num_particles: NumberOfParticles3;
	      scale: EmitterScale5;
	      local_particles: Local;
	    };
	  };
	}
	/**
	 * How many particles to emit with each interval.
	 */
	export interface NumberOfParticles3 {
	  value0: Min63;
	  value1: Max63;
	}
	export interface Name38 {
	  text: EnglishText86;
	  description?: TranslatorHelperText69;
	}
	/**
	 * A group of creature types that consider each other to be friendly and part of the same species. Creatures in a family won't damage each other.
	 */
	export interface CreatureFamily {
	  icon: IconInternal;
	  wip?: WIP;
	  name: FamilyNameInternal;
	}
	export interface GardenBed {
	  undersprite?: UnderSprite2;
	  planted_sprites: PlantedSprites;
	  sprite: MainSprite2;
	  map_color: MapColor2;
	  uicon: Icon6;
	  editor_group?: EditorGroup18;
	  placement_sound?: PlacementSound5;
	  recipe?: Recipe9;
	  footstep_sound: FootstepSound2;
	  description?: Description20;
	  flippable: Flippable5;
	  wip?: WIP;
	  name: Name39;
	  dapples?: SunlightDappling2;
	}
	/**
	 * Each sprite in this list will be for a larger plot. E.g. the first entry will be 1x1, the second entry will be 2x2, etc...
	 */
	export interface PlantedSprites {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	/**
	 * The color to draw this tile on the map.
	 */
	export interface MapColor2 {
	  b: Blue34;
	  r: Red34;
	  g: Green34;
	}
	export interface Recipe9 {
	  components: Ingredients10;
	  output_quantity?: OutputQuantity7;
	  badge_output_modifiers?: OutputModifiedByResearch7;
	  station: Station9;
	  badge_cost_modifiers?: CostModifiedByResearch9;
	  source?: UnlockedBy47;
	  artisans?: ArtisansRequired9;
	  effort_modifier?: EffortModifier11;
	}
	export interface Ingredients10 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface OutputModifiedByResearch7 {
	  [k: string]: {
	    order: number;
	    element: {
	      badge_id: ResearchNode16;
	      style: Style10;
	      value: ChangePerPoint22;
	    };
	  };
	}
	export interface CostModifiedByResearch9 {
	  [k: string]: {
	    order: number;
	    element: {
	      badge_id: ResearchNode17;
	      value: ChangePerPoint23;
	    };
	  };
	}
	export interface ArtisansRequired9 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Description20 {
	  text: EnglishText87;
	  description?: TranslatorHelperText70;
	}
	export interface Name39 {
	  text: EnglishText88;
	  description?: TranslatorHelperText71;
	}
	export interface SunlightDappling2 {
	  dapple_chance: SpawnChance2;
	  dapple_colors: Colors3;
	}
	/**
	 * The color to use for the sunlight dapples.
	 */
	export interface Colors3 {
	  [k: string]: {
	    order: number;
	    element: {
	      b: Blue35;
	      r: Red35;
	      g: Green35;
	    };
	  };
	}
	export interface RecipeCategory {
	  color: Color9;
	  icon: Icon7;
	  unselected_color: UnselectedColor;
	  order: Order4;
	  wip?: WIP;
	  name: Name40;
	}
	export interface Color9 {
	  b: Blue36;
	  r: Red36;
	  g: Green36;
	}
	export interface UnselectedColor {
	  b: Blue37;
	  r: Red37;
	  g: Green37;
	}
	export interface CameraAnchor {
	  zoom?: Zoom;
	  bias: BiasAmount;
	  radius: RadiusGrid;
	  wip?: WIP;
	  name: NameInternal8;
	}
	export interface Ability10 {
	  buff_required?: BuffRequirement;
	  start_cast_sound?: StartCastSound;
	  usable_in_combat?: UsableInCombat;
	  cooldown?: Cooldown;
	  targeting_range?: TargetingRangeInGridSpaces1;
	  effective_range?: EffectiveRange;
	  tooltip_description?: TooltipDescription1;
	  cast_duration: CastDurationSeconds;
	  uicon?: UIIcon18;
	  telegraph_scale_modifiers?: TelegraphScaleModifiers;
	  preview_sprite?: PreviewSprite;
	  hotbar_number?: HotbarBuffNumber;
	  juke_charges_required?: JukeChargesRequired;
	  single_targeting?: SingleTargetingRules;
	  action_groups?: ActionGroups;
	  charges?: Charges1;
	  wip?: WIP;
	  cast_animations?: CastingAnimations;
	  name: Name41;
	}
	/**
	 * The caster must have this buff in order to cast this ability.
	 */
	export interface BuffRequirement {
	  buff: Buff5;
	  stacks: Stacks40;
	}
	export interface Cooldown {
	  seconds: CooldownSeconds1;
	  cooldown_speed_modifier?: CooldownSpeedStatModifiers;
	  trigger_percentage: CooldownTriggerPercentage;
	}
	export interface CooldownSpeedStatModifiers {
	  [k: string]: {
	    order: number;
	    element: Modifier3;
	  };
	}
	export interface Modifier3 {
	  type: ModifierType2;
	  stat: Stat7;
	}
	/**
	 * When targeting a location, how far (or close) this ability can target.
	 */
	export interface TargetingRangeInGridSpaces1 {
	  value0: Min64;
	  value1: Max64;
	}
	/**
	 * This is used for AI (such as creatures) to determine how close or far away to get to use the ability. It is relative to the minimum and maximum ranges established in the ability's targeting and telegraph information.
	 */
	export interface EffectiveRange {
	  value0: Min65;
	  value1: Max65;
	}
	/**
	 * Describe what this ability does. This is useful for conveying information that the auto-generated tooltip can't provide.
	 */
	export interface TooltipDescription1 {
	  text: EnglishText89;
	}
	/**
	 * If set, and this ability has telegraphs, the telegraphs can be grown or shrunk based on game conditions.
	 */
	export interface TelegraphScaleModifiers {
	  [k: string]: {
	    order: number;
	    element: {
	      conditions: Conditions5;
	      require_all_conditions: RequireAllConditions4;
	      multiplier: Multiplier;
	    };
	  };
	}
	/**
	 * What must be true for this scale modifier to exist.
	 */
	export interface Conditions5 {
	  [k: string]: {
	    order: number;
	    element: Condition5;
	  };
	}
	/**
	 * If set, this description will appear on the Research Node to explain what it is unlocking.
	 */
	export interface InsightTooltip4 {
	  text: EnglishText90;
	  description?: TranslatorHelperText72;
	}
	/**
	 * If set, this ability will show this number on the hotbar instead of charges or ammunition.
	 */
	export interface HotbarBuffNumber {
	  number_type: Type4;
	  buff: Buff6;
	  multiplier: Multiplier1;
	}
	/**
	 * If set, this ability will only be castable if the caster has a specific target that meets these rules.
	 */
	export interface SingleTargetingRules {
	  range: RangeInGridSpaces;
	  filter?: SingleTargetFiltering;
	}
	/**
	 * The target must meet these range requirements for the ability to be cast (and the actions to be performed.)
	 */
	export interface RangeInGridSpaces {
	  value0: Min66;
	  value1: Max66;
	}
	/**
	 * The ability will only be castable on targets that match these filters.
	 */
	export interface SingleTargetFiltering {
	  [k: string]: {
	    order: number;
	    element: Filter33;
	  };
	}
	export interface Filter33 {
	  buffs?: Buffs71;
	  exclude?: Exclude33;
	  require_all_tags?: RequireAllTags32;
	  combatants_only?: Combatants32;
	  datafield_evaluations?: DatafieldEvaluations32;
	  items?: Items46;
	}
	export interface Buffs71 {
	  buffs: Buffs72;
	  require_all: RequireAll42;
	  stacks?: Stacks41;
	}
	export interface Buffs72 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks41 {
	  comparison: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1: Quantity71;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations32 {
	  [k: string]: {
	    order: number;
	    element: {
	      comparison: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0: string;
	      value1: number;
	    };
	  };
	}
	export interface Items46 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	/**
	 * An ability that uses Charges must have at least one charge available for the ability to be cast. Each cast consumes a charge.
	 */
	export interface Charges1 {
	  recharge_seconds: RechargeSeconds;
	  recharge_speed_modifier?: RechargeSpeedStatModifiers;
	  max_charges: MaxCharges;
	}
	export interface RechargeSpeedStatModifiers {
	  [k: string]: {
	    order: number;
	    element: Modifier4;
	  };
	}
	export interface Modifier4 {
	  type: ModifierType3;
	  stat: Stat8;
	}
	export interface CastingAnimations {
	  animations?: AnimationsList2;
	  shake?: Shake1;
	}
	export interface AnimationsList2 {
	  [k: string]: {
	    order: number;
	    element: {
	      animation: AnimationName2;
	    };
	  };
	}
	/**
	 * The caster can shake for some amount during a portion (or all) of the ability cast.
	 */
	export interface Shake1 {
	  values: ShakeAmount1;
	  times: ShakeTime1;
	}
	export interface ShakeAmount1 {
	  value0: Start3;
	  value1: End3;
	}
	export interface ShakeTime1 {
	  value0: Start4;
	  value1: End4;
	}
	export interface Creature {
	  loot?: Loot;
	  movement: Motion1;
	  death_sounds?: DestructionSounds2;
	  object: Object6;
	  noncombat_ai: NonCombatAI;
	  deaggro_seconds: DeaggroDuration;
	  spine_skin?: SpineSkin;
	  immunities?: Immunities;
	  hp_bar_offset?: HealthBarVerticalOffset;
	  using_lighting?: UseLighting9;
	  protection?: ProtectionBehaviors;
	  reactions?: Reactions;
	  flee?: Fleeing;
	  priors?: ProgressionPriors;
	  injury_sounds?: InjurySounds;
	  sprite: WorldSprite14;
	  data_fields?: DataFields2;
	  friendly_help_range: FriendlyHelpRange;
	  light_emitter?: LightEmitter;
	  relative_level?: RelativeLevel1;
	  size: Size6;
	  uicon: UIIcon19;
	  family?: Family;
	  aggro_radius: AggroDeaggroDistances;
	  scale_modifier?: ScaleModifier7;
	  level_viewer_ignore?: IgnoreInLevelViewer3;
	  random_scaling?: RandomScalingMinimum2;
	  editor_group?: EditorGroup19;
	  hp_modifier?: HPModifier;
	  resistance_profile?: ResistanceProfile1;
	  shadow?: Shadow;
	  respawn_multiplier?: RespawnTimeMultiplier;
	  wip?: WIP;
	  level: Level4;
	  combat_ai?: CombatBehavior;
	  effort_modifier?: EffortModifier12;
	  name: Name42;
	}
	export interface Loot {
	  [k: string]: {
	    order: number;
	    element: LootGroup1;
	  };
	}
	/**
	 * A collection of items that share the same rules about how they drop.
	 */
	export interface LootGroup1 {
	  bonus_loot?: ConsiderAsBonus;
	  drop_chance?: DropChance1;
	  time_requirement?: TimeOfDay1;
	  item_tags_used?: ItemTagsUsed1;
	  item_ids_used?: ItemsUsed4;
	  items_dropped: Items47;
	  num_drops?: DropQuantity1;
	  badge_requirement?: UnlockedBy48;
	  datafield_link?: DatafieldQuantityLink;
	  trigger: Trigger2;
	  areas?: Areas1;
	  datafield_evaluations?: DatafieldEvaluations33;
	  ignore_in_progression_map?: IgnoreInProgressionMap1;
	  source_listed?: IncludeAsSource;
	}
	/**
	 * The kinds of items required to be used on this for loot to drop.
	 */
	export interface ItemTagsUsed1 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	/**
	 * Specific items required to be used on this for loot to drop.
	 */
	export interface ItemsUsed4 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Items47 {
	  [k: string]: {
	    order: number;
	    element: {
	      locked: boolean;
	      weight: number;
	      item: string;
	    };
	  };
	}
	/**
	 * A random number of items will drop in this range.
	 */
	export interface DropQuantity1 {
	  value0: Min67;
	  value1: Max67;
	}
	/**
	 * If set, the loot will only drop from something within the listed areas.
	 */
	export interface Areas1 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	/**
	 * This loot group can check for data fields on the entity, and only drop if the conditions are met.
	 */
	export interface DatafieldEvaluations33 {
	  [k: string]: {
	    order: number;
	    element: {
	      comparison: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0: string;
	      value1: number;
	    };
	  };
	}
	export interface Motion1 {
	  stationary: StationaryVisuals4;
	  moving: MovementVisuals4;
	  movespeed: MovementSpeed4;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave8 {
	  [k: string]: {
	    order?: number;
	    element?: SineWave9;
	  };
	}
	export interface SineWave9 {
	  speed?: Speed12;
	  amplitude?: Amplitude9;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements8 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent8;
	  };
	}
	export interface FlapEvent8 {
	  distance?: VerticalDistance8;
	  recovery_seconds?: RecoveryDurationSeconds8;
	  impulse_seconds?: ImpulseDurationSeconds8;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave9 {
	  [k: string]: {
	    order?: number;
	    element?: SineWave10;
	  };
	}
	export interface SineWave10 {
	  speed?: Speed13;
	  amplitude?: Amplitude10;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements9 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent9;
	  };
	}
	export interface FlapEvent9 {
	  distance?: VerticalDistance9;
	  recovery_seconds?: RecoveryDurationSeconds9;
	  impulse_seconds?: ImpulseDurationSeconds9;
	}
	/**
	 * Sound effects to play when this thing is destroyed.
	 */
	export interface DestructionSounds2 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	/**
	 * How the creature behaves when it is just existing in the world.
	 */
	export interface NonCombatAI {
	  states: NonCombatStates;
	}
	export interface NonCombatStates {
	  interactions?: Interactions;
	  roam: Roam;
	  idle: Idle;
	}
	/**
	 * The creature can use abilities on things in the environment.
	 */
	export interface Interactions {
	  [k: string]: {
	    order: number;
	    element: Interaction;
	  };
	}
	export interface Interaction {
	  movement?: MotionOverride3;
	  repeating: Repeatable;
	  casts: Casts;
	  detection_radius: DetectionRadius;
	  weight: Weight2;
	  ability: Ability11;
	  targets?: TargetFilter6;
	  name: NameInternal9;
	}
	export interface MotionOverride3 {
	  stationary?: StationaryVisuals5;
	  moving?: MovementVisuals5;
	  movespeed?: MovementSpeed5;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave10 {
	  [k: string]: {
	    order?: number;
	    element?: SineWave11;
	  };
	}
	export interface SineWave11 {
	  speed?: Speed14;
	  amplitude?: Amplitude11;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements10 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent10;
	  };
	}
	export interface FlapEvent10 {
	  distance?: VerticalDistance10;
	  recovery_seconds?: RecoveryDurationSeconds10;
	  impulse_seconds?: ImpulseDurationSeconds10;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave11 {
	  [k: string]: {
	    order?: number;
	    element?: SineWave12;
	  };
	}
	export interface SineWave12 {
	  speed?: Speed15;
	  amplitude?: Amplitude12;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements11 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent11;
	  };
	}
	export interface FlapEvent11 {
	  distance?: VerticalDistance11;
	  recovery_seconds?: RecoveryDurationSeconds11;
	  impulse_seconds?: ImpulseDurationSeconds11;
	}
	/**
	 * How many times the creature will attempt to use the ability if the target continues to exist.
	 */
	export interface Casts {
	  value0: Min68;
	  value1: Max68;
	}
	/**
	 * The creature will attempt to use this ability on targets that match these filters. If no filters present, the creature will just cast the ability.
	 */
	export interface TargetFilter6 {
	  [k: string]: {
	    order: number;
	    element: Filter34;
	  };
	}
	export interface Filter34 {
	  buffs?: Buffs73;
	  exclude?: Exclude34;
	  require_all_tags?: RequireAllTags33;
	  combatants_only?: Combatants33;
	  datafield_evaluations?: DatafieldEvaluations34;
	  items?: Items48;
	}
	export interface Buffs73 {
	  buffs: Buffs74;
	  require_all: RequireAll43;
	  stacks?: Stacks42;
	}
	export interface Buffs74 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks42 {
	  comparison: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1: Quantity72;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations34 {
	  [k: string]: {
	    order: number;
	    element: {
	      comparison: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0: string;
	      value1: number;
	    };
	  };
	}
	export interface Items48 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Roam {
	  movement?: MotionOverride4;
	  attract?: Attractants;
	  repeating: Repeatable1;
	  distance: RoamDistance;
	  repel?: Repellants;
	  weight: Weight5;
	}
	export interface MotionOverride4 {
	  stationary?: StationaryVisuals6;
	  moving?: MovementVisuals6;
	  movespeed?: MovementSpeed6;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave12 {
	  [k: string]: {
	    order?: number;
	    element?: SineWave13;
	  };
	}
	export interface SineWave13 {
	  speed?: Speed16;
	  amplitude?: Amplitude13;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements12 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent12;
	  };
	}
	export interface FlapEvent12 {
	  distance?: VerticalDistance12;
	  recovery_seconds?: RecoveryDurationSeconds12;
	  impulse_seconds?: ImpulseDurationSeconds12;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave13 {
	  [k: string]: {
	    order?: number;
	    element?: SineWave14;
	  };
	}
	export interface SineWave14 {
	  speed?: Speed17;
	  amplitude?: Amplitude14;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements13 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent13;
	  };
	}
	export interface FlapEvent13 {
	  distance?: VerticalDistance13;
	  recovery_seconds?: RecoveryDurationSeconds13;
	  impulse_seconds?: ImpulseDurationSeconds13;
	}
	/**
	 * World elements that the creature can wander toward.
	 */
	export interface Attractants {
	  movement?: MotionOverride5;
	  detection_range: DetectionRange;
	  probability: AttractionProbability;
	  targets: AttractionTargets;
	}
	export interface MotionOverride5 {
	  stationary?: StationaryVisuals7;
	  moving?: MovementVisuals7;
	  movespeed?: MovementSpeed7;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave14 {
	  [k: string]: {
	    order?: number;
	    element?: SineWave15;
	  };
	}
	export interface SineWave15 {
	  speed?: Speed18;
	  amplitude?: Amplitude15;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements14 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent14;
	  };
	}
	export interface FlapEvent14 {
	  distance?: VerticalDistance14;
	  recovery_seconds?: RecoveryDurationSeconds14;
	  impulse_seconds?: ImpulseDurationSeconds14;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave15 {
	  [k: string]: {
	    order?: number;
	    element?: SineWave16;
	  };
	}
	export interface SineWave16 {
	  speed?: Speed19;
	  amplitude?: Amplitude16;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements15 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent15;
	  };
	}
	export interface FlapEvent15 {
	  distance?: VerticalDistance15;
	  recovery_seconds?: RecoveryDurationSeconds15;
	  impulse_seconds?: ImpulseDurationSeconds15;
	}
	export interface AttractionTargets {
	  [k: string]: {
	    order: number;
	    element: AttractionBehavior;
	  };
	}
	export interface AttractionBehavior {
	  movement?: MotionOverride6;
	  detection_range?: DetectionRange1;
	  weight: Weight3;
	  targets: Targets5;
	}
	export interface MotionOverride6 {
	  stationary?: StationaryVisuals8;
	  moving?: MovementVisuals8;
	  movespeed?: MovementSpeed8;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave16 {
	  [k: string]: {
	    order?: number;
	    element?: SineWave17;
	  };
	}
	export interface SineWave17 {
	  speed?: Speed20;
	  amplitude?: Amplitude17;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements16 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent16;
	  };
	}
	export interface FlapEvent16 {
	  distance?: VerticalDistance16;
	  recovery_seconds?: RecoveryDurationSeconds16;
	  impulse_seconds?: ImpulseDurationSeconds16;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave17 {
	  [k: string]: {
	    order?: number;
	    element?: SineWave18;
	  };
	}
	export interface SineWave18 {
	  speed?: Speed21;
	  amplitude?: Amplitude18;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements17 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent17;
	  };
	}
	export interface FlapEvent17 {
	  distance?: VerticalDistance17;
	  recovery_seconds?: RecoveryDurationSeconds17;
	  impulse_seconds?: ImpulseDurationSeconds17;
	}
	export interface Targets5 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	/**
	 * How far the creature will wander from its current position.
	 */
	export interface RoamDistance {
	  value0: Min69;
	  value1: Max69;
	}
	/**
	 * World elements that the creature will try to get away from. This will always take precedence over attractants.
	 */
	export interface Repellants {
	  movement?: MotionOverride7;
	  detection_range: DetectionRange2;
	  probability: RepelProbability;
	  targets: RepelTargets;
	}
	export interface MotionOverride7 {
	  stationary?: StationaryVisuals9;
	  moving?: MovementVisuals9;
	  movespeed?: MovementSpeed9;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave18 {
	  [k: string]: {
	    order?: number;
	    element?: SineWave19;
	  };
	}
	export interface SineWave19 {
	  speed?: Speed22;
	  amplitude?: Amplitude19;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements18 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent18;
	  };
	}
	export interface FlapEvent18 {
	  distance?: VerticalDistance18;
	  recovery_seconds?: RecoveryDurationSeconds18;
	  impulse_seconds?: ImpulseDurationSeconds18;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave19 {
	  [k: string]: {
	    order?: number;
	    element?: SineWave20;
	  };
	}
	export interface SineWave20 {
	  speed?: Speed23;
	  amplitude?: Amplitude20;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements19 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent19;
	  };
	}
	export interface FlapEvent19 {
	  distance?: VerticalDistance19;
	  recovery_seconds?: RecoveryDurationSeconds19;
	  impulse_seconds?: ImpulseDurationSeconds19;
	}
	export interface RepelTargets {
	  [k: string]: {
	    order: number;
	    element: RepelBehavior;
	  };
	}
	export interface RepelBehavior {
	  movement?: MotionOverride8;
	  detection_range?: DetectionRange3;
	  weight: Weight4;
	  targets: Targets6;
	}
	export interface MotionOverride8 {
	  stationary?: StationaryVisuals10;
	  moving?: MovementVisuals10;
	  movespeed?: MovementSpeed10;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave20 {
	  [k: string]: {
	    order?: number;
	    element?: SineWave21;
	  };
	}
	export interface SineWave21 {
	  speed?: Speed24;
	  amplitude?: Amplitude21;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements20 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent20;
	  };
	}
	export interface FlapEvent20 {
	  distance?: VerticalDistance20;
	  recovery_seconds?: RecoveryDurationSeconds20;
	  impulse_seconds?: ImpulseDurationSeconds20;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave21 {
	  [k: string]: {
	    order?: number;
	    element?: SineWave22;
	  };
	}
	export interface SineWave22 {
	  speed?: Speed25;
	  amplitude?: Amplitude22;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements21 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent21;
	  };
	}
	export interface FlapEvent21 {
	  distance?: VerticalDistance21;
	  recovery_seconds?: RecoveryDurationSeconds21;
	  impulse_seconds?: ImpulseDurationSeconds21;
	}
	export interface Targets6 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Idle {
	  duration: DurationSeconds1;
	  repeating: Repeatable2;
	  weight: Weight6;
	}
	export interface DurationSeconds1 {
	  value0: Min70;
	  value1: Max70;
	}
	/**
	 * Things that this world element cannot be harmed by.
	 */
	export interface Immunities {
	  buffs?: Buffs75;
	  stun?: Stun1;
	}
	/**
	 * Harmful buffs or types of buffs that cannot be applied to this creature.
	 */
	export interface Buffs75 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	/**
	 * These are items that the creature will try to protect if something bad happens to them.
	 */
	export interface ProtectionBehaviors {
	  [k: string]: {
	    order: number;
	    element: ProtectionBehavior;
	  };
	}
	export interface ProtectionBehavior {
	  damage: RespondToDamage;
	  items: Items49;
	  death: RespondToDestruction;
	}
	export interface Items49 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	/**
	 * This creature may run in fear from things by entering a 'fleeing' state.
	 */
	export interface Fleeing {
	  movement?: MotionOverride9;
	  seconds: FleeDurationSeconds;
	  sound?: FleeSound;
	  health_based?: FleeWhenInjured;
	  targets?: FleeTargets;
	}
	export interface MotionOverride9 {
	  moving?: MovementVisuals11;
	  movespeed?: MovementSpeed11;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave22 {
	  [k: string]: {
	    order?: number;
	    element?: SineWave23;
	  };
	}
	export interface SineWave23 {
	  speed?: Speed26;
	  amplitude?: Amplitude23;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements22 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent22;
	  };
	}
	export interface FlapEvent22 {
	  distance?: VerticalDistance22;
	  recovery_seconds?: RecoveryDurationSeconds22;
	  impulse_seconds?: ImpulseDurationSeconds22;
	}
	export interface FleeDurationSeconds {
	  value0: Min71;
	  value1: Max71;
	}
	export interface FleeWhenInjured {
	  probability: Probablity;
	  health_threshold: HealthThreshold2;
	}
	/**
	 * The creature will immediately begin fleeing from these targets if it enters combat with them.
	 */
	export interface FleeTargets {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	/**
	 * Sound effects to play when this thing takes damage.
	 */
	export interface InjurySounds {
	  [k: string]: {
	    order: number;
	    element: {
	      minor_injury_sound: Minor;
	      major_injury_sound: Major;
	      chance_of_playing: Chance12;
	    };
	  };
	}
	/**
	 * Attaching data fields to this world element will make them readable by other game mechanics/elements. Can be used to store custom data on a world element.
	 */
	export interface DataFields2 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Size6 {
	  width: Width6;
	  height: Height6;
	}
	/**
	 * When something gets within the minimum, the creature will react. When it goes outside the maximum range, the creature will stop reacting. There should ideally be at least a gap of 1 grid space between the minimum and the maximum to prevent rapid deaggro/reaggro.
	 */
	export interface AggroDeaggroDistances {
	  value0: AggroRadius;
	  value1: DeaggroRadius;
	}
	/**
	 * How the creature fights during combat.
	 */
	export interface CombatBehavior {
	  movement?: MotionOverride10;
	  aggro_targets?: AggroTargets;
	  abilities: CombatAbilities;
	  post_movement_pause?: PostMovementPause;
	  aggro_player: AggroOntoPlayer;
	  aggro_sound: AggroSound;
	}
	export interface MotionOverride10 {
	  stationary?: StationaryVisuals11;
	  moving?: MovementVisuals12;
	  movespeed?: MovementSpeed12;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave23 {
	  [k: string]: {
	    order?: number;
	    element?: SineWave24;
	  };
	}
	export interface SineWave24 {
	  speed?: Speed27;
	  amplitude?: Amplitude24;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements23 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent23;
	  };
	}
	export interface FlapEvent23 {
	  distance?: VerticalDistance23;
	  recovery_seconds?: RecoveryDurationSeconds23;
	  impulse_seconds?: ImpulseDurationSeconds23;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave24 {
	  [k: string]: {
	    order?: number;
	    element?: SineWave25;
	  };
	}
	export interface SineWave25 {
	  speed?: Speed28;
	  amplitude?: Amplitude25;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements24 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent24;
	  };
	}
	export interface FlapEvent24 {
	  distance?: VerticalDistance24;
	  recovery_seconds?: RecoveryDurationSeconds24;
	  impulse_seconds?: ImpulseDurationSeconds24;
	}
	/**
	 * The creature will attack these targets when they get into its aggro range.
	 */
	export interface AggroTargets {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface CombatAbilities {
	  [k: string]: {
	    order: number;
	    element: CombatAbility;
	  };
	}
	export interface CombatAbility {
	  movement?: MotionOverride11;
	  followup_abilities?: FollowupAbilities1;
	  post_ability_pause_ignore_chance?: PostAbilityPauseIgnoreChance1;
	  post_movement_pause?: PostMovementPauseOverride;
	  weight: Weight8;
	  ability: Ability13;
	  direction_randomness?: DirectionRandomness3;
	  post_ability_pause?: PostAbilityPause2;
	}
	export interface MotionOverride11 {
	  stationary?: StationaryVisuals12;
	  moving?: MovementVisuals13;
	  movespeed?: MovementSpeed13;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave25 {
	  [k: string]: {
	    order?: number;
	    element?: SineWave26;
	  };
	}
	export interface SineWave26 {
	  speed?: Speed29;
	  amplitude?: Amplitude26;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements25 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent25;
	  };
	}
	export interface FlapEvent25 {
	  distance?: VerticalDistance25;
	  recovery_seconds?: RecoveryDurationSeconds25;
	  impulse_seconds?: ImpulseDurationSeconds25;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave26 {
	  [k: string]: {
	    order?: number;
	    element?: SineWave27;
	  };
	}
	export interface SineWave27 {
	  speed?: Speed30;
	  amplitude?: Amplitude27;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements26 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent26;
	  };
	}
	export interface FlapEvent26 {
	  distance?: VerticalDistance26;
	  recovery_seconds?: RecoveryDurationSeconds26;
	  impulse_seconds?: ImpulseDurationSeconds26;
	}
	/**
	 * If set, these abilities will be cast after the current one. These abilities must already be listed in the creature's Combat Abilities, or they will be ignored.
	 */
	export interface FollowupAbilities1 {
	  [k: string]: {
	    order: number;
	    element: FollowupAbility1;
	  };
	}
	export interface FollowupAbility1 {
	  instant: Instant1;
	  weight: Weight7;
	  ability: Ability12;
	}
	/**
	 * If the creature moves in combat to get into position to perform this ability, it can wait for a brief moment before beginning to cast.
	 */
	export interface PostMovementPauseOverride {
	  value0: MinSeconds5;
	  value1: MaxSeconds5;
	}
	/**
	 * If set, the creature will wait for this many seconds after using this ability before moving on to the next ability.
	 */
	export interface PostAbilityPause2 {
	  value0: MinSeconds6;
	  value1: MaxSeconds6;
	}
	/**
	 * If the creature moves in combat to get into position to perform an ability, it can wait for a brief moment before beginning to use its abilities.
	 */
	export interface PostMovementPause {
	  value0: MinSeconds7;
	  value1: MaxSeconds7;
	}
	export interface Name42 {
	  text: EnglishText91;
	  description?: TranslatorHelperText73;
	}
	/**
	 * A collection of conditions that must be met for a buddy to be comfortable at home.
	 */
	export interface Comfort2 {
	  unlocked_description: UnlockedDescription;
	  glads: Requirements7;
	  artisan_id: Buddy8;
	  order: OrderIndex;
	  unlocked_by?: UnlockedBy49;
	  uicon?: UIIcon20;
	  description: BackstoryDescription;
	  wip?: WIP;
	  name: Name44;
	  speed_bonus: InsightSpeedBonus;
	}
	/**
	 * This text will display on the UI after you have unlocked this comfort.
	 */
	export interface UnlockedDescription {
	  text: EnglishText92;
	  description?: TranslatorHelperText74;
	}
	export interface Requirements7 {
	  [k: string]: {
	    order: number;
	    element: CheckMark1;
	  };
	}
	export interface CheckMark1 {
	  requirements: CheckMarkConditions1;
	  description: Name43;
	}
	export interface CheckMarkConditions1 {
	  [k: string]: {
	    order: number;
	    element: Condition6;
	  };
	}
	/**
	 * The number of spaces that are not occupied by structures (walls/doors/pillars).
	 */
	export interface InteriorTileArea1 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: number;
	}
	/**
	 * Note that if you include an item tag and an item that also belongs to that tag, the item will be double-counted.
	 */
	export interface Items50 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface NumberOfRooms1 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: number;
	}
	/**
	 * The items to check against the source items.
	 */
	export interface TargetItems1 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value0?: {
	    [k: string]: {
	      order?: number;
	      element?: string;
	    };
	  };
	  value1?: number;
	}
	/**
	 * The evaluated number of source items must meet the tile distance requirement against the evaluated number of target items.
	 */
	export interface TileDistance1 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: number;
	}
	/**
	 * The items used to check for relationships.
	 */
	export interface SourceItems1 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value0?: {
	    [k: string]: {
	      order?: number;
	      element?: string;
	    };
	  };
	  value1?: number;
	}
	/**
	 * Describe these conditions in a short sentence. This will be next to a checkmark that will check once the requirements are complete.
	 */
	export interface Name43 {
	  text: EnglishText93;
	  description?: TranslatorHelperText75;
	}
	/**
	 * This text will display on the UI before you have unlocked this comfort.
	 */
	export interface BackstoryDescription {
	  text: EnglishText94;
	  description?: TranslatorHelperText76;
	}
	export interface Name44 {
	  text: EnglishText95;
	  description?: TranslatorHelperText77;
	}
	export interface Terrain2 {
	  undersprite?: UnderSprite3;
	  shore_tile?: ShoreTile;
	  sprite: MainSprite3;
	  map_color: MapColor3;
	  spice?: VisualSpice;
	  shore_interaction?: WaterInteraction2;
	  uicon: Icon8;
	  cleared_tile?: ClearedTile;
	  depth_priority: DepthPriority;
	  editor_group?: EditorGroup20;
	  placement_sound?: PlacementSound6;
	  footstep_sound: FootstepSound3;
	  disallow_floors?: DisallowFloors;
	  clear_particle_sprite?: ClearTileParticleSprite;
	  flippable: Flippable6;
	  wip?: WIP;
	  name: Name45;
	  dapples?: SunlightDappling3;
	}
	/**
	 * The color to draw this tile on the map.
	 */
	export interface MapColor3 {
	  b: Blue38;
	  r: Red38;
	  g: Green38;
	}
	/**
	 * Tiles can spawn additional visual elements, depending on what is around them. Tiles will first sample their neighbors, then randomly choose a neighbor based on the weight of that neighbor's spice group. Then, it will roll based on 'spawn chance' to determine whether to spawn the visual spice. Finally, it will choose among the sprites within that group using their weights.
	 */
	export interface VisualSpice {
	  [k: string]: {
	    order: number;
	    element: {
	      locked: boolean;
	      weight: number;
	      item: SpiceGroup;
	    };
	  };
	}
	export interface SpiceGroup {
	  sprites: Sprites;
	  neighbor?: Neighbor;
	  chance: SpawnChance3;
	}
	export interface Sprites {
	  [k: string]: {
	    order: number;
	    element: {
	      locked: boolean;
	      weight: number;
	      item: string;
	    };
	  };
	}
	/**
	 * If set, this tile will be allowed to touch water.
	 */
	export interface WaterInteraction2 {
	  shelf_sprite?: ShelfUnderwaterSprite2;
	  shore_sprite: ShorelineUnderwaterSprite2;
	}
	export interface Name45 {
	  text: EnglishText96;
	  description?: TranslatorHelperText78;
	}
	export interface SunlightDappling3 {
	  dapple_chance: SpawnChance4;
	  dapple_colors: Colors4;
	}
	/**
	 * The color to use for the sunlight dapples.
	 */
	export interface Colors4 {
	  [k: string]: {
	    order: number;
	    element: {
	      b: Blue39;
	      r: Red39;
	      g: Green39;
	    };
	  };
	}
	/**
	 * Conditions that must be true for the quest to proceed.
	 */
	export interface Requirements8 {
	  [k: string]: {
	    order: number;
	    element: Requirement1;
	  };
	}
	/**
	 * Details about a level of quality for an item.
	 */
	export interface ItemQuality {
	  color: Color10;
	  dark_color: DarkColor;
	  effort: Effort;
	  wip?: WIP;
	  name: QualityName;
	}
	/**
	 * The color to use when showing items of this quality level.
	 */
	export interface Color10 {
	  b: Blue40;
	  r: Red40;
	  g: Green40;
	}
	/**
	 * The color to use as a backdrop when showing items of this quality level.
	 */
	export interface DarkColor {
	  b: Blue41;
	  r: Red41;
	  g: Green41;
	}
	/**
	 * The term used to describe items of this level of quality (e.g. Common, Rare, Legendary
	 */
	export interface QualityName {
	  text: EnglishText97;
	  description?: TranslatorHelperText79;
	}
	/**
	 * A postprocessing effect that can be used to change the feel of an area or situation.
	 */
	export interface ColorGrading {
	  values: Values;
	  wip?: WIP;
	  name: ProfileNameInternal;
	}
	export interface Values {
	  highlight_threshold?: HighlightThreshold;
	  contrast_b?: BlueMultiplier;
	  brightness?: Brightness1;
	  shadow_threshold?: ShadowThreshold;
	  saturation?: Saturation;
	  contrast_r?: RedMultiplier;
	  contrast_g?: GreenMultiplier;
	  shadow_multiplier?: ShadowMultiplier;
	  light_levels?: LightLevels;
	  dark_levels?: DarkLevels;
	  highlight_multiplier?: HighlightMultiplier;
	}
	/**
	 * Visuals to convey character emotions.
	 */
	export interface Emoji8 {
	  sprite: Sprite4;
	  sound?: Sound9;
	  wip?: WIP;
	  name: NameInternal10;
	}
	export interface SeedPack {
	  growth_minutes_insight_modifier?: GrowthMinutesInsightModifier;
	  shiny_chance: ShinyChance;
	  using_lighting?: UseLighting10;
	  priors?: ProgressionPriors;
	  required_tile: GardenBed1;
	  sprite: WorldSprite15;
	  num_regrows: NumberOfRegrows;
	  light_emitter?: LightEmitter;
	  grows_into: GrowsInto;
	  regrow_insights?: RegrowBoostingInsights;
	  uicon: UIIcon21;
	  shiny_boost?: ShinyBoostingInsights;
	  editor_group?: EditorGroup21;
	  recipe?: Recipe10;
	  description: Description21;
	  wip?: WIP;
	  free_regrows?: FreeRegrows;
	  name: Name46;
	  growth_minutes: MinutesToGrow;
	}
	export interface GrowthMinutesInsightModifier {
	  insight: Insight14;
	  amount: ChangePerPoint24;
	}
	/**
	 * You can have Insights give additional, independent chances for a Seed Pack to become shiny (if fertilized).
	 */
	export interface ShinyBoostingInsights {
	  [k: string]: {
	    order: number;
	    element: ShinyBoostingInsight;
	  };
	}
	export interface ShinyBoostingInsight {
	  insight: Insight16;
	  chance: AddedChance;
	}
	export interface Recipe10 {
	  components: Ingredients11;
	  output_quantity?: OutputQuantity8;
	  badge_output_modifiers?: OutputModifiedByResearch8;
	  station: Station10;
	  badge_cost_modifiers?: CostModifiedByResearch10;
	  source?: UnlockedBy50;
	  artisans?: ArtisansRequired10;
	  effort_modifier?: EffortModifier13;
	}
	export interface Ingredients11 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface OutputModifiedByResearch8 {
	  [k: string]: {
	    order: number;
	    element: {
	      badge_id: ResearchNode18;
	      style: Style11;
	      value: ChangePerPoint25;
	    };
	  };
	}
	export interface CostModifiedByResearch10 {
	  [k: string]: {
	    order: number;
	    element: {
	      badge_id: ResearchNode19;
	      value: ChangePerPoint26;
	    };
	  };
	}
	export interface ArtisansRequired10 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Description21 {
	  text: EnglishText98;
	  description?: TranslatorHelperText80;
	}
	/**
	 * Each time this Seed Pack grows into a plant, it can have a chance to not consume one of its 'Regrows'.
	 */
	export interface FreeRegrows {
	  insight: FreeRegrowInsight;
	  free_regrow_chance: FreeRegrowChance;
	}
	export interface Name46 {
	  text: EnglishText99;
	  description?: TranslatorHelperText81;
	}
	export interface PetMastery {
	  order: SortOrder;
	  pet: Pet6;
	  stage: PetStage5;
	  uicon: Icon9;
	  description: Description22;
	  wip?: WIP;
	  name: Name47;
	}
	export interface Description22 {
	  text: EnglishText100;
	}
	export interface Name47 {
	  text: EnglishText101;
	}
	export interface Boss7 {
	  movement: Motion2;
	  spine_skin?: SpineSkin1;
	  dialogue_sfx?: DialogueSounds;
	  using_lighting?: UseLighting11;
	  boss_loot?: Loot1;
	  reactions?: Reactions;
	  name_color: NameColor2;
	  priors?: ProgressionPriors;
	  injury_sounds?: InjurySounds1;
	  ending_sequence?: BossDialogueSequence3;
	  opening_sequence?: BossDialogueSequence4;
	  sprite: WorldSprite16;
	  data_fields?: DataFields3;
	  light_emitter?: LightEmitter;
	  relative_level?: RelativeLevel2;
	  size: Size7;
	  uicon: UIIcon22;
	  editor_group?: EditorGroup22;
	  hp_modifier?: HPModifier1;
	  resistance_profile?: ResistanceProfile2;
	  death?: Death;
	  shadow?: Shadow;
	  wip?: WIP;
	  level: Level5;
	  name: Name48;
	}
	export interface Motion2 {
	  stationary: StationaryVisuals13;
	  moving: MovementVisuals14;
	  movespeed: MovementSpeed14;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave27 {
	  [k: string]: {
	    order?: number;
	    element?: SineWave28;
	  };
	}
	export interface SineWave28 {
	  speed?: Speed31;
	  amplitude?: Amplitude28;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements27 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent27;
	  };
	}
	export interface FlapEvent27 {
	  distance?: VerticalDistance27;
	  recovery_seconds?: RecoveryDurationSeconds27;
	  impulse_seconds?: ImpulseDurationSeconds27;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave28 {
	  [k: string]: {
	    order?: number;
	    element?: SineWave29;
	  };
	}
	export interface SineWave29 {
	  speed?: Speed32;
	  amplitude?: Amplitude29;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements28 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent28;
	  };
	}
	export interface FlapEvent28 {
	  distance?: VerticalDistance28;
	  recovery_seconds?: RecoveryDurationSeconds28;
	  impulse_seconds?: ImpulseDurationSeconds28;
	}
	export interface DialogueSounds {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Loot1 {
	  [k: string]: {
	    order: number;
	    element: {
	      key: Item13;
	      value: Quantity73;
	    };
	  };
	}
	export interface NameColor2 {
	  b: Blue42;
	  r: Red42;
	  g: Green42;
	}
	/**
	 * Sound effects to play when this thing takes damage.
	 */
	export interface InjurySounds1 {
	  [k: string]: {
	    order: number;
	    element: {
	      minor_injury_sound: Minor1;
	      major_injury_sound: Major1;
	      chance_of_playing: Chance13;
	    };
	  };
	}
	export interface BossDialogueSequence3 {
	  animation?: BossSpineAnimation;
	  moments: DialogueMoments;
	}
	export interface BossDialogueSequence4 {
	  animation?: BossSpineAnimation;
	  moments: DialogueMoments;
	}
	/**
	 * Attaching data fields to this world element will make them readable by other game mechanics/elements. Can be used to store custom data on a world element.
	 */
	export interface DataFields3 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Size7 {
	  width: Width7;
	  height: Height7;
	}
	export interface Death {
	  animation: Animation43;
	  death_sound?: DeathSound;
	  particle_burst?: ParticleBurst;
	}
	export interface Name48 {
	  text: EnglishText102;
	}
	export interface Music2 {
	  style: Style12;
	  wip?: WIP;
	  name: Name49;
	}
	export interface Tracks {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface Player {
	  name_color: NameColor3;
	  injury_sounds: InjurySounds2;
	  sprite: WorldSprite17;
	  size: Size8;
	  uicon: UIIcon23;
	  editor_group?: EditorGroup23;
	  shadow: Shadow;
	  wip?: WIP;
	  name: Name52;
	}
	/**
	 * For when this name is displayed in a dialogue window.
	 */
	export interface NameColor3 {
	  b: Blue43;
	  r: Red43;
	  g: Green43;
	}
	/**
	 * Sound effects to play when this thing takes damage.
	 */
	export interface InjurySounds2 {
	  [k: string]: {
	    order: number;
	    element: {
	      minor_injury_sound: Minor2;
	      major_injury_sound: Major2;
	      chance_of_playing: Chance14;
	    };
	  };
	}
	export interface Size8 {
	  width: Width8;
	  height: Height8;
	}
	export interface Name52 {
	  text: EnglishText103;
	  description?: TranslatorHelperText82;
	}
	export interface BuildingDoor {
	  closed_during_combat?: ClosedDuringCombat;
	  roof_vote: PreferredRoof1;
	  door_open_sound: DoorOpenSound1;
	  sprite: WorldSprite18;
	  door_close_sound: DoorCloseSound1;
	  uicon: UIIcon24;
	  editor_group?: EditorGroup24;
	  placement_sound: PlacementSound7;
	  recipe?: Recipe11;
	  description: Description23;
	  door_close_distance?: CloseDistance;
	  wip?: WIP;
	  name: Name53;
	}
	export interface Recipe11 {
	  components: Ingredients12;
	  output_quantity?: OutputQuantity9;
	  badge_output_modifiers?: OutputModifiedByResearch9;
	  station: Station11;
	  badge_cost_modifiers?: CostModifiedByResearch11;
	  source?: UnlockedBy51;
	  artisans?: ArtisansRequired11;
	  effort_modifier?: EffortModifier14;
	}
	export interface Ingredients12 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface OutputModifiedByResearch9 {
	  [k: string]: {
	    order: number;
	    element: {
	      badge_id: ResearchNode20;
	      style: Style13;
	      value: ChangePerPoint27;
	    };
	  };
	}
	export interface CostModifiedByResearch11 {
	  [k: string]: {
	    order: number;
	    element: {
	      badge_id: ResearchNode21;
	      value: ChangePerPoint28;
	    };
	  };
	}
	export interface ArtisansRequired11 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Description23 {
	  text: EnglishText104;
	  description?: TranslatorHelperText83;
	}
	export interface Name53 {
	  text: EnglishText105;
	  description?: TranslatorHelperText84;
	}
	export interface Video {
	  progress_bar_background?: ProgressBarBackgroundColor;
	  progress_bar_height?: ProgressBarHeightPixels;
	  video_path: VideoFilePath;
	  progress_bar_color?: ProgressBarColor;
	  progress_bar_background_alpha?: ProgressBarBackgroundAlpha;
	  progress_bar_alpha?: ProgressBarAlpha;
	  skip_points?: SkipPoints;
	  wip?: WIP;
	  name: VideoName;
	  border_color?: BorderColor;
	  gain?: AudioGainModifier;
	}
	export interface ProgressBarBackgroundColor {
	  b: Blue44;
	  r: Red44;
	  g: Green44;
	}
	export interface ProgressBarColor {
	  b: Blue45;
	  r: Red45;
	  g: Green45;
	}
	/**
	 * Set specific times (in seconds) that the video player will skip ahead to for this video.
	 */
	export interface SkipPoints {
	  [k: string]: {
	    order: number;
	    element: TimestampSeconds;
	  };
	}
	/**
	 * If there are 'bars' around the video due to aspect ratio issues, you can customize the color those bars will be drawn. The bars will not be visibile at a 16:9 aspect ratio.
	 */
	export interface BorderColor {
	  b: Blue46;
	  r: Red46;
	  g: Green46;
	}
	/**
	 * A dynamic fence that will automatically orient itself and display as posts or walls depending on its surroundings.
	 */
	export interface Fence {
	  using_lighting: UseLighting12;
	  sprite: WorldSprite19;
	  worldmap_tile_color?: WorldMapTileColor1;
	  data_fields?: DataFields4;
	  light_emitter?: LightEmitter;
	  uicon: UIIcon25;
	  requires_land?: RequiresLand3;
	  recipe?: Recipe12;
	  description?: Description24;
	  wip?: WIP;
	  height: HitboxHeight;
	  name: Name54;
	}
	/**
	 * If set, this item will be drawn on the world map as a colored tile.
	 */
	export interface WorldMapTileColor1 {
	  b: Blue47;
	  r: Red47;
	  g: Green47;
	}
	/**
	 * Attaching data fields to this world element will make them readable by other game mechanics/elements. Can be used to store custom data on a world element.
	 */
	export interface DataFields4 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Recipe12 {
	  components: Ingredients13;
	  output_quantity?: OutputQuantity10;
	  badge_output_modifiers?: OutputModifiedByResearch10;
	  station: Station12;
	  badge_cost_modifiers?: CostModifiedByResearch12;
	  source?: UnlockedBy52;
	  artisans?: ArtisansRequired12;
	  effort_modifier?: EffortModifier15;
	}
	export interface Ingredients13 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface OutputModifiedByResearch10 {
	  [k: string]: {
	    order: number;
	    element: {
	      badge_id: ResearchNode22;
	      style: Style14;
	      value: ChangePerPoint29;
	    };
	  };
	}
	export interface CostModifiedByResearch12 {
	  [k: string]: {
	    order: number;
	    element: {
	      badge_id: ResearchNode23;
	      value: ChangePerPoint30;
	    };
	  };
	}
	export interface ArtisansRequired12 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Description24 {
	  text: EnglishText106;
	  description?: TranslatorHelperText85;
	}
	export interface Name54 {
	  text: EnglishText107;
	  description?: TranslatorHelperText86;
	}
	export interface Juicebox {
	  dialogue_sounds: DialogueSounds1;
	  sprite: WorldSprite20;
	  follow_unlock?: FollowingUnlock1;
	  size: Hitbox2;
	  uicon: UIIcon26;
	  editor_group?: EditorGroup25;
	  wip?: WIP;
	  color_bright: UIColor1;
	  name: Name55;
	}
	/**
	 * Sounds for Juicebox to play (at random) during dialogue moments.
	 */
	export interface DialogueSounds1 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Hitbox2 {
	  width: Width9;
	  height: Height9;
	}
	/**
	 * The color to use for Juicebox's UI.
	 */
	export interface UIColor1 {
	  b: Blue48;
	  r: Red48;
	  g: Green48;
	}
	export interface Name55 {
	  text: EnglishText108;
	  description?: TranslatorHelperText87;
	}
	export interface Floor2 {
	  undersprite?: UnderSprite4;
	  sprite: MainSprite4;
	  map_color: MapColor4;
	  uicon: Icon10;
	  editor_group?: EditorGroup26;
	  placement_sound?: PlacementSound8;
	  recipe?: Recipe13;
	  footstep_sound: FootstepSound4;
	  description?: Description25;
	  flippable: Flippable7;
	  wip?: WIP;
	  name: Name56;
	  dapples?: SunlightDappling4;
	}
	/**
	 * The color to draw this tile on the map.
	 */
	export interface MapColor4 {
	  b: Blue49;
	  r: Red49;
	  g: Green49;
	}
	export interface Recipe13 {
	  components: Ingredients14;
	  output_quantity?: OutputQuantity11;
	  badge_output_modifiers?: OutputModifiedByResearch11;
	  station: Station13;
	  badge_cost_modifiers?: CostModifiedByResearch13;
	  source?: UnlockedBy53;
	  artisans?: ArtisansRequired13;
	  effort_modifier?: EffortModifier16;
	}
	export interface Ingredients14 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface OutputModifiedByResearch11 {
	  [k: string]: {
	    order: number;
	    element: {
	      badge_id: ResearchNode24;
	      style: Style15;
	      value: ChangePerPoint31;
	    };
	  };
	}
	export interface CostModifiedByResearch13 {
	  [k: string]: {
	    order: number;
	    element: {
	      badge_id: ResearchNode25;
	      value: ChangePerPoint32;
	    };
	  };
	}
	export interface ArtisansRequired13 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Description25 {
	  text: EnglishText109;
	  description?: TranslatorHelperText88;
	}
	export interface Name56 {
	  text: EnglishText110;
	  description?: TranslatorHelperText89;
	}
	export interface SunlightDappling4 {
	  dapple_chance: SpawnChance5;
	  dapple_colors: Colors5;
	}
	/**
	 * The color to use for the sunlight dapples.
	 */
	export interface Colors5 {
	  [k: string]: {
	    order: number;
	    element: {
	      b: Blue50;
	      r: Red50;
	      g: Green50;
	    };
	  };
	}
	export interface BuildingPillar {
	  roof_vote: PreferredRoof2;
	  sprite: WorldSprite21;
	  uicon: UIIcon27;
	  editor_group?: EditorGroup27;
	  recipe?: Recipe14;
	  placement_sound: PlacementSound9;
	  description: Description26;
	  pillar_distance: PillarSupportDistance;
	  wip?: WIP;
	  name: Name57;
	}
	export interface Recipe14 {
	  components: Ingredients15;
	  output_quantity?: OutputQuantity12;
	  badge_output_modifiers?: OutputModifiedByResearch12;
	  station: Station14;
	  badge_cost_modifiers?: CostModifiedByResearch14;
	  source?: UnlockedBy54;
	  artisans?: ArtisansRequired14;
	  effort_modifier?: EffortModifier17;
	}
	export interface Ingredients15 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface OutputModifiedByResearch12 {
	  [k: string]: {
	    order: number;
	    element: {
	      badge_id: ResearchNode26;
	      style: Style16;
	      value: ChangePerPoint33;
	    };
	  };
	}
	export interface CostModifiedByResearch14 {
	  [k: string]: {
	    order: number;
	    element: {
	      badge_id: ResearchNode27;
	      value: ChangePerPoint34;
	    };
	  };
	}
	export interface ArtisansRequired14 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Description26 {
	  text: EnglishText111;
	  description?: TranslatorHelperText90;
	}
	export interface Name57 {
	  text: EnglishText112;
	  description?: TranslatorHelperText91;
	}
	/**
	 * Items that can be dropped into the world to mark quest locations and trigger quest events.
	 */
	export interface QuestMarker2 {
	  editor_group?: EditorGroup28;
	  wip?: WIP;
	  name: Name58;
	}
	export interface Resource1 {
	  water_layer?: WaterLayer;
	  object: Object7;
	  celebrate_pickup?: CelebratePickup;
	  grid_snapping?: GridSnapping3;
	  collection_sound?: CollectionSound3;
	  pickupable: Pickupable;
	  using_lighting?: UseLighting13;
	  reactions?: Reactions;
	  priors?: ProgressionPriors;
	  sprite: WorldSprite22;
	  worldmap_tile_color?: WorldMapTileColor2;
	  data_fields?: DataFields5;
	  can_exist_on_floors?: CanExistOnFloors1;
	  underfoot: Underfoot2;
	  light_emitter?: LightEmitter;
	  relative_level?: RelativeLevel3;
	  uicon: UIIcon28;
	  babbler?: Babbler93;
	  requires_land?: RequiresLand4;
	  scale_modifier?: ScaleModifier8;
	  states?: EntityStates1;
	  hitbox: Hitbox;
	  level_viewer_ignore?: IgnoreInLevelViewer4;
	  random_scaling: RandomScalingMinimum3;
	  editor_group?: EditorGroup29;
	  respawnable?: Respawnable;
	  shadow?: Shadow;
	  description?: Description27;
	  spawns?: Spawning;
	  respawn_multiplier?: RespawnTimeMultiplier1;
	  wip?: WIP;
	  level: Level6;
	  material_tags: Materials1;
	  effort_modifier?: EffortModifier18;
	  name: Name60;
	}
	/**
	 * If set, this item will be drawn on the world map as a colored tile.
	 */
	export interface WorldMapTileColor2 {
	  b: Blue51;
	  r: Red51;
	  g: Green51;
	}
	/**
	 * Attaching data fields to this world element will make them readable by other game mechanics/elements. Can be used to store custom data on a world element.
	 */
	export interface DataFields5 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	/**
	 * Define the animations and logic for how this entity enters and exits various states. These states can be interacted with via the Reactions system.
	 */
	export interface EntityStates1 {
	  priorities?: StatePriorities1;
	  states: StateDefinitions1;
	}
	/**
	 * On first spawn and on state refresh, this priority list will be checked. The first priority group whose conditions are met will be chosen. If no conditions are met, the Default State will be used.
	 */
	export interface StatePriorities1 {
	  [k: string]: {
	    order: number;
	    element: StatePriorityGroup1;
	  };
	}
	export interface StatePriorityGroup1 {
	  conditions?: PriorityGroupConditions2;
	  states: States2;
	  name: PriorityGroupNameInternal1;
	}
	/**
	 * If these conditions are met, then one of the states in this priority group will be chosen.
	 */
	export interface PriorityGroupConditions2 {
	  conditions: Conditions6;
	  require_all_conditions: RequireAllConditions5;
	}
	export interface Conditions6 {
	  [k: string]: {
	    order: number;
	    element: Condition7;
	  };
	}
	/**
	 * Which abilities are we evaluating?
	 */
	export interface Abilities6 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface Evaluation8 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value0?: string;
	  value1?: number;
	}
	/**
	 * The 'minutes since timestamp' value can be modified up or down based on an Insight.
	 */
	export interface InsightModifier4 {
	  insight?: Insight17;
	  amount?: ChangePerPoint35;
	}
	/**
	 * If set, this description will appear on the Research Node to explain what it is unlocking.
	 */
	export interface InsightTooltip5 {
	  text: EnglishText113;
	  description?: TranslatorHelperText92;
	}
	export interface DistanceRequiredGridSpaces4 {
	  value0?: Min72;
	  value1?: Max72;
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface Targets7 {
	  [k: string]: {
	    order?: number;
	    element?: Filter35;
	  };
	}
	export interface Filter35 {
	  buffs?: Buffs76;
	  exclude?: Exclude35;
	  require_all_tags?: RequireAllTags34;
	  combatants_only?: Combatants34;
	  datafield_evaluations?: DatafieldEvaluations35;
	  items?: Items51;
	}
	export interface Buffs76 {
	  buffs: Buffs77;
	  require_all: RequireAll44;
	  stacks?: Stacks43;
	}
	export interface Buffs77 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks43 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity74;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations35 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items51 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface NumberOfTargets8 {
	  comparison?: Evaluation9;
	  quantity?: Quantity75;
	}
	export interface HealthEvaluation4 {
	  hp_percentage?: number;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Items52 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The condition will be met if the player is wielding any of these items.
	 */
	export interface Items53 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, then targets other than yourself will be evaluated.
	 */
	export interface NumberOfTargets9 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity76;
	}
	export interface Buffs78 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface BuffTargetFilter4 {
	  [k: string]: {
	    order?: number;
	    element?: Filter36;
	  };
	}
	export interface Filter36 {
	  buffs?: Buffs79;
	  exclude?: Exclude36;
	  require_all_tags?: RequireAllTags35;
	  combatants_only?: Combatants35;
	  datafield_evaluations?: DatafieldEvaluations36;
	  items?: Items54;
	}
	export interface Buffs79 {
	  buffs: Buffs80;
	  require_all: RequireAll47;
	  stacks?: Stacks44;
	}
	export interface Buffs80 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks44 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity77;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations36 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items54 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface Stacks45 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity78;
	}
	/**
	 * How close or far (in grid spaces) the entities must be to be considered for this condition.
	 */
	export interface BuffTargetRange4 {
	  value0?: Min73;
	  value1?: Max73;
	}
	export interface NumberSummoned4 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity79;
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface SummonedEntitiesFilter4 {
	  [k: string]: {
	    order?: number;
	    element?: Filter37;
	  };
	}
	export interface Filter37 {
	  buffs?: Buffs81;
	  exclude?: Exclude37;
	  require_all_tags?: RequireAllTags36;
	  combatants_only?: Combatants36;
	  datafield_evaluations?: DatafieldEvaluations37;
	  items?: Items55;
	}
	export interface Buffs81 {
	  buffs: Buffs82;
	  require_all: RequireAll48;
	  stacks?: Stacks46;
	}
	export interface Buffs82 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks46 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity80;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations37 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items55 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * One of these states will be chosen at random.
	 */
	export interface States2 {
	  [k: string]: {
	    order: number;
	    element: State5;
	  };
	}
	/**
	 * The first state in this list will be the Default State.
	 */
	export interface StateDefinitions1 {
	  [k: string]: {
	    order: number;
	    element: State6;
	  };
	}
	/**
	 * The first state in the list will be the starting state when this first spawns.
	 */
	export interface State6 {
	  duration: Duration1;
	  next_state?: NextStates1;
	  animations?: Animations1;
	  name: StateNameInternal1;
	}
	export interface TimeSeconds1 {
	  value0?: Min74;
	  value1?: Max74;
	}
	export interface NextStates1 {
	  [k: string]: {
	    order: number;
	    element: NextStatePriorityGroup1;
	  };
	}
	export interface NextStatePriorityGroup1 {
	  conditions?: PriorityGroupConditions3;
	  states: States3;
	}
	/**
	 * If these conditions are met, then one of the states in this priority group will be chosen.
	 */
	export interface PriorityGroupConditions3 {
	  conditions: Conditions7;
	  require_all_conditions: RequireAllConditions6;
	}
	export interface Conditions7 {
	  [k: string]: {
	    order: number;
	    element: Condition8;
	  };
	}
	/**
	 * Which abilities are we evaluating?
	 */
	export interface Abilities7 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface Evaluation10 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value0?: string;
	  value1?: number;
	}
	/**
	 * The 'minutes since timestamp' value can be modified up or down based on an Insight.
	 */
	export interface InsightModifier5 {
	  insight?: Insight19;
	  amount?: ChangePerPoint36;
	}
	/**
	 * If set, this description will appear on the Research Node to explain what it is unlocking.
	 */
	export interface InsightTooltip6 {
	  text: EnglishText114;
	  description?: TranslatorHelperText93;
	}
	export interface DistanceRequiredGridSpaces5 {
	  value0?: Min75;
	  value1?: Max75;
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface Targets8 {
	  [k: string]: {
	    order?: number;
	    element?: Filter38;
	  };
	}
	export interface Filter38 {
	  buffs?: Buffs83;
	  exclude?: Exclude38;
	  require_all_tags?: RequireAllTags37;
	  combatants_only?: Combatants37;
	  datafield_evaluations?: DatafieldEvaluations38;
	  items?: Items56;
	}
	export interface Buffs83 {
	  buffs: Buffs84;
	  require_all: RequireAll49;
	  stacks?: Stacks47;
	}
	export interface Buffs84 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks47 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity81;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations38 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items56 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface NumberOfTargets10 {
	  comparison?: Evaluation11;
	  quantity?: Quantity82;
	}
	export interface HealthEvaluation5 {
	  hp_percentage?: number;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Items57 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The condition will be met if the player is wielding any of these items.
	 */
	export interface Items58 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, then targets other than yourself will be evaluated.
	 */
	export interface NumberOfTargets11 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity83;
	}
	export interface Buffs85 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface BuffTargetFilter5 {
	  [k: string]: {
	    order?: number;
	    element?: Filter39;
	  };
	}
	export interface Filter39 {
	  buffs?: Buffs86;
	  exclude?: Exclude39;
	  require_all_tags?: RequireAllTags38;
	  combatants_only?: Combatants38;
	  datafield_evaluations?: DatafieldEvaluations39;
	  items?: Items59;
	}
	export interface Buffs86 {
	  buffs: Buffs87;
	  require_all: RequireAll52;
	  stacks?: Stacks48;
	}
	export interface Buffs87 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks48 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity84;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations39 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items59 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface Stacks49 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity85;
	}
	/**
	 * How close or far (in grid spaces) the entities must be to be considered for this condition.
	 */
	export interface BuffTargetRange5 {
	  value0?: Min76;
	  value1?: Max76;
	}
	export interface NumberSummoned5 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity86;
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface SummonedEntitiesFilter5 {
	  [k: string]: {
	    order?: number;
	    element?: Filter40;
	  };
	}
	export interface Filter40 {
	  buffs?: Buffs88;
	  exclude?: Exclude40;
	  require_all_tags?: RequireAllTags39;
	  combatants_only?: Combatants39;
	  datafield_evaluations?: DatafieldEvaluations40;
	  items?: Items60;
	}
	export interface Buffs88 {
	  buffs: Buffs89;
	  require_all: RequireAll53;
	  stacks?: Stacks50;
	}
	export interface Buffs89 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks50 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity87;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations40 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items60 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * One of these states will be chosen at random.
	 */
	export interface States3 {
	  [k: string]: {
	    order: number;
	    element: State7;
	  };
	}
	/**
	 * All of these animations will play. Unused tracks will have their animations cleared.
	 */
	export interface Animations1 {
	  [k: string]: {
	    order: number;
	    element: SpineAnimation1;
	  };
	}
	export interface SpineAnimation1 {
	  speed?: Speed33;
	  animation_name: Name59;
	  track?: Track1;
	  randomized_start?: RandomizedStart1;
	  looping: Looping4;
	}
	export interface Speed33 {
	  value0: Min77;
	  value1: Max77;
	}
	export interface Description27 {
	  text: EnglishText115;
	  description?: TranslatorHelperText94;
	}
	/**
	 * How this thing spawns in the world.
	 */
	export interface Spawning {
	  [k: string]: {
	    order: number;
	    element: {
	      chance: Coverage;
	      tile: string;
	    };
	  };
	}
	/**
	 * What is this thing made of? This is used for categorization and can otherwise be used by abilities, fulfillments, etc... to broadly categorize interactions.
	 */
	export interface Materials1 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Name60 {
	  text: EnglishText116;
	  description?: TranslatorHelperText95;
	}
	export interface Loot2 {
	  [k: string]: {
	    order?: number;
	    element?: LootGroup2;
	  };
	}
	/**
	 * A collection of items that share the same rules about how they drop.
	 */
	export interface LootGroup2 {
	  bonus_loot?: ConsiderAsBonus1;
	  drop_chance?: DropChance2;
	  time_requirement?: TimeOfDay2;
	  item_tags_used?: ItemTagsUsed2;
	  item_ids_used?: ItemsUsed5;
	  items_dropped: Items61;
	  num_drops?: DropQuantity2;
	  badge_requirement?: UnlockedBy55;
	  datafield_link?: DatafieldQuantityLink1;
	  trigger: Trigger3;
	  areas?: Areas2;
	  datafield_evaluations?: DatafieldEvaluations41;
	  ignore_in_progression_map?: IgnoreInProgressionMap2;
	  source_listed?: IncludeAsSource1;
	}
	/**
	 * The kinds of items required to be used on this for loot to drop.
	 */
	export interface ItemTagsUsed2 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Specific items required to be used on this for loot to drop.
	 */
	export interface ItemsUsed5 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface Items61 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      locked?: boolean;
	      weight?: number;
	      item?: string;
	    };
	  };
	}
	/**
	 * A random number of items will drop in this range.
	 */
	export interface DropQuantity2 {
	  value0?: Min78;
	  value1?: Max78;
	}
	/**
	 * If set, the loot will only drop from something within the listed areas.
	 */
	export interface Areas2 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * This loot group can check for data fields on the entity, and only drop if the conditions are met.
	 */
	export interface DatafieldEvaluations41 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	/**
	 * Sound effects to play when this thing is destroyed.
	 */
	export interface DestructionSounds3 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Sound effects to play when this thing takes damage.
	 */
	export interface InjurySounds3 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      minor_injury_sound?: Minor3;
	      major_injury_sound?: Major3;
	      chance_of_playing?: Chance15;
	    };
	  };
	}
	/**
	 * A timestamp that is saved on world entities for persistent tracking of when things occurred to them.
	 */
	export interface Timestamp8 {
	  uicon?: UIIcon29;
	  description: Description28;
	  wip?: WIP;
	  name: Name61;
	}
	export interface BuildingRoof {
	  slope_back: BackSlope;
	  fill: VerticalFiller;
	  slope_back_edge: BackEdge;
	  slope_front: FrontSlope;
	  peak: CenterPeak;
	  slope_front_edge: FrontEdge;
	  wip?: WIP;
	  name: Name62;
	}
	export interface Name62 {
	  text: EnglishText117;
	  description?: TranslatorHelperText96;
	}
	/**
	 * A tag used to convey properties of an item in Crashlands 2. All tags have mechanical implications for how the item is handled by various game systems.
	 */
	export interface ItemTag {
	  parent_tag?: ParentTag;
	  editor_category?: EditorCategory1;
	  invulnerable?: Invulnerable;
	  settable_on_items?: SettableOnItems;
	  num_craft_for_skill?: NumCraftsForFirstSkillLevel;
	  inventory_sound?: InventorySound3;
	  uicon?: UIIcon30;
	  recipe_category?: RecipeCategory1;
	  buildmode?: BuildModeAccessible;
	  respawnable?: Respawnable1;
	  crafting_effort?: CraftingEffortMultiplier;
	  priority: TagPriority;
	  wip?: WIP;
	  name: TagName;
	}
	/**
	 * If the tag is displayed to the player (e.g. on the Equipment screen), they will see this name.
	 */
	export interface TagName {
	  text: EnglishText118;
	  description?: TranslatorHelperText97;
	}
	export interface Character4 {
	  idle_text?: IdleText;
	  background_info?: BackgroundInformation1;
	  editor_group?: EditorGroup30;
	  wip?: WIP;
	  species: Species;
	  name: Name63;
	}
	/**
	 * Fallback things the character can say when interacted with when they aren't involved in any quests.
	 */
	export interface IdleText {
	  [k: string]: {
	    order: number;
	    element: Topic;
	  };
	}
	/**
	 * For each topic, the character will say latest Phrase Group whose requirements are met (if any).
	 */
	export interface Topic {
	  phrase_groups: PhraseGroups;
	  requirements?: MomentRequirements2;
	  name: TopicNameInternal;
	}
	/**
	 * The character will say lines from the latest phrase group whose requirements are met.
	 */
	export interface PhraseGroups {
	  [k: string]: {
	    order: number;
	    element: PhraseGroup;
	  };
	}
	export interface PhraseGroup {
	  phrases: Phrases1;
	  requirements?: Requirements9;
	  name: GroupNameInternal;
	}
	export interface Phrases1 {
	  [k: string]: {
	    order: number;
	    element: {
	      text: {
	        text: EnglishText119;
	      };
	      emoji?: Emoji9;
	    };
	  };
	}
	/**
	 * Conditions that must be true for the quest to proceed.
	 */
	export interface Requirements9 {
	  [k: string]: {
	    order: number;
	    element: Requirement1;
	  };
	}
	/**
	 * Conditions that must be true for the quest to proceed.
	 */
	export interface MomentRequirements2 {
	  [k: string]: {
	    order: number;
	    element: Requirement;
	  };
	}
	/**
	 * For developer use. Just for establishing background information.
	 */
	export interface BackgroundInformation1 {
	  personality?: Personality1;
	  notes?: Notes1;
	  pronouns?: Pronouns1;
	  brief?: Brief1;
	}
	/**
	 * Information about this character's background and their role in the game world.
	 */
	export interface Notes1 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Name63 {
	  text: EnglishText120;
	  description?: TranslatorHelperText98;
	}
	/**
	 * For when this name is displayed in a dialogue window.
	 */
	export interface NameColor4 {
	  b?: Blue52;
	  r?: Red52;
	  g?: Green52;
	}
	/**
	 * Items that can be used during gameplay to heal or provide temporary boosts.
	 */
	export interface Consumable {
	  use_sound: ConsumeSound;
	  fishing?: Fishing;
	  priors?: ProgressionPriors;
	  effects: Effects2;
	  sprite: WorldSprite23;
	  inventory_sound: InventorySound4;
	  uicon?: UIIcon31;
	  editor_group?: EditorGroup31;
	  recipe?: Recipe15;
	  type: Type5;
	  description: Description29;
	  wip?: WIP;
	  level: Level7;
	  name: Name64;
	}
	export interface Effects2 {
	  [k: string]: {
	    order: number;
	    element: Effect1;
	  };
	}
	export interface UnlockedBy56 {
	  prerequisite: UnlockedBy57;
	  unlock_text?: UnlockDescription18;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription18 {
	  text: EnglishText121;
	  description?: TranslatorHelperText99;
	}
	export interface UnlockedBy58 {
	  prerequisite: UnlockedBy59;
	  unlock_text?: UnlockDescription19;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription19 {
	  text: EnglishText122;
	  description?: TranslatorHelperText100;
	}
	export interface Recipe15 {
	  components: Ingredients16;
	  output_quantity?: OutputQuantity13;
	  badge_output_modifiers?: OutputModifiedByResearch13;
	  station: Station15;
	  badge_cost_modifiers?: CostModifiedByResearch15;
	  source?: UnlockedBy60;
	  artisans?: ArtisansRequired15;
	  effort_modifier?: EffortModifier19;
	}
	export interface Ingredients16 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface OutputModifiedByResearch13 {
	  [k: string]: {
	    order: number;
	    element: {
	      badge_id: ResearchNode28;
	      style: Style17;
	      value: ChangePerPoint37;
	    };
	  };
	}
	export interface CostModifiedByResearch15 {
	  [k: string]: {
	    order: number;
	    element: {
	      badge_id: ResearchNode29;
	      value: ChangePerPoint38;
	    };
	  };
	}
	export interface ArtisansRequired15 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Description29 {
	  text: EnglishText123;
	  description?: TranslatorHelperText101;
	}
	export interface Name64 {
	  text: EnglishText124;
	  description?: TranslatorHelperText102;
	}
	export interface DamageProfile1 {
	  modifiers?: Modifiers1;
	  damage_types: DamageTypes3;
	  wip?: WIP;
	  name: Name65;
	}
	/**
	 * Whether to deal extra or reduced damage to certain things, or certain kinds of things.
	 */
	export interface Modifiers1 {
	  [k: string]: {
	    order: number;
	    element: {
	      key: Filter41;
	      value: Modifier5;
	    };
	  };
	}
	/**
	 * What kind of damage to deal, and what percent of the 'normal' amount to deal. The actual damage dealt will be calculated based on game factors such as the level of the user, cast times, and stats of the damager.
	 */
	export interface DamageTypes3 {
	  [k: string]: {
	    order: number;
	    element: {
	      key: DamageType3;
	      value: DamageAmount1;
	    };
	  };
	}
	
}
