export namespace Crashlands2 {
	/* eslint-disable */
	/**
	 * This file was automatically generated by json-schema-to-typescript.
	 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
	 * and run json-schema-to-typescript to regenerate this file.
	 */
	
	/**
	 * Check this if some aspect of this element's mechanics or logic are unfinished or need reworking.
	 */
	export type MechanicsNeeded = boolean;
	/**
	 * Check this if some aspect of this element's audio elements are unfinished or need reworking.
	 */
	export type AudioNeeded = boolean;
	/**
	 * Check this if some aspect of this element's text fields are unfinished or need reworking.
	 */
	export type TextNeeded = boolean;
	/**
	 * Check this if the element needs to have some of its numbers tuned to make it more or less challenging to engage with.
	 */
	export type BalanceNeeded = boolean;
	/**
	 * Check this if the element needs to be added to the game in a way that the player can access it as intended.
	 */
	export type IntegrationNeeded = boolean;
	/**
	 * Check this if this element is under heavy iteration and shouldn't be viewed as a fully functional element.
	 */
	export type MoteIsDraft = boolean;
	/**
	 * Check this if some aspect of this element's visuals are unfinished or need reworking.
	 */
	export type VisualsNeeded = boolean;
	/**
	 * The object's string ID in the Game Maker project.
	 */
	export type Name = string;
	/**
	 * A human-readable name for this timestamp.
	 */
	export type Name1 = string;
	export type UIIcon = string;
	/**
	 * An explanation of what this data field is intended to be used for.
	 */
	export type Description = string;
	/**
	 * The order in which this thing should appear in the crafting menu.
	 */
	export type Order = number;
	export type Name2 = string;
	export type Green = number;
	export type Red = number;
	export type Blue = number;
	export type Icon = string;
	export type Green1 = number;
	export type Red1 = number;
	export type Blue1 = number;
	/**
	 * The sound to play when this is placed in the editor or in Build Mode.
	 */
	export type PlacementSound = string;
	export type EnglishText = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText = string;
	export type WorldSprite = string;
	/**
	 * Structural base items will vote on their preferred roof. The roof type with the most votes will be displayed.
	 */
	export type PreferredRoof = string;
	export type EnglishText1 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText1 = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup = string;
	export type ResearchNode = string;
	export type ChangePerPoint = number;
	export type OutputQuantity = number;
	export type Style = "Additive" | "Multiplicative";
	export type ResearchNode1 = string;
	export type ChangePerPoint1 = number;
	export type UnlockedBy = string;
	/**
	 * Change this number to increase or decrease the number of materials required to craft this item.
	 */
	export type EffortModifier = number;
	/**
	 * What workstation the player must be near to craft this recipe.
	 */
	export type Station = string;
	export type UIIcon1 = string;
	/**
	 * Name of this damage profile. For internal use.
	 */
	export type Name4 = string;
	export type DamageType = string;
	export type DamageAmount = number;
	export type Filter = string;
	export type Modifier = number;
	export type UsableOnBuffs = boolean;
	/**
	 * When equipment gets 'stat points', each stat point will boost this stat by this amount.
	 */
	export type ValuePoint = number;
	export type DisplayAsPercent = boolean;
	export type EnglishText2 = string;
	/**
	 * The starting point of this stat, all else equal.
	 */
	export type ValueDefault = number;
	/**
	 * The highest this stat can go.
	 */
	export type ValueMax = number;
	/**
	 * The order in which the stats appear in a stat breakdown.
	 */
	export type Order1 = number;
	export type ShowOnPlayerUI = boolean;
	export type EnglishText3 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText2 = string;
	/**
	 * How many decimals to display.
	 */
	export type DecimalPrecision = number;
	export type UsableOnEquipment = boolean;
	/**
	 * This stat will be indented under its parent where possible.
	 */
	export type ParentStat = string;
	/**
	 * The lowest this stat can go.
	 */
	export type ValueMin = number;
	/**
	 * A unique character that lives in the game world.
	 */
	export type Character = Character1 & Character2;
	/**
	 * A handful of words for a quick overview of the character
	 */
	export type Brief = string;
	export type Pronouns = string;
	export type Personality = string;
	export type EnglishText4 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText3 = string;
	export type Species = string;
	export type Requirement =
	  | {
	      style: "Quest";
	      quest: QuestToCheck;
	      quest_status: QuestStatus;
	    }
	  | {
	      style: "Equipped";
	      item: Item;
	    }
	  | {
	      time: Time;
	      style: "Time";
	    }
	  | {
	      style: "Items Owned";
	      items_owned: Items;
	    }
	  | {
	      insight_status: InsightStatus;
	      style: "Insight";
	      insight: Insight;
	    }
	  | {
	      style: "Artisan Following";
	      artisan?: Artisan;
	      following: Following;
	    }
	  | {
	      style: "Comfort";
	      comfort: Comfort;
	      comfort_status: ComfortStatus;
	    }
	  | {
	      style: "Inventory Evaluation";
	      comparisons: InventoryEvaluation;
	    }
	  | {
	      style: "Area";
	      area: AreaToCheck;
	      item_id: Entity;
	    }
	  | {
	      style: "Teleporter Active";
	      teleporter_area?: TeleporterArea;
	      teleporter_active: ActiveState;
	    }
	  | {
	      style: "Requirement Group";
	      require_all: RequireAll;
	      invert: Invert;
	      group_requirements: MomentRequirements1;
	    }
	  | {
	      stage?: PetStage;
	      style: "Pet";
	      pet?: Pet;
	      following?: Following1;
	    }
	  | {
	      boss: Boss;
	      style: "Boss Defeated";
	    }
	  | {
	      distance: Distance;
	      style: "Entity Proximity";
	      exclusive?: Exclusive;
	      same_room: SameRoom;
	      item_ids: Entities;
	    };
	/**
	 * The quest whose status we are querying.
	 */
	export type QuestToCheck = string;
	export type QuestStatus = "Complete" | "Started" | "Not Started";
	/**
	 * The player must be wearing this item.
	 */
	export type Item = string;
	export type Time = "Day" | "Night";
	export type Quantity = number;
	export type InsightStatus = "Complete" | "Available" | "Locked";
	export type Insight = string;
	/**
	 * Leave unset to query whether any artisans are either following or not following. Otherwise, this will query the specific artisan you have chosen.
	 */
	export type Artisan = string;
	/**
	 * If false, then this will only trigger if the artisan is not following.
	 */
	export type Following = boolean;
	export type Comfort = string;
	export type ComfortStatus = "Complete" | "Available";
	export type Quantity1 = number;
	export type Item1 = string;
	export type AreaToCheck = string;
	/**
	 * The entity that must be in the area for the requirement to pass.
	 */
	export type Entity = string;
	/**
	 * If not set, this requirement will check for 'any' teleporters.
	 */
	export type TeleporterArea = string;
	/**
	 * The teleporter must be in this state.
	 */
	export type ActiveState = boolean;
	/**
	 * If set to false, then this requirement group will pass if any of its requirements are met.
	 */
	export type RequireAll = boolean;
	/**
	 * If set, then this requirement group will 'pass' if its requirements are NOT met.
	 */
	export type Invert = boolean;
	/**
	 * If unset, then this requirement will be met if any of your pets match it.
	 */
	export type Pet = string;
	/**
	 * If set, then this will only trigger if the pet's following state matches this.
	 */
	export type Following1 = boolean;
	export type Boss = string;
	/**
	 * How far from the player (in grid spaces) the entity should be for this requirement to be met.
	 */
	export type Distance = number;
	/**
	 * Only consider this requirement met if NONE of the listed entities are within the range.
	 */
	export type Exclusive = boolean;
	/**
	 * If true, this requirement will check whether the entity is in the same room as the player. If outdoors, it will use distance.
	 */
	export type SameRoom = boolean;
	export type EntityType = string;
	export type TopicNameInternal = string;
	export type Requirement1 =
	  | {
	      style: "Quest";
	      quest: QuestToCheck1;
	      quest_status: QuestStatus1;
	    }
	  | {
	      style: "Equipped";
	      item: Item2;
	    }
	  | {
	      time: Time1;
	      style: "Time";
	    }
	  | {
	      style: "Items Owned";
	      items_owned: Items1;
	    }
	  | {
	      insight_status: InsightStatus1;
	      style: "Insight";
	      insight: Insight1;
	    }
	  | {
	      style: "Artisan Following";
	      artisan?: Artisan1;
	      following: Following2;
	    }
	  | {
	      style: "Comfort";
	      comfort: Comfort1;
	      comfort_status: ComfortStatus1;
	    }
	  | {
	      style: "Inventory Evaluation";
	      comparisons: InventoryEvaluation1;
	    }
	  | {
	      style: "Area";
	      area: AreaToCheck1;
	      item_id: Entity1;
	    }
	  | {
	      style: "Teleporter Active";
	      teleporter_area?: TeleporterArea1;
	      teleporter_active: ActiveState1;
	    }
	  | {
	      style: "Requirement Group";
	      require_all: RequireAll1;
	      invert: Invert1;
	      group_requirements: Requirements1;
	    }
	  | {
	      stage?: PetStage1;
	      style: "Pet";
	      pet?: Pet1;
	      following?: Following3;
	    }
	  | {
	      boss: Boss1;
	      style: "Boss Defeated";
	    };
	/**
	 * The quest whose status we are querying.
	 */
	export type QuestToCheck1 = string;
	export type QuestStatus1 = "Complete" | "Started" | "Not Started";
	/**
	 * The player must be wearing this item.
	 */
	export type Item2 = string;
	export type Time1 = "Day" | "Night";
	export type Quantity2 = number;
	export type InsightStatus1 = "Complete" | "Available" | "Locked";
	export type Insight1 = string;
	/**
	 * Leave unset to query whether any artisans are either following or not following. Otherwise, this will query the specific artisan you have chosen.
	 */
	export type Artisan1 = string;
	/**
	 * If false, then this will only trigger if the artisan is not following.
	 */
	export type Following2 = boolean;
	export type Comfort1 = string;
	export type ComfortStatus1 = "Complete" | "Available";
	export type Quantity3 = number;
	export type Item3 = string;
	export type AreaToCheck1 = string;
	/**
	 * The entity that must be in the area for the requirement to pass.
	 */
	export type Entity1 = string;
	/**
	 * If not set, this requirement will check for 'any' teleporters.
	 */
	export type TeleporterArea1 = string;
	/**
	 * The teleporter must be in this state.
	 */
	export type ActiveState1 = boolean;
	/**
	 * If set to false, then this requirement group will pass if any of its requirements are met.
	 */
	export type RequireAll1 = boolean;
	/**
	 * If set, then this requirement group will 'pass' if its requirements are NOT met.
	 */
	export type Invert1 = boolean;
	/**
	 * If unset, then this requirement will be met if any of your pets match it.
	 */
	export type Pet1 = string;
	/**
	 * If set, then this will only trigger if the pet's following state matches this.
	 */
	export type Following3 = boolean;
	export type Boss1 = string;
	export type EnglishText5 = string;
	export type Emoji = string;
	export type GroupNameInternal = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup1 = string;
	export type Character2 = {
	  name_color?: NameColor;
	  scale: Scale;
	  species?: "species_tendraam";
	  head_scale: HeadScale;
	  face: Face;
	  front_horn: FrontHorn;
	  back_horn: BackHorn;
	};
	export type Green2 = number;
	export type Red2 = number;
	export type Blue2 = number;
	export type Scale = number;
	export type HeadScale = number;
	export type Face = "Cute" | "Angsty" | "Strong" | "Leafy" | "Drab";
	export type FrontHorn = "Slope Dope" | "Tall Bull" | "Leia Blossom" | "Freshly Shorn" | "Yak Flex";
	export type BackHorn = "Slope Dope" | "Tall Bull" | "Leia Blossom" | "Freshly Shorn" | "Yak Flex";
	export type SkinName = string;
	export type Scale1 = number;
	/**
	 * If checked, the pet will be unable to use their attack unless they can find a path to the target.
	 */
	export type AbilityRequiresMelee = boolean;
	export type WorldSprite1 = string;
	/**
	 * The sound the pet will make when you tell it to go back to its nest.
	 */
	export type StopFollowingSound = string;
	export type EnglishText6 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText4 = string;
	export type Condition =
	  | {
	      type?: "Standing on Tile Type";
	      floor_tile: Floor;
	      dock_tile: Dock;
	      terrain_tile: Terrain;
	    }
	  | {
	      interior_tiles: InteriorTileArea;
	      type?: "Room Size";
	    }
	  | {
	      type?: "Be Indoors";
	    }
	  | {
	      type?: "Item Tally";
	      item_tally: {
	        value1?: number;
	        value0?: Items2;
	        comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      };
	      whole_building: WholeBuilding;
	    }
	  | {
	      num_rooms: NumberOfRooms;
	      type?: "Number of Rooms";
	    }
	  | {
	      distance: TileDistance;
	      type?: "Item Relationships";
	      source_items: SourceItems;
	      destination_items: TargetItems;
	      whole_building: WholeBuilding1;
	    };
	export type Floor = boolean;
	export type Dock = boolean;
	export type Terrain = boolean;
	/**
	 * If true, the entire building will be checked instead of just the Artisan's room.
	 */
	export type WholeBuilding = boolean;
	/**
	 * If true, the entire building will be checked instead of just the Artisan's room.
	 */
	export type WholeBuilding1 = boolean;
	export type EnglishText7 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText5 = string;
	export type Egg = string;
	/**
	 * The egg will periodically jiggle and make a sound while hatching.
	 */
	export type EggSounds = string;
	/**
	 * If checked, this ability fall back to Enabled if no 'Enablement' criteria are met. If unchecked, it will default to disabled.
	 */
	export type EnabledByDefault = boolean;
	/**
	 * This enablement will be met if the pet is at least at this stage of growth.
	 */
	export type Stage = "Baby" | "Adult" | "Embiggened";
	/**
	 * This enablement will be met if this mastery is active.
	 */
	export type Mastery = string;
	/**
	 * If checked, this ability will be enabled when the stage and mastery requirements are met. If unchecked, the ability will be disabled if the criteria are met.
	 */
	export type Enables = boolean;
	export type Ability1 = string;
	export type MovementVisuals =
	  | {
	      hop_anticipation?: HopAnticipationSeconds;
	      hop_followthrough?: PostHopFollowthroughSeconds;
	      animation?: HopAnimationName;
	      babbler?: Babbler;
	      style: "Hop";
	      hop_speed: HopVerticalSpeed;
	    }
	  | {
	      run_vertical_speed: RunVerticalBounceSpeed;
	      style: "Run";
	      animation?: RunAnimationName;
	      babbler?: Babbler1;
	    }
	  | {
	      style: "Crawl";
	      animation?: CrawlAnimationName;
	      babbler?: Babbler2;
	    }
	  | {
	      animation?: Animation;
	      babbler?: Babbler3;
	      z_baseline: BaselineAltitudePixels;
	      z_sine?: AltitudeSineWave;
	      style: "Fly";
	      flaps?: FlappingVerticalMovements;
	    };
	/**
	 * How long to hold before rising off the ground, to make room for a pre-hop animation.
	 */
	export type HopAnticipationSeconds = number;
	/**
	 * How long to hold after landing on the ground from a hop, to make room for animations.
	 */
	export type PostHopFollowthroughSeconds = number;
	/**
	 * Defaults to 'hop' but can be overridden.
	 */
	export type HopAnimationName = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler = string;
	/**
	 * As a percentage of base gravity. This is fairly sensitive.
	 */
	export type HopVerticalSpeed = number;
	/**
	 * How fast the character should pop up off the ground with each leg movement. As a percentage of base gravity. This is fairly sensitive.
	 */
	export type RunVerticalBounceSpeed = number;
	/**
	 * Defaults to 'run' but can be overridden.
	 */
	export type RunAnimationName = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler1 = string;
	/**
	 * Defaults to 'crawl' but can be overridden.
	 */
	export type CrawlAnimationName = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler2 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler3 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude = number;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds = number;
	/**
	 * How the actor animates while not actively moving.
	 */
	export type StationaryVisuals =
	  | {
	      style?: "Stand";
	      animation?: Animation1;
	      babbler?: Babbler4;
	    }
	  | {
	      animation?: Animation2;
	      babbler?: Babbler5;
	      z_baseline: BaselineAltitudePixels1;
	      z_sine?: AltitudeSineWave1;
	      style: "Fly";
	      flaps?: FlappingVerticalMovements1;
	    };
	/**
	 * Defaults to 'idle.
	 */
	export type Animation1 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler4 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation2 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler5 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels1 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude1 = number;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed1 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance1 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds1 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds1 = number;
	/**
	 * Relative to the global movement speed.
	 */
	export type MovementSpeed = number;
	/**
	 * Who the creature will attempt to cast this ability on.
	 */
	export type Target = "Enemy" | "Player";
	export type MaxSeconds = number;
	export type MinSeconds = number;
	export type Green3 = number;
	export type Red3 = number;
	export type Blue3 = number;
	export type Condition1 =
	  | {
	      abilities?: Abilities;
	      target_entity: TargetEntity;
	      casting_state: Casting;
	      condition_type?: "Ability";
	    }
	  | {
	      target_entity: TargetEntity1;
	      datafield_evaluation: Evaluation;
	      condition_type?: "Datafield";
	    }
	  | {
	      daytime: DuringDaytime;
	      condition_type?: "Daylight";
	    }
	  | {
	      condition_type?: "Combat";
	      combat: InCombat;
	    }
	  | {
	      insight_modifier?: InsightModifier;
	      minutes_passed: MinutesSinceTimestamp;
	      evaluation: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      condition_type?: "Timestamp";
	      timestamp: Timestamp1;
	    }
	  | {
	      moon: ActiveMoon;
	      condition_type?: "Moon";
	    }
	  | {
	      quest: QuestToCheck2;
	      quest_status: QuestStatus2;
	      condition_type?: "Quest";
	    }
	  | {
	      artisan: Buddy;
	      condition_type?: "Artisan Following";
	      following: Following4;
	    }
	  | {
	      unlock_text?: InsightTooltip;
	      prerequisite: Insight3;
	      condition_type?: "Insight";
	    }
	  | {
	      proximity_quantity: NumberOfTargets;
	      proximity_range: DistanceRequiredGridSpaces;
	      proximity_targets: Targets;
	      condition_type?: "Proximity";
	    }
	  | {
	      target_entity: TargetEntity2;
	      hp_evaluation: HealthEvaluation;
	      condition_type?: "Health";
	    }
	  | {
	      require_all: RequireAll3;
	      items: Items4;
	      condition_type?: "Item Equipped";
	    }
	  | {
	      items: Items5;
	      condition_type?: "Item Wielding";
	    }
	  | {
	      num_pieces: NumberOfPiecesEquipped;
	      condition_type?: "Wearing Equipment Set";
	      equipment_set: EquipmentSet;
	    }
	  | {
	      buff_require_all: RequireAll4;
	      buff_check_self: CheckSelf;
	      buff_own_only: OwnBuffsOnly;
	      buff_num_targets?: NumberOfTargets1;
	      condition_type?: "Buffs";
	      buff_target_filter?: BuffTargetFilter;
	      buff_proximity?: BuffTargetRange;
	      buff_stack_evaluation?: Stacks2;
	      buffs: Buffs4;
	      buff_target: TargetEntity3;
	    }
	  | {
	      boss: Boss2;
	      condition_type?: "Boss Defeated";
	    }
	  | {
	      summoned_filter?: SummonedEntitiesFilter;
	      condition_type?: "Summoned Entities";
	      comparison: NumberSummoned;
	    };
	/**
	 * Which entity's ability to query.
	 */
	export type TargetEntity = "Self" | "Other";
	/**
	 * If set, the ability's casting state must match this checkbox.
	 */
	export type Casting = boolean;
	/**
	 * Which entity's data fields to query.
	 */
	export type TargetEntity1 = "Self" | "Other";
	export type DuringDaytime = boolean;
	export type InCombat = boolean;
	/**
	 * How much the 'Minutes Since Timestamp' should be adjusted (up or down) for each point invested in the Insight.
	 */
	export type ChangePerPoint2 = number;
	export type Insight2 = string;
	/**
	 * If greater than 0, then this many minutes will have passed since the timestamp was set. If less than 0, the timestamp will be this many minutes from now.
	 */
	export type MinutesSinceTimestamp = number;
	export type Timestamp1 = string;
	export type ActiveMoon = string;
	/**
	 * The quest whose status we are querying.
	 */
	export type QuestToCheck2 = string;
	export type QuestStatus2 = "Complete" | "Started" | "Not Started";
	export type Buddy = string;
	export type Following4 = boolean;
	export type EnglishText8 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText6 = string;
	export type Insight3 = string;
	export type Quantity4 = number;
	export type Evaluation1 = "==" | "!=" | "<" | "<=" | ">" | ">=";
	export type Max = number;
	export type Min = number;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll2 = boolean;
	export type Quantity5 = number;
	/**
	 * Which entity's health to query.
	 */
	export type TargetEntity2 = "Self" | "Other";
	/**
	 * If checked, this condition will only be met if ALL of the items listed are equipped at the same time.
	 */
	export type RequireAll3 = boolean;
	/**
	 * If the player is wearing at least this many pieces, the condition will be met.
	 */
	export type NumberOfPiecesEquipped = number;
	export type EquipmentSet = string;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on yourself at the same time.
	 */
	export type RequireAll4 = boolean;
	/**
	 * Obsolete--delete.
	 */
	export type CheckSelf = boolean;
	/**
	 * If checked, only buffs created by you will be checked. Otherwise, all buffs will be checked.
	 */
	export type OwnBuffsOnly = boolean;
	export type Quantity6 = number;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants1 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags1 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude1 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll5 = boolean;
	export type Quantity7 = number;
	export type Max1 = number;
	export type Min1 = number;
	export type Quantity8 = number;
	/**
	 * Which entity's buffs to query.
	 */
	export type TargetEntity3 = "Self" | "Other" | "All Entities";
	export type Boss2 = string;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants2 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags2 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude2 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll6 = boolean;
	export type Quantity9 = number;
	export type Quantity10 = number;
	export type NameInternal = string;
	export type Action =
	  | {
	      target_entity: TargetEntity4;
	      blame?: Blame;
	      ability: Ability2;
	      action_type?: "Cast Ability";
	    }
	  | {
	      ability?: Ability3;
	      action_type?: "Finish Ability";
	    }
	  | {
	      ability?: Ability4;
	      action_type?: "Stop Ability";
	    }
	  | {
	      target_entity: SoundLocation;
	      sound: Sound;
	      voice?: PlayAsVoice;
	      action_type?: "Play a Sound";
	    }
	  | {
	      healing_percentage?: HealingPercentage;
	      stacks: Stacks4;
	      action_type?: "Buff";
	      target_entity: TargetEntity5;
	      damage_modifier?: DamageModifier;
	      buff: Buff;
	    }
	  | {
	      spawn_item: ThingToSpawn;
	      summoned?: EntityIsSummoned;
	      distance_range?: SpawnDistance;
	      require_line_of_sight?: RequireLineOfSight;
	      action_type?: "Create Entity";
	      non_overlap: AttemptNonOverlap;
	      spawn_location?: NewEntityLocation;
	      forced_spawning?: IgnoreAllConflicts;
	    }
	  | {
	      counts_as_death: CountsAsDeath;
	      target_entity: TargetEntity6;
	      drop_loot: DropLoot;
	      action_type?: "Destroy";
	    }
	  | {
	      target_entity?: TargetEntity7;
	      offset: OffsetMinutes;
	      timestamp: Timestamp2;
	      action_type?: "Set Timestamp";
	    }
	  | {
	      target_entity?: TargetEntity8;
	      minutes: IncrementMinutes;
	      timestamp: Timestamp3;
	      action_type?: "Increment Timestamp";
	    }
	  | {
	      datafield: Datafield;
	      target_entity?: TargetEntity9;
	      value: Value;
	      action_type?: "Set Datafield";
	    }
	  | {
	      datafield: Datafield1;
	      target_entity?: TargetEntity10;
	      value: Value1;
	      action_type?: "Increment Datafield";
	    }
	  | {
	      damage_profile: DamageProfile1;
	      action_type?: "Damage";
	      badge_modifiers?: InsightDamageModifiers;
	      datafield_modifiers?: DatafieldMultipliers;
	      target_entity: TargetEntity11;
	      target_filter?: TargetFilters;
	      damage_success_sound?: ImpactSound;
	      damage_failure_sound?: FailureSound;
	    }
	  | {
	      action_type?: "Refresh State";
	    }
	  | {
	      datafield: Datafield2;
	      target_entity: DatafieldOwner1;
	      action_type?: "Copy Datafield";
	    }
	  | {
	      target_entity: HealingTarget;
	      healing_percentage: HealingPercentage1;
	      action_type?: "Heal";
	    }
	  | {
	      boss_phase: NewBossPhase;
	      action_type?: "Boss Phase Change";
	    }
	  | {
	      stacks?: Stacks6;
	      positive?: RemovePositiveBuffs;
	      action_type?: "Remove Buff";
	      target_entity: TargetEntity12;
	      negative?: RemoveNegativeBuffs;
	      buff_to_remove?: Buff2;
	    }
	  | {
	      charges?: Charges;
	      target_entity: TargetEntity13;
	      ability?: Ability5;
	      action_type?: "Restore Charge";
	    }
	  | {
	      loot_items: LootItems;
	      action_type?: "Drop Loot";
	    }
	  | {
	      visual_effect: VisualEffect;
	      action_type: "Visual Effect";
	    };
	/**
	 * Which entity to cast this ability on.
	 */
	export type TargetEntity4 = "Self" | "Other";
	/**
	 * If this ability causes threat, should the threat be attributed to myself, or the 'other' entity (from the trigger)?
	 */
	export type Blame = "Self" | "Other";
	/**
	 * Which ability to cast. Won't cast if already casting it.
	 */
	export type Ability2 = string;
	/**
	 * Which ability to finish casting, if it's already casting. Won't do anything if the ability is not already casting. If unset, will finish whatever ability is currently casting.
	 */
	export type Ability3 = string;
	/**
	 * Which ability to stop casting, if it's already casting. Won't do anything if the ability is not already casting. If unset, will stop whatever ability is currently casting.
	 */
	export type Ability4 = string;
	/**
	 * Where to play the sound at.
	 */
	export type SoundLocation = "Self" | "Other";
	export type Sound = string;
	/**
	 * Only one 'Voice' sound can be playing at a time per Entity.
	 */
	export type PlayAsVoice = boolean;
	/**
	 * If set, and if the buff can heal, this will set how much health it restores (based on the level of the user).
	 */
	export type HealingPercentage = number;
	/**
	 * How many stacks of the buff to apply.
	 */
	export type Stacks4 = number;
	/**
	 * Which entity to cast this buff on.
	 */
	export type TargetEntity5 = "Self" | "Other" | "Summoner";
	/**
	 * If set, and if the buff deals damage, this will modify its damage.
	 */
	export type DamageModifier = number;
	export type Buff = string;
	export type ThingToSpawn = string;
	/**
	 * 'Summoned' entities exist on behalf of their creators, and their actions will cast blame to the creator. Defaults to false.
	 */
	export type EntityIsSummoned = boolean;
	export type Max2 = number;
	export type Min2 = number;
	/**
	 * If false, the new entity can spawn just about anywhere, including in other buildings.
	 */
	export type RequireLineOfSight = boolean;
	/**
	 * Whether spawning will attempt to find a clear space.
	 */
	export type AttemptNonOverlap = boolean;
	/**
	 * Where the new entity will be created.
	 */
	export type NewEntityLocation = "Self" | "Other";
	/**
	 * If set, this entity will spawn wherever you say, regardless of whether that is allowed.
	 */
	export type IgnoreAllConflicts = boolean;
	/**
	 * If false, the destroyed entity will just stop existing. If true, the entity will trigger any Death events and play its death animations.
	 */
	export type CountsAsDeath = boolean;
	/**
	 * Which entity to destroy.
	 */
	export type TargetEntity6 = "Self" | "Other";
	/**
	 * Whether the destroyed entity should drop loot as if it were killed by the player (if possible).
	 */
	export type DropLoot = boolean;
	/**
	 * Which entity's timestamp to set.
	 */
	export type TargetEntity7 = "Self" | "Other";
	/**
	 * By default, the timestamp will be set to the current playtime minutes. You can add an offset to this, so the timestamp will be earlier or later than the current time.
	 */
	export type OffsetMinutes = number;
	export type Timestamp2 = string;
	/**
	 * Which entity's timestamp to set.
	 */
	export type TargetEntity8 = "Self" | "Other";
	export type IncrementMinutes = number;
	export type Timestamp3 = string;
	export type Datafield = string;
	/**
	 * Which entity's datafield to set.
	 */
	export type TargetEntity9 = "Self" | "Other";
	export type Value = number;
	export type Datafield1 = string;
	/**
	 * Which entity's datafield to increment.
	 */
	export type TargetEntity10 = "Self" | "Other";
	export type Value1 = number;
	export type Buff1 = string;
	/**
	 * If set, this will consume damage from the buff's pool.
	 */
	export type ConsumeDamage = boolean;
	export type Amount = number;
	/**
	 * If true, only buffs created by the caster will be used for damage calculations.
	 */
	export type OwnOnly = boolean;
	/**
	 * Which entity the buff is on.
	 */
	export type BuffTarget = "All Entities" | "Self" | "Target Entity" | "Summoner";
	export type DamageType1 = string;
	export type DamageAmount1 = number;
	/**
	 * If false, this damage will never crit.
	 */
	export type CanCrit = boolean;
	export type Filter4 = string;
	export type Modifier1 = number;
	export type Insight4 = string;
	export type ChangePerPoint3 = number;
	export type EnglishText9 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText7 = string;
	export type DatafieldOwner = "Self" | "Target Entity";
	export type DataField = string;
	/**
	 * Which entity to deal damage to.
	 */
	export type TargetEntity11 = "Self" | "Other";
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants3 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags3 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude3 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll7 = boolean;
	export type Quantity11 = number;
	/**
	 * This sound will only play if damage is dealt.
	 */
	export type ImpactSound = string;
	/**
	 * This sound will play if no targets were damaged.
	 */
	export type FailureSound = string;
	export type Datafield2 = string;
	/**
	 * The entity from which to copy the data.
	 */
	export type DatafieldOwner1 = "Summoner" | "Other";
	/**
	 * The entity from which to copy the data.
	 */
	export type HealingTarget = "Self" | "Other";
	/**
	 * How much health to restore, based on % of typical max health for things of that level.
	 */
	export type HealingPercentage1 = number;
	/**
	 * Which boss phase to change to. This will only work if you are currently fighting the boss to whom this phase belongs.
	 */
	export type NewBossPhase = string;
	/**
	 * How many stacks of the buff to remove. If unset, all stacks will be removed.
	 */
	export type Stacks6 = number;
	export type RemovePositiveBuffs = boolean;
	/**
	 * Which entity to cast this buff on.
	 */
	export type TargetEntity12 = "Self" | "Other";
	export type RemoveNegativeBuffs = boolean;
	export type Buff2 = string;
	/**
	 * How many charges of the ability to restore.
	 */
	export type Charges = number;
	/**
	 * The entity for which to restore ability charges.
	 */
	export type TargetEntity13 = "Self" | "Other";
	/**
	 * This ability will have its charges restored.
	 */
	export type Ability5 = string;
	export type Chance = number;
	export type Max3 = number;
	export type Min3 = number;
	export type Item4 = string;
	export type VisualEffect =
	  | {
	      effect_type: "Electric Arc";
	      electric_arc_source: Source;
	      electric_arc_destination: Destination;
	      electric_arc_color: Color1;
	      electric_arc_source_distance?: DistanceFromSourcePixels;
	      electric_arc_destination_distance?: DistanceFromDestinationPixels;
	    }
	  | {
	      effect_type: "Ground Decal";
	      decal_max_alpha?: MaxAlpha;
	      decal_duration?: DecalDurationSeconds;
	      decal_sprite: DecalSprite;
	      decal_scale?: DecalScale;
	      decal_location: Location;
	    }
	  | {
	      explosion_color: BaseColor;
	      explosion_slomo_burst: SlowMotionPulse;
	      explosion_smoke?: ShowSmoke;
	      effect_type: "Explosion";
	      explosion_random_distance?: RandomDistanceGridSpaces;
	      explosion_location: Location1;
	      explosion_z_offset?: ZOffset;
	      explosion_sound?: Sound1;
	      explosion_highlight_color?: HighlightColor;
	      explosion_scale?: ExplosionScale;
	      explosion_random_delay?: RandomDelaySeconds;
	      explosion_y_offset?: YOffset;
	    }
	  | {
	      burst_particle: Particle;
	      effect_type: "Particle Burst";
	      bursts: Bursts;
	    }
	  | {
	      particle_system_location: Location2;
	      effect_type: "Particle System Burst";
	      particle_system: ParticleSystem;
	      particle_system_y_offset?: YOffset1;
	      particle_system_z_offset?: ZOffset2;
	      particle_system_emitter_scale?: EmitterScale;
	    };
	export type Source = "Self" | "Ground Target" | "Target Entity" | "Summoner";
	export type Destination = "Self" | "Ground Target" | "Target Entity" | "Summoner";
	export type Green4 = number;
	export type Red4 = number;
	export type Blue4 = number;
	export type DistanceFromSourcePixels = number;
	export type DistanceFromDestinationPixels = number;
	export type MaxAlpha = number;
	export type Max4 = number;
	export type Min4 = number;
	/**
	 * This sprite will be drawn subtractively.
	 */
	export type DecalSprite = string;
	export type Max5 = number;
	export type Min5 = number;
	export type Location = "Self" | "Ground Target" | "Target Entity" | "Summoner";
	export type Green5 = number;
	export type Red5 = number;
	export type Blue5 = number;
	/**
	 * If true, there will be a brief slow-down of the game when the explosion occurs to make it feel more impactful. Use sparingly.
	 */
	export type SlowMotionPulse = boolean;
	/**
	 * If true, smoke will be spawned at the explosion location.
	 */
	export type ShowSmoke = boolean;
	export type Max6 = number;
	export type Min6 = number;
	export type Location1 = "Self" | "Ground Target" | "Target Entity" | "Summoner";
	/**
	 * If spawning on the ground, this will be height above ground. If spawning on targets, it will spawn at their height midpoints, plus this offset.
	 */
	export type ZOffset = number;
	/**
	 * There is a default explosion sound, but you can override it here.
	 */
	export type Sound1 = string;
	export type Green6 = number;
	export type Red6 = number;
	export type Blue6 = number;
	export type Max7 = number;
	export type Min7 = number;
	export type Max8 = number;
	export type Min8 = number;
	/**
	 * Can be useful for depth-sorting. For example, a Y offset of 1 will spawn the explosion in front of whatever is explosing.
	 */
	export type YOffset = number;
	/**
	 * Whether the particles should shrink over the course of their lifetimes.
	 */
	export type Shrinking = boolean;
	export type OrientationChangeSec = number;
	export type Sprite = string;
	/**
	 * Will be ignored if Sprite is set.
	 */
	export type Shape =
	  | "Pixel"
	  | "Disk"
	  | "Square"
	  | "Line"
	  | "Star"
	  | "Circle"
	  | "Ring"
	  | "Sphere"
	  | "Flare"
	  | "Spark"
	  | "Explosion"
	  | "Cloud"
	  | "Smoke"
	  | "Snow";
	export type Max9 = number;
	export type Min9 = number;
	export type Max10 = number;
	export type Min10 = number;
	/**
	 * Note that this will be ignored if you set the particle to 'Shrinking'.
	 */
	export type SizeChangePerSecond = number;
	/**
	 * If true, the particle will rotate relative to the direction it is moving.
	 */
	export type OrientationRelative = boolean;
	export type Max11 = number;
	export type Min11 = number;
	export type AlphaValue = number;
	/**
	 * If set, this particle will use the properties of the parent particle, but will override any values you have specified here.
	 */
	export type Parent = string;
	export type YScale = number;
	export type Max12 = number;
	export type Min12 = number;
	export type Max13 = number;
	export type Min13 = number;
	/**
	 * This is proportional to the game's base gravity.
	 */
	export type Gravity = number;
	/**
	 * How much speed the particles should gain or lose per second.
	 */
	export type Acceleration = number;
	export type XScale = number;
	/**
	 * This is an amount that will be randomly added or removed from the particle's size each step.
	 */
	export type SizeWiggle = number;
	export type ParticleNameInternal = string;
	/**
	 * This is an amount that will be randomly added or removed from the particle's rotation each step.
	 */
	export type OrientationWiggle = number;
	export type Green7 = number;
	export type Red7 = number;
	export type Blue7 = number;
	export type Max14 = number;
	export type Min14 = number;
	export type Lighting = "Lit" | "Unlit" | "Additive";
	export type Max15 = number;
	export type Min15 = number;
	/**
	 * If set, the spawn radius will be treated as grid spaces instead of pixels.
	 */
	export type SpawnRadiusAsGrid = boolean;
	/**
	 * If checked, the particles will spawn at z=0 instead of on a target or caster.
	 */
	export type SpawnOnGround = boolean;
	export type Source1 = "Self" | "Ground Target" | "Target Entity" | "Summoner";
	export type Max16 = number;
	export type Min16 = number;
	export type Max17 = number;
	export type Min17 = number;
	/**
	 * If set, the particles will always move away from the center of the source.
	 */
	export type BlastOutward = boolean;
	/**
	 * Billboard bursts are good for shooting things up and out. Ground bursts are good for making smoke rings and such.
	 */
	export type Perspective = "Billboard" | "Isometric";
	/**
	 * If spawning on the ground, this will be height above ground. If spawning on targets, it will spawn at their height midpoints, plus this offset.
	 */
	export type ZOffset1 = number;
	/**
	 * If set, the radius of the spawning will scale relative to the caster's 'scale' modifier. Useful for keeping particles lined up with telegraphs.
	 */
	export type ScaledSpawnRadius = boolean;
	export type Location2 = "Self" | "Ground Target" | "Target Entity" | "Summoner";
	export type ParticleSystem = string;
	/**
	 * Can be useful for depth-sorting. For example, a Y offset of 1 will spawn the explosion in front of whatever is explosing.
	 */
	export type YOffset1 = number;
	/**
	 * If spawning on the ground, this will be height above ground. If spawning on targets, it will spawn at their height midpoints, plus this offset.
	 */
	export type ZOffset2 = number;
	export type EmitterScale = number;
	export type EnglishText10 = string;
	export type Trigger =
	  | {
	      items_used?: ItemsUsed;
	      abilities_used?: AbilitiesUsed;
	      damage_types?: DamageTypes2;
	      health_threshold?: HealthThreshold;
	      direct_damage?: DirectDamage;
	      critical_damage?: CriticalHit;
	      attacker_distance?: AttackerDistance;
	      trigger_type?: "Take Damage";
	      target_filter?: TargetFilter;
	    }
	  | {
	      trigger_type?: "Kill";
	      target_filter?: TargetFilter1;
	    }
	  | {
	      trigger_type?: "Interval";
	      seconds: Seconds;
	    }
	  | {
	      trigger_type?: "Creation";
	    }
	  | {
	      trigger_type?: "Death";
	      target_filter?: MyKillerTargetFilter;
	    }
	  | {
	      trigger_type?: "Spawn";
	    }
	  | {
	      datafield: Datafield3;
	      trigger_type?: "Datafield Change";
	    }
	  | {
	      transition: TriggerTime;
	      trigger_type?: "Daylight Change";
	    }
	  | {
	      items_used?: ItemsUsed1;
	      abilities_used?: AbilitiesUsed1;
	      damage_types?: DamageTypes3;
	      health_threshold?: HealthThreshold1;
	      direct_damage?: DirectDamage1;
	      critical_damage?: CriticalHit1;
	      attacker_distance?: TargetDistance;
	      trigger_type?: "Deal Damage";
	      target_filter?: TargetFilter2;
	    }
	  | {
	      trigger_type?: "Ability Cast";
	      items_used?: ItemsUsed2;
	      abilities_used?: Abilities1;
	      target_filter?: TargetFilter3;
	    }
	  | {
	      apply_to_other: AppliedToOther;
	      trigger_type: "Buff Application";
	      buffs: Buffs19;
	      target_filter?: TargetFilter4;
	    }
	  | {
	      trigger_type: "Buff Expiration";
	      buffs: Buffs22;
	      target_filter?: TargetFilter5;
	      buff_on_self: CheckBuffsOnSelf;
	      buff_on_other: CheckBuffsOnOther;
	    }
	  | {
	      direct_healing?: DirectHealing;
	      trigger_type: "Healing Received";
	    }
	  | {
	      direct_healing?: DirectHealing1;
	      trigger_type: "Healing Sent";
	    }
	  | {
	      boss_phase: BossPhase;
	      trigger_type: "Boss Phase Start";
	    }
	  | {
	      on_gain: TriggerOnStackGain;
	      on_loss: TriggerOnStackLoss;
	      trigger_type: "Buff Stack Change";
	      buffs: Buffs25;
	      each_stack: TriggerOnEachStack;
	    }
	  | {
	      trigger_type: "Thrift";
	    }
	  | {
	      interval_seconds: Seconds1;
	      trigger_type?: "Fixed Interval";
	      interval_offset: Offset;
	    };
	/**
	 * If set, this trigger will only occur if the damage taken drops your health below this percent.
	 */
	export type HealthThreshold = number;
	/**
	 * If set, this trigger will only occur if the kind of damage received matches this checkbox (direct or periodic).
	 */
	export type DirectDamage = boolean;
	/**
	 * If set, this trigger will only occur if receiving critical damage that matches this checkbox.
	 */
	export type CriticalHit = boolean;
	export type Max18 = number;
	export type Min18 = number;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants4 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags4 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude4 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll8 = boolean;
	export type Quantity13 = number;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants5 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags5 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude5 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll9 = boolean;
	export type Quantity14 = number;
	export type Max19 = number;
	export type Min19 = number;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants6 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags6 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude6 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll10 = boolean;
	export type Quantity15 = number;
	export type Datafield3 = string;
	export type TriggerTime = "Day Start" | "Night Start" | "Both";
	/**
	 * If set, this trigger will only occur if the damage dealt drops the target's health below this percent.
	 */
	export type HealthThreshold1 = number;
	/**
	 * If set, this trigger will only occur if the kind of damage received matches this checkbox (direct or periodic).
	 */
	export type DirectDamage1 = boolean;
	/**
	 * If set, this trigger will only occur if receiving critical damage that matches this checkbox.
	 */
	export type CriticalHit1 = boolean;
	export type Max20 = number;
	export type Min20 = number;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants7 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags7 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude7 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll11 = boolean;
	export type Quantity16 = number;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants8 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags8 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude8 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll12 = boolean;
	export type Quantity17 = number;
	/**
	 * If set, this trigger will occur when the caster applies a buff to something else, as opposed to the caster gaining the buff.
	 */
	export type AppliedToOther = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants9 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags9 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude9 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll13 = boolean;
	export type Quantity18 = number;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants10 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags10 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude10 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll14 = boolean;
	export type Quantity19 = number;
	/**
	 * If set, buffs expiring on yourself will be checked.
	 */
	export type CheckBuffsOnSelf = boolean;
	/**
	 * If set, buffs you have applied to other targets will be checked.
	 */
	export type CheckBuffsOnOther = boolean;
	/**
	 * If set, then the healing must match this checkbox. Indirect healing comes from buffs, while direct healing comes from all other sources.
	 */
	export type DirectHealing = boolean;
	/**
	 * If set, then the healing must match this checkbox. Indirect healing comes from buffs, while direct healing comes from all other sources.
	 */
	export type DirectHealing1 = boolean;
	export type BossPhase = string;
	/**
	 * If set, this trigger will occur when the buff stack count increases.
	 */
	export type TriggerOnStackGain = boolean;
	/**
	 * If set, this trigger will occur when the buff stack count decreases.
	 */
	export type TriggerOnStackLoss = boolean;
	/**
	 * If true, this trigger will occur for each stack that is gained or lost in one go. If false, this trigger will only occur once, regardless of how many stacks are gained or lost.
	 */
	export type TriggerOnEachStack = boolean;
	/**
	 * How many seconds between this interval firing. This interval is synchronized to the game clock.
	 */
	export type Seconds1 =
	  | {
	      number: number;
	      style?: "Number";
	    }
	  | {
	      datafield: string;
	      style?: "Datafield";
	    };
	/**
	 * How many seconds to offset the interval by.
	 */
	export type Offset =
	  | {
	      number: number;
	      style?: "Number";
	    }
	  | {
	      datafield: string;
	      style?: "Datafield";
	    };
	/**
	 * If false, then any of the conditions can be met for the actions to occur.
	 */
	export type RequireAllConditions = boolean;
	/**
	 * Whether this buff changes this stat additively or multiplicatively.
	 */
	export type ModifierStyle = "Add" | "Multiply";
	export type Embiggened = number;
	export type Baby = number;
	export type Stat1 = string;
	export type MasteryDeactivatesSynergy = boolean;
	export type Mastery1 = string;
	/**
	 * If false, the object will always render itself at its normal color and won't be darkened or brightened by lighting.
	 */
	export type UseLighting = boolean;
	/**
	 * The sound the pet will make when you tell it to begin following you.
	 */
	export type FollowSound = string;
	/**
	 * This is to show the preview image in the Game Changer.
	 */
	export type PreviewSkin = string;
	export type AbilityCooldownSeconds = number;
	export type EnglishText11 = string;
	export type UIIcon2 = string;
	/**
	 * The sound the pet will make when you open its UI (once it is hatched).
	 */
	export type UIOpenSound = string;
	export type Height = number;
	export type Width = number;
	export type EnglishText12 = string;
	/**
	 * A small sound the creature can make at random, for added personality.
	 */
	export type ChirpSound = string;
	export type EnglishText13 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText8 = string;
	export type MovementVisuals1 =
	  | {
	      hop_anticipation?: HopAnticipationSeconds1;
	      hop_followthrough?: PostHopFollowthroughSeconds1;
	      animation?: HopAnimationName1;
	      babbler?: Babbler6;
	      style: "Hop";
	      hop_speed: HopVerticalSpeed1;
	    }
	  | {
	      run_vertical_speed: RunVerticalBounceSpeed1;
	      style: "Run";
	      animation?: RunAnimationName1;
	      babbler?: Babbler7;
	    }
	  | {
	      style: "Crawl";
	      animation?: CrawlAnimationName1;
	      babbler?: Babbler8;
	    }
	  | {
	      animation?: Animation3;
	      babbler?: Babbler9;
	      z_baseline: BaselineAltitudePixels2;
	      z_sine?: AltitudeSineWave2;
	      style: "Fly";
	      flaps?: FlappingVerticalMovements2;
	    };
	/**
	 * How long to hold before rising off the ground, to make room for a pre-hop animation.
	 */
	export type HopAnticipationSeconds1 = number;
	/**
	 * How long to hold after landing on the ground from a hop, to make room for animations.
	 */
	export type PostHopFollowthroughSeconds1 = number;
	/**
	 * Defaults to 'hop' but can be overridden.
	 */
	export type HopAnimationName1 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler6 = string;
	/**
	 * As a percentage of base gravity. This is fairly sensitive.
	 */
	export type HopVerticalSpeed1 = number;
	/**
	 * How fast the character should pop up off the ground with each leg movement. As a percentage of base gravity. This is fairly sensitive.
	 */
	export type RunVerticalBounceSpeed1 = number;
	/**
	 * Defaults to 'run' but can be overridden.
	 */
	export type RunAnimationName1 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler7 = string;
	/**
	 * Defaults to 'crawl' but can be overridden.
	 */
	export type CrawlAnimationName1 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler8 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation3 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler9 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels2 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude2 = number;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed3 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance2 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds2 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds2 = number;
	/**
	 * How the actor animates while not actively moving.
	 */
	export type StationaryVisuals1 =
	  | {
	      style?: "Stand";
	      animation?: Animation4;
	      babbler?: Babbler10;
	    }
	  | {
	      animation?: Animation5;
	      babbler?: Babbler11;
	      z_baseline: BaselineAltitudePixels3;
	      z_sine?: AltitudeSineWave3;
	      style: "Fly";
	      flaps?: FlappingVerticalMovements3;
	    };
	/**
	 * Defaults to 'idle.
	 */
	export type Animation4 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler10 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation5 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler11 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels3 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude3 = number;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed4 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance3 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds3 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds3 = number;
	/**
	 * Relative to the global movement speed.
	 */
	export type MovementSpeed1 = number;
	export type Green8 = number;
	export type Red8 = number;
	export type Blue8 = number;
	export type Brightness = number;
	/**
	 * The number of tiles that the light will illuminate (although it does fade out at the edges).
	 */
	export type TileRadius = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude4 = number;
	export type Affects = "Brightness" | "Radius";
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed5 = number;
	/**
	 * The sound the pet will make when its ability is activated.
	 */
	export type AbilityActivationSound = string;
	/**
	 * A world element that can be harvested or picked up.
	 */
	export type Resource = Resource1 & Resource2;
	/**
	 * Whether the object can be passed through or not. Solid objects cannot move, and they use the grid for collisions. So if a solid object is much smaller than a grid space, it will cause visual confusion. If the item is larger than a grid space, it will become a 2x2 or 3x3, etc... to fit.
	 */
	export type Solid = boolean;
	export type Height1 = number;
	export type Width1 = number;
	/**
	 * The type of hitbox to use. This will influence collisions, as well as how the object intercepts mouse clicks.
	 */
	export type Type = "Cylinder" | "Cone" | "Box" | "Pyramid";
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler12 = string;
	/**
	 * Change this if the in-game shadow ends up too big or too small for the object.
	 */
	export type ScaleModifier = number;
	export type Sprite1 = string;
	export type WorldSprite2 = string;
	/**
	 * If set to false, this world element will not respawn once it has been destroyed. Defaults to true if unset.
	 */
	export type Respawnable = boolean;
	/**
	 * A number that is connected to the relative power level of this thing.
	 */
	export type Level = number;
	export type EnglishText14 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText9 = string;
	/**
	 * Higher effort items are considered more rare or harder to reach, and recipes will call for fewer of them. Lower effort items will be considered 'cheap', and therefore recipes will demand more of them.
	 */
	export type EffortModifier1 = number;
	export type CanExistOnFloors = boolean;
	/**
	 * When first spawned in the world, this thing can randomly scale itself down (to a minimum) to add variety. This scale should be preserved between sessions, so this will only apply to newly-created instances of this asset.
	 */
	export type RandomScalingMinimum = number;
	/**
	 * What proportion of this tile should spawn this resource.
	 */
	export type Coverage = number;
	/**
	 * If false, the object will always render itself at its normal color and won't be darkened or brightened by lighting.
	 */
	export type UseLighting1 = boolean;
	export type Object1 = string;
	/**
	 * If true, this item will draw under terrain but above water, and it cannot be placed on land.
	 */
	export type WaterLayer = boolean;
	export type UIIcon3 = string;
	export type Looping = boolean;
	export type Track = number;
	export type RandomizedStart = boolean;
	export type Max21 = number;
	export type Min21 = number;
	export type Name9 = string;
	export type Duration =
	  | {
	      time: TimeSeconds;
	      duration_type?: "Time";
	    }
	  | {
	      duration_type?: "Animation";
	    }
	  | {
	      duration_type?: "Indefinite";
	    };
	export type Max22 = number;
	export type Min22 = number;
	/**
	 * This is the name of the variable used for the state in the game's code. Only lowercase letters and underscores.
	 */
	export type StateNameInternal = string;
	export type State1 = string;
	export type Condition2 =
	  | {
	      abilities?: Abilities2;
	      casting_state: Casting1;
	      condition_type?: "Ability";
	    }
	  | {
	      datafield_evaluation: Evaluation2;
	      condition_type?: "Datafield";
	    }
	  | {
	      daytime: DuringDaytime1;
	      condition_type?: "Daylight";
	    }
	  | {
	      condition_type?: "Combat";
	      combat: InCombat1;
	    }
	  | {
	      timestamp: Timestamp4;
	      minutes_passed: MinutesSinceTimestamp1;
	      evaluation: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      insight_modifier?: InsightModifier1;
	      condition_type?: "Timestamp";
	    }
	  | {
	      moon: ActiveMoon1;
	      condition_type?: "Moon";
	    }
	  | {
	      quest: QuestToCheck3;
	      quest_status: QuestStatus3;
	      condition_type?: "Quest";
	    }
	  | {
	      artisan: Buddy1;
	      condition_type?: "Artisan Following";
	      following: Following5;
	    }
	  | {
	      unlock_text?: InsightTooltip1;
	      prerequisite: Insight6;
	      condition_type?: "Insight";
	    }
	  | {
	      proximity_quantity: NumberOfTargets2;
	      proximity_range: DistanceRequiredGridSpaces1;
	      proximity_targets: Targets1;
	      condition_type?: "Proximity";
	    }
	  | {
	      hp_evaluation: HealthEvaluation1;
	      condition_type?: "Health";
	    }
	  | {
	      require_all: RequireAll16;
	      items: Items17;
	      condition_type?: "Item Equipped";
	    }
	  | {
	      items: Items18;
	      condition_type?: "Item Wielding";
	    }
	  | {
	      equipment_set: EquipmentSet1;
	      condition_type?: "Wearing Equipment Set";
	      num_pieces: NumberOfPiecesEquipped1;
	    }
	  | {
	      buff_require_all: RequireAll17;
	      buff_check_self: CheckSelf1;
	      buff_own_only: OwnBuffsOnly1;
	      buff_num_targets?: NumberOfTargets3;
	      condition_type?: "Buffs";
	      buff_target_filter?: BuffTargetFilter1;
	      buff_proximity?: BuffTargetRange1;
	      buff_stack_evaluation?: Stacks16;
	      buffs: Buffs30;
	      buff_target: TargetEntity14;
	    }
	  | {
	      boss: Boss3;
	      condition_type?: "Boss Defeated";
	    }
	  | {
	      comparison: NumberSummoned1;
	      condition_type?: "Summoned Entities";
	      summoned_filter?: SummonedEntitiesFilter1;
	    };
	/**
	 * If set, the ability's casting state must match this checkbox.
	 */
	export type Casting1 = boolean;
	export type DuringDaytime1 = boolean;
	export type InCombat1 = boolean;
	export type Timestamp4 = string;
	/**
	 * If greater than 0, then this many minutes will have passed since the timestamp was set. If less than 0, the timestamp will be this many minutes from now.
	 */
	export type MinutesSinceTimestamp1 = number;
	/**
	 * How much the 'Minutes Since Timestamp' should be adjusted (up or down) for each point invested in the Insight.
	 */
	export type ChangePerPoint4 = number;
	export type Insight5 = string;
	export type ActiveMoon1 = string;
	/**
	 * The quest whose status we are querying.
	 */
	export type QuestToCheck3 = string;
	export type QuestStatus3 = "Complete" | "Started" | "Not Started";
	export type Buddy1 = string;
	export type Following5 = boolean;
	export type EnglishText15 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText10 = string;
	export type Insight6 = string;
	export type Quantity20 = number;
	export type Evaluation3 = "==" | "!=" | "<" | "<=" | ">" | ">=";
	export type Max23 = number;
	export type Min23 = number;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants11 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags11 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude11 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll15 = boolean;
	export type Quantity21 = number;
	/**
	 * If checked, this condition will only be met if ALL of the items listed are equipped at the same time.
	 */
	export type RequireAll16 = boolean;
	export type EquipmentSet1 = string;
	/**
	 * If the player is wearing at least this many pieces, the condition will be met.
	 */
	export type NumberOfPiecesEquipped1 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on yourself at the same time.
	 */
	export type RequireAll17 = boolean;
	/**
	 * Obsolete--delete.
	 */
	export type CheckSelf1 = boolean;
	/**
	 * If checked, only buffs created by you will be checked. Otherwise, all buffs will be checked.
	 */
	export type OwnBuffsOnly1 = boolean;
	export type Quantity22 = number;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants12 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags12 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude12 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll18 = boolean;
	export type Quantity23 = number;
	export type Max24 = number;
	export type Min24 = number;
	export type Quantity24 = number;
	/**
	 * Which entity's buffs to query.
	 */
	export type TargetEntity14 = "Self" | "Other" | "All Entities";
	export type Boss3 = string;
	export type Quantity25 = number;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants13 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags13 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude13 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll19 = boolean;
	export type Quantity26 = number;
	/**
	 * If true, then every condition must be met. If false, then only one of the conditions must be met.
	 */
	export type RequireAllConditions1 = boolean;
	export type State2 = string;
	export type Condition3 =
	  | {
	      abilities?: Abilities3;
	      casting_state: Casting2;
	      condition_type?: "Ability";
	    }
	  | {
	      datafield_evaluation: Evaluation4;
	      condition_type?: "Datafield";
	    }
	  | {
	      daytime: DuringDaytime2;
	      condition_type?: "Daylight";
	    }
	  | {
	      condition_type?: "Combat";
	      combat: InCombat2;
	    }
	  | {
	      insight_modifier?: InsightModifier2;
	      minutes_passed: MinutesSinceTimestamp2;
	      evaluation: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      condition_type?: "Timestamp";
	      timestamp: Timestamp5;
	    }
	  | {
	      moon: ActiveMoon2;
	      condition_type?: "Moon";
	    }
	  | {
	      quest: QuestToCheck4;
	      quest_status: QuestStatus4;
	      condition_type?: "Quest";
	    }
	  | {
	      artisan: Buddy2;
	      condition_type?: "Artisan Following";
	      following: Following6;
	    }
	  | {
	      unlock_text?: InsightTooltip2;
	      prerequisite: Insight8;
	      condition_type?: "Insight";
	    }
	  | {
	      proximity_quantity: NumberOfTargets4;
	      proximity_range: DistanceRequiredGridSpaces2;
	      proximity_targets: Targets2;
	      condition_type?: "Proximity";
	    }
	  | {
	      hp_evaluation: HealthEvaluation2;
	      condition_type?: "Health";
	    }
	  | {
	      require_all: RequireAll21;
	      items: Items22;
	      condition_type?: "Item Equipped";
	    }
	  | {
	      items: Items23;
	      condition_type?: "Item Wielding";
	    }
	  | {
	      num_pieces: NumberOfPiecesEquipped2;
	      condition_type?: "Wearing Equipment Set";
	      equipment_set: EquipmentSet2;
	    }
	  | {
	      buff_require_all: RequireAll22;
	      buff_check_self: CheckSelf2;
	      buff_own_only: OwnBuffsOnly2;
	      buff_num_targets?: NumberOfTargets5;
	      condition_type?: "Buffs";
	      buff_target_filter?: BuffTargetFilter2;
	      buff_proximity?: BuffTargetRange2;
	      buff_stack_evaluation?: Stacks20;
	      buffs: Buffs37;
	      buff_target: TargetEntity15;
	    }
	  | {
	      boss: Boss4;
	      condition_type?: "Boss Defeated";
	    }
	  | {
	      summoned_filter?: SummonedEntitiesFilter2;
	      condition_type?: "Summoned Entities";
	      comparison: NumberSummoned2;
	    };
	/**
	 * If set, the ability's casting state must match this checkbox.
	 */
	export type Casting2 = boolean;
	export type DuringDaytime2 = boolean;
	export type InCombat2 = boolean;
	/**
	 * How much the 'Minutes Since Timestamp' should be adjusted (up or down) for each point invested in the Insight.
	 */
	export type ChangePerPoint5 = number;
	export type Insight7 = string;
	/**
	 * If greater than 0, then this many minutes will have passed since the timestamp was set. If less than 0, the timestamp will be this many minutes from now.
	 */
	export type MinutesSinceTimestamp2 = number;
	export type Timestamp5 = string;
	export type ActiveMoon2 = string;
	/**
	 * The quest whose status we are querying.
	 */
	export type QuestToCheck4 = string;
	export type QuestStatus4 = "Complete" | "Started" | "Not Started";
	export type Buddy2 = string;
	export type Following6 = boolean;
	export type EnglishText16 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText11 = string;
	export type Insight8 = string;
	export type Quantity27 = number;
	export type Evaluation5 = "==" | "!=" | "<" | "<=" | ">" | ">=";
	export type Max25 = number;
	export type Min25 = number;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants14 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags14 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude14 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll20 = boolean;
	export type Quantity28 = number;
	/**
	 * If checked, this condition will only be met if ALL of the items listed are equipped at the same time.
	 */
	export type RequireAll21 = boolean;
	/**
	 * If the player is wearing at least this many pieces, the condition will be met.
	 */
	export type NumberOfPiecesEquipped2 = number;
	export type EquipmentSet2 = string;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on yourself at the same time.
	 */
	export type RequireAll22 = boolean;
	/**
	 * Obsolete--delete.
	 */
	export type CheckSelf2 = boolean;
	/**
	 * If checked, only buffs created by you will be checked. Otherwise, all buffs will be checked.
	 */
	export type OwnBuffsOnly2 = boolean;
	export type Quantity29 = number;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants15 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags15 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude15 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll23 = boolean;
	export type Quantity30 = number;
	export type Max26 = number;
	export type Min26 = number;
	export type Quantity31 = number;
	/**
	 * Which entity's buffs to query.
	 */
	export type TargetEntity15 = "Self" | "Other" | "All Entities";
	export type Boss4 = string;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants16 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags16 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude16 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll24 = boolean;
	export type Quantity32 = number;
	export type Quantity33 = number;
	/**
	 * If true, then every condition must be met. If false, then only one of the conditions must be met.
	 */
	export type RequireAllConditions2 = boolean;
	/**
	 * A brief decription about this group for internal reference.
	 */
	export type PriorityGroupNameInternal = string;
	export type IgnoreInLevelViewer = boolean;
	/**
	 * Whether to show the celebration UI when acquiring this item.
	 */
	export type CelebratePickup = boolean;
	/**
	 * If false, this item can be placed in water.
	 */
	export type RequiresLand = boolean;
	/**
	 * If set, this game element will adjust its level to match the player's level at the time it is spawned, plus this number.
	 */
	export type RelativeLevel = number;
	/**
	 * Whether this resource can be picked up by the player. If pickupable, the resource cannot be damaged and cannot drop loot.
	 */
	export type Pickupable = boolean;
	export type EnglishText17 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText12 = string;
	/**
	 * If true, this resource will snap to the grid when placed. Only applies to non-solid objects.
	 */
	export type GridSnapping = boolean;
	/**
	 * When destroyed, this world element will respawn using the base respawn minutes combined with this multiplier. Higher multiplier means longer time between respawns.
	 */
	export type RespawnTimeMultiplier = number;
	export type Green9 = number;
	export type Red9 = number;
	export type Blue9 = number;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup2 = string;
	export type ScaleModifier1 = number;
	/**
	 * Whether the player walks over the top of this resource.
	 */
	export type Underfoot = boolean;
	/**
	 * A unique sound to be played when this item is collected into your body.
	 */
	export type CollectionSound = string;
	export type Resource2 =
	  | {
	      manual_pickup?: ManualPickup;
	      pickupable?: true;
	    }
	  | {
	      pickupable?: false;
	      injury_sounds?: InjurySounds;
	      loot?: Loot;
	      death_sounds?: DestructionSounds;
	      resistance_profile?: ResistanceProfile;
	      hp_modifier?: HPModifier;
	    };
	/**
	 * If true, the player must manually interact with the resource to pick it up.
	 */
	export type ManualPickup = boolean;
	/**
	 * Plays when receiving damage that hasn't been mitigated.
	 */
	export type Major = string;
	/**
	 * Plays when receiving damage that has been mitigated.
	 */
	export type Minor = string;
	export type Chance1 = number;
	/**
	 * Whether to include this loot group when listing the 'sources' of an item in its tooltip.
	 */
	export type IncludeAsSource = boolean;
	/**
	 * When this loot group is able to drop.
	 */
	export type TimeOfDay = "Always" | "Day" | "Night";
	/**
	 * If true, this loot group will be considered a 'bonus' and will not be counted as part of the normal effort calculations.
	 */
	export type ConsiderAsBonus = boolean;
	/**
	 * If set, the 'Drop Quantity' value will multiply against the value retrieved from this data field.
	 */
	export type DatafieldQuantityLink = string;
	export type Max27 = number;
	export type Min27 = number;
	/**
	 * The probability for this loot group to occur.
	 */
	export type DropChance = number;
	export type UnlockedBy1 = string;
	/**
	 * If true, this loot group will not be shown in the progression map.
	 */
	export type IgnoreInProgressionMap = boolean;
	/**
	 * What event will cause this loot to drop.
	 */
	export type Trigger1 = "Death" | "Damage";
	export type ResistanceProfile = string;
	/**
	 * By default, this world element will have a max HP relative to its level. Change this value to further customize its max HP.
	 */
	export type HPModifier = number;
	/**
	 * Used to order this comfort in the Artisan's list.
	 */
	export type OrderIndex = number;
	export type EnglishText18 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText13 = string;
	/**
	 * Which buddy this comfort belongs to.
	 */
	export type Buddy3 = string;
	export type EnglishText19 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText14 = string;
	export type EnglishText20 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText15 = string;
	export type UnlockedBy2 = string;
	export type Condition4 =
	  | {
	      type?: "Standing on Tile Type";
	      floor_tile: Floor1;
	      dock_tile: Dock1;
	      terrain_tile: Terrain1;
	    }
	  | {
	      interior_tiles: InteriorTileArea1;
	      type?: "Room Size";
	    }
	  | {
	      type?: "Be Indoors";
	    }
	  | {
	      type?: "Item Tally";
	      item_tally: {
	        value1?: number;
	        value0?: Items27;
	        comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      };
	      whole_building: WholeBuilding2;
	    }
	  | {
	      num_rooms: NumberOfRooms1;
	      type?: "Number of Rooms";
	    }
	  | {
	      distance: TileDistance1;
	      type?: "Item Relationships";
	      source_items: SourceItems1;
	      destination_items: TargetItems1;
	      whole_building: WholeBuilding3;
	    };
	export type Floor1 = boolean;
	export type Dock1 = boolean;
	export type Terrain1 = boolean;
	/**
	 * If true, the entire building will be checked instead of just the Artisan's room.
	 */
	export type WholeBuilding2 = boolean;
	/**
	 * If true, the entire building will be checked instead of just the Artisan's room.
	 */
	export type WholeBuilding3 = boolean;
	export type EnglishText21 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText16 = string;
	/**
	 * How much faster your Insight research will go when you have unlocked this comfort.
	 */
	export type InsightSpeedBonus = number;
	export type UIIcon4 = string;
	export type EnglishText22 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText17 = string;
	export type WorldSprite3 = string;
	export type DoorOpenSound = string;
	export type DoorCloseSound = string;
	export type EnglishText23 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText18 = string;
	export type UIIcon5 = string;
	export type EnglishText24 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText19 = string;
	/**
	 * If set, this icon will display next to the storyline in the sidebar
	 */
	export type Icon1 = string;
	export type EnglishText25 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText20 = string;
	/**
	 * The maximum number of points that can be invested into this Insight.
	 */
	export type MaximumPoints = number;
	export type EnglishText26 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText21 = string;
	export type Artisan2 = string;
	export type EnglishText27 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText22 = string;
	/**
	 * What this insight is unlocked by (if anything)
	 */
	export type UnlockedBy3 = string;
	/**
	 * Adjust the baseline time to research this insight by changing this number. E.g. a multiplier of 0.5 will cut the research time in half.
	 */
	export type TimeModifier = number;
	/**
	 * Change this number to increase or decrease the number of materials required to research this Insight.
	 */
	export type EffortModifier2 = number;
	export type Icon2 = string;
	/**
	 * Whether the tile should be X-flipped randomly when placed.
	 */
	export type Flippable = boolean;
	/**
	 * The sound to play when the player walks on this tile.
	 */
	export type FootstepSound = string;
	/**
	 * The primary sprite of the tile.
	 */
	export type MainSprite = string;
	export type EnglishText28 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText23 = string;
	/**
	 * The sound to play when this tile is placed in the editor or in Build Mode.
	 */
	export type PlacementSound1 = string;
	/**
	 * The sprite to draw below the main sprite. Subimages must correspond with the Sprite.
	 */
	export type UnderSprite = string;
	export type Green10 = number;
	export type Red10 = number;
	export type Blue10 = number;
	export type EnglishText29 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText24 = string;
	export type Green11 = number;
	export type Red11 = number;
	export type Blue11 = number;
	/**
	 * The probability of a given tile having Dapples on it.
	 */
	export type SpawnChance = number;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup3 = string;
	export type ResearchNode2 = string;
	export type ChangePerPoint6 = number;
	export type OutputQuantity1 = number;
	export type Style1 = "Additive" | "Multiplicative";
	export type ResearchNode3 = string;
	export type ChangePerPoint7 = number;
	export type UnlockedBy4 = string;
	/**
	 * Change this number to increase or decrease the number of materials required to craft this item.
	 */
	export type EffortModifier3 = number;
	/**
	 * What workstation the player must be near to craft this recipe.
	 */
	export type Station1 = string;
	/**
	 * The sprite to use when displaying the tile in the UI (e.g. Build Mode).
	 */
	export type Icon3 = string;
	export type MaximumStacks = number;
	export type Positive = boolean;
	export type EnglishText30 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText25 = string;
	/**
	 * If true, negative buffs cannot be applied to a world element who has this buff.
	 */
	export type PreventsNegativeBuffs = boolean;
	export type LoopingAnimationName = string;
	/**
	 * 0% is the foot of the entity, 100% is the very top of its hitbox.
	 */
	export type VerticalPosition = number;
	/**
	 * Positive goes up, negative goes down. You can move the sprite up or down relative to its anchor by a fixed number of pixels.
	 */
	export type ZOffsetPixels = number;
	export type SpineSprite = string;
	/**
	 * If set, the buff will show the amount of damage stored in it instead of the number of stacks.
	 */
	export type ShowDamageInsteadOfStacks = boolean;
	/**
	 * At 100% scale, the emitter will roughly match the hitbox of the world element that it is attached to. However, you can grow or shrink the emitter to make the particles more tightly packed or farther apart.
	 */
	export type EmitterScale1 = number;
	/**
	 * The gap in time between emitting particles. If set to 0, it will emit particles every frame (but at a performance cost.
	 */
	export type EmitIntervalSeconds = number;
	/**
	 * If set, the particles will use the world element as an anchor point, so they will no longer be 'left behind' if the world element moves.
	 */
	export type Local = boolean;
	export type Max28 = number;
	export type Min28 = number;
	/**
	 * If set, the particles will always move away from the center of the emitter.
	 */
	export type BlastOutward1 = boolean;
	/**
	 * How many independent applications of this buff can be present on an entity at one time. If unset, then there is no limit.
	 */
	export type MaximumInstances = number;
	/**
	 * If true, this buff will stun the target, rendering it unable to do anything for the duration.
	 */
	export type Stun = boolean;
	/**
	 * Whether this buff changes this stat additively or multiplicatively.
	 */
	export type ModifierStyle1 = "Add" | "Multiply";
	/**
	 * If true, then the stat bonus will be mutliplied by the number of stacks.
	 */
	export type MultiplyByStacks = boolean;
	/**
	 * How much to modify the stat by.
	 */
	export type Amount1 = number;
	/**
	 * Whether this to boost the main stat by adding this stat to it, or by multiplying this stat with it.
	 */
	export type ModifierStyle2 = "Add" | "Multiply";
	/**
	 * If true, then the other stat will be mutliplied by the number of stacks before being applied.
	 */
	export type MultiplyByStacks1 = boolean;
	/**
	 * When pulling the Other Stat, whether we should use the stats of the entity that sent the buff, or the entity that received the buff.
	 */
	export type StatSource = "Sender" | "Receiver";
	export type Stat2 = string;
	export type Stat3 = string;
	export type Green12 = number;
	export type Red12 = number;
	export type Blue12 = number;
	export type Green13 = number;
	export type Red13 = number;
	export type Blue13 = number;
	/**
	 * While the player has this buff, an additional sound can be added in to the player's swing sound.
	 */
	export type SwingSoundOverlay = string;
	export type DurationSeconds = number;
	export type UIIcon6 = string;
	export type CustomVFXObject = string;
	export type ExpiresUponDeath = boolean;
	export type ExpirationSound = string;
	/**
	 * If set, this buff will only show the text description and won't show any other information.
	 */
	export type OnlyShowDescription = boolean;
	/**
	 * If true, this buff can stun all enemies, including bosses.
	 */
	export type BossStun = boolean;
	/**
	 * If set, an object will spawn that plays this sprite's spine animation when the buff is applied.
	 */
	export type ApplicationSpineSprite = string;
	export type Effect =
	  | {
	      damage_profile: DamageProfile1;
	      outcome?: "Damage";
	      consume_stored_damage: ConsumeStoredDamage;
	      damage_pool: DamagePool;
	    }
	  | {
	      consume_stored_healing: ConsumeStoredDamage1;
	      outcome?: "Heal";
	      healing_percentage: HealingPercent;
	      healing_pool: HealingPool;
	    }
	  | {
	      outcome?: "Buff";
	      buff: BuffToApply;
	    }
	  | {
	      outcome?: "Expire";
	    }
	  | {
	      amount: AmountToChange;
	      outcome?: "Change Stacks";
	      stack_change_style: Style2;
	    }
	  | {
	      amount: AmountToSet;
	      outcome?: "Set Stacks";
	    }
	  | {
	      outcome?: "Remove Buff";
	      buff_to_remove: BuffToRemove;
	    }
	  | {
	      amount: AmountToChangeBy;
	      outcome?: "Change Timer";
	      timer_change_style: Style3;
	    }
	  | {
	      new_timer: TimerSecondsToSet;
	      outcome?: "Set Timer";
	    }
	  | {
	      outcome?: "Particle Burst";
	      burst_particle: Particle;
	      bursts: Bursts1;
	    };
	/**
	 * Whenever a buff is applied, it can have damage and healing values stored in it.
	 */
	export type ConsumeStoredDamage = boolean;
	/**
	 * Whether this damage is based on the total damage that has ever been stored into this buff, or whether to use the remaining damage after consumption.
	 */
	export type DamagePool = "Total" | "Remaining";
	/**
	 * Whenever a buff is applied, it can have damage and healing values stored in it.
	 */
	export type ConsumeStoredDamage1 = boolean;
	/**
	 * Multiplies against the healing pool and then heals the user for this amount.
	 */
	export type HealingPercent = number;
	/**
	 * Whether this damage is based on the total healing that has ever been stored into this buff, or whether to use the remaining healing after consumption.
	 */
	export type HealingPool = "Total" | "Remaining";
	/**
	 * This new buff will be applied to the entity afflicted by the current buff.
	 */
	export type BuffToApply = string;
	export type AmountToChange = number;
	/**
	 * Whether change the existing stacks by adding or multiplying.
	 */
	export type Style2 = "Add" | "Multiply";
	export type AmountToSet = number;
	/**
	 * This will remove a buff if it is present.
	 */
	export type BuffToRemove = string;
	export type AmountToChangeBy = number;
	/**
	 * How to change the buff's timer.
	 */
	export type Style3 = "Add" | "Multiply";
	/**
	 * This will change the buff's remaining timer to this value.
	 */
	export type TimerSecondsToSet = number;
	export type Max29 = number;
	export type Min29 = number;
	/**
	 * If set, the spawn radius will be treated as grid spaces instead of pixels.
	 */
	export type SpawnRadiusAsGrid1 = boolean;
	/**
	 * If checked, the particles will spawn at z=0 instead of on a target or caster.
	 */
	export type SpawnOnGround1 = boolean;
	export type Max30 = number;
	export type Min30 = number;
	export type Max31 = number;
	export type Min31 = number;
	/**
	 * Billboard bursts are good for shooting things up and out. Ground bursts are good for making smoke rings and such.
	 */
	export type Perspective1 = "Billboard" | "Isometric";
	/**
	 * If set, the particles will always move away from the center of the source.
	 */
	export type BlastOutward2 = boolean;
	/**
	 * If spawning on the ground, this will be height above ground. If spawning on targets, it will spawn at their height midpoints, plus this offset.
	 */
	export type ZOffset3 = number;
	/**
	 * If set, the radius of the spawning will scale relative to the caster's 'scale' modifier. Useful for keeping particles lined up with telegraphs.
	 */
	export type ScaledSpawnRadius1 = boolean;
	export type Type1 = string;
	export type ReapplicationSound = string;
	export type EnglishText31 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText26 = string;
	/**
	 * When attempting to apply the buff to a target that already has the maximum instances of the buff, you can purge the oldest instance of the buff to apply a new instance.
	 */
	export type ReplaceOldest = boolean;
	/**
	 * When this buff gets applied where there is an existing buff, and either we are at the maximum instances or we are adding stacks, what happens to the timer of the existing buff?
	 */
	export type TimerRefreshBehavior =
	  | {
	      style?: "Extend";
	      seconds: Seconds2;
	      extension_max?: ExtensionMaxDuration;
	    }
	  | {
	      style?: "Refresh";
	    }
	  | {
	      style?: "None";
	    };
	/**
	 * Each time this buff is reapplied, its timer will be extended by this many seconds.
	 */
	export type Seconds2 = number;
	/**
	 * How many seconds the buff can be extended to. Can go beyond the baseline duration.
	 */
	export type ExtensionMaxDuration = number;
	export type ApplicationSound = string;
	/**
	 * A number that is connected to the relative power level of this thing.
	 */
	export type Level1 = number;
	export type EnglishText32 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText27 = string;
	export type IgnoreInLevelViewer1 = boolean;
	/**
	 * The sound this item makes when being placed in the inventory.
	 */
	export type InventorySound = string;
	export type EquipmentSet3 = string;
	export type EnglishText33 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText28 = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup4 = string;
	export type ResearchNode4 = string;
	export type ChangePerPoint8 = number;
	export type UnlockedBy5 = string;
	/**
	 * Change this number to increase or decrease the number of materials required to craft this item.
	 */
	export type EffortModifier4 = number;
	/**
	 * What workstation the player must be near to craft this recipe.
	 */
	export type Station2 = string;
	export type UIIcon7 = string;
	/**
	 * Whether this item can be X-flipped in the Editor.
	 */
	export type Flippable1 = boolean;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler13 = string;
	export type WorldSprite4 = string;
	export type EnglishText34 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText29 = string;
	export type State3 = string;
	export type EmitterScale2 = number;
	/**
	 * If set, the particle system will be drawn behind the object
	 */
	export type Behind = boolean;
	/**
	 * If set, the particle will anchor to this spine bone, and the X and Y offsets will be relative to the bone's position
	 */
	export type SpineBone = string;
	/**
	 * Relative to the object's origin
	 */
	export type XOffset = number;
	/**
	 * Relative to the object's origin
	 */
	export type YOffset2 = number;
	export type ParticleSystem1 = string;
	/**
	 * If false, the object will always render itself at its normal color and won't be darkened or brightened by lighting.
	 */
	export type UseLighting2 = boolean;
	export type Object2 = string;
	export type ResearchNode5 = string;
	export type ChangePerPoint9 = number;
	export type OutputQuantity2 = number;
	export type Style4 = "Additive" | "Multiplicative";
	export type ResearchNode6 = string;
	export type ChangePerPoint10 = number;
	export type UnlockedBy6 = string;
	/**
	 * Change this number to increase or decrease the number of materials required to craft this item.
	 */
	export type EffortModifier5 = number;
	/**
	 * What workstation the player must be near to craft this recipe.
	 */
	export type Station3 = string;
	/**
	 * Whether this item must have a floor under it to be validly placed in the world.
	 */
	export type RequiresFloor = boolean;
	export type UIIcon8 = string;
	/**
	 * The sound to play when this is placed in the editor or in Build Mode.
	 */
	export type PlacementSound2 = string;
	export type EnglishText35 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText30 = string;
	/**
	 * If true, this resource will snap to the grid when placed. Only applies to non-solid objects.
	 */
	export type GridSnapping1 = boolean;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup5 = string;
	/**
	 * Whether the player walks over the top of this item.
	 */
	export type Underfoot1 = boolean;
	/**
	 * At what point in the cast the cooldown will trigger.
	 */
	export type CooldownTriggerPercentage = number;
	export type ModifierType = "Add" | "Multiply";
	export type Stat4 = string;
	export type CooldownSeconds = number;
	export type Stacks22 = number;
	export type Buff4 = string;
	/**
	 * For previewing the ability in the Game Changer.
	 */
	export type PreviewSprite = string;
	export type NameInternal1 = string;
	export type Max32 = number;
	export type Min32 = number;
	/**
	 * An action to be performed on the targets that have been captured by this Action Group. For example, targets caught in a telegraph, yourself, etc...
	 */
	export type Action1 =
	  | {
	      chance?: ActionProbability;
	      badge_modifiers?: InsightModifiers;
	      unlocked_by?: UnlockedBy7;
	      datafield_modifiers?: DatafieldMultipliers1;
	      damage_success_sound?: ImpactSound1;
	      damage_followup?: FollowupActions;
	      damage_profile: DamageProfile1;
	      action_type?: "Damage";
	      damage_entity?: EntityToDamage;
	      damage_steal_health?: StealHealth;
	      target_filter?: TargetFilters2;
	      damage_failure_sound?: FailureSound1;
	    }
	  | {
	      chance?: ActionProbability1;
	      healing_percentage: Healing;
	      action_type?: "Heal";
	      unlocked_by?: UnlockedBy9;
	      healing_entity?: EntityToHeal;
	      heal_success_sound?: HealSound;
	      heal_failure_sound?: FailureSound2;
	      heal_target_filter?: TargetFilters3;
	    }
	  | {
	      action_type?: "Clear Terrain";
	    }
	  | {
	      chance?: ActionProbability2;
	      move_grid_distance: MovementDistanceGridSpaces;
	      move_speed_stat_modifier?: MoveSpeedStatModifiers;
	      move_animations?: MovementAnimations;
	      move_direction?: Direction1;
	      unlocked_by?: UnlockedBy11;
	      move_entity: EntityBeingMoved;
	      move_sounds?: MovementSounds;
	      move_distance_modifier?: MoveDistanceStatModifiers;
	      traverses_water: MoveOverWater;
	      move_style?: MovementStyle;
	      action_type?: "Move";
	      move_speed: Speed7;
	      move_destination: EntityDestination;
	      move_direction_randomness?: DirectionRandomness;
	    }
	  | {
	      action_type?: "Play Sound";
	      sound_id: Sound3;
	      unlocked_by?: UnlockedBy13;
	      sound_location: SoundLocation1;
	      sound_probability: SoundProbability;
	      sound_as_voice?: PlayAsVoice1;
	    }
	  | {
	      chance?: ActionProbability3;
	      destroy_target_filter?: TargetFilters4;
	      destroy_entity: EntityToDestroy;
	      drop_loot?: DropLoot1;
	      action_type?: "Destroy";
	      unlocked_by?: UnlockedBy15;
	    }
	  | {
	      unlocked_by?: UnlockedBy17;
	      camera_shake_amount: CameraShakeAmount;
	      action_type?: "Shake Camera";
	    }
	  | {
	      visual_effect: VisualEffect1;
	      action_type: "Visual Effect";
	    }
	  | {
	      chance?: ActionProbability4;
	      items_to_lose: ItemsToLose;
	      action_type?: "Lose Items";
	    }
	  | {
	      chance?: ActionProbability5;
	      items_to_gain: ItemsToGain;
	      unlocked_by?: UnlockedBy19;
	      action_type?: "Gain Items";
	    }
	  | {
	      unlocked_by?: UnlockedBy21;
	      pickup_target_filter?: PickupTargetFilter;
	      action_type?: "Pickup";
	    }
	  | {
	      chance?: ActionProbability6;
	      unlocked_by?: UnlockedBy23;
	      buffs: BuffsToApply;
	      target_filter?: TargetFilters5;
	      action_type?: "Buff";
	    }
	  | {
	      action_type?: "Change Datafield";
	      datafield_change_target: DatafieldOwner3;
	      unlocked_by?: UnlockedBy25;
	      datafield_change_value: Value2;
	      datafield_change_type: ChangeType;
	      datafield_id: DataField2;
	    }
	  | {
	      spawn_item: EntityToCreate;
	      summoned?: EntityIsSummoned1;
	      distance_range?: SpawnDistance1;
	      require_line_of_sight?: RequireLineOfSight1;
	      action_type?: "Create Entity";
	      non_overlap: AttemptNonOverlap1;
	      spawn_location?: NewEntityLocation1;
	    }
	  | {
	      unlocked_by?: UnlockedBy27;
	      projectile: Projectile;
	      action_type?: "Fire Projectile";
	    }
	  | {
	      action_type?: "Fishing";
	    }
	  | {
	      chance?: ActionProbability7;
	      stacks?: Stacks30;
	      positive?: RemovePositiveBuffs1;
	      action_type?: "Remove Buff";
	      unlocked_by?: UnlockedBy29;
	      buffs_to_remove?: BuffsToRemove;
	      negative?: RemoveNegativeBuffs1;
	      buff_target: Target1;
	      target_filter?: TargetFilters6;
	    }
	  | {
	      charges: ChargeIncrementAmount;
	      chance?: ActionProbability8;
	      action_type?: "Change Juke Charges";
	    }
	  | {
	      telegraph_pullthrough: ShowTelegraphDuringCast;
	      leap_impact_action_groups?: ActionGroups4;
	      move_animations?: MovementAnimations1;
	      gravity_modifier?: GravityModifier;
	      leap_duration: LeapDuration;
	      leap_land_sounds?: LeapLandingSounds;
	      traverses_water?: LeapTraversesWater;
	      leap_followthrough_seconds?: FollowthroughSeconds;
	      action_type?: "Leap";
	      move_destination: LeapDestination;
	      leap_start_sounds?: LeapStartSounds;
	    };
	/**
	 * The chance that this action will occur.
	 */
	export type Chance2 = number;
	export type Insight10 = string;
	export type ChangePerPoint11 = number;
	export type EnglishText36 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText31 = string;
	export type UnlockedBy8 = string;
	export type EnglishText37 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText32 = string;
	export type DatafieldOwner2 = "Self" | "Target Entity";
	export type DataField1 = string;
	/**
	 * This sound will only play if damage is dealt.
	 */
	export type ImpactSound1 = string;
	/**
	 * If set, this followup action will only be performed on up to this number of targets.
	 */
	export type FollowupTargetLimit = number;
	/**
	 * If set, the followup action will only apply to targets that had this outcome.
	 */
	export type FollowupTargetConstraint = "Damaged" | "Critically Hit" | "Uncritically Hit";
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants17 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags17 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude17 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll25 = boolean;
	export type Quantity34 = number;
	export type EntityToDamage = "Target Entity" | "Self" | "Summoner";
	/**
	 * This will steal health from the target and give it to the caster, proportional to the damage dealt.
	 */
	export type StealHealth = number;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants18 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags18 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude18 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll26 = boolean;
	export type Quantity35 = number;
	/**
	 * This sound will play if no targets were damaged.
	 */
	export type FailureSound1 = string;
	/**
	 * The chance that this action will occur.
	 */
	export type Chance3 = number;
	/**
	 * The healing amount will be automatically calculated based on the level of the user.
	 */
	export type Healing = number;
	export type UnlockedBy10 = string;
	export type EnglishText38 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText33 = string;
	export type EntityToHeal = "Target Entity" | "Self" | "Summoner";
	/**
	 * This sound will only play if healing occurred (the recipient was below maximum health).
	 */
	export type HealSound = string;
	/**
	 * This sound will play if no targets were healed.
	 */
	export type FailureSound2 = string;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants19 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags19 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude19 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll27 = boolean;
	export type Quantity36 = number;
	/**
	 * The chance that this action will occur.
	 */
	export type Chance4 = number;
	export type Max33 = number;
	export type Min33 = number;
	export type ModifierType1 = "Add" | "Multiply";
	export type Stat5 = string;
	export type Looping1 = boolean;
	export type AnimationName = string;
	/**
	 * In degrees. 0 is towards the destination, 180 is away from the destination.
	 */
	export type Direction1 = number;
	export type UnlockedBy12 = string;
	export type EnglishText39 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText34 = string;
	export type EntityBeingMoved = "Self" | "Target Entity" | "Summoner";
	export type ChanceOfPlaying = number;
	export type Sound2 = string;
	export type ModifierType2 = "Add" | "Multiply";
	export type Stat6 = string;
	/**
	 * If true, you will move over water, even if you normally cannot.
	 */
	export type MoveOverWater = boolean;
	export type MovementStyle = "Ease In" | "Linear" | "Instant";
	/**
	 * How much faster you will travel the distance, compared to your baseline speed. If zero, you will instantly teleport.
	 */
	export type Speed7 = number;
	export type EntityDestination = "Ground Target" | "Target Entity" | "Self" | "Summoner";
	/**
	 * The movement direction will be randomly modified (up or down) by up to this amount.
	 */
	export type DirectionRandomness = number;
	export type Sound3 = string;
	export type UnlockedBy14 = string;
	export type EnglishText40 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText35 = string;
	export type SoundLocation1 = "Self" | "Ground Target" | "Target Entity" | "Summoner" | "Global";
	export type SoundProbability = number;
	/**
	 * If true, then this will be considered a 'voice' sound. Each entity can only play one 'Voice' sound at a time.
	 */
	export type PlayAsVoice1 = boolean;
	/**
	 * The chance that this action will occur.
	 */
	export type Chance5 = number;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants20 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags20 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude20 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll28 = boolean;
	export type Quantity37 = number;
	export type EntityToDestroy = "Target Entity" | "Self" | "Summoner";
	/**
	 * If true, and the destroyed entity has loot tables, it will drop loot as if it were destroyed by the player dealing damage to it.
	 */
	export type DropLoot1 = boolean;
	export type UnlockedBy16 = string;
	export type EnglishText41 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText36 = string;
	export type UnlockedBy18 = string;
	export type EnglishText42 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText37 = string;
	export type CameraShakeAmount = number;
	export type VisualEffect1 =
	  | {
	      effect_type: "Electric Arc";
	      electric_arc_source: Source2;
	      electric_arc_destination: Destination1;
	      electric_arc_color: Color5;
	      electric_arc_source_distance?: DistanceFromSourcePixels1;
	      electric_arc_destination_distance?: DistanceFromDestinationPixels1;
	    }
	  | {
	      effect_type: "Ground Decal";
	      decal_max_alpha?: MaxAlpha1;
	      decal_duration?: DecalDurationSeconds1;
	      decal_sprite: DecalSprite1;
	      decal_scale?: DecalScale1;
	      decal_location: Location3;
	    }
	  | {
	      explosion_color: BaseColor1;
	      explosion_slomo_burst: SlowMotionPulse1;
	      explosion_smoke?: ShowSmoke1;
	      effect_type: "Explosion";
	      explosion_random_distance?: RandomDistanceGridSpaces1;
	      explosion_location: Location4;
	      explosion_z_offset?: ZOffset4;
	      explosion_sound?: Sound4;
	      explosion_highlight_color?: HighlightColor1;
	      explosion_scale?: ExplosionScale1;
	      explosion_random_delay?: RandomDelaySeconds1;
	      explosion_y_offset?: YOffset3;
	    }
	  | {
	      burst_particle: Particle;
	      effect_type: "Particle Burst";
	      bursts: Bursts2;
	    }
	  | {
	      particle_system_location: Location5;
	      effect_type: "Particle System Burst";
	      particle_system: ParticleSystem2;
	      particle_system_y_offset?: YOffset4;
	      particle_system_z_offset?: ZOffset6;
	      particle_system_emitter_scale?: EmitterScale3;
	    };
	export type Source2 = "Self" | "Ground Target" | "Target Entity" | "Summoner";
	export type Destination1 = "Self" | "Ground Target" | "Target Entity" | "Summoner";
	export type Green14 = number;
	export type Red14 = number;
	export type Blue14 = number;
	export type DistanceFromSourcePixels1 = number;
	export type DistanceFromDestinationPixels1 = number;
	export type MaxAlpha1 = number;
	export type Max34 = number;
	export type Min34 = number;
	/**
	 * This sprite will be drawn subtractively.
	 */
	export type DecalSprite1 = string;
	export type Max35 = number;
	export type Min35 = number;
	export type Location3 = "Self" | "Ground Target" | "Target Entity" | "Summoner";
	export type Green15 = number;
	export type Red15 = number;
	export type Blue15 = number;
	/**
	 * If true, there will be a brief slow-down of the game when the explosion occurs to make it feel more impactful. Use sparingly.
	 */
	export type SlowMotionPulse1 = boolean;
	/**
	 * If true, smoke will be spawned at the explosion location.
	 */
	export type ShowSmoke1 = boolean;
	export type Max36 = number;
	export type Min36 = number;
	export type Location4 = "Self" | "Ground Target" | "Target Entity" | "Summoner";
	/**
	 * If spawning on the ground, this will be height above ground. If spawning on targets, it will spawn at their height midpoints, plus this offset.
	 */
	export type ZOffset4 = number;
	/**
	 * There is a default explosion sound, but you can override it here.
	 */
	export type Sound4 = string;
	export type Green16 = number;
	export type Red16 = number;
	export type Blue16 = number;
	export type Max37 = number;
	export type Min37 = number;
	export type Max38 = number;
	export type Min38 = number;
	/**
	 * Can be useful for depth-sorting. For example, a Y offset of 1 will spawn the explosion in front of whatever is explosing.
	 */
	export type YOffset3 = number;
	export type Max39 = number;
	export type Min39 = number;
	/**
	 * If set, the spawn radius will be treated as grid spaces instead of pixels.
	 */
	export type SpawnRadiusAsGrid2 = boolean;
	/**
	 * If checked, the particles will spawn at z=0 instead of on a target or caster.
	 */
	export type SpawnOnGround2 = boolean;
	export type Source3 = "Self" | "Ground Target" | "Target Entity" | "Summoner";
	export type Max40 = number;
	export type Min40 = number;
	export type Max41 = number;
	export type Min41 = number;
	/**
	 * If set, the particles will always move away from the center of the source.
	 */
	export type BlastOutward3 = boolean;
	/**
	 * Billboard bursts are good for shooting things up and out. Ground bursts are good for making smoke rings and such.
	 */
	export type Perspective2 = "Billboard" | "Isometric";
	/**
	 * If spawning on the ground, this will be height above ground. If spawning on targets, it will spawn at their height midpoints, plus this offset.
	 */
	export type ZOffset5 = number;
	/**
	 * If set, the radius of the spawning will scale relative to the caster's 'scale' modifier. Useful for keeping particles lined up with telegraphs.
	 */
	export type ScaledSpawnRadius2 = boolean;
	export type Location5 = "Self" | "Ground Target" | "Target Entity" | "Summoner";
	export type ParticleSystem2 = string;
	/**
	 * Can be useful for depth-sorting. For example, a Y offset of 1 will spawn the explosion in front of whatever is explosing.
	 */
	export type YOffset4 = number;
	/**
	 * If spawning on the ground, this will be height above ground. If spawning on targets, it will spawn at their height midpoints, plus this offset.
	 */
	export type ZOffset6 = number;
	export type EmitterScale3 = number;
	/**
	 * The chance that this action will occur.
	 */
	export type Chance6 = number;
	export type Quantity38 = number;
	export type Item5 = string;
	/**
	 * The chance that this action will occur.
	 */
	export type Chance7 = number;
	export type Max42 = number;
	export type Min42 = number;
	export type Item6 = string;
	export type UnlockedBy20 = string;
	export type EnglishText43 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText38 = string;
	export type UnlockedBy22 = string;
	export type EnglishText44 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText39 = string;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants21 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags21 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude21 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll29 = boolean;
	export type Quantity40 = number;
	/**
	 * The chance that this action will occur.
	 */
	export type Chance8 = number;
	export type UnlockedBy24 = string;
	export type EnglishText45 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText40 = string;
	/**
	 * If set, and if the buff can heal, this will set how much health it restores (based on the level of the user).
	 */
	export type HealingPercentage2 = number;
	/**
	 * How many stacks of the buff to apply. Stacks will build up within instances of buffs, and then will overflow into new instances if the maximum stacks are reached for the current instance.
	 */
	export type Stacks28 = number;
	export type BuffTarget1 = "Self" | "Summoner" | "Target Entity";
	/**
	 * The number of stacks applied can be multiplied by the number of targets captured.
	 */
	export type MultiplyStacksByTargets = boolean;
	/**
	 * If set, and if the buff deals damage, this will modify its damage.
	 */
	export type DamageModifier1 = number;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants22 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags22 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude22 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll30 = boolean;
	export type Quantity41 = number;
	export type DatafieldOwner3 = "Self" | "Target Entity" | "Summoner";
	export type UnlockedBy26 = string;
	export type EnglishText46 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText41 = string;
	export type Value2 = number;
	export type ChangeType = "Set" | "Increment";
	export type DataField2 = string;
	export type EntityToCreate = string;
	/**
	 * 'Summoned' entities exist on behalf of their creators, and their actions will cast blame to the creator. Defaults to false.
	 */
	export type EntityIsSummoned1 = boolean;
	export type Max43 = number;
	export type Min43 = number;
	/**
	 * If false, the new entity can spawn just about anywhere, including THROUGH WALLS!
	 */
	export type RequireLineOfSight1 = boolean;
	/**
	 * Whether spawning will attempt to find a clear space.
	 */
	export type AttemptNonOverlap1 = boolean;
	/**
	 * Where the new entity will be created.
	 */
	export type NewEntityLocation1 = "Ground Target" | "Self" | "Target Entity" | "Summoner";
	export type UnlockedBy28 = string;
	export type EnglishText47 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText42 = string;
	export type Projectile =
	  | {
	      style?: "Lob";
	      time_in_flight: FlightTimeSeconds;
	      ground_impact_action_groups?: ActionGroups1;
	      multiples?: LobMultipleProjectiles;
	    }
	  | {
	      bullet_multiples?: FireMultipleProjectiles;
	      z_behavior?: ZBehavior;
	      width: HitboxWidthPixels;
	      style?: "Bullet";
	      acceleration?: AccelerationPixelsSec2;
	      lifetime_range: LifetimeSeconds;
	      speed_range: SpeedPixelsSec;
	      bullet_impact_action_groups?: ActionGroups2;
	      expiration_action_groups?: ActionGroups3;
	    };
	export type Max44 = number;
	export type Min44 = number;
	/**
	 * The probability of this batch of projectiles firing.
	 */
	export type BatchChance = number;
	export type Max45 = number;
	export type Min45 = number;
	export type Max46 = number;
	export type Min46 = number;
	export type Max47 = number;
	export type Min47 = number;
	/**
	 * The probability of this batch of projectiles firing.
	 */
	export type BatchChance1 = number;
	export type Max48 = number;
	export type Min48 = number;
	export type Max49 = number;
	export type Min49 = number;
	/**
	 * How high the bullet will end up being off the ground (in pixels).
	 */
	export type ZTarget = number;
	/**
	 * What proportion of the projectile's life it takes to reach the Z target..
	 */
	export type ZTime = number;
	export type ZStyle = "Linear" | "Cubic";
	export type HitboxWidthPixels = number;
	export type AccelerationPixelsSec2 = number;
	export type Max50 = number;
	export type Min50 = number;
	export type Max51 = number;
	export type Min51 = number;
	/**
	 * The chance that this action will occur.
	 */
	export type Chance9 = number;
	/**
	 * How many stacks of the buff to remove. If unset, all stacks will be removed.
	 */
	export type Stacks30 = number;
	export type RemovePositiveBuffs1 = boolean;
	export type UnlockedBy30 = string;
	export type EnglishText48 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText43 = string;
	export type Buff5 = string;
	export type RemoveNegativeBuffs1 = boolean;
	export type Target1 = "Self" | "Summoner" | "Target Entity";
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants23 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags23 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude23 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll31 = boolean;
	export type Quantity44 = number;
	/**
	 * How many charges of Juke to change.
	 */
	export type ChargeIncrementAmount = number;
	/**
	 * The chance that this action will occur.
	 */
	export type Chance10 = number;
	/**
	 * If checked, the telegraph for this movement outcome will be drawn during the initial ability cast, not just while the entity is midair.
	 */
	export type ShowTelegraphDuringCast = boolean;
	export type Looping2 = boolean;
	export type AnimationName1 = string;
	/**
	 * If your leap is going too high, turn gravity down.
	 */
	export type GravityModifier = number;
	/**
	 * How many seconds the leaper will be airborne.
	 */
	export type LeapDuration = number;
	export type ChanceOfPlaying1 = number;
	export type Sound5 = string;
	/**
	 * If true, the leaper will not be stopped by water.
	 */
	export type LeapTraversesWater = boolean;
	/**
	 * You can give some time after the leap for an animation to play. The leaping entity will be immobile while this animation plays.
	 */
	export type FollowthroughSeconds = number;
	export type LeapDestination = "Ground Target" | "Target Entity" | "Self" | "Summoner";
	export type ChanceOfPlaying2 = number;
	export type Sound6 = string;
	export type UnlockedBy32 = string;
	export type EnglishText49 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText44 = string;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants24 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags24 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude24 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll32 = boolean;
	export type Quantity45 = number;
	/**
	 * If true, the actions in this action group will always attempt to be performed on the caster.
	 */
	export type CastOnSelf = boolean;
	export type End = number;
	export type Start = number;
	export type End1 = number;
	export type Start1 = number;
	export type End2 = number;
	export type Start2 = number;
	export type Style5 = "Ease Out Elastic" | "Ease Out Back" | "Ease Out Cubic" | "Linear";
	/**
	 * This will be the scale before the animation begins. The scale will always end at 1, so the telegraph matches reality when the animation is finished.
	 */
	export type ScaleStart = number;
	export type ScaleModifier2 = number;
	export type NameInternal2 = string;
	export type X = number;
	export type Y = number;
	export type X1 = boolean;
	export type Y1 = boolean;
	export type UnlockedBy34 = string;
	export type EnglishText50 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText45 = string;
	export type Shape1 =
	  | {
	      radius: Radius;
	      arc?: Arc;
	      scale?: ScaleModifier3;
	      name?: NameInternal3;
	      offset?: Offset2;
	      shape?: "circle";
	      color?: EditorColor;
	      mirror?: Mirror1;
	      unlocked_by?: UnlockedBy35;
	    }
	  | {
	      scale?: ScaleModifier4;
	      name?: NameInternal4;
	      offset?: Offset3;
	      shape?: "triangles";
	      points: Points;
	      mirror?: Mirror2;
	      color?: EditorColor1;
	      unlocked_by?: UnlockedBy37;
	    };
	export type Outer = number;
	export type Inner = number;
	export type SpreadDegrees = number;
	export type DirectionDegrees = number;
	export type ScaleModifier3 = number;
	export type NameInternal3 = string;
	export type X2 = number;
	export type Y2 = number;
	export type Green17 = number;
	export type Red17 = number;
	export type Blue17 = number;
	export type X3 = boolean;
	export type Y3 = boolean;
	export type UnlockedBy36 = string;
	export type EnglishText51 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText46 = string;
	export type ScaleModifier4 = number;
	export type NameInternal4 = string;
	export type X4 = number;
	export type Y4 = number;
	export type X5 = number;
	export type Y5 = number;
	export type X6 = boolean;
	export type Y6 = boolean;
	export type Green18 = number;
	export type Red18 = number;
	export type Blue18 = number;
	export type UnlockedBy38 = string;
	export type EnglishText52 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText47 = string;
	/**
	 * If true, the caster will be included as a target if the caster is inside the telegraph.
	 */
	export type IncludeCasterAsViableTarget = boolean;
	export type RotateWithAimDirection = boolean;
	export type CastDurationSeconds = number;
	export type Max52 = number;
	export type Min52 = number;
	export type JukeChargesRequired = number;
	export type AnimationName2 = string;
	export type End3 = number;
	export type Start3 = number;
	export type End4 = number;
	export type Start4 = number;
	export type Condition5 =
	  | {
	      daytime: DuringDaytime3;
	      condition_type?: "Daylight";
	    }
	  | {
	      moon: ActiveMoon3;
	      condition_type?: "Moon";
	    }
	  | {
	      quest: QuestToCheck5;
	      quest_status: QuestStatus5;
	      condition_type?: "Quest";
	    }
	  | {
	      artisan: Buddy4;
	      condition_type?: "Artisan Following";
	      following: Following7;
	    }
	  | {
	      unlock_text?: InsightTooltip3;
	      prerequisite: Insight11;
	      condition_type?: "Insight";
	    };
	export type DuringDaytime3 = boolean;
	export type ActiveMoon3 = string;
	/**
	 * The quest whose status we are querying.
	 */
	export type QuestToCheck5 = string;
	export type QuestStatus5 = "Complete" | "Started" | "Not Started";
	export type Buddy4 = string;
	export type Following7 = boolean;
	export type EnglishText53 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText48 = string;
	export type Insight11 = string;
	export type RequireAllConditions3 = boolean;
	/**
	 * If the conditions are met at the start of the cast, the telegraph scale will be multiplied by this amount.
	 */
	export type Multiplier = number;
	/**
	 * What this ability is called.
	 */
	export type Name19 = string;
	export type Max53 = number;
	export type Min53 = number;
	/**
	 * This sound will play the instant the ability begins casting.
	 */
	export type StartCastSound = string;
	export type ModifierType3 = "Add" | "Multiply";
	export type Stat7 = string;
	/**
	 * How many seconds it takes for each charge to come back.
	 */
	export type RechargeSeconds = number;
	export type MaxCharges = number;
	/**
	 * The number will be multiplied against this number when displayed.
	 */
	export type Multiplier1 = number;
	export type Type2 = "Damage" | "Stacks";
	/**
	 * Which buff to use for the hotbar display.
	 */
	export type Buff6 = string;
	export type EnglishText54 = string;
	export type UsableInCombat = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants25 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags25 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude25 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll33 = boolean;
	export type Quantity46 = number;
	export type Max54 = number;
	export type Min54 = number;
	export type UIIcon9 = string;
	/**
	 * A song or collection of songs that can play in a given context.
	 */
	export type Music = Music1 & Music2;
	export type Style6 = "Looping" | "Playlist";
	/**
	 * For internal reference
	 */
	export type Name20 = string;
	export type Music2 =
	  | {
	      name?: Name21;
	      intro?: Intro;
	      intro_combat?: IntroCombatOverlay;
	      loop: Loop;
	      style?: "Looping";
	      loop_in_seconds?: LoopInSeconds;
	      loop_combat?: LoopCombatOverlay;
	      pause_seconds?: PauseSeconds;
	    }
	  | {
	      tracks: Tracks;
	      style?: "Playlist";
	      name?: Name22;
	    };
	/**
	 * For internal reference
	 */
	export type Name21 = string;
	/**
	 * The sound that plays before the loop.
	 */
	export type Intro = string;
	/**
	 * A track to play synchronized with the Intro track while in combat.
	 */
	export type IntroCombatOverlay = string;
	/**
	 * The main part of the track that will play on a loop.
	 */
	export type Loop = string;
	/**
	 * The amount of time after the Intro begins playing for the loop to start. By default, the loop will begin playing when the Intro ends, but you can have them overlap by setting this value.
	 */
	export type LoopInSeconds = number;
	/**
	 * A track to play synchronized with the Combat track while in combat.
	 */
	export type LoopCombatOverlay = string;
	/**
	 * If this track stops and then resumes within this time frame, it will pick up where it left off and continue looping. Otherwise, it will start over, replaying its its intro.
	 */
	export type PauseSeconds = number;
	/**
	 * For internal reference
	 */
	export type Name22 = string;
	export type WorldSprite5 = string;
	export type EnglishText55 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText49 = string;
	/**
	 * If false, this item can be placed in water.
	 */
	export type RequiresLand1 = boolean;
	/**
	 * If false, the object will always render itself at its normal color and won't be darkened or brightened by lighting.
	 */
	export type UseLighting3 = boolean;
	export type EnglishText56 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText50 = string;
	/**
	 * The height of the hitbox for this fence. Important for making the fence easily clickable via the Editor or build mode.
	 */
	export type HitboxHeight = number;
	export type Green19 = number;
	export type Red19 = number;
	export type Blue19 = number;
	export type ResearchNode7 = string;
	export type ChangePerPoint12 = number;
	export type OutputQuantity3 = number;
	export type Style7 = "Additive" | "Multiplicative";
	export type ResearchNode8 = string;
	export type ChangePerPoint13 = number;
	export type UnlockedBy39 = string;
	/**
	 * Change this number to increase or decrease the number of materials required to craft this item.
	 */
	export type EffortModifier6 = number;
	/**
	 * What workstation the player must be near to craft this recipe.
	 */
	export type Station4 = string;
	export type UIIcon10 = string;
	export type NameInternal5 = string;
	export type EnglishText57 = string;
	export type Emoji1 = string;
	/**
	 * Whether the item should be X-flipped randomly when placed.
	 */
	export type Flippable2 = boolean;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler14 = string;
	/**
	 * If true, this item stop rendering while underneath a building's roof.
	 */
	export type HideUnderRoof = boolean;
	export type WorldSprite6 = string;
	/**
	 * A number that is connected to the relative power level of this thing.
	 */
	export type Level2 = number;
	export type EnglishText58 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText51 = string;
	export type State4 = string;
	export type EmitterScale4 = number;
	/**
	 * If set, the particle system will be drawn behind the object
	 */
	export type Behind1 = boolean;
	/**
	 * If set, the particle will anchor to this spine bone, and the X and Y offsets will be relative to the bone's position
	 */
	export type SpineBone1 = string;
	/**
	 * Relative to the object's origin
	 */
	export type XOffset1 = number;
	/**
	 * Relative to the object's origin
	 */
	export type YOffset5 = number;
	export type ParticleSystem3 = string;
	/**
	 * When first spawned in the world, this thing can randomly scale itself down (to a minimum) to add variety. This scale should be preserved between sessions, so this will only apply to newly-created instances of this asset.
	 */
	export type RandomScalingMinimum1 = number;
	/**
	 * If false, the object will always render itself at its normal color and won't be darkened or brightened by lighting.
	 */
	export type UseLighting4 = boolean;
	export type Object3 = string;
	/**
	 * If using a Spine sprite, the environmental object will try to play an animation with this name when it is spawned.
	 */
	export type SpineIdle = string;
	/**
	 * If set, the subimages will be modifiable via the Editor. Doesn't apply to world elements using Spine sprites.
	 */
	export type EditableSubimages = boolean;
	export type UIIcon11 = string;
	/**
	 * If true, this item will prevent abilities from targeting things through it via telegraphs.
	 */
	export type BlocksAbilities = boolean;
	export type Looping3 = boolean;
	export type Track1 = number;
	export type RandomizedStart1 = boolean;
	export type Max55 = number;
	export type Min55 = number;
	export type Name24 = string;
	export type Duration1 =
	  | {
	      time: TimeSeconds1;
	      duration_type?: "Time";
	    }
	  | {
	      duration_type?: "Animation";
	    }
	  | {
	      duration_type?: "Indefinite";
	    };
	export type Max56 = number;
	export type Min56 = number;
	/**
	 * This is the name of the variable used for the state in the game's code. Only lowercase letters and underscores.
	 */
	export type StateNameInternal1 = string;
	export type State6 = string;
	export type Condition6 =
	  | {
	      abilities?: Abilities4;
	      casting_state: Casting3;
	      condition_type?: "Ability";
	    }
	  | {
	      datafield_evaluation: Evaluation6;
	      condition_type?: "Datafield";
	    }
	  | {
	      daytime: DuringDaytime4;
	      condition_type?: "Daylight";
	    }
	  | {
	      condition_type?: "Combat";
	      combat: InCombat3;
	    }
	  | {
	      timestamp: Timestamp6;
	      minutes_passed: MinutesSinceTimestamp3;
	      evaluation: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      insight_modifier?: InsightModifier3;
	      condition_type?: "Timestamp";
	    }
	  | {
	      moon: ActiveMoon4;
	      condition_type?: "Moon";
	    }
	  | {
	      quest: QuestToCheck6;
	      quest_status: QuestStatus6;
	      condition_type?: "Quest";
	    }
	  | {
	      artisan: Buddy5;
	      condition_type?: "Artisan Following";
	      following: Following8;
	    }
	  | {
	      unlock_text?: InsightTooltip4;
	      prerequisite: Insight13;
	      condition_type?: "Insight";
	    }
	  | {
	      proximity_quantity: NumberOfTargets6;
	      proximity_range: DistanceRequiredGridSpaces3;
	      proximity_targets: Targets3;
	      condition_type?: "Proximity";
	    }
	  | {
	      hp_evaluation: HealthEvaluation3;
	      condition_type?: "Health";
	    }
	  | {
	      require_all: RequireAll35;
	      items: Items38;
	      condition_type?: "Item Equipped";
	    }
	  | {
	      items: Items39;
	      condition_type?: "Item Wielding";
	    }
	  | {
	      equipment_set: EquipmentSet4;
	      condition_type?: "Wearing Equipment Set";
	      num_pieces: NumberOfPiecesEquipped3;
	    }
	  | {
	      buff_require_all: RequireAll36;
	      buff_check_self: CheckSelf3;
	      buff_own_only: OwnBuffsOnly3;
	      buff_num_targets?: NumberOfTargets7;
	      condition_type?: "Buffs";
	      buff_target_filter?: BuffTargetFilter3;
	      buff_proximity?: BuffTargetRange3;
	      buff_stack_evaluation?: Stacks36;
	      buffs: Buffs62;
	      buff_target: TargetEntity16;
	    }
	  | {
	      boss: Boss5;
	      condition_type?: "Boss Defeated";
	    }
	  | {
	      comparison: NumberSummoned3;
	      condition_type?: "Summoned Entities";
	      summoned_filter?: SummonedEntitiesFilter3;
	    };
	/**
	 * If set, the ability's casting state must match this checkbox.
	 */
	export type Casting3 = boolean;
	export type DuringDaytime4 = boolean;
	export type InCombat3 = boolean;
	export type Timestamp6 = string;
	/**
	 * If greater than 0, then this many minutes will have passed since the timestamp was set. If less than 0, the timestamp will be this many minutes from now.
	 */
	export type MinutesSinceTimestamp3 = number;
	/**
	 * How much the 'Minutes Since Timestamp' should be adjusted (up or down) for each point invested in the Insight.
	 */
	export type ChangePerPoint14 = number;
	export type Insight12 = string;
	export type ActiveMoon4 = string;
	/**
	 * The quest whose status we are querying.
	 */
	export type QuestToCheck6 = string;
	export type QuestStatus6 = "Complete" | "Started" | "Not Started";
	export type Buddy5 = string;
	export type Following8 = boolean;
	export type EnglishText59 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText52 = string;
	export type Insight13 = string;
	export type Quantity47 = number;
	export type Evaluation7 = "==" | "!=" | "<" | "<=" | ">" | ">=";
	export type Max57 = number;
	export type Min57 = number;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants26 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags26 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude26 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll34 = boolean;
	export type Quantity48 = number;
	/**
	 * If checked, this condition will only be met if ALL of the items listed are equipped at the same time.
	 */
	export type RequireAll35 = boolean;
	export type EquipmentSet4 = string;
	/**
	 * If the player is wearing at least this many pieces, the condition will be met.
	 */
	export type NumberOfPiecesEquipped3 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on yourself at the same time.
	 */
	export type RequireAll36 = boolean;
	/**
	 * Obsolete--delete.
	 */
	export type CheckSelf3 = boolean;
	/**
	 * If checked, only buffs created by you will be checked. Otherwise, all buffs will be checked.
	 */
	export type OwnBuffsOnly3 = boolean;
	export type Quantity49 = number;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants27 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags27 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude27 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll37 = boolean;
	export type Quantity50 = number;
	export type Max58 = number;
	export type Min58 = number;
	export type Quantity51 = number;
	/**
	 * Which entity's buffs to query.
	 */
	export type TargetEntity16 = "Self" | "Other" | "All Entities";
	export type Boss5 = string;
	export type Quantity52 = number;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants28 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags28 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude28 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll38 = boolean;
	export type Quantity53 = number;
	/**
	 * If true, then every condition must be met. If false, then only one of the conditions must be met.
	 */
	export type RequireAllConditions4 = boolean;
	export type State7 = string;
	export type Condition7 =
	  | {
	      abilities?: Abilities5;
	      casting_state: Casting4;
	      condition_type?: "Ability";
	    }
	  | {
	      datafield_evaluation: Evaluation8;
	      condition_type?: "Datafield";
	    }
	  | {
	      daytime: DuringDaytime5;
	      condition_type?: "Daylight";
	    }
	  | {
	      condition_type?: "Combat";
	      combat: InCombat4;
	    }
	  | {
	      insight_modifier?: InsightModifier4;
	      minutes_passed: MinutesSinceTimestamp4;
	      evaluation: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      condition_type?: "Timestamp";
	      timestamp: Timestamp7;
	    }
	  | {
	      moon: ActiveMoon5;
	      condition_type?: "Moon";
	    }
	  | {
	      quest: QuestToCheck7;
	      quest_status: QuestStatus7;
	      condition_type?: "Quest";
	    }
	  | {
	      artisan: Buddy6;
	      condition_type?: "Artisan Following";
	      following: Following9;
	    }
	  | {
	      unlock_text?: InsightTooltip5;
	      prerequisite: Insight15;
	      condition_type?: "Insight";
	    }
	  | {
	      proximity_quantity: NumberOfTargets8;
	      proximity_range: DistanceRequiredGridSpaces4;
	      proximity_targets: Targets4;
	      condition_type?: "Proximity";
	    }
	  | {
	      hp_evaluation: HealthEvaluation4;
	      condition_type?: "Health";
	    }
	  | {
	      require_all: RequireAll40;
	      items: Items43;
	      condition_type?: "Item Equipped";
	    }
	  | {
	      items: Items44;
	      condition_type?: "Item Wielding";
	    }
	  | {
	      num_pieces: NumberOfPiecesEquipped4;
	      condition_type?: "Wearing Equipment Set";
	      equipment_set: EquipmentSet5;
	    }
	  | {
	      buff_require_all: RequireAll41;
	      buff_check_self: CheckSelf4;
	      buff_own_only: OwnBuffsOnly4;
	      buff_num_targets?: NumberOfTargets9;
	      condition_type?: "Buffs";
	      buff_target_filter?: BuffTargetFilter4;
	      buff_proximity?: BuffTargetRange4;
	      buff_stack_evaluation?: Stacks40;
	      buffs: Buffs69;
	      buff_target: TargetEntity17;
	    }
	  | {
	      boss: Boss6;
	      condition_type?: "Boss Defeated";
	    }
	  | {
	      summoned_filter?: SummonedEntitiesFilter4;
	      condition_type?: "Summoned Entities";
	      comparison: NumberSummoned4;
	    };
	/**
	 * If set, the ability's casting state must match this checkbox.
	 */
	export type Casting4 = boolean;
	export type DuringDaytime5 = boolean;
	export type InCombat4 = boolean;
	/**
	 * How much the 'Minutes Since Timestamp' should be adjusted (up or down) for each point invested in the Insight.
	 */
	export type ChangePerPoint15 = number;
	export type Insight14 = string;
	/**
	 * If greater than 0, then this many minutes will have passed since the timestamp was set. If less than 0, the timestamp will be this many minutes from now.
	 */
	export type MinutesSinceTimestamp4 = number;
	export type Timestamp7 = string;
	export type ActiveMoon5 = string;
	/**
	 * The quest whose status we are querying.
	 */
	export type QuestToCheck7 = string;
	export type QuestStatus7 = "Complete" | "Started" | "Not Started";
	export type Buddy6 = string;
	export type Following9 = boolean;
	export type EnglishText60 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText53 = string;
	export type Insight15 = string;
	export type Quantity54 = number;
	export type Evaluation9 = "==" | "!=" | "<" | "<=" | ">" | ">=";
	export type Max59 = number;
	export type Min59 = number;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants29 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags29 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude29 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll39 = boolean;
	export type Quantity55 = number;
	/**
	 * If checked, this condition will only be met if ALL of the items listed are equipped at the same time.
	 */
	export type RequireAll40 = boolean;
	/**
	 * If the player is wearing at least this many pieces, the condition will be met.
	 */
	export type NumberOfPiecesEquipped4 = number;
	export type EquipmentSet5 = string;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on yourself at the same time.
	 */
	export type RequireAll41 = boolean;
	/**
	 * Obsolete--delete.
	 */
	export type CheckSelf4 = boolean;
	/**
	 * If checked, only buffs created by you will be checked. Otherwise, all buffs will be checked.
	 */
	export type OwnBuffsOnly4 = boolean;
	export type Quantity56 = number;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants30 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags30 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude30 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll42 = boolean;
	export type Quantity57 = number;
	export type Max60 = number;
	export type Min60 = number;
	export type Quantity58 = number;
	/**
	 * Which entity's buffs to query.
	 */
	export type TargetEntity17 = "Self" | "Other" | "All Entities";
	export type Boss6 = string;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants31 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags31 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude31 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll43 = boolean;
	export type Quantity59 = number;
	export type Quantity60 = number;
	/**
	 * If true, then every condition must be met. If false, then only one of the conditions must be met.
	 */
	export type RequireAllConditions5 = boolean;
	/**
	 * A brief decription about this group for internal reference.
	 */
	export type PriorityGroupNameInternal1 = string;
	/**
	 * If true, this item will not be rendered, but it will still exist and perform mechanics.
	 */
	export type Invisible = boolean;
	/**
	 * If false, this item can be placed in water.
	 */
	export type RequiresLand2 = boolean;
	/**
	 * If set, this game element will adjust its level to match the player's level at the time it is spawned, plus this number.
	 */
	export type RelativeLevel1 = number;
	export type EnglishText61 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText54 = string;
	/**
	 * If true, this resource will snap to the grid when placed. Only applies to non-solid objects.
	 */
	export type GridSnapping2 = boolean;
	export type Green20 = number;
	export type Red20 = number;
	export type Blue20 = number;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup6 = string;
	export type ScaleModifier5 = number;
	/**
	 * Whether the player walks over the top of this item.
	 */
	export type Underfoot2 = boolean;
	/**
	 * If true, the player can enter build mode in this area. Tru by default.
	 */
	export type BuildModeAllowed = boolean;
	/**
	 * Uncheck this to have no ambience play in this zone.
	 */
	export type PlayAmbience = boolean;
	/**
	 * The sounds that should play if the player is not indoors.
	 */
	export type AmbientNightTrack = string;
	export type OutdoorMusicDay = string;
	export type IndoorMusic = string;
	export type Green21 = number;
	export type Red21 = number;
	export type Blue21 = number;
	/**
	 * If true, this area will display its name on the world map once discovered.
	 */
	export type Discoverable = boolean;
	/**
	 * When the player enters this area, whether the name of the area should appear on-screen.
	 */
	export type ShowNameUponEntering = boolean;
	export type EnglishText62 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText55 = string;
	/**
	 * The sounds that should play if the player is outdoors in the day.
	 */
	export type AmbientDayTrack = string;
	export type ColorGradingProfile = string;
	export type OutdoorMusicNight = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup7 = string;
	/**
	 * An area that this area can inherit certain properties from, like music and ambience.
	 */
	export type ParentArea = string;
	export type EnglishText63 = string;
	/**
	 * Describe what this scene is for (for other developers).
	 */
	export type DescriptionInternal = string;
	export type Green22 = number;
	export type Red22 = number;
	export type Blue22 = number;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup8 = string;
	/**
	 * A quest that must be completed to unlock this phase.
	 */
	export type UnlockedBy40 = string;
	export type TransitionVisuals =
	  | {
	      fullscreen: true;
	      fade_start_seconds: FadeStartSeconds;
	      fade_hold_seconds: FadeHoldSeconds;
	      color: FullscreenColor;
	      fade_end_seconds: FadeEndSeconds;
	      text_overlay?: TextOverlay;
	    }
	  | {
	      fullscreen: false;
	      effects?: Effects1;
	    };
	/**
	 * How long to fade to the designated color.
	 */
	export type FadeStartSeconds = number;
	/**
	 * How long to hold the vew on the designated color. The scene transition will occur halfway through this hold.
	 */
	export type FadeHoldSeconds = number;
	export type Green23 = number;
	export type Red23 = number;
	export type Blue23 = number;
	/**
	 * How long to fade back to normal view.
	 */
	export type FadeEndSeconds = number;
	export type EnglishText64 = string;
	/**
	 * The chance that the effect will play on a given target.
	 */
	export type Chance11 = number;
	export type VisualEffect2 =
	  | {
	      decal_sprite: DecalSprite2;
	      decal_scale?: DecalScale2;
	      effect_type: "Ground Decal";
	      decal_max_alpha?: MaxAlpha2;
	      decal_duration?: DecalDurationSeconds2;
	    }
	  | {
	      explosion_color: BaseColor2;
	      explosion_slomo_burst: SlowMotionPulse2;
	      explosion_smoke?: ShowSmoke2;
	      effect_type: "Explosion";
	      explosion_random_distance?: RandomDistanceGridSpaces2;
	      explosion_z_offset?: ZOffset7;
	      explosion_sound?: Sound7;
	      explosion_highlight_color?: HighlightColor2;
	      explosion_scale?: ExplosionScale2;
	      explosion_random_delay?: RandomDelaySeconds2;
	      explosion_y_offset?: YOffset6;
	    }
	  | {
	      particle_system_emitter_scale?: EmitterScale5;
	      particle_system: ParticleSystem4;
	      particle_system_y_offset?: YOffset7;
	      effect_type: "Particle System Burst";
	      particle_system_z_offset?: ZOffset8;
	    };
	/**
	 * This sprite will be drawn subtractively.
	 */
	export type DecalSprite2 = string;
	export type Max61 = number;
	export type Min61 = number;
	export type MaxAlpha2 = number;
	export type Max62 = number;
	export type Min62 = number;
	export type Green24 = number;
	export type Red24 = number;
	export type Blue24 = number;
	/**
	 * If true, there will be a brief slow-down of the game when the explosion occurs to make it feel more impactful. Use sparingly.
	 */
	export type SlowMotionPulse2 = boolean;
	/**
	 * If true, smoke will be spawned at the explosion location.
	 */
	export type ShowSmoke2 = boolean;
	export type Max63 = number;
	export type Min63 = number;
	/**
	 * If spawning on the ground, this will be height above ground. If spawning on targets, it will spawn at their height midpoints, plus this offset.
	 */
	export type ZOffset7 = number;
	/**
	 * There is a default explosion sound, but you can override it here.
	 */
	export type Sound7 = string;
	export type Green25 = number;
	export type Red25 = number;
	export type Blue25 = number;
	export type Max64 = number;
	export type Min64 = number;
	export type Max65 = number;
	export type Min65 = number;
	/**
	 * Can be useful for depth-sorting. For example, a Y offset of 1 will spawn the explosion in front of whatever is explosing.
	 */
	export type YOffset6 = number;
	export type EmitterScale5 = number;
	export type ParticleSystem4 = string;
	/**
	 * Can be useful for depth-sorting. For example, a Y offset of 1 will spawn the explosion in front of whatever is explosing.
	 */
	export type YOffset7 = number;
	/**
	 * If spawning on the ground, this will be height above ground. If spawning on targets, it will spawn at their height midpoints, plus this offset.
	 */
	export type ZOffset8 = number;
	/**
	 * If checked, these transition effects will play on entities that have changed.
	 */
	export type PlayOnEntities = boolean;
	/**
	 * If checked, these transition effects will play on tiles that have changed.
	 */
	export type PlayOnTiles = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants32 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags32 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude32 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll44 = boolean;
	export type Quantity61 = number;
	/**
	 * For saving in the binary file. This does not affect phase order -- it is only for saving/loading.
	 */
	export type UniqueID = number;
	export type PhaseNameInternal = string;
	/**
	 * Name of this damage profile. For internal use.
	 */
	export type Name27 = string;
	export type DamageType2 = string;
	export type Resistance = number;
	export type EnglishText65 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText56 = string;
	export type WorldSprite7 = string;
	export type Height2 = number;
	export type Width2 = number;
	/**
	 * If set, Juicebox will follow the player once this thing is finished.
	 */
	export type FollowingUnlock = string;
	export type Green26 = number;
	export type Red26 = number;
	export type Blue26 = number;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup9 = string;
	export type UIIcon12 = string;
	/**
	 * If true, and this has a set Bait Power, the bait will boost Whopper catches instead of normal fish.
	 */
	export type WhopperBait = boolean;
	export type WorldSprite8 = string;
	export type EnglishText66 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText57 = string;
	/**
	 * Higher effort items are considered more rare or harder to reach, and recipes will call for fewer of them. Lower effort items will be considered 'cheap', and therefore recipes will demand more of them.
	 */
	export type EffortModifier7 = number;
	/**
	 * If set, this item will not be fishable if the player has already acquired one.
	 */
	export type Singleton = boolean;
	/**
	 * Higher number means it is more common to find this item when fishing.
	 */
	export type Frequency = number;
	export type UnlockedBy42 = string;
	export type EnglishText67 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText58 = string;
	/**
	 * If set, the fish will not be catchable in this area (and its children)
	 */
	export type Exclude33 = boolean;
	/**
	 * Where the player must be standing to catch this fish. Includes all children of this area.
	 */
	export type Area1 = string;
	/**
	 * If set, this fish will be considered a 'whopper' and will only be catchable via special Whopper Pools.
	 */
	export type Whopper = boolean;
	/**
	 * If set, this component will be considered 'bait'. This number represents how many additional fish you will catch when using it.
	 */
	export type BaitPower = number;
	/**
	 * If false, the object will always render itself at its normal color and won't be darkened or brightened by lighting.
	 */
	export type UseLighting5 = boolean;
	export type EnglishText68 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText59 = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup10 = string;
	export type ResearchNode9 = string;
	export type ChangePerPoint16 = number;
	export type OutputQuantity4 = number;
	export type Style8 = "Additive" | "Multiplicative";
	export type ResearchNode10 = string;
	export type ChangePerPoint17 = number;
	export type UnlockedBy43 = string;
	/**
	 * Change this number to increase or decrease the number of materials required to craft this item.
	 */
	export type EffortModifier8 = number;
	/**
	 * What workstation the player must be near to craft this recipe.
	 */
	export type Station5 = string;
	export type UIIcon13 = string;
	/**
	 * A unique sound to be played when this item is collected into your body.
	 */
	export type CollectionSound1 = string;
	export type WorldSprite9 = string;
	export type DoorOpenSound1 = string;
	export type EnglishText69 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText60 = string;
	/**
	 * The sound to play when this is placed in the editor or in Build Mode.
	 */
	export type PlacementSound3 = string;
	/**
	 * Entities that the door will open for (like the player) must at least this far away (in grid spaces) before the door will close.
	 */
	export type CloseDistance = number;
	export type EnglishText70 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText61 = string;
	export type DoorCloseSound1 = string;
	/**
	 * Structural base items will vote on their preferred roof. The roof type with the most votes will be displayed.
	 */
	export type PreferredRoof1 = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup11 = string;
	export type ResearchNode11 = string;
	export type ChangePerPoint18 = number;
	export type OutputQuantity5 = number;
	export type Style9 = "Additive" | "Multiplicative";
	export type ResearchNode12 = string;
	export type ChangePerPoint19 = number;
	export type UnlockedBy44 = string;
	/**
	 * Change this number to increase or decrease the number of materials required to craft this item.
	 */
	export type EffortModifier9 = number;
	/**
	 * What workstation the player must be near to craft this recipe.
	 */
	export type Station6 = string;
	export type UIIcon14 = string;
	/**
	 * If checked, this door won't open until the player is out of combat.
	 */
	export type ClosedDuringCombat = boolean;
	export type VerticalFiller = string;
	export type CenterPeak = string;
	export type BackSlope = string;
	export type FrontSlope = string;
	export type EnglishText71 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText62 = string;
	export type BackEdge = string;
	export type FrontEdge = string;
	export type Green27 = number;
	export type Red27 = number;
	export type Blue27 = number;
	export type EnglishText72 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText63 = string;
	export type WorldSprite10 = string;
	export type Height3 = number;
	export type Width3 = number;
	export type UIIcon15 = string;
	export type NameInternal6 = string;
	export type Sprite2 = string;
	/**
	 * During dialogue moments, this emoji will play this sound when displayed.
	 */
	export type Sound8 = string;
	/**
	 * If true, this data field can be edited in the World Editor.
	 */
	export type Editable = boolean;
	/**
	 * The UID pool that this data field should pull from in the Editor.
	 */
	export type EditorUIDPool = "cl2_items";
	/**
	 * If true, this data field will be preserved as it exists in the World Editor on each instance.
	 */
	export type SaveToBaseWorld = boolean;
	/**
	 * How this data is stored in a buffer.
	 */
	export type DataType = "u8" | "u16" | "u32" | "s8" | "s16" | "s32" | "f32";
	/**
	 * An explanation of what this data field is intended to be used for.
	 */
	export type Description15 = string;
	export type Max66 = number;
	export type Min66 = number;
	/**
	 * A human-readable name for this data field.
	 */
	export type Name33 = string;
	/**
	 * If you pick up a world element that has this data field, the data field can be preserved when the item is in your inventory.
	 */
	export type SaveToInventory = boolean;
	/**
	 * If a world element has this data field and exists out in the world, the data field will be preserved between game sessions as the player saves and loads.
	 */
	export type SaveToGameplay = boolean;
	export type UIIcon16 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler15 = string;
	export type WorldSprite11 = string;
	/**
	 * If false, this item can be placed in water.
	 */
	export type RequiresLand3 = boolean;
	/**
	 * When first spawned in the world, this thing can randomly scale itself down (to a minimum) to add variety. This scale should be preserved between sessions, so this will only apply to newly-created instances of this asset.
	 */
	export type RandomScalingMinimum2 = number;
	/**
	 * If false, the object will always render itself at its normal color and won't be darkened or brightened by lighting.
	 */
	export type UseLighting6 = boolean;
	export type Object4 = string;
	export type EnglishText73 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText64 = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup12 = string;
	export type UIIcon17 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler16 = string;
	export type WorldSprite12 = string;
	export type Height4 = number;
	export type Width4 = number;
	export type IgnoreInLevelViewer2 = boolean;
	/**
	 * If false, this item can be placed in water.
	 */
	export type RequiresLand4 = boolean;
	export type CanExistOnFloors1 = boolean;
	/**
	 * If false, the object will always render itself at its normal color and won't be darkened or brightened by lighting.
	 */
	export type UseLighting7 = boolean;
	export type EnglishText74 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText65 = string;
	/**
	 * If using a Spine sprite, the object will try to play an animation with this name when it is spawned.
	 */
	export type SpineIdle1 = string;
	/**
	 * If true, this resource will snap to the grid when placed. Only applies to non-solid objects.
	 */
	export type GridSnapping3 = boolean;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup13 = string;
	export type ScaleModifier6 = number;
	export type UIIcon18 = string;
	/**
	 * A unique sound to be played when this item is collected into your body.
	 */
	export type CollectionSound2 = string;
	export type WorldSprite13 = string;
	export type Height5 = number;
	export type Width5 = number;
	export type EnglishText75 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText66 = string;
	/**
	 * If false, the object will always render itself at its normal color and won't be darkened or brightened by lighting.
	 */
	export type UseLighting8 = boolean;
	export type EnglishText76 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText67 = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup14 = string;
	export type ResearchNode13 = string;
	export type ChangePerPoint20 = number;
	export type OutputQuantity6 = number;
	export type Style10 = "Additive" | "Multiplicative";
	export type ResearchNode14 = string;
	export type ChangePerPoint21 = number;
	export type UnlockedBy45 = string;
	/**
	 * Change this number to increase or decrease the number of materials required to craft this item.
	 */
	export type EffortModifier10 = number;
	/**
	 * What workstation the player must be near to craft this recipe.
	 */
	export type Station7 = string;
	export type UIIcon19 = string;
	/**
	 * Whether the stat should be used as a multiplier or added to the damage. Multipliers will assume the stat is a percentage and will use the formula (1+Stat)*Damage.
	 */
	export type BoostStyle = "Add" | "Multiply";
	/**
	 * If set, this will dictate if this boost only applies to direct or periodic damage. If unset, it will apply to all damage.
	 */
	export type DirectDamage2 = boolean;
	/**
	 * If the entity dealing damage has this stat, the damage will be boosted by it.
	 */
	export type BoostingStat = string;
	/**
	 * If true, this damage type exists as a 'roll up' to categorize other damage types, but isn't usable as a type of damage itself.
	 */
	export type Aggregator = boolean;
	export type EnglishText77 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText68 = string;
	export type Green28 = number;
	export type Red28 = number;
	export type Blue28 = number;
	/**
	 * If set, then this damage will be counted as a subset of the parent.
	 */
	export type ParentDamageType = string;
	/**
	 * If this damage type is reduced by a stat, link to that stat here.
	 */
	export type ResistanceStat = string;
	/**
	 * If set, this thing cannot be stunned. Only applies to creatures, since nothing else can be stunned by default.
	 */
	export type Stun1 = boolean;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup15 = string;
	export type Name38 = string;
	/**
	 * A number that is connected to the relative power level of this thing.
	 */
	export type Level3 = number;
	export type EnglishText78 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText69 = string;
	/**
	 * The sound this item makes when being placed in the inventory.
	 */
	export type InventorySound1 = string;
	export type EquipmentSet6 = string;
	export type EnglishText79 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText70 = string;
	export type ArmorType = string;
	/**
	 * A text string used to choose which image to display.
	 */
	export type SpineKeyword = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup16 = string;
	export type ResearchNode15 = string;
	export type ChangePerPoint22 = number;
	export type UnlockedBy46 = string;
	/**
	 * Change this number to increase or decrease the number of materials required to craft this item.
	 */
	export type EffortModifier11 = number;
	/**
	 * What workstation the player must be near to craft this recipe.
	 */
	export type Station8 = string;
	export type UIIcon20 = string;
	/**
	 * Whether the tile should be X-flipped randomly when placed.
	 */
	export type Flippable3 = boolean;
	/**
	 * The sound to play when the player walks on this tile.
	 */
	export type FootstepSound1 = string;
	/**
	 * The primary sprite of the tile.
	 */
	export type MainSprite1 = string;
	export type EnglishText80 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText71 = string;
	/**
	 * The sound to play when this tile is placed in the editor or in Build Mode.
	 */
	export type PlacementSound4 = string;
	/**
	 * The sprite to draw below the main sprite. Subimages must correspond with the Sprite.
	 */
	export type UnderSprite1 = string;
	export type Green29 = number;
	export type Red29 = number;
	export type Blue29 = number;
	export type EnglishText81 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText72 = string;
	export type Green30 = number;
	export type Red30 = number;
	export type Blue30 = number;
	/**
	 * The probability of a given tile having Dapples on it.
	 */
	export type SpawnChance1 = number;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup17 = string;
	export type ResearchNode16 = string;
	export type ChangePerPoint23 = number;
	export type OutputQuantity7 = number;
	export type Style11 = "Additive" | "Multiplicative";
	export type ResearchNode17 = string;
	export type ChangePerPoint24 = number;
	export type UnlockedBy47 = string;
	/**
	 * Change this number to increase or decrease the number of materials required to craft this item.
	 */
	export type EffortModifier12 = number;
	/**
	 * What workstation the player must be near to craft this recipe.
	 */
	export type Station9 = string;
	/**
	 * The sprite to use when displaying the tile in the UI (e.g. Build Mode).
	 */
	export type Icon4 = string;
	export type Name41 = string;
	/**
	 * If no animation information is present for this state, it can fall back to another state.
	 */
	export type FallbackState = string;
	/**
	 * Unless otherwise specified, we will try to play the animation using this Spine name when we enter this animation state.
	 */
	export type DefaultSpineAnimationName = string;
	/**
	 * Describe scenarios in which this animation state is used.
	 */
	export type Description19 = string;
	/**
	 * When in this editor category, how the editor should select things and interact with the world.
	 */
	export type SpawnMode = "Items" | "Tiles" | "Areas" | "Scenes";
	/**
	 * The order in which this thing should appear in the Editor selector.
	 */
	export type Order2 = number;
	export type Name42 = string;
	export type Green31 = number;
	export type Red31 = number;
	export type Blue31 = number;
	export type Icon5 = string;
	export type Max67 = number;
	export type Min67 = number;
	/**
	 * This group can inherit gain from a parent group.
	 */
	export type ParentGroup = string;
	/**
	 * The name of this group of sounds.
	 */
	export type Name43 = string;
	/**
	 * All sounds in this group will have their gain multiplied by this number at all times. This will also multiply with parent groups. So for example, if this group has a gain modifier of 0.5, and its parent also has a gain modifier of 0.5, then sounds in this group will have a final gain of 0.25.
	 */
	export type GainModifier = number;
	export type Pet3 = string;
	export type EnglishText82 = string;
	/**
	 * What stage of the pet's life this quest is available during.
	 */
	export type PetStage2 = "Baby" | "Adult";
	export type EnglishText83 = string;
	export type QuestMoment =
	  | {
	      requirements?: MomentRequirements2;
	      style: "Dialogue";
	      speech: {
	        text: {
	          text: EnglishText84;
	        };
	        speaker: Speaker;
	        emotion?: Emoji3;
	      };
	    }
	  | {
	      requirements?: MomentRequirements2;
	      emotes: Emotes;
	      style: "Emote";
	    }
	  | {
	      style: "Gain Item";
	      bonus?: ItemsAreBonus;
	      items: ItemsToGain1;
	    }
	  | {
	      style: "Pin";
	      pin: WhatToPin;
	    }
	  | {
	      style: "Artisan Follow";
	      artisan: Buddy7;
	    }
	  | {
	      style: "Drop Item";
	      bonus?: ItemsAreBonus1;
	      drops: Drops;
	    }
	  | {
	      style: "Artisan Stop Following";
	      artisan: Artisan3;
	    }
	  | {
	      style: "Set Area Discovered";
	      area: Area2;
	    }
	  | {
	      quest_to_close: Quest1;
	      style: "Close a Quest";
	    }
	  | {
	      style: "Pause";
	      pause_duration: PauseSeconds1;
	    }
	  | {
	      style: "Camera Target Set";
	      camera_target: CameraTargetEntity;
	    }
	  | {
	      style: "Camera Target Unset";
	    }
	  | {
	      style: "Camera Zoom";
	      zoom_amount: ZoomAmount;
	    };
	export type EnglishText84 = string;
	export type Speaker = string;
	export type Emoji3 = string;
	export type Character3 = string;
	export type Emoji4 = string;
	/**
	 * If checked, these items will not be included in the progression map.
	 */
	export type ItemsAreBonus = boolean;
	export type Quantity62 = number;
	export type WhatToPin = string;
	export type Buddy7 = string;
	/**
	 * If checked, these items will not be included in the progression map.
	 */
	export type ItemsAreBonus1 = boolean;
	/**
	 * Who or what will drop these items. If not present, the items will fly out of the player.
	 */
	export type Dropper = string;
	export type Quantity63 = number;
	export type Item7 = string;
	export type Artisan3 = string;
	export type Area2 = string;
	/**
	 * This quest will be set as 'complete', regardless of whether it has been started or not. Its end moments will be skipped.
	 */
	export type Quest1 = string;
	/**
	 * How long to pause before moving to the next quest moment.
	 */
	export type PauseSeconds1 = number;
	export type CameraTargetEntity = string;
	/**
	 * Higher number means you can see more.
	 */
	export type ZoomAmount = number;
	export type Objective =
	  | {
	      style: "Turn-in Items";
	      items: Items48;
	    }
	  | {
	      ability: AbilityToUse;
	      style: "Ability Usage";
	      ability_quantity?: NumberOfTimes;
	      ability_targets?: TargetS;
	      objective_id: ObjectiveID;
	      ability_requirements?: AbilityUsageRequirements;
	    }
	  | {
	      require_player: RequirePlayerInvolvement;
	      destroy_quantity?: Quantity67;
	      destroy_targets: TargetS1;
	      target_home?: TargetHome;
	      destroy_requirements?: DestructionRequirements;
	      style: "Destroy";
	      objective_id: ObjectiveID1;
	    }
	  | {
	      consume_quantity: Quantity70;
	      style: "Consume Item";
	      consume_items: ItemsToConsume;
	      objective_id: ObjectiveID2;
	    }
	  | {
	      style: "Open Interface";
	      objective_id: ObjectiveID3;
	      interface: Interface;
	    }
	  | {
	      placement_area?: RequiredArea;
	      marker_proximity?: QuestMarkerProximity;
	      placement_item: Item10;
	      style: "Place Item";
	      objective_id: ObjectiveID4;
	      placement_quantity: Quantity71;
	    }
	  | {
	      style: "Craft Item";
	      item_to_craft: ItemToCraft;
	      craft_quantity: Quantity72;
	      objective_id: ObjectiveID5;
	    }
	  | {
	      style: "Get Custom Loot";
	      items: ItemsToDrop1;
	      custom_loot: CustomLootDrops;
	    }
	  | {
	      interact_text?: InteractionText;
	      interact_duration?: InteractionDuration;
	      interact_targets: TargetS2;
	      interact_target_home?: TargetHome1;
	      interact_outcomes?: InteractionOutcomes;
	      interact_color?: InteractionBarColor;
	      interact_quantity?: Quantity75;
	      interact_sound?: InteractionFinishSound;
	      interact_requirements?: Requirements6;
	      style: "Interact";
	      objective_id: ObjectiveID6;
	    }
	  | {
	      style: "Acquire Item";
	      quantity: Quantity76;
	      objective_id: ObjectiveID7;
	      item: Item11;
	    };
	/**
	 * How many of this item to turn in.
	 */
	export type Quantity64 = number;
	/**
	 * The player must use this ability to meet the quest objective.
	 */
	export type AbilityToUse = string;
	/**
	 * How many times the ability must be used to meet the quest objective.
	 */
	export type NumberOfTimes = number;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants33 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags33 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude34 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll45 = boolean;
	export type Quantity65 = number;
	/**
	 * A unique number used to save and load this objective's progress to/from disk.
	 */
	export type ObjectiveID = number;
	export type AbilityUsageRequirement =
	  | {
	      time: Time2;
	      style: "Time";
	    }
	  | {
	      style: "Artisan Following";
	      artisan?: Artisan4;
	      following: Following10;
	    }
	  | {
	      style: "Equipped";
	      item: Item8;
	    }
	  | {
	      style: "Items Owned";
	      items_owned: Items50;
	    }
	  | {
	      style: "Area";
	      area: AreaToCheck2;
	      item_id: Entity2;
	    }
	  | {
	      stage?: PetStage3;
	      style: "Pet";
	      pet?: Pet4;
	      following?: Following11;
	    };
	export type Time2 = "Day" | "Night";
	/**
	 * Leave unset to query whether any artisans are either following or not following. Otherwise, this will query the specific artisan you have chosen.
	 */
	export type Artisan4 = string;
	/**
	 * If false, then this will only trigger if the artisan is not following.
	 */
	export type Following10 = boolean;
	/**
	 * The player must be wearing this item.
	 */
	export type Item8 = string;
	export type Quantity66 = number;
	export type AreaToCheck2 = string;
	/**
	 * The entity that must be in the area for the requirement to pass.
	 */
	export type Entity2 = string;
	/**
	 * If unset, then this requirement will be met if any of your pets match it.
	 */
	export type Pet4 = string;
	/**
	 * If set, then this will only trigger if the pet's following state matches this.
	 */
	export type Following11 = boolean;
	/**
	 * If checked, this will require the player (or something the player created/owns) to destroy the target. Otherwise, any kind of destruction will count.
	 */
	export type RequirePlayerInvolvement = boolean;
	/**
	 * How many things must be destroyed.
	 */
	export type Quantity67 = number;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants34 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags34 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude35 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll46 = boolean;
	export type Quantity68 = number;
	/**
	 * If set, destruction will only count if the target is originally from this area, even if the target has wandered away.
	 */
	export type TargetHome = string;
	export type DestructionRequirement =
	  | {
	      time: Time3;
	      style: "Time";
	    }
	  | {
	      style: "Artisan Following";
	      artisan?: Artisan5;
	      following: Following12;
	    }
	  | {
	      style: "Equipped";
	      item: Item9;
	    }
	  | {
	      style: "Ability Used";
	      ability: Ability7;
	    }
	  | {
	      style: "Items Owned";
	      items_owned: Items52;
	    }
	  | {
	      style: "Area";
	      area: AreaToCheck3;
	      item_id: Entity3;
	    }
	  | {
	      stage?: PetStage4;
	      style: "Pet";
	      pet?: Pet5;
	      following?: Following13;
	    };
	export type Time3 = "Day" | "Night";
	/**
	 * Leave unset to query whether any artisans are either following or not following. Otherwise, this will query the specific artisan you have chosen.
	 */
	export type Artisan5 = string;
	/**
	 * If false, then this will only trigger if the artisan is not following.
	 */
	export type Following12 = boolean;
	/**
	 * The player must be wearing this item.
	 */
	export type Item9 = string;
	/**
	 * The destruction will only count if this ability is used to do it.
	 */
	export type Ability7 = string;
	export type Quantity69 = number;
	export type AreaToCheck3 = string;
	/**
	 * The entity that must be in the area for the requirement to pass.
	 */
	export type Entity3 = string;
	/**
	 * If unset, then this requirement will be met if any of your pets match it.
	 */
	export type Pet5 = string;
	/**
	 * If set, then this will only trigger if the pet's following state matches this.
	 */
	export type Following13 = boolean;
	/**
	 * A unique number used to save and load this objective's progress to/from disk.
	 */
	export type ObjectiveID1 = number;
	/**
	 * How many items must be consumed.
	 */
	export type Quantity70 = number;
	/**
	 * A unique number used to save and load this objective's progress to/from disk.
	 */
	export type ObjectiveID2 = number;
	/**
	 * A unique number used to save and load this objective's progress to/from disk.
	 */
	export type ObjectiveID3 = number;
	/**
	 * Once the player has viewed this interface, the quest objective will be completed.
	 */
	export type Interface =
	  | "Build Mode"
	  | "Insights"
	  | "Crafting"
	  | "Comforts"
	  | "Home"
	  | "Death"
	  | "Quests"
	  | "Equipment"
	  | "Map"
	  | "Teleport List"
	  | "Teleport Sequence"
	  | "Pet"
	  | "Death to Boss";
	/**
	 * Where this item must be placed.
	 */
	export type RequiredArea = string;
	export type ProximityGridSpaces = number;
	export type Item10 = string;
	/**
	 * A unique number used to save and load this objective's progress to/from disk.
	 */
	export type ObjectiveID4 = number;
	/**
	 * How many of this item must be placed.
	 */
	export type Quantity71 = number;
	export type ItemToCraft = string;
	/**
	 * How many of this item must be crafted.
	 */
	export type Quantity72 = number;
	/**
	 * A unique number used to save and load this objective's progress to/from disk.
	 */
	export type ObjectiveID5 = number;
	/**
	 * How many of this item will drop. Once the player has all of these items, this objective will be considered complete.
	 */
	export type Quantity73 = number;
	/**
	 * When this loot group is able to drop.
	 */
	export type TimeOfDay1 = "Always" | "Day" | "Night";
	/**
	 * What event will cause this loot to drop.
	 */
	export type Trigger2 = "Death" | "Damage";
	export type Max68 = number;
	export type Min68 = number;
	/**
	 * The probability for this loot group to occur.
	 */
	export type DropChance1 = number;
	export type EnglishText85 = string;
	/**
	 * How long the player must interact with the target to complete this objective.
	 */
	export type InteractionDuration = number;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants35 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags35 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude36 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll47 = boolean;
	export type Quantity74 = number;
	/**
	 * If set, interaction will only count if the target is originally from this area, even if the target has wandered away.
	 */
	export type TargetHome1 = string;
	export type QuestInteractionOutcome =
	  | {
	      datafield: Datafield5;
	      type: "Set Datafield";
	      value: Value3;
	    }
	  | {
	      type: "Destroy";
	    };
	export type Datafield5 = string;
	/**
	 * The new value to set the datafield to.
	 */
	export type Value3 = number;
	export type Green32 = number;
	export type Red32 = number;
	export type Blue32 = number;
	/**
	 * How many times the player must perform this interaction.
	 */
	export type Quantity75 = number;
	/**
	 * The sound that will play when the player finishes interacting with the target.
	 */
	export type InteractionFinishSound = string;
	/**
	 * A unique number used to save and load this objective's progress to/from disk.
	 */
	export type ObjectiveID6 = number;
	/**
	 * How many of this item to acquire.
	 */
	export type Quantity76 = number;
	/**
	 * A unique number used to save and load this objective's progress to/from disk.
	 */
	export type ObjectiveID7 = number;
	/**
	 * Which item must be acquired. Note that this objective only counts items acquired after you have started the quest.
	 */
	export type Item11 = string;
	export type EnglishText86 = string;
	export type Emoji5 = string;
	export type Speaker1 = string;
	export type Green33 = number;
	export type Red33 = number;
	export type Blue33 = number;
	export type EnglishText87 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText73 = string;
	export type QuestMarker1 = string;
	/**
	 * If set, this sprite will be drawn alongside the quest marker text.
	 */
	export type Sprite3 = string;
	/**
	 * If set, the text will only appear if the player is within this distance of the quest marker.
	 */
	export type Proximity = number;
	export type Storyline1 = string;
	/**
	 * The interactor can optionally check for distance to an entity other than the player.
	 */
	export type AutomaticInteractionTarget = string;
	/**
	 * For automatic interactions, whether this interaction will only occur if it is in the same room as the interaction target.
	 */
	export type RequireSameRoom = boolean;
	/**
	 * Who or what must be present for this quest to advance.
	 */
	export type Initiator = string;
	/**
	 * If the requirements are met, this interactor will be shown on the world map.
	 */
	export type ShowOnMap = boolean;
	/**
	 * How far away from the interaction target (in grid spaces) the quest giver will automatically begin speaking.
	 */
	export type AutomaticInteractionProximity = number;
	/**
	 * For sorting in the Game Changer.
	 */
	export type Order3 = number;
	export type Name44 = string;
	/**
	 * The interactor can optionally check for distance to an entity other than the player.
	 */
	export type AutomaticInteractionTarget1 = string;
	/**
	 * For automatic interactions, whether this interaction will only occur if it is in the same room as the interaction target.
	 */
	export type RequireSameRoom1 = boolean;
	/**
	 * Who or what must be present for this quest to advance.
	 */
	export type Initiator1 = string;
	/**
	 * If the requirements are met, this interactor will be shown on the world map.
	 */
	export type ShowOnMap1 = boolean;
	/**
	 * How far away from the interaction target (in grid spaces) the quest giver will automatically begin speaking.
	 */
	export type AutomaticInteractionProximity1 = number;
	export type QuestMoment1 =
	  | {
	      requirements?: MomentRequirements2;
	      style: "Dialogue";
	      speech: {
	        text: {
	          text: EnglishText88;
	        };
	        speaker: Speaker2;
	        emotion?: Emoji6;
	      };
	    }
	  | {
	      requirements?: MomentRequirements2;
	      emotes: Emotes1;
	      style: "Emote";
	    }
	  | {
	      style: "Gain Item";
	      bonus?: ItemsAreBonus2;
	      items: ItemsToGain2;
	    }
	  | {
	      style: "Pin";
	      pin: WhatToPin1;
	    }
	  | {
	      style: "Artisan Follow";
	      artisan: Buddy8;
	    }
	  | {
	      style: "Drop Item";
	      bonus?: ItemsAreBonus3;
	      drops: Drops1;
	    }
	  | {
	      style: "Artisan Stop Following";
	      artisan: Artisan6;
	    }
	  | {
	      style: "Set Area Discovered";
	      area: Area3;
	    }
	  | {
	      quest_to_close: Quest2;
	      style: "Close a Quest";
	    }
	  | {
	      style: "Pause";
	      pause_duration: PauseSeconds2;
	    }
	  | {
	      style: "Camera Target Set";
	      camera_target: CameraTargetEntity1;
	    }
	  | {
	      style: "Camera Target Unset";
	    }
	  | {
	      style: "Camera Zoom";
	      zoom_amount: ZoomAmount1;
	    };
	export type EnglishText88 = string;
	export type Speaker2 = string;
	export type Emoji6 = string;
	export type Character4 = string;
	export type Emoji7 = string;
	/**
	 * If checked, these items will not be included in the progression map.
	 */
	export type ItemsAreBonus2 = boolean;
	export type Quantity77 = number;
	export type WhatToPin1 = string;
	export type Buddy8 = string;
	/**
	 * If checked, these items will not be included in the progression map.
	 */
	export type ItemsAreBonus3 = boolean;
	/**
	 * Who or what will drop these items. If not present, the items will fly out of the player.
	 */
	export type Dropper1 = string;
	export type Quantity78 = number;
	export type Item12 = string;
	export type Artisan6 = string;
	export type Area3 = string;
	/**
	 * This quest will be set as 'complete', regardless of whether it has been started or not. Its end moments will be skipped.
	 */
	export type Quest2 = string;
	/**
	 * How long to pause before moving to the next quest moment.
	 */
	export type PauseSeconds2 = number;
	export type CameraTargetEntity1 = string;
	/**
	 * Higher number means you can see more.
	 */
	export type ZoomAmount1 = number;
	/**
	 * If true, this quest will not be shown in the progression map.
	 */
	export type IgnoreInProgressionMap1 = boolean;
	/**
	 * If 0, this text will just display next to a point on the map. Otherwise, it will appear inside a radius.
	 */
	export type RadiusGridSpaces = number;
	export type EnglishText89 = string;
	export type QuestMarker2 = string;
	/**
	 * Whether the tile should be X-flipped randomly when placed.
	 */
	export type Flippable4 = boolean;
	/**
	 * The sound to play when the player walks on this tile.
	 */
	export type FootstepSound2 = string;
	/**
	 * The primary sprite of the tile.
	 */
	export type MainSprite2 = string;
	/**
	 * Cleared terrain tiles will allow floors to be placed on them by default. You can override this default behavior.
	 */
	export type DisallowFloors = boolean;
	/**
	 * If this group is chosen, this is the chance that it will actually spawn its spice.
	 */
	export type SpawnChance2 = number;
	export type Neighbor = string;
	/**
	 * If this tile gets cleared via Build Mode, it will be replaced with its 'Cleared Tile' version temporarily. If a tile has a 'Cleared Tile' then it cannot be built on until it is cleared.
	 */
	export type ClearedTile = string;
	/**
	 * If this tile ends up touching water, it will be replaced with this tile.
	 */
	export type ShoreTile = string;
	/**
	 * The sound to play when this tile is placed in the editor or in Build Mode.
	 */
	export type PlacementSound5 = string;
	/**
	 * The sprite to draw below the main sprite. Subimages must correspond with the Sprite.
	 */
	export type UnderSprite2 = string;
	export type Green34 = number;
	export type Red34 = number;
	export type Blue34 = number;
	export type EnglishText90 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText74 = string;
	export type Green35 = number;
	export type Red35 = number;
	export type Blue35 = number;
	/**
	 * The probability of a given tile having Dapples on it.
	 */
	export type SpawnChance3 = number;
	/**
	 * Determines how this tile will be depth-sorted against other terrain tiles.
	 */
	export type DepthPriority = number;
	/**
	 * When this tile gets cleared, you can customize the sprite that will blast off of it. If not specified, it will just make a smoke blast.
	 */
	export type ClearTileParticleSprite = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup18 = string;
	/**
	 * If this tile is against water, the Shoreline Water Sprite will be drawn in the water to convey how the tile interacts with the water.
	 */
	export type ShorelineUnderwaterSprite = string;
	/**
	 * This is a large sprite that will be drawn underwater if this tile is at a shoreline. It helps create a sense of the water getting deeper.
	 */
	export type ShelfUnderwaterSprite = string;
	/**
	 * The sprite to use when displaying the tile in the UI (e.g. Build Mode).
	 */
	export type Icon6 = string;
	export type WorldSprite14 = string;
	/**
	 * A number that is connected to the relative power level of this thing.
	 */
	export type Level4 = number;
	export type EnglishText91 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText75 = string;
	/**
	 * The sound this item makes when being placed in the inventory.
	 */
	export type InventorySound2 = string;
	export type Effect1 =
	  | {
	      unlocked_by?: UnlockedBy48;
	      healing_percentage: Healing1;
	      type?: "Heal";
	    }
	  | {
	      unlocked_by?: UnlockedBy50;
	      healing_percentage?: Healing2;
	      type?: "Buff";
	      buff: BuffToApply1;
	    };
	export type UnlockedBy49 = string;
	export type EnglishText92 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText76 = string;
	/**
	 * The healing amount will be automatically calculated based on the level of the item.
	 */
	export type Healing1 = number;
	export type UnlockedBy51 = string;
	export type EnglishText93 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText77 = string;
	/**
	 * If the buff can heal, heal with this amount. The healing amount will be automatically calculated based on the level of the item.
	 */
	export type Healing2 = number;
	export type BuffToApply1 = string;
	export type EnglishText94 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText78 = string;
	export type Type3 = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup19 = string;
	/**
	 * The sound this item makes when consumed.
	 */
	export type ConsumeSound = string;
	export type ResearchNode18 = string;
	export type ChangePerPoint25 = number;
	export type OutputQuantity8 = number;
	export type Style12 = "Additive" | "Multiplicative";
	export type ResearchNode19 = string;
	export type ChangePerPoint26 = number;
	export type UnlockedBy52 = string;
	/**
	 * Change this number to increase or decrease the number of materials required to craft this item.
	 */
	export type EffortModifier13 = number;
	/**
	 * What workstation the player must be near to craft this recipe.
	 */
	export type Station10 = string;
	export type UIIcon21 = string;
	/**
	 * If set, the boss will play this spine animation during the dialogue sequence.
	 */
	export type BossSpineAnimation = string;
	export type BossDialogueMoment =
	  | {
	      requirements?: MomentRequirements2;
	      style: "Dialogue";
	      speech: {
	        text: {
	          text: EnglishText95;
	        };
	        speaker: Speaker3;
	        emotion?: Emoji8;
	      };
	    }
	  | {
	      requirements?: MomentRequirements2;
	      emotes: Emotes2;
	      style: "Emote";
	    };
	export type EnglishText95 = string;
	export type Speaker3 = string;
	export type Emoji8 = string;
	export type Character5 = string;
	export type Emoji9 = string;
	export type WorldSprite15 = string;
	/**
	 * A number that is connected to the relative power level of this thing.
	 */
	export type Level5 = number;
	export type ResistanceProfile2 = string;
	export type Green36 = number;
	export type Red36 = number;
	export type Blue36 = number;
	/**
	 * If false, the object will always render itself at its normal color and won't be darkened or brightened by lighting.
	 */
	export type UseLighting9 = boolean;
	export type SpineSkin = string;
	export type UIIcon22 = string;
	/**
	 * Plays when receiving damage that hasn't been mitigated.
	 */
	export type Major1 = string;
	/**
	 * Plays when receiving damage that has been mitigated.
	 */
	export type Minor1 = string;
	export type Chance12 = number;
	export type Height6 = number;
	export type Width6 = number;
	/**
	 * The animation to play when the boss dies.
	 */
	export type Animation6 = string;
	/**
	 * The particle burst to play when the boss dies.
	 */
	export type ParticleBurst = string;
	/**
	 * The sound to play when the boss dies.
	 */
	export type DeathSound = string;
	/**
	 * Baseline boss HP is defined in the Game Balance motes. Change this value to further customize its max HP.
	 */
	export type HPModifier1 = number;
	/**
	 * If set, this game element will adjust its level to match the player's level at the time it is spawned, plus this number.
	 */
	export type RelativeLevel2 = number;
	export type EnglishText96 = string;
	export type MovementVisuals2 =
	  | {
	      hop_anticipation?: HopAnticipationSeconds2;
	      hop_followthrough?: PostHopFollowthroughSeconds2;
	      animation?: HopAnimationName2;
	      babbler?: Babbler17;
	      style: "Hop";
	      hop_speed: HopVerticalSpeed2;
	    }
	  | {
	      run_vertical_speed: RunVerticalBounceSpeed2;
	      style: "Run";
	      animation?: RunAnimationName2;
	      babbler?: Babbler18;
	    }
	  | {
	      style: "Crawl";
	      animation?: CrawlAnimationName2;
	      babbler?: Babbler19;
	    }
	  | {
	      animation?: Animation7;
	      babbler?: Babbler20;
	      z_baseline: BaselineAltitudePixels4;
	      z_sine?: AltitudeSineWave4;
	      style: "Fly";
	      flaps?: FlappingVerticalMovements4;
	    };
	/**
	 * How long to hold before rising off the ground, to make room for a pre-hop animation.
	 */
	export type HopAnticipationSeconds2 = number;
	/**
	 * How long to hold after landing on the ground from a hop, to make room for animations.
	 */
	export type PostHopFollowthroughSeconds2 = number;
	/**
	 * Defaults to 'hop' but can be overridden.
	 */
	export type HopAnimationName2 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler17 = string;
	/**
	 * As a percentage of base gravity. This is fairly sensitive.
	 */
	export type HopVerticalSpeed2 = number;
	/**
	 * How fast the character should pop up off the ground with each leg movement. As a percentage of base gravity. This is fairly sensitive.
	 */
	export type RunVerticalBounceSpeed2 = number;
	/**
	 * Defaults to 'run' but can be overridden.
	 */
	export type RunAnimationName2 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler18 = string;
	/**
	 * Defaults to 'crawl' but can be overridden.
	 */
	export type CrawlAnimationName2 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler19 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation7 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler20 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels4 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude5 = number;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed9 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance4 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds4 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds4 = number;
	/**
	 * How the actor animates while not actively moving.
	 */
	export type StationaryVisuals2 =
	  | {
	      style?: "Stand";
	      animation?: Animation8;
	      babbler?: Babbler21;
	    }
	  | {
	      animation?: Animation9;
	      babbler?: Babbler22;
	      z_baseline: BaselineAltitudePixels5;
	      z_sine?: AltitudeSineWave5;
	      style: "Fly";
	      flaps?: FlappingVerticalMovements5;
	    };
	/**
	 * Defaults to 'idle.
	 */
	export type Animation8 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler21 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation9 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler22 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels5 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude6 = number;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed10 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance5 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds5 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds5 = number;
	/**
	 * Relative to the global movement speed.
	 */
	export type MovementSpeed2 = number;
	export type Item13 = string;
	export type Quantity79 = number;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup20 = string;
	export type OutputIncrease = number;
	export type CostReduction = number;
	/**
	 * The default number of times the player must craft an item to reach the first skill level.
	 */
	export type NumCraftsForLevel1 = number;
	/**
	 * How many more items must be crafted each skill level, relative to the prior skill level. 100% means double.
	 */
	export type CostGrowthPerSkillLevel = number;
	/**
	 * Linear increase in crafting cost per level.
	 */
	export type CraftingCostGrowthPerLevel = number;
	export type SecondsAtLevel1 = number;
	export type SecondsChangePerLevel = number;
	export type MinSeconds1 = number;
	export type MaxSeconds1 = number;
	export type Weapon = number;
	export type Trinket1 = number;
	export type Helm = number;
	export type Suit = number;
	export type Boots = number;
	export type Gloves = number;
	/**
	 * How many more seconds each reseach node takes as you go deeper in the tree.
	 */
	export type ResearchTimeGrowthPerLevel = number;
	export type HomeTeleportCooldownSeconds = number;
	/**
	 * The amount of effort (materials) it takes per component to craft an item. More effort means more components. Item tags add categorical multipliers.
	 */
	export type CraftingEffortPerComponent = number;
	export type SecondsAtLevel11 = number;
	export type SecondsChangePerLevel1 = number;
	export type MinSeconds2 = number;
	export type MaxSeconds2 = number;
	/**
	 * Seconds to research a starting node for an Artisan.
	 */
	export type ResearchBaseSeconds = number;
	/**
	 * How many real-world minutes it takes for a cleared terrain tile to respawn after being destroyed.
	 */
	export type ClearedTileRespawnMinutes = number;
	/**
	 * How many grid spaces away the player can build.
	 */
	export type BuildModeRange = number;
	/**
	 * Compounding increase in Damage Per Second per level.
	 */
	export type DPSGrowthLevel = number;
	export type SecondsAtLevel12 = number;
	export type SecondsChangePerLevel2 = number;
	export type MinSeconds3 = number;
	export type MaxSeconds3 = number;
	/**
	 * All healing items have the same cooldown. Adjust it here.
	 */
	export type HealingCooldownSeconds = number;
	/**
	 * How many real-world minutes it takes for a typical world element to respawn after being destroyed.
	 */
	export type WorldElementRespawnMinutes = number;
	/**
	 * At level 1, the player won't have full HP until their armor is equipped. This number represents the proportion of their 'armored' healt the player will start with.
	 */
	export type PlayerBaseHP = number;
	/**
	 * How fast things move baseline in tiles per second.
	 */
	export type BaseGameplayMoveSpeed = number;
	export type EnglishText97 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText79 = string;
	/**
	 * Linear increase in crafting cost for items that have pre-set qualities, such as armor that has built-in stats.
	 */
	export type CraftingCostGrowthPerQuality = number;
	/**
	 * How many seconds it takes to kill a standard boss.
	 */
	export type BossTimeToKill = number;
	/**
	 * How many real-world minutes it takes to go through a full day-night cycle in-game.
	 */
	export type MinutesPerGameDay = number;
	/**
	 * The amount of effort (materials) it takes per component of a research node. More effort means more components.
	 */
	export type ResearchEffortPerComponent = number;
	export type Green37 = number;
	export type Red37 = number;
	export type Blue37 = number;
	export type EnglishText98 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText80 = string;
	export type Amount2 = number;
	export type Stat8 = string;
	/**
	 * How many pieces of the set the user must be wearing to gain this bonus.
	 */
	export type Pieces = number;
	export type ProfileNameInternal = string;
	export type Brightness1 = number;
	export type RedMultiplier = number;
	export type BlueMultiplier = number;
	export type LightLevels = number;
	export type ShadowMultiplier = number;
	export type HighlightMultiplier = number;
	export type Saturation = number;
	export type GreenMultiplier = number;
	export type DarkLevels = number;
	export type ShadowThreshold = number;
	export type HighlightThreshold = number;
	/**
	 * A collection of rules about how a certain kind of data is structured, accessed, and validated.
	 */
	export type Schema = Schema1 & Schema2;
	export type Type4 =
	  | "Collection"
	  | "List"
	  | "Text"
	  | "Number"
	  | "Choice"
	  | "Constant"
	  | "Schema Reference"
	  | "Mote Reference";
	export type Name50 = string;
	export type Description21 = string;
	export type Schema2 =
	  | {
	      _type?: "Number";
	      minimumValue?: MinimumValue;
	      maximumValue?: MaximumValue;
	      exclusiveMinimum?: MinimumIsExclusive;
	      type?: "number";
	      exclusiveMaximum?: MaximumIsExclusive;
	      multipleOf?: MultipleOf;
	    }
	  | {
	      _type?: "Collection";
	      type?: "object";
	      properties?: PropertyDefinitions;
	      minProperties?: MinimumProperties;
	      maxProperties?: MaximumProperties;
	    };
	/**
	 * The lowest allowed value for this number.
	 */
	export type MinimumValue = number;
	/**
	 * The highest allowed value for this number.
	 */
	export type MaximumValue = number;
	/**
	 * If true, the number cannot equal the minimum value -- it must be greater.
	 */
	export type MinimumIsExclusive = boolean;
	/**
	 * If true, the number cannot equal the maximum value -- it must be less.
	 */
	export type MaximumIsExclusive = boolean;
	/**
	 * If set, the number in the data must be a multiple of this number.
	 */
	export type MultipleOf = number;
	export type MinimumProperties = number;
	export type MaximumProperties = number;
	export type Green38 = number;
	export type Red38 = number;
	export type Blue38 = number;
	/**
	 * Plays when receiving damage that hasn't been mitigated.
	 */
	export type Major2 = string;
	/**
	 * Plays when receiving damage that has been mitigated.
	 */
	export type Minor2 = string;
	export type Chance13 = number;
	export type EnglishText99 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText81 = string;
	export type WorldSprite16 = string;
	export type Height7 = number;
	export type Width7 = number;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup21 = string;
	export type UIIcon23 = string;
	/**
	 * The stage of the pet's life that this mastery becomes available.
	 */
	export type PetStage5 = "Adult" | "Embiggened";
	export type SortOrder = number;
	export type EnglishText100 = string;
	export type EnglishText101 = string;
	export type Pet6 = string;
	export type Icon7 = string;
	/**
	 * The sound to play when this is placed in the editor or in Build Mode.
	 */
	export type PlacementSound6 = string;
	export type EnglishText102 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText82 = string;
	export type WorldSprite17 = string;
	/**
	 * Structural base items will vote on their preferred roof. The roof type with the most votes will be displayed.
	 */
	export type PreferredRoof2 = string;
	export type EnglishText103 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText83 = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup22 = string;
	/**
	 * How many tiles away this pillar can support walls or doors.
	 */
	export type PillarSupportDistance = number;
	export type ResearchNode20 = string;
	export type ChangePerPoint27 = number;
	export type OutputQuantity9 = number;
	export type Style13 = "Additive" | "Multiplicative";
	export type ResearchNode21 = string;
	export type ChangePerPoint28 = number;
	export type UnlockedBy53 = string;
	/**
	 * Change this number to increase or decrease the number of materials required to craft this item.
	 */
	export type EffortModifier14 = number;
	/**
	 * What workstation the player must be near to craft this recipe.
	 */
	export type Station11 = string;
	export type UIIcon24 = string;
	export type EnglishText104 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText84 = string;
	export type Icon8 = string;
	/**
	 * Make this cutscene quieter or louder.
	 */
	export type AudioGainModifier = number;
	export type Green39 = number;
	export type Red39 = number;
	export type Blue39 = number;
	export type Green40 = number;
	export type Red40 = number;
	export type Blue40 = number;
	export type ProgressBarHeightPixels = number;
	/**
	 * For developer use.
	 */
	export type VideoName = string;
	/**
	 * The path to the video in the Game Maker project's included files.
	 */
	export type VideoFilePath = string;
	export type TimestampSeconds = number;
	export type ProgressBarAlpha = number;
	export type ProgressBarBackgroundAlpha = number;
	export type Green41 = number;
	export type Red41 = number;
	export type Blue41 = number;
	export type ResearchCollected = string;
	export type ComfortGained = string;
	export type ComfortLost = string;
	export type Interact = string;
	export type FollowStart = string;
	export type FollowEnd = string;
	/**
	 * For example, when you ask them to follow you, but they can't because they are researching.
	 */
	export type ActionBlocked = string;
	export type ResearchStart = string;
	export type WorldSprite18 = string;
	/**
	 * The sprite to use behind the buddy's banner in the Home UI.
	 */
	export type BannerBackground = string;
	export type EnglishText105 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText85 = string;
	/**
	 * Once this quest is complete, the Buddy's insights will be visible.
	 */
	export type InsightUnlocker = string;
	export type Green42 = number;
	export type Red42 = number;
	export type Blue42 = number;
	/**
	 * A handful of words for a quick overview of the character
	 */
	export type Brief1 = string;
	export type Pronouns1 = string;
	export type Personality1 = string;
	export type EnglishText106 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText86 = string;
	/**
	 * The GMS object to use for the buddy in the world.
	 */
	export type WorldObject = string;
	/**
	 * The sprite to use for the buddy's banner in the Home UI.
	 */
	export type BannerPortrait = string;
	/**
	 * Whether the buddy's sprite should flip to face the player during dialogue.
	 */
	export type LooksAtPlayer = boolean;
	/**
	 * If set, the artisan will not follow the player unless this thing is finished.
	 */
	export type FollowingUnlock1 = string;
	export type Green43 = number;
	export type Red43 = number;
	export type Blue43 = number;
	export type Green44 = number;
	export type Red44 = number;
	export type Blue44 = number;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup23 = string;
	export type UIIcon25 = string;
	export type Boss8 = string;
	export type DescriptionInternal1 = string;
	/**
	 * If set, this music will play during this phase. If unset, there will be no music during this phase.
	 */
	export type Music3 = string;
	export type Targeting =
	  | {
	      direction: Direction2;
	      style: "Fixed Direction";
	    }
	  | {
	      targets: PotentialTargets;
	      style: "Toward Entity";
	      choose_random?: ChooseRandom;
	      range?: Range;
	    };
	/**
	 * The direction (in degrees) that the boss will cast this ability.
	 */
	export type Direction2 = number;
	/**
	 * If set, the boss will choose a random quest marker from the list, instead of the nearest one.
	 */
	export type ChooseRandom = boolean;
	export type Max69 = number;
	export type Min69 = number;
	export type Condition8 =
	  | {
	      abilities?: Abilities7;
	      casting_state: Casting5;
	      condition_type?: "Ability";
	    }
	  | {
	      datafield_evaluation: Evaluation10;
	      condition_type?: "Datafield";
	    }
	  | {
	      daytime: DuringDaytime6;
	      condition_type?: "Daylight";
	    }
	  | {
	      condition_type?: "Combat";
	      combat: InCombat5;
	    }
	  | {
	      insight_modifier?: InsightModifier5;
	      minutes_passed: MinutesSinceTimestamp5;
	      evaluation: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      condition_type?: "Timestamp";
	      timestamp: Timestamp8;
	    }
	  | {
	      moon: ActiveMoon6;
	      condition_type?: "Moon";
	    }
	  | {
	      quest: QuestToCheck8;
	      quest_status: QuestStatus8;
	      condition_type?: "Quest";
	    }
	  | {
	      artisan: Buddy10;
	      condition_type?: "Artisan Following";
	      following: Following14;
	    }
	  | {
	      unlock_text?: InsightTooltip6;
	      prerequisite: Insight17;
	      condition_type?: "Insight";
	    }
	  | {
	      proximity_quantity: NumberOfTargets10;
	      proximity_range: DistanceRequiredGridSpaces5;
	      proximity_targets: Targets6;
	      condition_type?: "Proximity";
	    }
	  | {
	      hp_evaluation: HealthEvaluation5;
	      condition_type?: "Health";
	    }
	  | {
	      require_all: RequireAll49;
	      items: Items55;
	      condition_type?: "Item Equipped";
	    }
	  | {
	      items: Items56;
	      condition_type?: "Item Wielding";
	    }
	  | {
	      num_pieces: NumberOfPiecesEquipped5;
	      condition_type?: "Wearing Equipment Set";
	      equipment_set: EquipmentSet8;
	    }
	  | {
	      buff_require_all: RequireAll50;
	      buff_check_self: CheckSelf5;
	      buff_own_only: OwnBuffsOnly5;
	      buff_num_targets?: NumberOfTargets11;
	      condition_type?: "Buffs";
	      buff_target_filter?: BuffTargetFilter5;
	      buff_proximity?: BuffTargetRange5;
	      buff_stack_evaluation?: Stacks48;
	      buffs: Buffs85;
	      buff_target: TargetEntity18;
	    }
	  | {
	      boss: Boss9;
	      condition_type?: "Boss Defeated";
	    }
	  | {
	      summoned_filter?: SummonedEntitiesFilter5;
	      condition_type?: "Summoned Entities";
	      comparison: NumberSummoned5;
	    };
	/**
	 * If set, the ability's casting state must match this checkbox.
	 */
	export type Casting5 = boolean;
	export type DuringDaytime6 = boolean;
	export type InCombat5 = boolean;
	/**
	 * How much the 'Minutes Since Timestamp' should be adjusted (up or down) for each point invested in the Insight.
	 */
	export type ChangePerPoint29 = number;
	export type Insight16 = string;
	/**
	 * If greater than 0, then this many minutes will have passed since the timestamp was set. If less than 0, the timestamp will be this many minutes from now.
	 */
	export type MinutesSinceTimestamp5 = number;
	export type Timestamp8 = string;
	export type ActiveMoon6 = string;
	/**
	 * The quest whose status we are querying.
	 */
	export type QuestToCheck8 = string;
	export type QuestStatus8 = "Complete" | "Started" | "Not Started";
	export type Buddy10 = string;
	export type Following14 = boolean;
	export type EnglishText107 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText87 = string;
	export type Insight17 = string;
	export type Quantity80 = number;
	export type Evaluation11 = "==" | "!=" | "<" | "<=" | ">" | ">=";
	export type Max70 = number;
	export type Min70 = number;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants36 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags36 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude37 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll48 = boolean;
	export type Quantity81 = number;
	/**
	 * If checked, this condition will only be met if ALL of the items listed are equipped at the same time.
	 */
	export type RequireAll49 = boolean;
	/**
	 * If the player is wearing at least this many pieces, the condition will be met.
	 */
	export type NumberOfPiecesEquipped5 = number;
	export type EquipmentSet8 = string;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on yourself at the same time.
	 */
	export type RequireAll50 = boolean;
	/**
	 * Obsolete--delete.
	 */
	export type CheckSelf5 = boolean;
	/**
	 * If checked, only buffs created by you will be checked. Otherwise, all buffs will be checked.
	 */
	export type OwnBuffsOnly5 = boolean;
	export type Quantity82 = number;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants37 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags37 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude38 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll51 = boolean;
	export type Quantity83 = number;
	export type Max71 = number;
	export type Min71 = number;
	export type Quantity84 = number;
	/**
	 * Which entity's buffs to query.
	 */
	export type TargetEntity18 = "Self" | "Other" | "All Entities";
	export type Boss9 = string;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants38 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags38 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude39 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll52 = boolean;
	export type Quantity85 = number;
	export type Quantity86 = number;
	/**
	 * If true, then every condition must be met. If false, then only one of the conditions must be met.
	 */
	export type RequireAllConditions6 = boolean;
	export type MovementVisuals3 =
	  | {
	      hop_anticipation?: HopAnticipationSeconds3;
	      hop_followthrough?: PostHopFollowthroughSeconds3;
	      animation?: HopAnimationName3;
	      babbler?: Babbler23;
	      style: "Hop";
	      hop_speed: HopVerticalSpeed3;
	    }
	  | {
	      run_vertical_speed: RunVerticalBounceSpeed3;
	      style: "Run";
	      animation?: RunAnimationName3;
	      babbler?: Babbler24;
	    }
	  | {
	      style: "Crawl";
	      animation?: CrawlAnimationName3;
	      babbler?: Babbler25;
	    }
	  | {
	      animation?: Animation10;
	      babbler?: Babbler26;
	      z_baseline: BaselineAltitudePixels6;
	      z_sine?: AltitudeSineWave6;
	      style: "Fly";
	      flaps?: FlappingVerticalMovements6;
	    };
	/**
	 * How long to hold before rising off the ground, to make room for a pre-hop animation.
	 */
	export type HopAnticipationSeconds3 = number;
	/**
	 * How long to hold after landing on the ground from a hop, to make room for animations.
	 */
	export type PostHopFollowthroughSeconds3 = number;
	/**
	 * Defaults to 'hop' but can be overridden.
	 */
	export type HopAnimationName3 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler23 = string;
	/**
	 * As a percentage of base gravity. This is fairly sensitive.
	 */
	export type HopVerticalSpeed3 = number;
	/**
	 * How fast the character should pop up off the ground with each leg movement. As a percentage of base gravity. This is fairly sensitive.
	 */
	export type RunVerticalBounceSpeed3 = number;
	/**
	 * Defaults to 'run' but can be overridden.
	 */
	export type RunAnimationName3 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler24 = string;
	/**
	 * Defaults to 'crawl' but can be overridden.
	 */
	export type CrawlAnimationName3 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler25 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation10 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler26 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels6 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude7 = number;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed11 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance6 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds6 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds6 = number;
	/**
	 * How the actor animates while not actively moving.
	 */
	export type StationaryVisuals3 =
	  | {
	      style?: "Stand";
	      animation?: Animation11;
	      babbler?: Babbler27;
	    }
	  | {
	      animation?: Animation12;
	      babbler?: Babbler28;
	      z_baseline: BaselineAltitudePixels7;
	      z_sine?: AltitudeSineWave7;
	      style: "Fly";
	      flaps?: FlappingVerticalMovements7;
	    };
	/**
	 * Defaults to 'idle.
	 */
	export type Animation11 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler27 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation12 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler28 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels7 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude8 = number;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed12 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance7 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds7 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds7 = number;
	/**
	 * Relative to the global movement speed.
	 */
	export type MovementSpeed3 = number;
	export type Ability8 = string;
	/**
	 * Affects how frequently this ability is chosen.
	 */
	export type Weight = number;
	export type MaxSeconds4 = number;
	export type MinSeconds4 = number;
	/**
	 * If set, the boss will choose a random quest marker from the list, instead of the nearest one.
	 */
	export type ChooseRandom1 = boolean;
	export type Max72 = number;
	export type Min72 = number;
	/**
	 * The boss can randomly ignore the post-ability pause, and instead go right into the next ability.
	 */
	export type PostAbilityPauseIgnoreChance = number;
	/**
	 * The boss can add some randomness to the direction of this ability's cast (in degrees).
	 */
	export type DirectionRandomness1 = number;
	/**
	 * If set, the boss will always cast this ability instantly after finishing the prior ability, ignoring normal behavioral cooldowns and range requirements.
	 */
	export type Instant = boolean;
	/**
	 * The weight choosing this followup ability relative to the other followup abilities in this list.
	 */
	export type Weight1 = number;
	export type Ability9 = string;
	/**
	 * Used for sorting the phases in the GC sidebar.
	 */
	export type Order4 = number;
	export type NameInternal7 = string;
	/**
	 * Higher number means you can see more.
	 */
	export type ZoomLevel = number;
	export type MovementVisuals4 =
	  | {
	      hop_anticipation?: HopAnticipationSeconds4;
	      hop_followthrough?: PostHopFollowthroughSeconds4;
	      animation?: HopAnimationName4;
	      babbler?: Babbler29;
	      style: "Hop";
	      hop_speed: HopVerticalSpeed4;
	    }
	  | {
	      run_vertical_speed: RunVerticalBounceSpeed4;
	      style: "Run";
	      animation?: RunAnimationName4;
	      babbler?: Babbler30;
	    }
	  | {
	      style: "Crawl";
	      animation?: CrawlAnimationName4;
	      babbler?: Babbler31;
	    }
	  | {
	      animation?: Animation13;
	      babbler?: Babbler32;
	      z_baseline: BaselineAltitudePixels8;
	      z_sine?: AltitudeSineWave8;
	      style: "Fly";
	      flaps?: FlappingVerticalMovements8;
	    };
	/**
	 * How long to hold before rising off the ground, to make room for a pre-hop animation.
	 */
	export type HopAnticipationSeconds4 = number;
	/**
	 * How long to hold after landing on the ground from a hop, to make room for animations.
	 */
	export type PostHopFollowthroughSeconds4 = number;
	/**
	 * Defaults to 'hop' but can be overridden.
	 */
	export type HopAnimationName4 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler29 = string;
	/**
	 * As a percentage of base gravity. This is fairly sensitive.
	 */
	export type HopVerticalSpeed4 = number;
	/**
	 * How fast the character should pop up off the ground with each leg movement. As a percentage of base gravity. This is fairly sensitive.
	 */
	export type RunVerticalBounceSpeed4 = number;
	/**
	 * Defaults to 'run' but can be overridden.
	 */
	export type RunAnimationName4 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler30 = string;
	/**
	 * Defaults to 'crawl' but can be overridden.
	 */
	export type CrawlAnimationName4 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler31 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation13 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler32 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels8 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude9 = number;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed13 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance8 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds8 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds8 = number;
	/**
	 * How the actor animates while not actively moving.
	 */
	export type StationaryVisuals4 =
	  | {
	      style?: "Stand";
	      animation?: Animation14;
	      babbler?: Babbler33;
	    }
	  | {
	      animation?: Animation15;
	      babbler?: Babbler34;
	      z_baseline: BaselineAltitudePixels9;
	      z_sine?: AltitudeSineWave9;
	      style: "Fly";
	      flaps?: FlappingVerticalMovements9;
	    };
	/**
	 * Defaults to 'idle.
	 */
	export type Animation14 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler33 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation15 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler34 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels9 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude10 = number;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed14 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance9 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds9 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds9 = number;
	/**
	 * Relative to the global movement speed.
	 */
	export type MovementSpeed4 = number;
	/**
	 * If false, the object will always render itself at its normal color and won't be darkened or brightened by lighting.
	 */
	export type UseLighting10 = boolean;
	export type EnglishText108 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText88 = string;
	export type WorldSprite19 = string;
	export type Height8 = number;
	export type Width8 = number;
	export type EnglishText109 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText89 = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup24 = string;
	export type UIIcon26 = string;
	/**
	 * Whether the tile should be X-flipped randomly when placed.
	 */
	export type Flippable5 = boolean;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler35 = string;
	export type WorldSprite20 = string;
	export type EnglishText110 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText90 = string;
	/**
	 * If false, then crafted items in the Progression Map will not display this station as a prerequisite. Useful to resolve 'infinite looping' issues, for example with the Basic Workstation, which is required to construct itself.
	 */
	export type CountAsProgressionRequirement = boolean;
	/**
	 * The sound to play when this is placed in the editor or in Build Mode.
	 */
	export type PlacementSound7 = string;
	/**
	 * If false, the object will always render itself at its normal color and won't be darkened or brightened by lighting.
	 */
	export type UseLighting11 = boolean;
	export type EnglishText111 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText91 = string;
	/**
	 * If using a Spine sprite, the object will try to play an animation with this name when it is spawned.
	 */
	export type SpineIdle2 = string;
	export type Object5 = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup25 = string;
	export type AssemblyUIStartSound = string;
	export type ResearchNode22 = string;
	export type ChangePerPoint30 = number;
	export type OutputQuantity10 = number;
	export type Style14 = "Additive" | "Multiplicative";
	export type ResearchNode23 = string;
	export type ChangePerPoint31 = number;
	export type UnlockedBy54 = string;
	/**
	 * Change this number to increase or decrease the number of materials required to craft this item.
	 */
	export type EffortModifier15 = number;
	/**
	 * What workstation the player must be near to craft this recipe.
	 */
	export type Station12 = string;
	/**
	 * Whether this item must have a floor under it to be validly placed in the world.
	 */
	export type RequiresFloor1 = boolean;
	export type UIIcon27 = string;
	/**
	 * Whether the tile should be X-flipped randomly when placed.
	 */
	export type Flippable6 = boolean;
	/**
	 * The sound to play when the player walks on this tile.
	 */
	export type FootstepSound3 = string;
	/**
	 * The primary sprite of the tile.
	 */
	export type MainSprite3 = string;
	/**
	 * The sound to play when this tile is placed in the editor or in Build Mode.
	 */
	export type PlacementSound8 = string;
	/**
	 * The sprite to draw below the main sprite. Subimages must correspond with the Sprite.
	 */
	export type UnderSprite3 = string;
	export type Green45 = number;
	export type Red45 = number;
	export type Blue45 = number;
	export type EnglishText112 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText92 = string;
	export type Green46 = number;
	export type Red46 = number;
	export type Blue46 = number;
	/**
	 * The probability of a given tile having Dapples on it.
	 */
	export type SpawnChance4 = number;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup26 = string;
	/**
	 * If this tile is against water, the Shoreline Water Sprite will be drawn in the water to convey how the tile interacts with the water.
	 */
	export type ShorelineUnderwaterSprite1 = string;
	/**
	 * This is a large sprite that will be drawn underwater if this tile is at a shoreline. It helps create a sense of the water getting deeper.
	 */
	export type ShelfUnderwaterSprite1 = string;
	/**
	 * The sprite to use when displaying the tile in the UI (e.g. Build Mode).
	 */
	export type Icon9 = string;
	/**
	 * If checked, then only one buff of this type can be active at a time.
	 */
	export type Exclusive1 = boolean;
	export type EnglishText113 = string;
	/**
	 * Whether items that have this tag will respawn after destroyed in the world.
	 */
	export type Respawnable1 = boolean;
	/**
	 * Recipes with this tag will go into this category.
	 */
	export type RecipeCategory1 = string;
	/**
	 * Any items with this tag will also be given the parent tag. E.g. 'Sword' tag would have a parent tag of 'Weapon,' because all swords are weapons.
	 */
	export type ParentTag = string;
	/**
	 * The sound this item makes when being placed in the inventory.
	 */
	export type InventorySound3 = string;
	/**
	 * Items with this tag will multiply the baseline crafting effort by this amount when calculating their component requirements.
	 */
	export type CraftingEffortMultiplier = number;
	/**
	 * How many times this item should be crafted to gain the first crafting efficiency level.
	 */
	export type NumCraftsForFirstSkillLevel = number;
	export type EnglishText114 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText93 = string;
	/**
	 * Whether items that have this tag are able to take damage.
	 */
	export type Invulnerable = boolean;
	/**
	 * Items with this tag will appear in this editor category.
	 */
	export type EditorCategory1 = string;
	/**
	 * If unchecked, this tag will not be present on items in the game world. Useful for tags that only exist to aggregate other tags for editor purposes.
	 */
	export type SettableOnItems = boolean;
	/**
	 * If an item has multiple tags, the highest priority tag will be displayed on interfaces. For example, you may want something with 'Plant' and 'Component' to just always display 'Component.' In this case, the 'Component' tag should have a higher priority.
	 */
	export type TagPriority = number;
	export type UIIcon28 = string;
	/**
	 * If true, items with this tag will be visible in the Build Mode selector and placeable in Build Mode.
	 */
	export type BuildModeAccessible = boolean;
	/**
	 * Whether this is a Spine sprite.
	 */
	export type Spine = boolean;
	/**
	 * For your internal reference.
	 */
	export type TrackName = string;
	/**
	 * If this Spine has multiple tracks, which track must these animations be playing on?
	 */
	export type AnimationTrack = number;
	/**
	 * The name of the attachment slot (from Spine).
	 */
	export type Slot = string;
	export type Active = string;
	export type Inactive = string;
	export type Active1 = number;
	export type Inactive1 = number;
	/**
	 * The name of the attachment slot (from Spine).
	 */
	export type SlotName = string;
	/**
	 * The name of the sprite in the GMS project.
	 */
	export type Name59 = string;
	/**
	 * Every time the seed pack grows up, it will have this chance to not consume a Regrow.
	 */
	export type FreeRegrowChance = number;
	export type FreeRegrowInsight = string;
	export type GrowsInto = string;
	export type MinutesToGrow = number;
	export type WorldSprite21 = string;
	export type EnglishText115 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText94 = string;
	export type GardenBed1 = string;
	/**
	 * How many times this seedpack will regrow into the target plant after it is first planted.
	 */
	export type NumberOfRegrows = number;
	/**
	 * This chance only applies if the Insight is fully researched (it doesn't apply point by point if the Insight has multiple points.
	 */
	export type AddedChance = number;
	export type Insight18 = string;
	/**
	 * If false, the object will always render itself at its normal color and won't be darkened or brightened by lighting.
	 */
	export type UseLighting12 = boolean;
	export type EnglishText116 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText95 = string;
	/**
	 * @minItems 1
	 */
	export type RegrowBoostingInsights = [
	  {
	    regrows_per_point?: RegrowsPerPoint;
	    insight?: Insight19;
	  },
	  ...{
	    regrows_per_point?: RegrowsPerPoint;
	    insight?: Insight19;
	  }[]
	];
	export type RegrowsPerPoint = number;
	export type Insight19 = string;
	/**
	 * How much the regrowth time should be adjusted for each point invested in the Insight.
	 */
	export type ChangePerPoint32 = number;
	export type Insight20 = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup27 = string;
	/**
	 * The baseline chance for a fertilized seedpack of this type to turn into a 'shiny' version of the plant. This opens access to bonus loot groups.
	 */
	export type ShinyChance = number;
	export type ResearchNode24 = string;
	export type ChangePerPoint33 = number;
	export type OutputQuantity11 = number;
	export type Style15 = "Additive" | "Multiplicative";
	export type ResearchNode25 = string;
	export type ChangePerPoint34 = number;
	export type UnlockedBy55 = string;
	/**
	 * Change this number to increase or decrease the number of materials required to craft this item.
	 */
	export type EffortModifier16 = number;
	/**
	 * What workstation the player must be near to craft this recipe.
	 */
	export type Station13 = string;
	export type UIIcon29 = string;
	/**
	 * Whether the sound should play as a loop.
	 */
	export type Looping4 = boolean;
	/**
	 * To prevent auditory blowout/spam, sound effects can have a cooldown between plays.
	 */
	export type CooldownSeconds1 = number;
	/**
	 * The baseline volume of the sound.
	 */
	export type Gain = number;
	/**
	 * The sound's pitch will randomly fluctuate each time it is played by +/- this percentage.
	 */
	export type Variability = number;
	export type Max73 = number;
	export type Min73 = number;
	/**
	 * A random roll to cause the sound effect to sometimes not play when the code calls for it.
	 */
	export type PlayChance = number;
	export type NameFromGMSProject = string;
	export type EarpartyGroup1 = string;
	/**
	 * If set, this sound will automatically increment or decrement pitch each time it is played within a certain time frame. If not played for a while, its pitch will reset. Good for making sparkly collection sounds.
	 */
	export type AutoPitch =
	  | {
	      pitchup_max: AutoPitchMaximum;
	      pitchup_per_event?: number;
	    }
	  | {
	      pitchup_min: AutoPitchMinimum;
	      pitchup_per_event?: number;
	    }
	  | {
	      pitchup_per_event?: 0;
	    };
	/**
	 * During auto-pitching, Earparty won't allow the pitch to go above this number.
	 */
	export type AutoPitchMaximum = number;
	/**
	 * During auto-pitching, Earparty won't allow the pitch to go below this number.
	 */
	export type AutoPitchMinimum = number;
	/**
	 * If the game has run out of sound channels, lower priority sounds will be stopped to play higher priority sounds.
	 */
	export type Priority = number;
	/**
	 * Each time the Earparty sound is played, EarParty will choose a new variation of the sound this many times before repeating the same variation.
	 */
	export type NonRepeatingInterval = number;
	/**
	 * Whether the tile should be X-flipped randomly when placed.
	 */
	export type Flippable7 = boolean;
	/**
	 * The sound to play when the player walks on this tile.
	 */
	export type FootstepSound4 = string;
	/**
	 * The primary sprite of the tile.
	 */
	export type MainSprite4 = string;
	export type EnglishText117 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText96 = string;
	/**
	 * The sound to play when this tile is placed in the editor or in Build Mode.
	 */
	export type PlacementSound9 = string;
	/**
	 * The sprite to draw below the main sprite. Subimages must correspond with the Sprite.
	 */
	export type UnderSprite4 = string;
	export type Green47 = number;
	export type Red47 = number;
	export type Blue47 = number;
	export type EnglishText118 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText97 = string;
	export type Green48 = number;
	export type Red48 = number;
	export type Blue48 = number;
	/**
	 * The probability of a given tile having Dapples on it.
	 */
	export type SpawnChance5 = number;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup28 = string;
	/**
	 * If this tile is against water, the Shoreline Water Sprite will be drawn in the water to convey how the tile interacts with the water.
	 */
	export type ShorelineUnderwaterSprite2 = string;
	/**
	 * This is a large sprite that will be drawn underwater if this tile is at a shoreline. It helps create a sense of the water getting deeper.
	 */
	export type ShelfUnderwaterSprite2 = string;
	export type ResearchNode26 = string;
	export type ChangePerPoint35 = number;
	export type OutputQuantity12 = number;
	export type Style16 = "Additive" | "Multiplicative";
	export type ResearchNode27 = string;
	export type ChangePerPoint36 = number;
	export type UnlockedBy56 = string;
	/**
	 * Change this number to increase or decrease the number of materials required to craft this item.
	 */
	export type EffortModifier17 = number;
	/**
	 * What workstation the player must be near to craft this recipe.
	 */
	export type Station14 = string;
	/**
	 * The sprite to use when displaying the tile in the UI (e.g. Build Mode).
	 */
	export type Icon10 = string;
	/**
	 * How many days it takes for this moon to come around again. Moons can overlap. One moon must have a 1-day cycle -- that will be the default moon, and will determine the default night colors.
	 */
	export type DaysPerCycle = number;
	export type Green49 = number;
	export type Red49 = number;
	export type Blue49 = number;
	export type Green50 = number;
	export type Red50 = number;
	export type Blue50 = number;
	export type EnglishText119 = string;
	export type WorldSprite22 = string;
	/**
	 * A number that is connected to the relative power level of this thing.
	 */
	export type Level6 = number;
	export type EnglishText120 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText98 = string;
	/**
	 * The sound this item makes when brought out into the player's hand.
	 */
	export type WieldSound = string;
	export type Type5 = string;
	/**
	 * By default, wieldable items require the player to manually pick them up off the ground. You can uncheck this box to make the items auto-pickup instead.
	 */
	export type ManualPickup1 = boolean;
	/**
	 * The sound this thing makes when used (fired, swung, etc).
	 */
	export type UseSound = string;
	export type ResearchNode28 = string;
	export type ChangePerPoint37 = number;
	export type OutputQuantity13 = number;
	export type Style17 = "Additive" | "Multiplicative";
	export type ResearchNode29 = string;
	export type ChangePerPoint38 = number;
	export type UnlockedBy57 = string;
	/**
	 * Change this number to increase or decrease the number of materials required to craft this item.
	 */
	export type EffortModifier18 = number;
	/**
	 * What workstation the player must be near to craft this recipe.
	 */
	export type Station15 = string;
	export type UIIcon30 = string;
	export type IgnoreInLevelViewer3 = boolean;
	/**
	 * The sound this item makes when being placed in the inventory.
	 */
	export type InventorySound4 = string;
	export type EquipmentSet9 = string;
	export type EnglishText121 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText99 = string;
	export type Ability10 = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup29 = string;
	/**
	 * By default, wieldables cannot be stacked in the inventory. To conserve space, you can make some wieldables stackable if they are consumable.
	 */
	export type Stackable = boolean;
	export type ScaleModifier7 = number;
	/**
	 * A unique sound to be played when this item is collected into your body.
	 */
	export type CollectionSound3 = string;
	/**
	 * By default, we will attempt to use the mote ID.
	 */
	export type SpineAttachmentName = string;
	/**
	 * How close (in grid spaces) you need to be to another creature of the same family who is in combat before you also get involved to help them.
	 */
	export type FriendlyHelpRange = number;
	export type WorldSprite23 = string;
	/**
	 * A number that is connected to the relative power level of this thing.
	 */
	export type Level7 = number;
	export type Max74 = number;
	export type Min74 = number;
	/**
	 * Affects the probability of choosing the Idle state over other states.
	 */
	export type Weight2 = number;
	/**
	 * If unchecked, the creature will try to go to a different state when this one ends.
	 */
	export type Repeatable = boolean;
	/**
	 * If unchecked, the creature will go back to idle when done roaming. Otherwise, it will sometimes roam again.
	 */
	export type Repeatable1 = boolean;
	export type MovementVisuals5 =
	  | {
	      hop_anticipation?: HopAnticipationSeconds5;
	      hop_followthrough?: PostHopFollowthroughSeconds5;
	      animation?: HopAnimationName5;
	      babbler?: Babbler36;
	      style: "Hop";
	      hop_speed: HopVerticalSpeed5;
	    }
	  | {
	      run_vertical_speed: RunVerticalBounceSpeed5;
	      style: "Run";
	      animation?: RunAnimationName5;
	      babbler?: Babbler37;
	    }
	  | {
	      style: "Crawl";
	      animation?: CrawlAnimationName5;
	      babbler?: Babbler38;
	    }
	  | {
	      animation?: Animation16;
	      babbler?: Babbler39;
	      z_baseline: BaselineAltitudePixels10;
	      z_sine?: AltitudeSineWave10;
	      style: "Fly";
	      flaps?: FlappingVerticalMovements10;
	    };
	/**
	 * How long to hold before rising off the ground, to make room for a pre-hop animation.
	 */
	export type HopAnticipationSeconds5 = number;
	/**
	 * How long to hold after landing on the ground from a hop, to make room for animations.
	 */
	export type PostHopFollowthroughSeconds5 = number;
	/**
	 * Defaults to 'hop' but can be overridden.
	 */
	export type HopAnimationName5 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler36 = string;
	/**
	 * As a percentage of base gravity. This is fairly sensitive.
	 */
	export type HopVerticalSpeed5 = number;
	/**
	 * How fast the character should pop up off the ground with each leg movement. As a percentage of base gravity. This is fairly sensitive.
	 */
	export type RunVerticalBounceSpeed5 = number;
	/**
	 * Defaults to 'run' but can be overridden.
	 */
	export type RunAnimationName5 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler37 = string;
	/**
	 * Defaults to 'crawl' but can be overridden.
	 */
	export type CrawlAnimationName5 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler38 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation16 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler39 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels10 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude11 = number;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed15 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance10 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds10 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds10 = number;
	/**
	 * How the actor animates while not actively moving.
	 */
	export type StationaryVisuals5 =
	  | {
	      style?: "Stand";
	      animation?: Animation17;
	      babbler?: Babbler40;
	    }
	  | {
	      animation?: Animation18;
	      babbler?: Babbler41;
	      z_baseline: BaselineAltitudePixels11;
	      z_sine?: AltitudeSineWave11;
	      style: "Fly";
	      flaps?: FlappingVerticalMovements11;
	    };
	/**
	 * Defaults to 'idle.
	 */
	export type Animation17 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler40 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation18 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler41 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels11 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude12 = number;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed16 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance11 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds11 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds11 = number;
	/**
	 * Relative to the global movement speed.
	 */
	export type MovementSpeed5 = number;
	export type Max75 = number;
	export type Min75 = number;
	/**
	 * Affects the probability of choosing the Roaming state.
	 */
	export type Weight3 = number;
	/**
	 * The chance the creature looks for an attractant instead of just roaming around.
	 */
	export type AttractionProbability = number;
	/**
	 * How far away the creature will notice things to be attracted to.
	 */
	export type DetectionRange = number;
	export type MovementVisuals6 =
	  | {
	      hop_anticipation?: HopAnticipationSeconds6;
	      hop_followthrough?: PostHopFollowthroughSeconds6;
	      animation?: HopAnimationName6;
	      babbler?: Babbler42;
	      style: "Hop";
	      hop_speed: HopVerticalSpeed6;
	    }
	  | {
	      run_vertical_speed: RunVerticalBounceSpeed6;
	      style: "Run";
	      animation?: RunAnimationName6;
	      babbler?: Babbler43;
	    }
	  | {
	      style: "Crawl";
	      animation?: CrawlAnimationName6;
	      babbler?: Babbler44;
	    }
	  | {
	      animation?: Animation19;
	      babbler?: Babbler45;
	      z_baseline: BaselineAltitudePixels12;
	      z_sine?: AltitudeSineWave12;
	      style: "Fly";
	      flaps?: FlappingVerticalMovements12;
	    };
	/**
	 * How long to hold before rising off the ground, to make room for a pre-hop animation.
	 */
	export type HopAnticipationSeconds6 = number;
	/**
	 * How long to hold after landing on the ground from a hop, to make room for animations.
	 */
	export type PostHopFollowthroughSeconds6 = number;
	/**
	 * Defaults to 'hop' but can be overridden.
	 */
	export type HopAnimationName6 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler42 = string;
	/**
	 * As a percentage of base gravity. This is fairly sensitive.
	 */
	export type HopVerticalSpeed6 = number;
	/**
	 * How fast the character should pop up off the ground with each leg movement. As a percentage of base gravity. This is fairly sensitive.
	 */
	export type RunVerticalBounceSpeed6 = number;
	/**
	 * Defaults to 'run' but can be overridden.
	 */
	export type RunAnimationName6 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler43 = string;
	/**
	 * Defaults to 'crawl' but can be overridden.
	 */
	export type CrawlAnimationName6 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler44 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation19 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler45 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels12 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude13 = number;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed17 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance12 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds12 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds12 = number;
	/**
	 * How the actor animates while not actively moving.
	 */
	export type StationaryVisuals6 =
	  | {
	      style?: "Stand";
	      animation?: Animation20;
	      babbler?: Babbler46;
	    }
	  | {
	      animation?: Animation21;
	      babbler?: Babbler47;
	      z_baseline: BaselineAltitudePixels13;
	      z_sine?: AltitudeSineWave13;
	      style: "Fly";
	      flaps?: FlappingVerticalMovements13;
	    };
	/**
	 * Defaults to 'idle.
	 */
	export type Animation20 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler46 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation21 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler47 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels13 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude14 = number;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed18 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance13 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds13 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds13 = number;
	/**
	 * Relative to the global movement speed.
	 */
	export type MovementSpeed6 = number;
	/**
	 * How strongly the creature is attracted to these targets.
	 */
	export type Weight4 = number;
	/**
	 * How far away the creature will be attracted to these targets. Overrides baseline detection range.
	 */
	export type DetectionRange1 = number;
	export type MovementVisuals7 =
	  | {
	      hop_anticipation?: HopAnticipationSeconds7;
	      hop_followthrough?: PostHopFollowthroughSeconds7;
	      animation?: HopAnimationName7;
	      babbler?: Babbler48;
	      style: "Hop";
	      hop_speed: HopVerticalSpeed7;
	    }
	  | {
	      run_vertical_speed: RunVerticalBounceSpeed7;
	      style: "Run";
	      animation?: RunAnimationName7;
	      babbler?: Babbler49;
	    }
	  | {
	      style: "Crawl";
	      animation?: CrawlAnimationName7;
	      babbler?: Babbler50;
	    }
	  | {
	      animation?: Animation22;
	      babbler?: Babbler51;
	      z_baseline: BaselineAltitudePixels14;
	      z_sine?: AltitudeSineWave14;
	      style: "Fly";
	      flaps?: FlappingVerticalMovements14;
	    };
	/**
	 * How long to hold before rising off the ground, to make room for a pre-hop animation.
	 */
	export type HopAnticipationSeconds7 = number;
	/**
	 * How long to hold after landing on the ground from a hop, to make room for animations.
	 */
	export type PostHopFollowthroughSeconds7 = number;
	/**
	 * Defaults to 'hop' but can be overridden.
	 */
	export type HopAnimationName7 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler48 = string;
	/**
	 * As a percentage of base gravity. This is fairly sensitive.
	 */
	export type HopVerticalSpeed7 = number;
	/**
	 * How fast the character should pop up off the ground with each leg movement. As a percentage of base gravity. This is fairly sensitive.
	 */
	export type RunVerticalBounceSpeed7 = number;
	/**
	 * Defaults to 'run' but can be overridden.
	 */
	export type RunAnimationName7 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler49 = string;
	/**
	 * Defaults to 'crawl' but can be overridden.
	 */
	export type CrawlAnimationName7 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler50 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation22 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler51 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels14 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude15 = number;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed19 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance14 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds14 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds14 = number;
	/**
	 * How the actor animates while not actively moving.
	 */
	export type StationaryVisuals7 =
	  | {
	      style?: "Stand";
	      animation?: Animation23;
	      babbler?: Babbler52;
	    }
	  | {
	      animation?: Animation24;
	      babbler?: Babbler53;
	      z_baseline: BaselineAltitudePixels15;
	      z_sine?: AltitudeSineWave15;
	      style: "Fly";
	      flaps?: FlappingVerticalMovements15;
	    };
	/**
	 * Defaults to 'idle.
	 */
	export type Animation23 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler52 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation24 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler53 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels15 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude16 = number;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed20 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance15 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds15 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds15 = number;
	/**
	 * Relative to the global movement speed.
	 */
	export type MovementSpeed7 = number;
	/**
	 * The chance the creature looks for an repellant instead of just roaming around.
	 */
	export type RepelProbability = number;
	/**
	 * How far away the creature will notice things to be repelled by.
	 */
	export type DetectionRange2 = number;
	export type MovementVisuals8 =
	  | {
	      hop_anticipation?: HopAnticipationSeconds8;
	      hop_followthrough?: PostHopFollowthroughSeconds8;
	      animation?: HopAnimationName8;
	      babbler?: Babbler54;
	      style: "Hop";
	      hop_speed: HopVerticalSpeed8;
	    }
	  | {
	      run_vertical_speed: RunVerticalBounceSpeed8;
	      style: "Run";
	      animation?: RunAnimationName8;
	      babbler?: Babbler55;
	    }
	  | {
	      style: "Crawl";
	      animation?: CrawlAnimationName8;
	      babbler?: Babbler56;
	    }
	  | {
	      animation?: Animation25;
	      babbler?: Babbler57;
	      z_baseline: BaselineAltitudePixels16;
	      z_sine?: AltitudeSineWave16;
	      style: "Fly";
	      flaps?: FlappingVerticalMovements16;
	    };
	/**
	 * How long to hold before rising off the ground, to make room for a pre-hop animation.
	 */
	export type HopAnticipationSeconds8 = number;
	/**
	 * How long to hold after landing on the ground from a hop, to make room for animations.
	 */
	export type PostHopFollowthroughSeconds8 = number;
	/**
	 * Defaults to 'hop' but can be overridden.
	 */
	export type HopAnimationName8 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler54 = string;
	/**
	 * As a percentage of base gravity. This is fairly sensitive.
	 */
	export type HopVerticalSpeed8 = number;
	/**
	 * How fast the character should pop up off the ground with each leg movement. As a percentage of base gravity. This is fairly sensitive.
	 */
	export type RunVerticalBounceSpeed8 = number;
	/**
	 * Defaults to 'run' but can be overridden.
	 */
	export type RunAnimationName8 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler55 = string;
	/**
	 * Defaults to 'crawl' but can be overridden.
	 */
	export type CrawlAnimationName8 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler56 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation25 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler57 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels16 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude17 = number;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed21 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance16 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds16 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds16 = number;
	/**
	 * How the actor animates while not actively moving.
	 */
	export type StationaryVisuals8 =
	  | {
	      style?: "Stand";
	      animation?: Animation26;
	      babbler?: Babbler58;
	    }
	  | {
	      animation?: Animation27;
	      babbler?: Babbler59;
	      z_baseline: BaselineAltitudePixels17;
	      z_sine?: AltitudeSineWave17;
	      style: "Fly";
	      flaps?: FlappingVerticalMovements17;
	    };
	/**
	 * Defaults to 'idle.
	 */
	export type Animation26 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler58 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation27 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler59 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels17 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude18 = number;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed22 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance17 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds17 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds17 = number;
	/**
	 * Relative to the global movement speed.
	 */
	export type MovementSpeed8 = number;
	/**
	 * How strongly the creature is repelled by these targets.
	 */
	export type Weight5 = number;
	/**
	 * How far away the creature will be attracted to these targets. Overrides baseline detection range.
	 */
	export type DetectionRange3 = number;
	export type MovementVisuals9 =
	  | {
	      hop_anticipation?: HopAnticipationSeconds9;
	      hop_followthrough?: PostHopFollowthroughSeconds9;
	      animation?: HopAnimationName9;
	      babbler?: Babbler60;
	      style: "Hop";
	      hop_speed: HopVerticalSpeed9;
	    }
	  | {
	      run_vertical_speed: RunVerticalBounceSpeed9;
	      style: "Run";
	      animation?: RunAnimationName9;
	      babbler?: Babbler61;
	    }
	  | {
	      style: "Crawl";
	      animation?: CrawlAnimationName9;
	      babbler?: Babbler62;
	    }
	  | {
	      animation?: Animation28;
	      babbler?: Babbler63;
	      z_baseline: BaselineAltitudePixels18;
	      z_sine?: AltitudeSineWave18;
	      style: "Fly";
	      flaps?: FlappingVerticalMovements18;
	    };
	/**
	 * How long to hold before rising off the ground, to make room for a pre-hop animation.
	 */
	export type HopAnticipationSeconds9 = number;
	/**
	 * How long to hold after landing on the ground from a hop, to make room for animations.
	 */
	export type PostHopFollowthroughSeconds9 = number;
	/**
	 * Defaults to 'hop' but can be overridden.
	 */
	export type HopAnimationName9 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler60 = string;
	/**
	 * As a percentage of base gravity. This is fairly sensitive.
	 */
	export type HopVerticalSpeed9 = number;
	/**
	 * How fast the character should pop up off the ground with each leg movement. As a percentage of base gravity. This is fairly sensitive.
	 */
	export type RunVerticalBounceSpeed9 = number;
	/**
	 * Defaults to 'run' but can be overridden.
	 */
	export type RunAnimationName9 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler61 = string;
	/**
	 * Defaults to 'crawl' but can be overridden.
	 */
	export type CrawlAnimationName9 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler62 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation28 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler63 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels18 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude19 = number;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed23 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance18 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds18 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds18 = number;
	/**
	 * How the actor animates while not actively moving.
	 */
	export type StationaryVisuals9 =
	  | {
	      style?: "Stand";
	      animation?: Animation29;
	      babbler?: Babbler64;
	    }
	  | {
	      animation?: Animation30;
	      babbler?: Babbler65;
	      z_baseline: BaselineAltitudePixels19;
	      z_sine?: AltitudeSineWave19;
	      style: "Fly";
	      flaps?: FlappingVerticalMovements19;
	    };
	/**
	 * Defaults to 'idle.
	 */
	export type Animation29 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler64 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation30 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler65 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels19 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude20 = number;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed24 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance19 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds19 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds19 = number;
	/**
	 * Relative to the global movement speed.
	 */
	export type MovementSpeed9 = number;
	export type Max76 = number;
	export type Min76 = number;
	export type NameInternal8 = string;
	/**
	 * If unchecked, the creature will try to go to a different state when this one ends.
	 */
	export type Repeatable2 = boolean;
	/**
	 * The ability the creature will attempt to cast.
	 */
	export type Ability11 = string;
	export type MovementVisuals10 =
	  | {
	      hop_anticipation?: HopAnticipationSeconds10;
	      hop_followthrough?: PostHopFollowthroughSeconds10;
	      animation?: HopAnimationName10;
	      babbler?: Babbler66;
	      style: "Hop";
	      hop_speed: HopVerticalSpeed10;
	    }
	  | {
	      run_vertical_speed: RunVerticalBounceSpeed10;
	      style: "Run";
	      animation?: RunAnimationName10;
	      babbler?: Babbler67;
	    }
	  | {
	      style: "Crawl";
	      animation?: CrawlAnimationName10;
	      babbler?: Babbler68;
	    }
	  | {
	      animation?: Animation31;
	      babbler?: Babbler69;
	      z_baseline: BaselineAltitudePixels20;
	      z_sine?: AltitudeSineWave20;
	      style: "Fly";
	      flaps?: FlappingVerticalMovements20;
	    };
	/**
	 * How long to hold before rising off the ground, to make room for a pre-hop animation.
	 */
	export type HopAnticipationSeconds10 = number;
	/**
	 * How long to hold after landing on the ground from a hop, to make room for animations.
	 */
	export type PostHopFollowthroughSeconds10 = number;
	/**
	 * Defaults to 'hop' but can be overridden.
	 */
	export type HopAnimationName10 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler66 = string;
	/**
	 * As a percentage of base gravity. This is fairly sensitive.
	 */
	export type HopVerticalSpeed10 = number;
	/**
	 * How fast the character should pop up off the ground with each leg movement. As a percentage of base gravity. This is fairly sensitive.
	 */
	export type RunVerticalBounceSpeed10 = number;
	/**
	 * Defaults to 'run' but can be overridden.
	 */
	export type RunAnimationName10 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler67 = string;
	/**
	 * Defaults to 'crawl' but can be overridden.
	 */
	export type CrawlAnimationName10 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler68 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation31 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler69 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels20 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude21 = number;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed25 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance20 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds20 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds20 = number;
	/**
	 * How the actor animates while not actively moving.
	 */
	export type StationaryVisuals10 =
	  | {
	      style?: "Stand";
	      animation?: Animation32;
	      babbler?: Babbler70;
	    }
	  | {
	      animation?: Animation33;
	      babbler?: Babbler71;
	      z_baseline: BaselineAltitudePixels21;
	      z_sine?: AltitudeSineWave21;
	      style: "Fly";
	      flaps?: FlappingVerticalMovements21;
	    };
	/**
	 * Defaults to 'idle.
	 */
	export type Animation32 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler70 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation33 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler71 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels21 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude22 = number;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed26 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance21 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds21 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds21 = number;
	/**
	 * Relative to the global movement speed.
	 */
	export type MovementSpeed10 = number;
	/**
	 * Affects the probability of choosing this state.
	 */
	export type Weight6 = number;
	/**
	 * How far away the creature will look to find a viable target or location to use this ability (in grid spaces)
	 */
	export type DetectionRadius = number;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants39 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags39 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude40 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll53 = boolean;
	export type Quantity87 = number;
	/**
	 * Higher effort items are considered more rare or harder to reach, and recipes will call for fewer of them. Lower effort items will be considered 'cheap', and therefore recipes will demand more of them.
	 */
	export type EffortModifier19 = number;
	export type ResistanceProfile3 = string;
	/**
	 * If true, this creature will respond angrily if something destroys the items it wants to protect.
	 */
	export type RespondToDestruction = boolean;
	/**
	 * If true, this creature will respond angrily if something damages the items it wants to protect.
	 */
	export type RespondToDamage = boolean;
	/**
	 * When first spawned in the world, this thing can randomly scale itself down (to a minimum) to add variety. This scale should be preserved between sessions, so this will only apply to newly-created instances of this asset.
	 */
	export type RandomScalingMinimum3 = number;
	/**
	 * If false, the object will always render itself at its normal color and won't be darkened or brightened by lighting.
	 */
	export type UseLighting13 = boolean;
	export type Object6 = string;
	export type SpineSkin1 = string;
	export type UIIcon31 = string;
	/**
	 * How long the creature must be outside the deaggro radius before exiting combat.
	 */
	export type DeaggroDuration = number;
	/**
	 * Move the health bar up or down to better position it relative to the world element's visual size. Positive numbers go up.
	 */
	export type HealthBarVerticalOffset = number;
	/**
	 * Plays when receiving damage that hasn't been mitigated.
	 */
	export type Major3 = string;
	/**
	 * Plays when receiving damage that has been mitigated.
	 */
	export type Minor3 = string;
	export type Chance14 = number;
	export type Height9 = number;
	export type Width9 = number;
	/**
	 * The sound the creature will make when it begins attacking something
	 */
	export type AggroSound = string;
	/**
	 * Whether the creature will attack the player when the player gets into aggro range.
	 */
	export type AggroOntoPlayer = boolean;
	export type MovementVisuals11 =
	  | {
	      hop_anticipation?: HopAnticipationSeconds11;
	      hop_followthrough?: PostHopFollowthroughSeconds11;
	      animation?: HopAnimationName11;
	      babbler?: Babbler72;
	      style: "Hop";
	      hop_speed: HopVerticalSpeed11;
	    }
	  | {
	      run_vertical_speed: RunVerticalBounceSpeed11;
	      style: "Run";
	      animation?: RunAnimationName11;
	      babbler?: Babbler73;
	    }
	  | {
	      style: "Crawl";
	      animation?: CrawlAnimationName11;
	      babbler?: Babbler74;
	    }
	  | {
	      animation?: Animation34;
	      babbler?: Babbler75;
	      z_baseline: BaselineAltitudePixels22;
	      z_sine?: AltitudeSineWave22;
	      style: "Fly";
	      flaps?: FlappingVerticalMovements22;
	    };
	/**
	 * How long to hold before rising off the ground, to make room for a pre-hop animation.
	 */
	export type HopAnticipationSeconds11 = number;
	/**
	 * How long to hold after landing on the ground from a hop, to make room for animations.
	 */
	export type PostHopFollowthroughSeconds11 = number;
	/**
	 * Defaults to 'hop' but can be overridden.
	 */
	export type HopAnimationName11 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler72 = string;
	/**
	 * As a percentage of base gravity. This is fairly sensitive.
	 */
	export type HopVerticalSpeed11 = number;
	/**
	 * How fast the character should pop up off the ground with each leg movement. As a percentage of base gravity. This is fairly sensitive.
	 */
	export type RunVerticalBounceSpeed11 = number;
	/**
	 * Defaults to 'run' but can be overridden.
	 */
	export type RunAnimationName11 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler73 = string;
	/**
	 * Defaults to 'crawl' but can be overridden.
	 */
	export type CrawlAnimationName11 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler74 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation34 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler75 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels22 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude23 = number;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed27 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance22 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds22 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds22 = number;
	/**
	 * How the actor animates while not actively moving.
	 */
	export type StationaryVisuals11 =
	  | {
	      style?: "Stand";
	      animation?: Animation35;
	      babbler?: Babbler76;
	    }
	  | {
	      animation?: Animation36;
	      babbler?: Babbler77;
	      z_baseline: BaselineAltitudePixels23;
	      z_sine?: AltitudeSineWave23;
	      style: "Fly";
	      flaps?: FlappingVerticalMovements23;
	    };
	/**
	 * Defaults to 'idle.
	 */
	export type Animation35 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler76 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation36 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler77 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels23 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude24 = number;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed28 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance23 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds23 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds23 = number;
	/**
	 * Relative to the global movement speed.
	 */
	export type MovementSpeed11 = number;
	export type Ability12 = string;
	export type MovementVisuals12 =
	  | {
	      hop_anticipation?: HopAnticipationSeconds12;
	      hop_followthrough?: PostHopFollowthroughSeconds12;
	      animation?: HopAnimationName12;
	      babbler?: Babbler78;
	      style: "Hop";
	      hop_speed: HopVerticalSpeed12;
	    }
	  | {
	      run_vertical_speed: RunVerticalBounceSpeed12;
	      style: "Run";
	      animation?: RunAnimationName12;
	      babbler?: Babbler79;
	    }
	  | {
	      style: "Crawl";
	      animation?: CrawlAnimationName12;
	      babbler?: Babbler80;
	    }
	  | {
	      animation?: Animation37;
	      babbler?: Babbler81;
	      z_baseline: BaselineAltitudePixels24;
	      z_sine?: AltitudeSineWave24;
	      style: "Fly";
	      flaps?: FlappingVerticalMovements24;
	    };
	/**
	 * How long to hold before rising off the ground, to make room for a pre-hop animation.
	 */
	export type HopAnticipationSeconds12 = number;
	/**
	 * How long to hold after landing on the ground from a hop, to make room for animations.
	 */
	export type PostHopFollowthroughSeconds12 = number;
	/**
	 * Defaults to 'hop' but can be overridden.
	 */
	export type HopAnimationName12 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler78 = string;
	/**
	 * As a percentage of base gravity. This is fairly sensitive.
	 */
	export type HopVerticalSpeed12 = number;
	/**
	 * How fast the character should pop up off the ground with each leg movement. As a percentage of base gravity. This is fairly sensitive.
	 */
	export type RunVerticalBounceSpeed12 = number;
	/**
	 * Defaults to 'run' but can be overridden.
	 */
	export type RunAnimationName12 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler79 = string;
	/**
	 * Defaults to 'crawl' but can be overridden.
	 */
	export type CrawlAnimationName12 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler80 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation37 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler81 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels24 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude25 = number;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed29 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance24 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds24 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds24 = number;
	/**
	 * How the actor animates while not actively moving.
	 */
	export type StationaryVisuals12 =
	  | {
	      style?: "Stand";
	      animation?: Animation38;
	      babbler?: Babbler82;
	    }
	  | {
	      animation?: Animation39;
	      babbler?: Babbler83;
	      z_baseline: BaselineAltitudePixels25;
	      z_sine?: AltitudeSineWave25;
	      style: "Fly";
	      flaps?: FlappingVerticalMovements25;
	    };
	/**
	 * Defaults to 'idle.
	 */
	export type Animation38 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler82 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation39 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler83 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels25 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude26 = number;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed30 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance25 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds25 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds25 = number;
	/**
	 * Relative to the global movement speed.
	 */
	export type MovementSpeed12 = number;
	/**
	 * Affects how frequently this ability is chosen.
	 */
	export type Weight7 = number;
	export type MaxSeconds5 = number;
	export type MinSeconds5 = number;
	/**
	 * The creature can randomly ignore the post-ability pause, and instead go right into the next ability.
	 */
	export type PostAbilityPauseIgnoreChance1 = number;
	/**
	 * If possible, the creature can add some randomness to the direction of this ability's cast (in degrees).
	 */
	export type DirectionRandomness2 = number;
	export type MaxSeconds6 = number;
	export type MinSeconds6 = number;
	/**
	 * If set, the creature will always cast this ability instantly after finishing the prior ability, ignoring normal behavioral cooldowns.
	 */
	export type Instant1 = boolean;
	/**
	 * The weight choosing this followup ability relative to the other followup abilities in this list.
	 */
	export type Weight8 = number;
	export type Ability13 = string;
	export type MaxSeconds7 = number;
	export type MinSeconds7 = number;
	export type IgnoreInLevelViewer4 = boolean;
	/**
	 * By default, max HP is relative to the level of the creature. Change this value to further customize its max HP.
	 */
	export type HPModifier2 = number;
	export type DeaggroRadius = number;
	export type AggroRadius = number;
	/**
	 * If set, this game element will adjust its level to match the player's level at the time it is spawned, plus this number.
	 */
	export type RelativeLevel3 = number;
	export type Family = string;
	/**
	 * Whether to include this loot group when listing the 'sources' of an item in its tooltip.
	 */
	export type IncludeAsSource1 = boolean;
	/**
	 * When this loot group is able to drop.
	 */
	export type TimeOfDay2 = "Always" | "Day" | "Night";
	/**
	 * If true, this loot group will be considered a 'bonus' and will not be counted as part of the normal effort calculations.
	 */
	export type ConsiderAsBonus1 = boolean;
	/**
	 * If set, the 'Drop Quantity' value will multiply against the value retrieved from this data field.
	 */
	export type DatafieldQuantityLink1 = string;
	export type Max77 = number;
	export type Min77 = number;
	/**
	 * The probability for this loot group to occur.
	 */
	export type DropChance2 = number;
	export type UnlockedBy58 = string;
	/**
	 * If true, this loot group will not be shown in the progression map.
	 */
	export type IgnoreInProgressionMap2 = boolean;
	/**
	 * What event will cause this loot to drop.
	 */
	export type Trigger3 = "Death" | "Damage";
	export type EnglishText122 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText100 = string;
	/**
	 * When destroyed, this world element will respawn using the base respawn minutes combined with this multiplier. Higher multiplier means longer time between respawns.
	 */
	export type RespawnTimeMultiplier1 = number;
	export type MovementVisuals13 =
	  | {
	      hop_anticipation?: HopAnticipationSeconds13;
	      hop_followthrough?: PostHopFollowthroughSeconds13;
	      animation?: HopAnimationName13;
	      babbler?: Babbler84;
	      style: "Hop";
	      hop_speed: HopVerticalSpeed13;
	    }
	  | {
	      run_vertical_speed: RunVerticalBounceSpeed13;
	      style: "Run";
	      animation?: RunAnimationName13;
	      babbler?: Babbler85;
	    }
	  | {
	      style: "Crawl";
	      animation?: CrawlAnimationName13;
	      babbler?: Babbler86;
	    }
	  | {
	      animation?: Animation40;
	      babbler?: Babbler87;
	      z_baseline: BaselineAltitudePixels26;
	      z_sine?: AltitudeSineWave26;
	      style: "Fly";
	      flaps?: FlappingVerticalMovements26;
	    };
	/**
	 * How long to hold before rising off the ground, to make room for a pre-hop animation.
	 */
	export type HopAnticipationSeconds13 = number;
	/**
	 * How long to hold after landing on the ground from a hop, to make room for animations.
	 */
	export type PostHopFollowthroughSeconds13 = number;
	/**
	 * Defaults to 'hop' but can be overridden.
	 */
	export type HopAnimationName13 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler84 = string;
	/**
	 * As a percentage of base gravity. This is fairly sensitive.
	 */
	export type HopVerticalSpeed13 = number;
	/**
	 * How fast the character should pop up off the ground with each leg movement. As a percentage of base gravity. This is fairly sensitive.
	 */
	export type RunVerticalBounceSpeed13 = number;
	/**
	 * Defaults to 'run' but can be overridden.
	 */
	export type RunAnimationName13 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler85 = string;
	/**
	 * Defaults to 'crawl' but can be overridden.
	 */
	export type CrawlAnimationName13 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler86 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation40 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler87 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels26 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude27 = number;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed31 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance26 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds26 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds26 = number;
	/**
	 * How the actor animates while not actively moving.
	 */
	export type StationaryVisuals13 =
	  | {
	      style?: "Stand";
	      animation?: Animation41;
	      babbler?: Babbler88;
	    }
	  | {
	      animation?: Animation42;
	      babbler?: Babbler89;
	      z_baseline: BaselineAltitudePixels27;
	      z_sine?: AltitudeSineWave27;
	      style: "Fly";
	      flaps?: FlappingVerticalMovements27;
	    };
	/**
	 * Defaults to 'idle.
	 */
	export type Animation41 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler88 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation42 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler89 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels27 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude28 = number;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed32 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance27 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds27 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds27 = number;
	/**
	 * Relative to the global movement speed.
	 */
	export type MovementSpeed13 = number;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup30 = string;
	export type ScaleModifier8 = number;
	/**
	 * How likely it is for the creature to flee when its health drops below the threshold.
	 */
	export type Probablity = number;
	/**
	 * When the creature's health drops below this threshold, it can flee.
	 */
	export type HealthThreshold2 = number;
	/**
	 * The sound the creature will make when it begins running away from something.
	 */
	export type FleeSound = string;
	export type Max78 = number;
	export type Min78 = number;
	export type MovementVisuals14 =
	  | {
	      hop_anticipation?: HopAnticipationSeconds14;
	      hop_followthrough?: PostHopFollowthroughSeconds14;
	      animation?: HopAnimationName14;
	      babbler?: Babbler90;
	      style: "Hop";
	      hop_speed: HopVerticalSpeed14;
	    }
	  | {
	      run_vertical_speed: RunVerticalBounceSpeed14;
	      style: "Run";
	      animation?: RunAnimationName14;
	      babbler?: Babbler91;
	    }
	  | {
	      style: "Crawl";
	      animation?: CrawlAnimationName14;
	      babbler?: Babbler92;
	    }
	  | {
	      animation?: Animation43;
	      babbler?: Babbler93;
	      z_baseline: BaselineAltitudePixels28;
	      z_sine?: AltitudeSineWave28;
	      style: "Fly";
	      flaps?: FlappingVerticalMovements28;
	    };
	/**
	 * How long to hold before rising off the ground, to make room for a pre-hop animation.
	 */
	export type HopAnticipationSeconds14 = number;
	/**
	 * How long to hold after landing on the ground from a hop, to make room for animations.
	 */
	export type PostHopFollowthroughSeconds14 = number;
	/**
	 * Defaults to 'hop' but can be overridden.
	 */
	export type HopAnimationName14 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler90 = string;
	/**
	 * As a percentage of base gravity. This is fairly sensitive.
	 */
	export type HopVerticalSpeed14 = number;
	/**
	 * How fast the character should pop up off the ground with each leg movement. As a percentage of base gravity. This is fairly sensitive.
	 */
	export type RunVerticalBounceSpeed14 = number;
	/**
	 * Defaults to 'run' but can be overridden.
	 */
	export type RunAnimationName14 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler91 = string;
	/**
	 * Defaults to 'crawl' but can be overridden.
	 */
	export type CrawlAnimationName14 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler92 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation43 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler93 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels28 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude29 = number;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed33 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance28 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds28 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds28 = number;
	/**
	 * Relative to the global movement speed.
	 */
	export type MovementSpeed14 = number;
	export type Green51 = number;
	export type Red51 = number;
	export type Blue51 = number;
	export type Green52 = number;
	export type Red52 = number;
	export type Blue52 = number;
	export type EnglishText123 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText101 = string;
	/**
	 * The minimum 'Effort' for items to be considered of this quality.
	 */
	export type Effort = number;
	/**
	 * The particle system's string ID in the Game Maker project.
	 */
	export type Name65 = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup31 = string;
	export type NameInternal9 = string;
	/**
	 * For identifiaction in the Game Changer
	 */
	export type FamilyNameInternal = string;
	/**
	 * For identification in the Game Changer
	 */
	export type IconInternal = string;
	/**
	 * If set, the camera will use this zoom level while locked on to this camera anchor. Higher values mean you can see more.
	 */
	export type Zoom = number;
	/**
	 * How close the player must get for the camera anchor to lock in.
	 */
	export type RadiusGrid = number;
	export type NameInternal10 = string;
	/**
	 * 100% means the camera goes all the way to the anchor. 50% keeps it halfway between the player and the anchor.
	 */
	export type BiasAmount = number;
	
	export interface Schemas {
	  gms_object: Object;
	  cl2_timestamp: Timestamp;
	  recipe_category: RecipeCategory;
	  cl2_wall: BuildingWall;
	  cl2_damage_profile: DamageProfile;
	  cl2_stats: Stat;
	  gc_wip: WIP;
	  cl2_npc: Character;
	  cl2_pet: Pet2;
	  resource: Resource;
	  cl2_artisan_glads: Comfort2;
	  cl2_boss_gate: BossGate;
	  cl2_storyline: Storyline;
	  research_node: Insight9;
	  floor_tile: Floor2;
	  cl2_buff: Buff3;
	  cl2_trinket: Trinket;
	  cl2_decor: Decor;
	  cl2_ability: Ability6;
	  light_emitter: LightEmitter;
	  cl2_music: Music;
	  cl2_fence: Fence;
	  cl2_chat: Chat;
	  cl2_env_item: EnvironmentalObject;
	  cl2_area: Area;
	  cl2_outpost: Scene;
	  cl2_shadow: Shadow;
	  cl2_resistance_profile: ResistanceProfile1;
	  cl2_juicebox: Juicebox;
	  cl2_item_component: Component;
	  cl2_door: BuildingDoor;
	  cl2_roof: BuildingRoof;
	  cl2_npc_species: CharacterSpecies;
	  cl2_emoji: Emoji2;
	  cl2_datafield: Datafield4;
	  cl2_chest: Chest;
	  cl2_key_item: KeyItem;
	  cl2_nest: PetNest;
	  cl2_damage_type: DamageType3;
	  cl2_immunities: Immunities;
	  cl2_quest_moment_requirement: MomentRequirements2;
	  cl2_quest_marker: QuestMarker;
	  cl2_progression_priors: ProgressionPriors;
	  cl2_armor: Armor;
	  garden_bed: GardenBed;
	  cl2_animstate: AnimationState;
	  cl2_editor_category: EditorCategory;
	  earparty_group: EarpartyGroup;
	  cl2_quest: Quest;
	  terrain_tile: Terrain2;
	  cl2_particle_type: Particle;
	  cl2_consumable: Consumable;
	  cl2_boss: Boss7;
	  cl2_game_balance: GameBalance;
	  cl2_equipment_set: EquipmentSet7;
	  cl2_colorgrade_profile: ColorGrading;
	  schema2: Schema;
	  cl2_player: Player;
	  cl2_mastery: PetMastery;
	  cl2_pillar: BuildingPillar;
	  cl2_wip_item: UnimplementedItem;
	  video: Video;
	  cl2_quest_requirement: Requirements9;
	  artisan: Buddy9;
	  cl2_boss_phase: BossPhase1;
	  cl2_pet_egg: PetEgg;
	  cl2_station: CraftingStation;
	  impassable_tile: ImpassableTile;
	  cl2_ability_action_groups: ActionGroups;
	  cl2_reactions: Reactions1;
	  cl2_buff_type: BuffType;
	  cl2_item_tag: ItemTag;
	  gms_sprite: Sprite4;
	  seed_pack: SeedPack;
	  cl2_fishing: Fishing;
	  cl2_sub_damage_profile: DamageProfile1;
	  earparty_sound: EarpartySound;
	  dock_tile: Dock2;
	  cl2_moon: Moon;
	  cl2_wieldable: Wieldable;
	  cl2_creature: Creature;
	  cl2_item_quality: ItemQuality;
	  gms_particle_asset: ParticleSystem5;
	  cl2_boss_dialogue: BossDialogueSequence4;
	  cl2_hitbox: Hitbox;
	  cl2_schematic: Schematic;
	  cl2_creature_family: CreatureFamily;
	  cl2_telegraph: Telegraph;
	  cl2_camera_anchor: CameraAnchor;
	}
	/**
	 * An object asset found in the Game Maker project.
	 */
	export interface Object {
	  wip?: WIP;
	  name: Name;
	}
	/**
	 * Here you can indicate aspects of this element that should be considered a 'work in progress.' This means that it has elements that are either unfinished or need to be reworked.
	 */
	export interface WIP {
	  mechanics: MechanicsNeeded;
	  audio: AudioNeeded;
	  text: TextNeeded;
	  balance: BalanceNeeded;
	  integration: IntegrationNeeded;
	  comments?: Comments;
	  draft: MoteIsDraft;
	  visuals: VisualsNeeded;
	}
	/**
	 * Leave comments to explain tasks or things that need to be done to no longer consider this element 'WIP'.
	 */
	export interface Comments {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * A timestamp that is saved on world entities for persistent tracking of when things occurred to them.
	 */
	export interface Timestamp {
	  wip?: WIP;
	  name: Name1;
	  uicon?: UIIcon;
	  description: Description;
	}
	export interface RecipeCategory {
	  order: Order;
	  name: Name2;
	  color: Color;
	  wip?: WIP;
	  icon: Icon;
	  unselected_color: UnselectedColor;
	}
	export interface Color {
	  g?: Green;
	  r?: Red;
	  b?: Blue;
	}
	export interface UnselectedColor {
	  g?: Green1;
	  r?: Red1;
	  b?: Blue1;
	}
	export interface BuildingWall {
	  placement_sound: PlacementSound;
	  name: Name3;
	  sprite: WorldSprite;
	  roof_vote: PreferredRoof;
	  description: Description1;
	  wip?: WIP;
	  editor_group?: EditorGroup;
	  recipe?: Recipe;
	  uicon: UIIcon1;
	}
	export interface Name3 {
	  text: EnglishText;
	  description?: TranslatorHelperText;
	}
	export interface Description1 {
	  text: EnglishText1;
	  description?: TranslatorHelperText1;
	}
	export interface Recipe {
	  components: Ingredients;
	  artisans?: ArtisansRequired;
	  badge_cost_modifiers?: CostModifiedByResearch;
	  output_quantity?: OutputQuantity;
	  badge_output_modifiers?: OutputModifiedByResearch;
	  source?: UnlockedBy;
	  effort_modifier?: EffortModifier;
	  station: Station;
	}
	export interface Ingredients {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface ArtisansRequired {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface CostModifiedByResearch {
	  [k: string]: {
	    element?: {
	      badge_id?: ResearchNode;
	      value?: ChangePerPoint;
	    };
	    order?: number;
	  };
	}
	export interface OutputModifiedByResearch {
	  [k: string]: {
	    element?: {
	      style?: Style;
	      badge_id?: ResearchNode1;
	      value?: ChangePerPoint1;
	    };
	    order?: number;
	  };
	}
	export interface DamageProfile {
	  wip?: WIP;
	  name: Name4;
	  damage_types: DamageTypes;
	  modifiers?: Modifiers;
	}
	/**
	 * What kind of damage to deal, and what percent of the 'normal' amount to deal. The actual damage dealt will be calculated based on game factors such as the level of the user, cast times, and stats of the damager.
	 */
	export interface DamageTypes {
	  [k: string]: {
	    element?: {
	      key?: DamageType;
	      value?: DamageAmount;
	    };
	    order?: number;
	  };
	}
	/**
	 * Whether to deal extra or reduced damage to certain things, or certain kinds of things.
	 */
	export interface Modifiers {
	  [k: string]: {
	    element?: {
	      key?: Filter;
	      value?: Modifier;
	    };
	    order?: number;
	  };
	}
	export interface Stat {
	  usable_on_buffs: UsableOnBuffs;
	  value_per_point?: ValuePoint;
	  display_percent: DisplayAsPercent;
	  primary_tags?: PrimaryStatForItemTypes;
	  description?: Description2;
	  wip?: WIP;
	  default_value: ValueDefault;
	  max_value?: ValueMax;
	  naming_priority: Order1;
	  show_on_player_ui: ShowOnPlayerUI;
	  name: Name5;
	  display_precision?: DecimalPrecision;
	  usable_on_equipment: UsableOnEquipment;
	  parent?: ParentStat;
	  min_value?: ValueMin;
	}
	/**
	 * If this stat appears on an item and is marked as a 'Primary' stat for that kind of item, this stat will appear first. For example, armor items have 'Hit Points' as a primary stat.
	 */
	export interface PrimaryStatForItemTypes {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface Description2 {
	  text: EnglishText2;
	}
	export interface Name5 {
	  text: EnglishText3;
	  description?: TranslatorHelperText2;
	}
	export interface Character1 {
	  background_info?: BackgroundInformation;
	  name: Name6;
	  species: Species;
	  idle_text?: IdleText;
	  wip?: WIP;
	  editor_group?: EditorGroup1;
	}
	/**
	 * For developer use. Just for establishing background information.
	 */
	export interface BackgroundInformation {
	  brief?: Brief;
	  pronouns?: Pronouns;
	  personality?: Personality;
	  notes?: Notes;
	}
	/**
	 * Information about this character's background and their role in the game world.
	 */
	export interface Notes {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface Name6 {
	  text: EnglishText4;
	  description?: TranslatorHelperText3;
	}
	/**
	 * Fallback things the character can say when interacted with when they aren't involved in any quests.
	 */
	export interface IdleText {
	  [k: string]: {
	    element?: Topic;
	    order?: number;
	  };
	}
	/**
	 * For each topic, the character will say latest Phrase Group whose requirements are met (if any).
	 */
	export interface Topic {
	  requirements?: MomentRequirements;
	  name: TopicNameInternal;
	  phrase_groups: PhraseGroups;
	}
	/**
	 * Conditions that must be true for the quest to proceed.
	 */
	export interface MomentRequirements {
	  [k: string]: {
	    element?: Requirement;
	    order?: number;
	  };
	}
	/**
	 * The player must have at least these quantities of these items.
	 */
	export interface Items {
	  [k: string]: {
	    element?: {
	      key?: string;
	      value?: Quantity;
	    };
	    order?: number;
	  };
	}
	export interface InventoryEvaluation {
	  [k: string]: {
	    element?: {
	      value1?: Quantity1;
	      value0?: Item1;
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	    };
	    order?: number;
	  };
	}
	/**
	 * Conditions that must be true for the quest to proceed.
	 */
	export interface MomentRequirements1 {
	  [k: string]: {
	    element?: Requirement;
	    order?: number;
	  };
	}
	export interface PetStage {
	  stage?: "Egg" | "Baby" | "Adult" | "Embiggened";
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Entities {
	  [k: string]: {
	    element?: EntityType;
	    order?: number;
	  };
	}
	/**
	 * The character will say lines from the latest phrase group whose requirements are met.
	 */
	export interface PhraseGroups {
	  [k: string]: {
	    element?: PhraseGroup;
	    order?: number;
	  };
	}
	export interface PhraseGroup {
	  requirements?: Requirements;
	  phrases: Phrases;
	  name: GroupNameInternal;
	}
	/**
	 * Conditions that must be true for the quest to proceed.
	 */
	export interface Requirements {
	  [k: string]: {
	    element?: Requirement1;
	    order?: number;
	  };
	}
	/**
	 * The player must have at least these quantities of these items.
	 */
	export interface Items1 {
	  [k: string]: {
	    element?: {
	      key?: string;
	      value?: Quantity2;
	    };
	    order?: number;
	  };
	}
	export interface InventoryEvaluation1 {
	  [k: string]: {
	    element?: {
	      value1?: Quantity3;
	      value0?: Item3;
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	    };
	    order?: number;
	  };
	}
	/**
	 * Conditions that must be true for the quest to proceed.
	 */
	export interface Requirements1 {
	  [k: string]: {
	    element?: Requirement1;
	    order?: number;
	  };
	}
	export interface PetStage1 {
	  stage?: "Egg" | "Baby" | "Adult" | "Embiggened";
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Phrases {
	  [k: string]: {
	    element?: {
	      text: {
	        text: EnglishText5;
	      };
	      emoji?: Emoji;
	    };
	    order?: number;
	  };
	}
	/**
	 * For when this name is displayed in a dialogue window.
	 */
	export interface NameColor {
	  g?: Green2;
	  r?: Red2;
	  b?: Blue2;
	}
	export interface Pet2 {
	  appearances: Appearances;
	  ability_melee: AbilityRequiresMelee;
	  sprite: WorldSprite1;
	  follow_stop_sound?: StopFollowingSound;
	  description: Description3;
	  hatching: Hatching;
	  wip?: WIP;
	  abilities: AbilitySequence;
	  ui_color?: UIColor;
	  synergies: Synergies;
	  using_lighting: UseLighting;
	  follow_sound?: FollowSound;
	  spine_skin: PreviewSkin;
	  priors?: ProgressionPriors;
	  ability_cooldown: AbilityCooldownSeconds;
	  ability_description: AbilityDescription;
	  uicon: UIIcon2;
	  ui_sound?: UIOpenSound;
	  size: Size1;
	  ability_name: AbilityName;
	  chirp_sound?: ChirpSound;
	  name: Name8;
	  movement: Motion;
	  light_emitter?: LightEmitter;
	  ability_sound?: AbilityActivationSound;
	}
	/**
	 * These appearances correspond with the three stages of a pet's life: Baby, Adult, and Embiggened.
	 */
	export interface Appearances {
	  [k: string]: {
	    element?: {
	      skin_name?: SkinName;
	      scale?: Scale1;
	    };
	    order?: number;
	  };
	}
	export interface Description3 {
	  text: EnglishText6;
	  description?: TranslatorHelperText4;
	}
	export interface Hatching {
	  hatching_requirements?: Requirements2;
	  egg: Egg;
	  egg_sound: EggSounds;
	}
	export interface Requirements2 {
	  [k: string]: {
	    element?: CheckMark;
	    order?: number;
	  };
	}
	export interface CheckMark {
	  requirements?: CheckMarkConditions;
	  description?: Name7;
	}
	export interface CheckMarkConditions {
	  [k: string]: {
	    element?: Condition;
	    order?: number;
	  };
	}
	/**
	 * The number of spaces that are not occupied by structures (walls/doors/pillars).
	 */
	export interface InteriorTileArea {
	  value1?: number;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	/**
	 * Note that if you include an item tag and an item that also belongs to that tag, the item will be double-counted.
	 */
	export interface Items2 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface NumberOfRooms {
	  value1?: number;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	/**
	 * The evaluated number of source items must meet the tile distance requirement against the evaluated number of target items.
	 */
	export interface TileDistance {
	  value1?: number;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	/**
	 * The items used to check for relationships.
	 */
	export interface SourceItems {
	  value1?: number;
	  value0?: {
	    [k: string]: {
	      element?: string;
	      order?: number;
	    };
	  };
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	/**
	 * The items to check against the source items.
	 */
	export interface TargetItems {
	  value1?: number;
	  value0?: {
	    [k: string]: {
	      element?: string;
	      order?: number;
	    };
	  };
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	/**
	 * Describe these conditions in a short sentence. This will be next to a checkmark that will check once the requirements are complete.
	 */
	export interface Name7 {
	  text: EnglishText7;
	  description?: TranslatorHelperText5;
	}
	/**
	 * The abilities the pet will use in combat (in order).
	 */
	export interface AbilitySequence {
	  [k: string]: {
	    element?: Ability;
	    order?: number;
	  };
	}
	/**
	 * The ability the pet will perform on command in combat.
	 */
	export interface Ability {
	  enabled_default: EnabledByDefault;
	  enablement?: Enablement;
	  ability: Ability1;
	  movement?: MotionOverride;
	  target: Target;
	  post_ability_pause: PostAbilityPause;
	}
	/**
	 * Links to pet stages or masteries that can either enable or disable this ability in the sequence. Enablements are evaluated starting at the end, and the first one met dictates whether the ability is enabled.
	 */
	export interface Enablement {
	  [k: string]: {
	    element?: AbilityEnablement;
	    order?: number;
	  };
	}
	export interface AbilityEnablement {
	  stage?: Stage;
	  mastery?: Mastery;
	  enables: Enables;
	}
	export interface MotionOverride {
	  moving?: MovementVisuals;
	  stationary?: StationaryVisuals;
	  movespeed?: MovementSpeed;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave {
	  [k: string]: {
	    element?: SineWave;
	    order?: number;
	  };
	}
	export interface SineWave {
	  amplitude?: Amplitude;
	  speed?: Speed;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements {
	  [k: string]: {
	    element?: FlapEvent;
	    order?: number;
	  };
	}
	export interface FlapEvent {
	  distance?: VerticalDistance;
	  impulse_seconds?: ImpulseDurationSeconds;
	  recovery_seconds?: RecoveryDurationSeconds;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave1 {
	  [k: string]: {
	    element?: SineWave1;
	    order?: number;
	  };
	}
	export interface SineWave1 {
	  amplitude?: Amplitude1;
	  speed?: Speed1;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements1 {
	  [k: string]: {
	    element?: FlapEvent1;
	    order?: number;
	  };
	}
	export interface FlapEvent1 {
	  distance?: VerticalDistance1;
	  impulse_seconds?: ImpulseDurationSeconds1;
	  recovery_seconds?: RecoveryDurationSeconds1;
	}
	/**
	 * If set, the creature will wait for this many seconds after using this ability before moving on to the next ability.
	 */
	export interface PostAbilityPause {
	  value1?: MaxSeconds;
	  value0?: MinSeconds;
	}
	/**
	 * The color to use for this pet's UI.
	 */
	export interface UIColor {
	  g?: Green3;
	  r?: Red3;
	  b?: Blue3;
	}
	/**
	 * Passive benefits from having this pet with you.
	 */
	export interface Synergies {
	  [k: string]: {
	    element?: Synergy;
	    order?: number;
	  };
	}
	/**
	 * A passive benefit from having this pet with you.
	 */
	export interface Synergy {
	  reactions?: Reactions;
	  stat_boost?: StatBoost;
	  mastery?: MasteryLink;
	}
	/**
	 * A set of reactions that get added to the player while this pet is following them.
	 */
	export interface Reactions {
	  reactions?: Reactions1;
	}
	export interface Reactions1 {
	  [k: string]: {
	    element?: Reaction;
	    order?: number;
	  };
	}
	export interface Reaction {
	  conditions?: Conditions;
	  name: NameInternal;
	  actions: Actions;
	  description?: TooltipDescription;
	  triggers: Triggers;
	  require_all_conditions: RequireAllConditions;
	}
	export interface Conditions {
	  [k: string]: {
	    element?: Condition1;
	    order?: number;
	  };
	}
	/**
	 * Which abilities are we evaluating?
	 */
	export interface Abilities {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface Evaluation {
	  value1?: number;
	  value0?: string;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	/**
	 * The 'minutes since timestamp' value can be modified up or down based on an Insight.
	 */
	export interface InsightModifier {
	  amount?: ChangePerPoint2;
	  insight?: Insight2;
	}
	/**
	 * If set, this description will appear on the Research Node to explain what it is unlocking.
	 */
	export interface InsightTooltip {
	  text: EnglishText8;
	  description?: TranslatorHelperText6;
	}
	export interface NumberOfTargets {
	  quantity?: Quantity4;
	  comparison?: Evaluation1;
	}
	export interface DistanceRequiredGridSpaces {
	  value1?: Max;
	  value0?: Min;
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface Targets {
	  [k: string]: {
	    element?: Filter1;
	    order?: number;
	  };
	}
	export interface Filter1 {
	  combatants_only?: Combatants;
	  datafield_evaluations?: DatafieldEvaluations;
	  require_all_tags?: RequireAllTags;
	  exclude?: Exclude;
	  buffs?: Buffs;
	  items?: Items3;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations {
	  [k: string]: {
	    element?: {
	      value1?: number;
	      value0?: string;
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	    };
	    order?: number;
	  };
	}
	export interface Buffs {
	  buffs: Buffs1;
	  require_all: RequireAll2;
	  stacks?: Stacks;
	}
	export interface Buffs1 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks {
	  value1?: Quantity5;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Items3 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface HealthEvaluation {
	  hp_percentage?: number;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Items4 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * The condition will be met if the player is wielding any of these items.
	 */
	export interface Items5 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * If set, then targets other than yourself will be evaluated.
	 */
	export interface NumberOfTargets1 {
	  value1?: Quantity6;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface BuffTargetFilter {
	  [k: string]: {
	    element?: Filter2;
	    order?: number;
	  };
	}
	export interface Filter2 {
	  combatants_only?: Combatants1;
	  datafield_evaluations?: DatafieldEvaluations1;
	  require_all_tags?: RequireAllTags1;
	  exclude?: Exclude1;
	  buffs?: Buffs2;
	  items?: Items6;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations1 {
	  [k: string]: {
	    element?: {
	      value1?: number;
	      value0?: string;
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	    };
	    order?: number;
	  };
	}
	export interface Buffs2 {
	  buffs: Buffs3;
	  require_all: RequireAll5;
	  stacks?: Stacks1;
	}
	export interface Buffs3 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks1 {
	  value1?: Quantity7;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Items6 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * How close or far (in grid spaces) the entities must be to be considered for this condition.
	 */
	export interface BuffTargetRange {
	  value1?: Max1;
	  value0?: Min1;
	}
	export interface Stacks2 {
	  value1?: Quantity8;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Buffs4 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface SummonedEntitiesFilter {
	  [k: string]: {
	    element?: Filter3;
	    order?: number;
	  };
	}
	export interface Filter3 {
	  combatants_only?: Combatants2;
	  datafield_evaluations?: DatafieldEvaluations2;
	  require_all_tags?: RequireAllTags2;
	  exclude?: Exclude2;
	  buffs?: Buffs5;
	  items?: Items7;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations2 {
	  [k: string]: {
	    element?: {
	      value1?: number;
	      value0?: string;
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	    };
	    order?: number;
	  };
	}
	export interface Buffs5 {
	  buffs: Buffs6;
	  require_all: RequireAll6;
	  stacks?: Stacks3;
	}
	export interface Buffs6 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks3 {
	  value1?: Quantity9;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Items7 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface NumberSummoned {
	  value1?: Quantity10;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Actions {
	  [k: string]: {
	    element?: Action;
	    order?: number;
	  };
	}
	/**
	 * The new entity will spawn a random range away from the chosen location, up to this number of grid spaces.
	 */
	export interface SpawnDistance {
	  value1?: Max2;
	  value0?: Min2;
	}
	export interface DamageProfile1 {
	  buff_damage_source?: BuffDamageSource;
	  damage_types: DamageTypes1;
	  can_crit?: CanCrit;
	  modifiers?: Modifiers1;
	}
	/**
	 * If set, you can pull damage from the damage pool of a buff, and use that amount to calculate this ability's damage outcome.
	 */
	export interface BuffDamageSource {
	  buff_id?: Buff1;
	  consume?: ConsumeDamage;
	  amount?: Amount;
	  own_only?: OwnOnly;
	  buff_target?: BuffTarget;
	}
	/**
	 * What kind of damage to deal, and what percent of the 'normal' amount to deal. The actual damage dealt will be calculated based on factors such as the level of the user (or item used), cast times, and stats of the attacker.
	 */
	export interface DamageTypes1 {
	  [k: string]: {
	    element?: {
	      key?: DamageType1;
	      value?: DamageAmount1;
	    };
	    order?: number;
	  };
	}
	/**
	 * Whether to deal extra or reduced damage to certain things, or certain kinds of things.
	 */
	export interface Modifiers1 {
	  [k: string]: {
	    element?: {
	      key?: Filter4;
	      value?: Modifier1;
	    };
	    order?: number;
	  };
	}
	/**
	 * How much this damage is boosted or suppressed by points spent in Insights.
	 */
	export interface InsightDamageModifiers {
	  [k: string]: {
	    element?: {
	      badge_id: Insight4;
	      value: ChangePerPoint3;
	      tooltip_text?: InsightTooltipText;
	    };
	    order?: number;
	  };
	}
	/**
	 * Explain how the insight changes the damage of this ability. This text will appear on the Insight's tooltip page.
	 */
	export interface InsightTooltipText {
	  text: EnglishText9;
	  description?: TranslatorHelperText7;
	}
	/**
	 * Deal more or less damage, depending on data fields.
	 */
	export interface DatafieldMultipliers {
	  [k: string]: {
	    element?: {
	      datafield_owner?: DatafieldOwner;
	      datafield_id?: DataField;
	    };
	    order?: number;
	  };
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface TargetFilters {
	  [k: string]: {
	    element?: Filter5;
	    order?: number;
	  };
	}
	export interface Filter5 {
	  combatants_only?: Combatants3;
	  datafield_evaluations?: DatafieldEvaluations3;
	  require_all_tags?: RequireAllTags3;
	  exclude?: Exclude3;
	  buffs?: Buffs7;
	  items?: Items8;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations3 {
	  [k: string]: {
	    element?: {
	      value1?: number;
	      value0?: string;
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	    };
	    order?: number;
	  };
	}
	export interface Buffs7 {
	  buffs: Buffs8;
	  require_all: RequireAll7;
	  stacks?: Stacks5;
	}
	export interface Buffs8 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks5 {
	  value1?: Quantity11;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Items8 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface LootItems {
	  [k: string]: {
	    element?: {
	      probability?: Chance;
	      quantity?: Quantity12;
	      item?: Item4;
	    };
	    order?: number;
	  };
	}
	export interface Quantity12 {
	  value1?: Max3;
	  value0?: Min3;
	}
	export interface Color1 {
	  g?: Green4;
	  r?: Red4;
	  b?: Blue4;
	}
	export interface DecalDurationSeconds {
	  value1?: Max4;
	  value0?: Min4;
	}
	/**
	 * The decal will choose a random scale between these numbers.
	 */
	export interface DecalScale {
	  value1?: Max5;
	  value0?: Min5;
	}
	export interface BaseColor {
	  g?: Green5;
	  r?: Red5;
	  b?: Blue5;
	}
	/**
	 * Set this to spawn the explosion a random distance away.
	 */
	export interface RandomDistanceGridSpaces {
	  value1?: Max6;
	  value0?: Min6;
	}
	export interface HighlightColor {
	  g?: Green6;
	  r?: Red6;
	  b?: Blue6;
	}
	export interface ExplosionScale {
	  value1?: Max7;
	  value0?: Min7;
	}
	/**
	 * Set this to spawn the explosion a random delay.
	 */
	export interface RandomDelaySeconds {
	  value1?: Max8;
	  value0?: Min8;
	}
	export interface Particle {
	  shrinking?: Shrinking;
	  orientation_increase?: OrientationChangeSec;
	  sprite?: Sprite;
	  shape?: Shape;
	  p_direction_increase?: DirectionChangeDegreesSec;
	  wip?: WIP;
	  life?: LifeSeconds;
	  size_increase?: SizeChangePerSecond;
	  orientation_relative?: OrientationRelative;
	  p_direction?: Direction;
	  alpha?: Alpha;
	  parent?: Parent;
	  y_scale?: YScale;
	  orientation?: Orientation;
	  size?: Size;
	  p_gravity?: Gravity;
	  acceleration?: Acceleration;
	  x_scale?: XScale;
	  size_wiggle?: SizeWiggle;
	  name?: ParticleNameInternal;
	  orientation_wiggle?: OrientationWiggle;
	  colors?: Colors;
	  speed?: Speed2;
	  lighting_style?: Lighting;
	}
	/**
	 * The particles can change direction as they fly.
	 */
	export interface DirectionChangeDegreesSec {
	  value1?: Max9;
	  value0?: Min9;
	}
	export interface LifeSeconds {
	  value1?: Max10;
	  value0?: Min10;
	}
	/**
	 * The direction the particles should go at their defined speed.
	 */
	export interface Direction {
	  value1?: Max11;
	  value0?: Min11;
	}
	/**
	 * How the particles should change their alpha values over their lifetime.
	 */
	export interface Alpha {
	  [k: string]: {
	    element?: AlphaValue;
	    order?: number;
	  };
	}
	/**
	 * The rotations of the individual particles (in degrees)
	 */
	export interface Orientation {
	  value1?: Max12;
	  value0?: Min12;
	}
	export interface Size {
	  value1?: Max13;
	  value0?: Min13;
	}
	/**
	 * How the particles should cycle through colors over their lifetime.
	 */
	export interface Colors {
	  [k: string]: {
	    element?: Color2;
	    order?: number;
	  };
	}
	export interface Color2 {
	  g?: Green7;
	  r?: Red7;
	  b?: Blue7;
	}
	/**
	 * How fast (in pixels per second) the particles should blast out.
	 */
	export interface Speed2 {
	  value1?: Max14;
	  value0?: Min14;
	}
	export interface Bursts {
	  [k: string]: {
	    element?: Burst;
	    order?: number;
	  };
	}
	export interface Burst {
	  spawn_radius: SpawnRadiusPixels;
	  radius_as_grid?: SpawnRadiusAsGrid;
	  spawn_at_ground?: SpawnOnGround;
	  location: Source1;
	  direction?: BurstDirection;
	  num_particles: NumberOfParticles;
	  outward_blast: BlastOutward;
	  perspective: Perspective;
	  z_offset?: ZOffset1;
	  scaled_radius?: ScaledSpawnRadius;
	}
	/**
	 * How far from the source the particles will spawn.
	 */
	export interface SpawnRadiusPixels {
	  value1?: Max15;
	  value0?: Min15;
	}
	export interface BurstDirection {
	  value1?: Max16;
	  value0?: Min16;
	}
	export interface NumberOfParticles {
	  value1?: Max17;
	  value0?: Min17;
	}
	/**
	 * Describe this reaction, so it can be displayed in a tooltip. If a description is given, then the tooltip will also pull up any available information about this reaction's ability casts, buffs, damage, etc...
	 */
	export interface TooltipDescription {
	  text: EnglishText10;
	}
	export interface Triggers {
	  [k: string]: {
	    element?: Trigger;
	    order?: number;
	  };
	}
	/**
	 * If set, this trigger will only occur if one of these items were used to deal damage to me.
	 */
	export interface ItemsUsed {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * If set, this trigger will only occur if one of these abilities were used to deal damage to me.
	 */
	export interface AbilitiesUsed {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * If set, this trigger will only occur if one of these damage types is used to harm me.
	 */
	export interface DamageTypes2 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * If set, this trigger will only occur if the attacker is within this many grid spaces.
	 */
	export interface AttackerDistance {
	  value1?: Max18;
	  value0?: Min18;
	}
	/**
	 * My attacker must match one of these filters.
	 */
	export interface TargetFilter {
	  [k: string]: {
	    element?: Filter6;
	    order?: number;
	  };
	}
	export interface Filter6 {
	  combatants_only?: Combatants4;
	  datafield_evaluations?: DatafieldEvaluations4;
	  require_all_tags?: RequireAllTags4;
	  exclude?: Exclude4;
	  buffs?: Buffs9;
	  items?: Items9;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations4 {
	  [k: string]: {
	    element?: {
	      value1?: number;
	      value0?: string;
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	    };
	    order?: number;
	  };
	}
	export interface Buffs9 {
	  buffs: Buffs10;
	  require_all: RequireAll8;
	  stacks?: Stacks7;
	}
	export interface Buffs10 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks7 {
	  value1?: Quantity13;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Items9 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * The thing I killed must match one of these filters.
	 */
	export interface TargetFilter1 {
	  [k: string]: {
	    element?: Filter7;
	    order?: number;
	  };
	}
	export interface Filter7 {
	  combatants_only?: Combatants5;
	  datafield_evaluations?: DatafieldEvaluations5;
	  require_all_tags?: RequireAllTags5;
	  exclude?: Exclude5;
	  buffs?: Buffs11;
	  items?: Items10;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations5 {
	  [k: string]: {
	    element?: {
	      value1?: number;
	      value0?: string;
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	    };
	    order?: number;
	  };
	}
	export interface Buffs11 {
	  buffs: Buffs12;
	  require_all: RequireAll9;
	  stacks?: Stacks8;
	}
	export interface Buffs12 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks8 {
	  value1?: Quantity14;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Items10 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * How many seconds will pass between this trigger occurring.
	 */
	export interface Seconds {
	  value1?: Max19;
	  value0?: Min19;
	}
	/**
	 * The thing that killed me must match one of these filters.
	 */
	export interface MyKillerTargetFilter {
	  [k: string]: {
	    element?: Filter8;
	    order?: number;
	  };
	}
	export interface Filter8 {
	  combatants_only?: Combatants6;
	  datafield_evaluations?: DatafieldEvaluations6;
	  require_all_tags?: RequireAllTags6;
	  exclude?: Exclude6;
	  buffs?: Buffs13;
	  items?: Items11;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations6 {
	  [k: string]: {
	    element?: {
	      value1?: number;
	      value0?: string;
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	    };
	    order?: number;
	  };
	}
	export interface Buffs13 {
	  buffs: Buffs14;
	  require_all: RequireAll10;
	  stacks?: Stacks9;
	}
	export interface Buffs14 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks9 {
	  value1?: Quantity15;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Items11 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * If set, this trigger will only occur if one of these items were used to deal damage.
	 */
	export interface ItemsUsed1 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * If set, this trigger will only occur if one of these abilities were used to deal damage.
	 */
	export interface AbilitiesUsed1 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * If set, this trigger will only occur if one of these damage types is used.
	 */
	export interface DamageTypes3 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * If set, this trigger will only occur if the target is within this many grid spaces.
	 */
	export interface TargetDistance {
	  value1?: Max20;
	  value0?: Min20;
	}
	/**
	 * My attacker must match one of these filters.
	 */
	export interface TargetFilter2 {
	  [k: string]: {
	    element?: Filter9;
	    order?: number;
	  };
	}
	export interface Filter9 {
	  combatants_only?: Combatants7;
	  datafield_evaluations?: DatafieldEvaluations7;
	  require_all_tags?: RequireAllTags7;
	  exclude?: Exclude7;
	  buffs?: Buffs15;
	  items?: Items12;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations7 {
	  [k: string]: {
	    element?: {
	      value1?: number;
	      value0?: string;
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	    };
	    order?: number;
	  };
	}
	export interface Buffs15 {
	  buffs: Buffs16;
	  require_all: RequireAll11;
	  stacks?: Stacks10;
	}
	export interface Buffs16 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks10 {
	  value1?: Quantity16;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Items12 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * If set, this trigger will only occur if one of these items were used to cast an ability.
	 */
	export interface ItemsUsed2 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * This trigger will only occur when one of these abilities are cast.
	 */
	export interface Abilities1 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * This trigger will only be met if the ability has a target that matches this filter.
	 */
	export interface TargetFilter3 {
	  [k: string]: {
	    element?: Filter10;
	    order?: number;
	  };
	}
	export interface Filter10 {
	  combatants_only?: Combatants8;
	  datafield_evaluations?: DatafieldEvaluations8;
	  require_all_tags?: RequireAllTags8;
	  exclude?: Exclude8;
	  buffs?: Buffs17;
	  items?: Items13;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations8 {
	  [k: string]: {
	    element?: {
	      value1?: number;
	      value0?: string;
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	    };
	    order?: number;
	  };
	}
	export interface Buffs17 {
	  buffs: Buffs18;
	  require_all: RequireAll12;
	  stacks?: Stacks11;
	}
	export interface Buffs18 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks11 {
	  value1?: Quantity17;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Items13 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * This trigger will only occur if one of these buffs get applied to the target.
	 */
	export interface Buffs19 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * If applying a buff to another target, the target must match this filter. If receiving a buff from a target, that target must match this filter.
	 */
	export interface TargetFilter4 {
	  [k: string]: {
	    element?: Filter11;
	    order?: number;
	  };
	}
	export interface Filter11 {
	  combatants_only?: Combatants9;
	  datafield_evaluations?: DatafieldEvaluations9;
	  require_all_tags?: RequireAllTags9;
	  exclude?: Exclude9;
	  buffs?: Buffs20;
	  items?: Items14;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations9 {
	  [k: string]: {
	    element?: {
	      value1?: number;
	      value0?: string;
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	    };
	    order?: number;
	  };
	}
	export interface Buffs20 {
	  buffs: Buffs21;
	  require_all: RequireAll13;
	  stacks?: Stacks12;
	}
	export interface Buffs21 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks12 {
	  value1?: Quantity18;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Items14 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface Buffs22 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * The target of the buff must match this filter. If receiving a buff from a target, that target must match this filter.
	 */
	export interface TargetFilter5 {
	  [k: string]: {
	    element?: Filter12;
	    order?: number;
	  };
	}
	export interface Filter12 {
	  combatants_only?: Combatants10;
	  datafield_evaluations?: DatafieldEvaluations10;
	  require_all_tags?: RequireAllTags10;
	  exclude?: Exclude10;
	  buffs?: Buffs23;
	  items?: Items15;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations10 {
	  [k: string]: {
	    element?: {
	      value1?: number;
	      value0?: string;
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	    };
	    order?: number;
	  };
	}
	export interface Buffs23 {
	  buffs: Buffs24;
	  require_all: RequireAll14;
	  stacks?: Stacks13;
	}
	export interface Buffs24 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks13 {
	  value1?: Quantity19;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Items15 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface Buffs25 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * Passive stat boost from having this pet with you.
	 */
	export interface StatBoost {
	  modifier_style?: ModifierStyle;
	  amounts?: StatBoostAmount;
	  stat?: Stat1;
	}
	export interface StatBoostAmount {
	  value1?: Embiggened;
	  value0?: Baby;
	}
	/**
	 * You can activate (or deactivate) this synergy via specific masteries.
	 */
	export interface MasteryLink {
	  deactivates?: MasteryDeactivatesSynergy;
	  mastery_id?: Mastery1;
	}
	/**
	 * When viewing the progression tree, are there certain items you would consider to be prerequisites to this item?
	 */
	export interface ProgressionPriors {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * As shown in the pet interface.
	 */
	export interface AbilityDescription {
	  text: EnglishText11;
	}
	export interface Size1 {
	  height?: Height;
	  width?: Width;
	}
	/**
	 * As shown in the pet interface.
	 */
	export interface AbilityName {
	  text: EnglishText12;
	}
	export interface Name8 {
	  text: EnglishText13;
	  description?: TranslatorHelperText8;
	}
	export interface Motion {
	  moving?: MovementVisuals1;
	  stationary?: StationaryVisuals1;
	  movespeed?: MovementSpeed1;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave2 {
	  [k: string]: {
	    element?: SineWave2;
	    order?: number;
	  };
	}
	export interface SineWave2 {
	  amplitude?: Amplitude2;
	  speed?: Speed3;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements2 {
	  [k: string]: {
	    element?: FlapEvent2;
	    order?: number;
	  };
	}
	export interface FlapEvent2 {
	  distance?: VerticalDistance2;
	  impulse_seconds?: ImpulseDurationSeconds2;
	  recovery_seconds?: RecoveryDurationSeconds2;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave3 {
	  [k: string]: {
	    element?: SineWave3;
	    order?: number;
	  };
	}
	export interface SineWave3 {
	  amplitude?: Amplitude3;
	  speed?: Speed4;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements3 {
	  [k: string]: {
	    element?: FlapEvent3;
	    order?: number;
	  };
	}
	export interface FlapEvent3 {
	  distance?: VerticalDistance3;
	  impulse_seconds?: ImpulseDurationSeconds3;
	  recovery_seconds?: RecoveryDurationSeconds3;
	}
	export interface LightEmitter {
	  color: Color3;
	  alpha: Brightness;
	  grid_range: TileRadius;
	  datafield_evaluation?: DatafieldEvaluation;
	  sine_waves?: SineWaves;
	}
	/**
	 * Because lighting colors add together when blended, bear in mind that using partial RGB values (e.g. 100 instead of 255) will end up stacking if these lights are placed in proximity to one another. So two orange lights will create yellow in the intermediate space between them.
	 */
	export interface Color3 {
	  g?: Green8;
	  r?: Red8;
	  b?: Blue8;
	}
	/**
	 * Only display this light emitter if a data field on this object matches a criteria.
	 */
	export interface DatafieldEvaluation {
	  value1?: number;
	  value0?: string;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	/**
	 * You can add sine waves to make the light emitter flicker or fade in and out.
	 */
	export interface SineWaves {
	  [k: string]: {
	    element?: SineWave4;
	    order?: number;
	  };
	}
	/**
	 * This will produce a fluctuating number that will be added to its specified property.
	 */
	export interface SineWave4 {
	  amplitude: Amplitude4;
	  affects: Affects;
	  speed: Speed5;
	}
	export interface Resource1 {
	  hitbox: Hitbox;
	  babbler?: Babbler12;
	  shadow?: Shadow;
	  sprite: WorldSprite2;
	  respawnable?: Respawnable;
	  level: Level;
	  description?: Description4;
	  wip?: WIP;
	  effort_modifier?: EffortModifier1;
	  can_exist_on_floors?: CanExistOnFloors;
	  random_scaling: RandomScalingMinimum;
	  spawns?: Spawning;
	  using_lighting?: UseLighting1;
	  object: Object1;
	  water_layer?: WaterLayer;
	  priors?: ProgressionPriors;
	  uicon: UIIcon3;
	  reactions?: Reactions1;
	  states?: EntityStates;
	  level_viewer_ignore?: IgnoreInLevelViewer;
	  celebrate_pickup?: CelebratePickup;
	  material_tags: Materials;
	  requires_land?: RequiresLand;
	  relative_level?: RelativeLevel;
	  pickupable: Pickupable;
	  name: Name10;
	  grid_snapping?: GridSnapping;
	  data_fields?: DataFields;
	  respawn_multiplier?: RespawnTimeMultiplier;
	  worldmap_tile_color?: WorldMapTileColor;
	  editor_group?: EditorGroup2;
	  light_emitter?: LightEmitter;
	  scale_modifier?: ScaleModifier1;
	  underfoot: Underfoot;
	  collection_sound?: CollectionSound;
	}
	export interface Hitbox {
	  solid?: Solid;
	  size?: Size2;
	  mask?: Type;
	}
	export interface Size2 {
	  height?: Height1;
	  width?: Width1;
	}
	export interface Shadow {
	  scale?: ScaleModifier;
	  sprite?: Sprite1;
	}
	export interface Description4 {
	  text: EnglishText14;
	  description?: TranslatorHelperText9;
	}
	/**
	 * How this thing spawns in the world.
	 */
	export interface Spawning {
	  [k: string]: {
	    element?: {
	      chance?: Coverage;
	      tile?: string;
	    };
	    order?: number;
	  };
	}
	/**
	 * Define the animations and logic for how this entity enters and exits various states. These states can be interacted with via the Reactions system.
	 */
	export interface EntityStates {
	  states: StateDefinitions;
	  priorities?: StatePriorities;
	}
	/**
	 * The first state in this list will be the Default State.
	 */
	export interface StateDefinitions {
	  [k: string]: {
	    element?: State;
	    order?: number;
	  };
	}
	/**
	 * The first state in the list will be the starting state when this first spawns.
	 */
	export interface State {
	  animations?: Animations;
	  duration: Duration;
	  name: StateNameInternal;
	  next_state?: NextStates;
	}
	/**
	 * All of these animations will play. Unused tracks will have their animations cleared.
	 */
	export interface Animations {
	  [k: string]: {
	    element?: SpineAnimation;
	    order?: number;
	  };
	}
	export interface SpineAnimation {
	  looping: Looping;
	  track?: Track;
	  randomized_start?: RandomizedStart;
	  speed?: Speed6;
	  animation_name: Name9;
	}
	export interface Speed6 {
	  value1?: Max21;
	  value0?: Min21;
	}
	export interface TimeSeconds {
	  value1?: Max22;
	  value0?: Min22;
	}
	export interface NextStates {
	  [k: string]: {
	    element?: NextStatePriorityGroup;
	    order?: number;
	  };
	}
	export interface NextStatePriorityGroup {
	  states: States;
	  conditions?: PriorityGroupConditions;
	}
	/**
	 * One of these states will be chosen at random.
	 */
	export interface States {
	  [k: string]: {
	    element?: State1;
	    order?: number;
	  };
	}
	/**
	 * If these conditions are met, then one of the states in this priority group will be chosen.
	 */
	export interface PriorityGroupConditions {
	  conditions?: Conditions1;
	  require_all_conditions?: RequireAllConditions1;
	}
	export interface Conditions1 {
	  [k: string]: {
	    element?: Condition2;
	    order?: number;
	  };
	}
	/**
	 * Which abilities are we evaluating?
	 */
	export interface Abilities2 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface Evaluation2 {
	  value1?: number;
	  value0?: string;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	/**
	 * The 'minutes since timestamp' value can be modified up or down based on an Insight.
	 */
	export interface InsightModifier1 {
	  amount?: ChangePerPoint4;
	  insight?: Insight5;
	}
	/**
	 * If set, this description will appear on the Research Node to explain what it is unlocking.
	 */
	export interface InsightTooltip1 {
	  text: EnglishText15;
	  description?: TranslatorHelperText10;
	}
	export interface NumberOfTargets2 {
	  quantity?: Quantity20;
	  comparison?: Evaluation3;
	}
	export interface DistanceRequiredGridSpaces1 {
	  value1?: Max23;
	  value0?: Min23;
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface Targets1 {
	  [k: string]: {
	    element?: Filter13;
	    order?: number;
	  };
	}
	export interface Filter13 {
	  combatants_only?: Combatants11;
	  datafield_evaluations?: DatafieldEvaluations11;
	  require_all_tags?: RequireAllTags11;
	  exclude?: Exclude11;
	  buffs?: Buffs26;
	  items?: Items16;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations11 {
	  [k: string]: {
	    element?: {
	      value1?: number;
	      value0?: string;
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	    };
	    order?: number;
	  };
	}
	export interface Buffs26 {
	  buffs: Buffs27;
	  require_all: RequireAll15;
	  stacks?: Stacks14;
	}
	export interface Buffs27 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks14 {
	  value1?: Quantity21;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Items16 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface HealthEvaluation1 {
	  hp_percentage?: number;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Items17 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * The condition will be met if the player is wielding any of these items.
	 */
	export interface Items18 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * If set, then targets other than yourself will be evaluated.
	 */
	export interface NumberOfTargets3 {
	  value1?: Quantity22;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface BuffTargetFilter1 {
	  [k: string]: {
	    element?: Filter14;
	    order?: number;
	  };
	}
	export interface Filter14 {
	  combatants_only?: Combatants12;
	  datafield_evaluations?: DatafieldEvaluations12;
	  require_all_tags?: RequireAllTags12;
	  exclude?: Exclude12;
	  buffs?: Buffs28;
	  items?: Items19;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations12 {
	  [k: string]: {
	    element?: {
	      value1?: number;
	      value0?: string;
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	    };
	    order?: number;
	  };
	}
	export interface Buffs28 {
	  buffs: Buffs29;
	  require_all: RequireAll18;
	  stacks?: Stacks15;
	}
	export interface Buffs29 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks15 {
	  value1?: Quantity23;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Items19 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * How close or far (in grid spaces) the entities must be to be considered for this condition.
	 */
	export interface BuffTargetRange1 {
	  value1?: Max24;
	  value0?: Min24;
	}
	export interface Stacks16 {
	  value1?: Quantity24;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Buffs30 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface NumberSummoned1 {
	  value1?: Quantity25;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface SummonedEntitiesFilter1 {
	  [k: string]: {
	    element?: Filter15;
	    order?: number;
	  };
	}
	export interface Filter15 {
	  combatants_only?: Combatants13;
	  datafield_evaluations?: DatafieldEvaluations13;
	  require_all_tags?: RequireAllTags13;
	  exclude?: Exclude13;
	  buffs?: Buffs31;
	  items?: Items20;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations13 {
	  [k: string]: {
	    element?: {
	      value1?: number;
	      value0?: string;
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	    };
	    order?: number;
	  };
	}
	export interface Buffs31 {
	  buffs: Buffs32;
	  require_all: RequireAll19;
	  stacks?: Stacks17;
	}
	export interface Buffs32 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks17 {
	  value1?: Quantity26;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Items20 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * On first spawn and on state refresh, this priority list will be checked. The first priority group whose conditions are met will be chosen. If no conditions are met, the Default State will be used.
	 */
	export interface StatePriorities {
	  [k: string]: {
	    element?: StatePriorityGroup;
	    order?: number;
	  };
	}
	export interface StatePriorityGroup {
	  states: States1;
	  conditions?: PriorityGroupConditions1;
	  name: PriorityGroupNameInternal;
	}
	/**
	 * One of these states will be chosen at random.
	 */
	export interface States1 {
	  [k: string]: {
	    element?: State2;
	    order?: number;
	  };
	}
	/**
	 * If these conditions are met, then one of the states in this priority group will be chosen.
	 */
	export interface PriorityGroupConditions1 {
	  conditions?: Conditions2;
	  require_all_conditions?: RequireAllConditions2;
	}
	export interface Conditions2 {
	  [k: string]: {
	    element?: Condition3;
	    order?: number;
	  };
	}
	/**
	 * Which abilities are we evaluating?
	 */
	export interface Abilities3 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface Evaluation4 {
	  value1?: number;
	  value0?: string;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	/**
	 * The 'minutes since timestamp' value can be modified up or down based on an Insight.
	 */
	export interface InsightModifier2 {
	  amount?: ChangePerPoint5;
	  insight?: Insight7;
	}
	/**
	 * If set, this description will appear on the Research Node to explain what it is unlocking.
	 */
	export interface InsightTooltip2 {
	  text: EnglishText16;
	  description?: TranslatorHelperText11;
	}
	export interface NumberOfTargets4 {
	  quantity?: Quantity27;
	  comparison?: Evaluation5;
	}
	export interface DistanceRequiredGridSpaces2 {
	  value1?: Max25;
	  value0?: Min25;
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface Targets2 {
	  [k: string]: {
	    element?: Filter16;
	    order?: number;
	  };
	}
	export interface Filter16 {
	  combatants_only?: Combatants14;
	  datafield_evaluations?: DatafieldEvaluations14;
	  require_all_tags?: RequireAllTags14;
	  exclude?: Exclude14;
	  buffs?: Buffs33;
	  items?: Items21;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations14 {
	  [k: string]: {
	    element?: {
	      value1?: number;
	      value0?: string;
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	    };
	    order?: number;
	  };
	}
	export interface Buffs33 {
	  buffs: Buffs34;
	  require_all: RequireAll20;
	  stacks?: Stacks18;
	}
	export interface Buffs34 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks18 {
	  value1?: Quantity28;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Items21 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface HealthEvaluation2 {
	  hp_percentage?: number;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Items22 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * The condition will be met if the player is wielding any of these items.
	 */
	export interface Items23 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * If set, then targets other than yourself will be evaluated.
	 */
	export interface NumberOfTargets5 {
	  value1?: Quantity29;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface BuffTargetFilter2 {
	  [k: string]: {
	    element?: Filter17;
	    order?: number;
	  };
	}
	export interface Filter17 {
	  combatants_only?: Combatants15;
	  datafield_evaluations?: DatafieldEvaluations15;
	  require_all_tags?: RequireAllTags15;
	  exclude?: Exclude15;
	  buffs?: Buffs35;
	  items?: Items24;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations15 {
	  [k: string]: {
	    element?: {
	      value1?: number;
	      value0?: string;
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	    };
	    order?: number;
	  };
	}
	export interface Buffs35 {
	  buffs: Buffs36;
	  require_all: RequireAll23;
	  stacks?: Stacks19;
	}
	export interface Buffs36 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks19 {
	  value1?: Quantity30;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Items24 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * How close or far (in grid spaces) the entities must be to be considered for this condition.
	 */
	export interface BuffTargetRange2 {
	  value1?: Max26;
	  value0?: Min26;
	}
	export interface Stacks20 {
	  value1?: Quantity31;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Buffs37 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface SummonedEntitiesFilter2 {
	  [k: string]: {
	    element?: Filter18;
	    order?: number;
	  };
	}
	export interface Filter18 {
	  combatants_only?: Combatants16;
	  datafield_evaluations?: DatafieldEvaluations16;
	  require_all_tags?: RequireAllTags16;
	  exclude?: Exclude16;
	  buffs?: Buffs38;
	  items?: Items25;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations16 {
	  [k: string]: {
	    element?: {
	      value1?: number;
	      value0?: string;
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	    };
	    order?: number;
	  };
	}
	export interface Buffs38 {
	  buffs: Buffs39;
	  require_all: RequireAll24;
	  stacks?: Stacks21;
	}
	export interface Buffs39 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks21 {
	  value1?: Quantity32;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Items25 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface NumberSummoned2 {
	  value1?: Quantity33;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	/**
	 * What is this thing made of? This is used for categorization and can otherwise be used by abilities, fulfillments, etc... to broadly categorize interactions.
	 */
	export interface Materials {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface Name10 {
	  text: EnglishText17;
	  description?: TranslatorHelperText12;
	}
	/**
	 * Attaching data fields to this world element will make them readable by other game mechanics/elements. Can be used to store custom data on a world element.
	 */
	export interface DataFields {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * If set, this item will be drawn on the world map as a colored tile.
	 */
	export interface WorldMapTileColor {
	  g?: Green9;
	  r?: Red9;
	  b?: Blue9;
	}
	/**
	 * Sound effects to play when this thing takes damage.
	 */
	export interface InjurySounds {
	  [k: string]: {
	    element?: {
	      major_injury_sound?: Major;
	      minor_injury_sound?: Minor;
	      chance_of_playing?: Chance1;
	    };
	    order?: number;
	  };
	}
	export interface Loot {
	  [k: string]: {
	    element?: LootGroup;
	    order?: number;
	  };
	}
	/**
	 * A collection of items that share the same rules about how they drop.
	 */
	export interface LootGroup {
	  source_listed?: IncludeAsSource;
	  time_requirement?: TimeOfDay;
	  datafield_evaluations?: DatafieldEvaluations17;
	  item_ids_used?: ItemsUsed3;
	  bonus_loot?: ConsiderAsBonus;
	  items_dropped: Items26;
	  datafield_link?: DatafieldQuantityLink;
	  num_drops?: DropQuantity;
	  drop_chance?: DropChance;
	  badge_requirement?: UnlockedBy1;
	  item_tags_used?: ItemTagsUsed;
	  ignore_in_progression_map?: IgnoreInProgressionMap;
	  trigger: Trigger1;
	  areas?: Areas;
	}
	/**
	 * This loot group can check for data fields on the entity, and only drop if the conditions are met.
	 */
	export interface DatafieldEvaluations17 {
	  [k: string]: {
	    element?: {
	      value1?: number;
	      value0?: string;
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	    };
	    order?: number;
	  };
	}
	/**
	 * Specific items required to be used on this for loot to drop.
	 */
	export interface ItemsUsed3 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface Items26 {
	  [k: string]: {
	    element?: {
	      weight?: number;
	      locked?: boolean;
	      item?: string;
	    };
	    order?: number;
	  };
	}
	/**
	 * A random number of items will drop in this range.
	 */
	export interface DropQuantity {
	  value1?: Max27;
	  value0?: Min27;
	}
	/**
	 * The kinds of items required to be used on this for loot to drop.
	 */
	export interface ItemTagsUsed {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * If set, the loot will only drop from something within the listed areas.
	 */
	export interface Areas {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * Sound effects to play when this thing is destroyed.
	 */
	export interface DestructionSounds {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * A collection of conditions that must be met for a buddy to be comfortable at home.
	 */
	export interface Comfort2 {
	  order: OrderIndex;
	  name: Name11;
	  artisan_id: Buddy3;
	  description: BackstoryDescription;
	  unlocked_description: UnlockedDescription;
	  unlocked_by?: UnlockedBy2;
	  wip?: WIP;
	  glads: Requirements3;
	  speed_bonus: InsightSpeedBonus;
	  uicon?: UIIcon4;
	}
	export interface Name11 {
	  text: EnglishText18;
	  description?: TranslatorHelperText13;
	}
	/**
	 * This text will display on the UI before you have unlocked this comfort.
	 */
	export interface BackstoryDescription {
	  text: EnglishText19;
	  description?: TranslatorHelperText14;
	}
	/**
	 * This text will display on the UI after you have unlocked this comfort.
	 */
	export interface UnlockedDescription {
	  text: EnglishText20;
	  description?: TranslatorHelperText15;
	}
	export interface Requirements3 {
	  [k: string]: {
	    element?: CheckMark1;
	    order?: number;
	  };
	}
	export interface CheckMark1 {
	  requirements?: CheckMarkConditions1;
	  description?: Name12;
	}
	export interface CheckMarkConditions1 {
	  [k: string]: {
	    element?: Condition4;
	    order?: number;
	  };
	}
	/**
	 * The number of spaces that are not occupied by structures (walls/doors/pillars).
	 */
	export interface InteriorTileArea1 {
	  value1?: number;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	/**
	 * Note that if you include an item tag and an item that also belongs to that tag, the item will be double-counted.
	 */
	export interface Items27 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface NumberOfRooms1 {
	  value1?: number;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	/**
	 * The evaluated number of source items must meet the tile distance requirement against the evaluated number of target items.
	 */
	export interface TileDistance1 {
	  value1?: number;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	/**
	 * The items used to check for relationships.
	 */
	export interface SourceItems1 {
	  value1?: number;
	  value0?: {
	    [k: string]: {
	      element?: string;
	      order?: number;
	    };
	  };
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	/**
	 * The items to check against the source items.
	 */
	export interface TargetItems1 {
	  value1?: number;
	  value0?: {
	    [k: string]: {
	      element?: string;
	      order?: number;
	    };
	  };
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	/**
	 * Describe these conditions in a short sentence. This will be next to a checkmark that will check once the requirements are complete.
	 */
	export interface Name12 {
	  text: EnglishText21;
	  description?: TranslatorHelperText16;
	}
	export interface BossGate {
	  hitbox: Hitbox;
	  name: Name13;
	  sprite: WorldSprite3;
	  door_open_sound?: DoorOpenSound;
	  door_close_sound?: DoorCloseSound;
	  description?: Description5;
	  wip?: WIP;
	  uicon: UIIcon5;
	}
	export interface Name13 {
	  text: EnglishText22;
	  description?: TranslatorHelperText17;
	}
	export interface Description5 {
	  text: EnglishText23;
	  description?: TranslatorHelperText18;
	}
	export interface Storyline {
	  wip?: WIP;
	  name: Name14;
	  icon?: Icon1;
	  description?: Description6;
	}
	export interface Name14 {
	  text: EnglishText24;
	  description?: TranslatorHelperText19;
	}
	/**
	 * If set, this description will appear at the top of the Storyline when it is being inspected.
	 */
	export interface Description6 {
	  text: EnglishText25;
	  description?: TranslatorHelperText20;
	}
	export interface Insight9 {
	  points_max: MaximumPoints;
	  name: InsightName;
	  artisan: Artisan2;
	  description: InsightDescription;
	  priors?: ProgressionPriors;
	  source?: UnlockedBy3;
	  wip?: WIP;
	  time_modifier?: TimeModifier;
	  recipe?: MaterialRequirements;
	  uicon: Icon2;
	}
	export interface InsightName {
	  text: EnglishText26;
	  description?: TranslatorHelperText21;
	}
	export interface InsightDescription {
	  text: EnglishText27;
	  description?: TranslatorHelperText22;
	}
	export interface MaterialRequirements {
	  components?: Ingredients1;
	  effort_modifier?: EffortModifier2;
	}
	export interface Ingredients1 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface Floor2 {
	  flippable: Flippable;
	  footstep_sound: FootstepSound;
	  sprite: MainSprite;
	  description?: Description7;
	  wip?: WIP;
	  placement_sound?: PlacementSound1;
	  undersprite?: UnderSprite;
	  map_color: MapColor;
	  name: Name15;
	  dapples?: SunlightDappling;
	  editor_group?: EditorGroup3;
	  recipe?: Recipe1;
	  uicon: Icon3;
	}
	export interface Description7 {
	  text: EnglishText28;
	  description?: TranslatorHelperText23;
	}
	/**
	 * The color to draw this tile on the map.
	 */
	export interface MapColor {
	  g?: Green10;
	  r?: Red10;
	  b?: Blue10;
	}
	export interface Name15 {
	  text: EnglishText29;
	  description?: TranslatorHelperText24;
	}
	export interface SunlightDappling {
	  dapple_colors?: Colors1;
	  dapple_chance?: SpawnChance;
	}
	/**
	 * The color to use for the sunlight dapples.
	 */
	export interface Colors1 {
	  [k: string]: {
	    element?: {
	      g?: Green11;
	      r?: Red11;
	      b?: Blue11;
	    };
	    order?: number;
	  };
	}
	export interface Recipe1 {
	  components: Ingredients2;
	  artisans?: ArtisansRequired1;
	  badge_cost_modifiers?: CostModifiedByResearch1;
	  output_quantity?: OutputQuantity1;
	  badge_output_modifiers?: OutputModifiedByResearch1;
	  source?: UnlockedBy4;
	  effort_modifier?: EffortModifier3;
	  station: Station1;
	}
	export interface Ingredients2 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface ArtisansRequired1 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface CostModifiedByResearch1 {
	  [k: string]: {
	    element?: {
	      badge_id?: ResearchNode2;
	      value?: ChangePerPoint6;
	    };
	    order?: number;
	  };
	}
	export interface OutputModifiedByResearch1 {
	  [k: string]: {
	    element?: {
	      style?: Style1;
	      badge_id?: ResearchNode3;
	      value?: ChangePerPoint7;
	    };
	    order?: number;
	  };
	}
	export interface Buff3 {
	  max_stacks: MaximumStacks;
	  positive: Positive;
	  description?: Description8;
	  prevents_negative_buffs?: PreventsNegativeBuffs;
	  looping_spine_visual?: LoopingSpineVisual;
	  wip?: WIP;
	  show_damage_instead_of_stacks?: ShowDamageInsteadOfStacks;
	  particle_emitters?: ParticleEmitters;
	  max_instances?: MaximumInstances;
	  stun?: Stun;
	  stats?: Stats;
	  color: Color4;
	  drop_color?: DropShadowColor;
	  swing_sound_overlay?: SwingSoundOverlay;
	  duration?: DurationSeconds;
	  uicon: UIIcon6;
	  reactions?: Reactions1;
	  custom_visuals_object?: CustomVFXObject;
	  expires_on_death: ExpiresUponDeath;
	  expiration_sound?: ExpirationSound;
	  show_description_only?: OnlyShowDescription;
	  boss_stun?: BossStun;
	  application_spine?: ApplicationSpineSprite;
	  effects?: Effects;
	  buff_type: Type1;
	  reapplication_sound?: ReapplicationSound;
	  name: Name16;
	  replace_oldest?: ReplaceOldest;
	  timer_behavior?: TimerRefreshBehavior;
	  application_sound?: ApplicationSound;
	}
	/**
	 * A description of this buff to show on item tooltips.
	 */
	export interface Description8 {
	  text: EnglishText30;
	  description?: TranslatorHelperText25;
	}
	/**
	 * This will render a looping spine animation attached to the buff target for the duration of the buff.
	 */
	export interface LoopingSpineVisual {
	  animation: LoopingAnimationName;
	  z_anchor?: VerticalPosition;
	  z_offset?: ZOffsetPixels;
	  sprite: SpineSprite;
	}
	export interface ParticleEmitters {
	  [k: string]: {
	    element?: {
	      scale?: EmitterScale1;
	      interval?: EmitIntervalSeconds;
	      local_particles?: Local;
	      num_particles?: NumberOfParticles1;
	      outward_blast?: BlastOutward1;
	      particle?: Particle;
	    };
	    order?: number;
	  };
	}
	/**
	 * How many particles to emit with each interval.
	 */
	export interface NumberOfParticles1 {
	  value1?: Max28;
	  value0?: Min28;
	}
	/**
	 * If set, this buff can modify the stats of the entity for the duration of its application.
	 */
	export interface Stats {
	  [k: string]: {
	    element?: StatBuff;
	    order?: number;
	  };
	}
	export interface StatBuff {
	  modifier_style: ModifierStyle1;
	  multiply_by_stacks: MultiplyByStacks;
	  amount: Amount1;
	  otherstat_boosts?: BoostedByOtherStats;
	  stat: Stat3;
	}
	/**
	 * You can choose other stats to boost the gains of this stat.
	 */
	export interface BoostedByOtherStats {
	  [k: string]: {
	    element?: {
	      modifier_style: ModifierStyle2;
	      multiply_by_stacks: MultiplyByStacks1;
	      stat_source?: StatSource;
	      stat: Stat2;
	    };
	    order?: number;
	  };
	}
	export interface Color4 {
	  g?: Green12;
	  r?: Red12;
	  b?: Blue12;
	}
	export interface DropShadowColor {
	  g?: Green13;
	  r?: Red13;
	  b?: Blue13;
	}
	export interface Effects {
	  [k: string]: {
	    element?: Effect;
	    order?: number;
	  };
	}
	export interface Bursts1 {
	  [k: string]: {
	    element?: Burst1;
	    order?: number;
	  };
	}
	export interface Burst1 {
	  spawn_radius: SpawnRadiusPixels1;
	  radius_as_grid?: SpawnRadiusAsGrid1;
	  spawn_at_ground?: SpawnOnGround1;
	  direction?: BurstDirection1;
	  num_particles: NumberOfParticles2;
	  perspective: Perspective1;
	  outward_blast: BlastOutward2;
	  z_offset?: ZOffset3;
	  scaled_radius?: ScaledSpawnRadius1;
	}
	/**
	 * How far from the source the particles will spawn.
	 */
	export interface SpawnRadiusPixels1 {
	  value1?: Max29;
	  value0?: Min29;
	}
	export interface BurstDirection1 {
	  value1?: Max30;
	  value0?: Min30;
	}
	export interface NumberOfParticles2 {
	  value1?: Max31;
	  value0?: Min31;
	}
	export interface Name16 {
	  text: EnglishText31;
	  description?: TranslatorHelperText26;
	}
	/**
	 * A unique equippable item that conveys a passive benefit.
	 */
	export interface Trinket {
	  reactions?: Reactions1;
	  level: Level1;
	  description: Description9;
	  level_viewer_ignore?: IgnoreInLevelViewer1;
	  wip?: WIP;
	  inventory_sound: InventorySound;
	  equipment_default_stats?: DefaultStats;
	  equipment_set?: EquipmentSet3;
	  name: Name17;
	  priors?: ProgressionPriors;
	  editor_group?: EditorGroup4;
	  recipe?: Recipe2;
	  uicon: UIIcon7;
	}
	export interface Description9 {
	  text: EnglishText32;
	  description?: TranslatorHelperText27;
	}
	/**
	 * You can allocate stats for this item to have on it by default when obtained. This will not affect already-obtained items.
	 */
	export interface DefaultStats {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface Name17 {
	  text: EnglishText33;
	  description?: TranslatorHelperText28;
	}
	export interface Recipe2 {
	  components: Ingredients3;
	  artisans?: ArtisansRequired2;
	  badge_cost_modifiers?: CostModifiedByResearch2;
	  source?: UnlockedBy5;
	  effort_modifier?: EffortModifier4;
	  station: Station2;
	}
	export interface Ingredients3 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface ArtisansRequired2 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface CostModifiedByResearch2 {
	  [k: string]: {
	    element?: {
	      badge_id?: ResearchNode4;
	      value?: ChangePerPoint8;
	    };
	    order?: number;
	  };
	}
	export interface Decor {
	  tags: Categories;
	  flippable?: Flippable1;
	  hitbox: Hitbox;
	  babbler?: Babbler13;
	  shadow?: Shadow;
	  sprite: WorldSprite4;
	  description: Description10;
	  wip?: WIP;
	  particle_emitters?: ParticleEmitters1;
	  using_lighting: UseLighting2;
	  object?: Object2;
	  priors?: ProgressionPriors;
	  recipe?: Recipe3;
	  requires_floor: RequiresFloor;
	  uicon: UIIcon8;
	  placement_sound: PlacementSound2;
	  name: Name18;
	  grid_snapping?: GridSnapping1;
	  editor_group?: EditorGroup5;
	  light_emitter?: LightEmitter;
	  underfoot?: Underfoot1;
	}
	export interface Categories {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface Description10 {
	  text: EnglishText34;
	  description?: TranslatorHelperText29;
	}
	export interface ParticleEmitters1 {
	  [k: string]: {
	    element?: ParticleEmitter;
	    order?: number;
	  };
	}
	export interface ParticleEmitter {
	  states?: RequiredStates;
	  emitter_scale?: EmitterScale2;
	  behind?: Behind;
	  spine_bone?: SpineBone;
	  x_offset: XOffset;
	  y_offset: YOffset2;
	  particle_system: ParticleSystem1;
	}
	/**
	 * If set, the particle system will only emit if the object is in one of these states
	 */
	export interface RequiredStates {
	  [k: string]: {
	    element?: State3;
	    order?: number;
	  };
	}
	export interface Recipe3 {
	  components: Ingredients4;
	  artisans?: ArtisansRequired3;
	  badge_cost_modifiers?: CostModifiedByResearch3;
	  output_quantity?: OutputQuantity2;
	  badge_output_modifiers?: OutputModifiedByResearch2;
	  source?: UnlockedBy6;
	  effort_modifier?: EffortModifier5;
	  station: Station3;
	}
	export interface Ingredients4 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface ArtisansRequired3 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface CostModifiedByResearch3 {
	  [k: string]: {
	    element?: {
	      badge_id?: ResearchNode5;
	      value?: ChangePerPoint9;
	    };
	    order?: number;
	  };
	}
	export interface OutputModifiedByResearch2 {
	  [k: string]: {
	    element?: {
	      style?: Style4;
	      badge_id?: ResearchNode6;
	      value?: ChangePerPoint10;
	    };
	    order?: number;
	  };
	}
	export interface Name18 {
	  text: EnglishText35;
	  description?: TranslatorHelperText30;
	}
	export interface Ability6 {
	  cooldown?: Cooldown;
	  buff_required?: BuffRequirement;
	  preview_sprite?: PreviewSprite;
	  action_groups?: ActionGroups;
	  cast_duration: CastDurationSeconds;
	  wip?: WIP;
	  effective_range?: EffectiveRange;
	  juke_charges_required?: JukeChargesRequired;
	  cast_animations?: CastingAnimations;
	  telegraph_scale_modifiers?: TelegraphScaleModifiers;
	  name: Name19;
	  targeting_range?: TargetingRangeInGridSpaces1;
	  start_cast_sound?: StartCastSound;
	  charges?: Charges1;
	  hotbar_number?: HotbarBuffNumber;
	  tooltip_description?: TooltipDescription1;
	  usable_in_combat?: UsableInCombat;
	  single_targeting?: SingleTargetingRules;
	  uicon?: UIIcon9;
	}
	export interface Cooldown {
	  trigger_percentage: CooldownTriggerPercentage;
	  cooldown_speed_modifier?: CooldownSpeedStatModifiers;
	  seconds: CooldownSeconds;
	}
	export interface CooldownSpeedStatModifiers {
	  [k: string]: {
	    element?: Modifier2;
	    order?: number;
	  };
	}
	export interface Modifier2 {
	  type?: ModifierType;
	  stat?: Stat4;
	}
	/**
	 * The caster must have this buff in order to cast this ability.
	 */
	export interface BuffRequirement {
	  stacks?: Stacks22;
	  buff?: Buff4;
	}
	export interface ActionGroups {
	  [k: string]: {
	    element?: ActionGroup;
	    order?: number;
	  };
	}
	export interface ActionGroup {
	  name?: NameInternal1;
	  targeting_range?: TargetingRangeInGridSpaces;
	  actions: Actions1;
	  unlocked_by?: UnlockedBy31;
	  target_filter?: ActionGroupTargetFilter;
	  targets_self: CastOnSelf;
	  telegraph?: Telegraph;
	}
	/**
	 * When targeting a location, how far (or close) this action group can target.
	 */
	export interface TargetingRangeInGridSpaces {
	  value1?: Max32;
	  value0?: Min32;
	}
	export interface Actions1 {
	  [k: string]: {
	    element?: Action1;
	    order?: number;
	  };
	}
	export interface ActionProbability {
	  chance: Chance2;
	}
	/**
	 * How much this damage is boosted or suppressed by points spent in Insights.
	 */
	export interface InsightModifiers {
	  [k: string]: {
	    element?: {
	      badge_id: Insight10;
	      value: ChangePerPoint11;
	      tooltip_text?: InsightTooltipText1;
	    };
	    order?: number;
	  };
	}
	/**
	 * Explain how the insight changes the damage of this ability. This text will appear on the Insight's tooltip page.
	 */
	export interface InsightTooltipText1 {
	  text: EnglishText36;
	  description?: TranslatorHelperText31;
	}
	export interface UnlockedBy7 {
	  prerequisite: UnlockedBy8;
	  unlock_text?: UnlockDescription;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription {
	  text: EnglishText37;
	  description?: TranslatorHelperText32;
	}
	/**
	 * Deal more or less damage, depending on data fields.
	 */
	export interface DatafieldMultipliers1 {
	  [k: string]: {
	    element?: {
	      datafield_owner?: DatafieldOwner2;
	      datafield_id?: DataField1;
	    };
	    order?: number;
	  };
	}
	export interface FollowupActions {
	  [k: string]: {
	    element?: FollowupAction;
	    order?: number;
	  };
	}
	/**
	 * A followup action will have the targets from the prior action passed into it. Those targets can be further constrained or narrowed down before enacting the followup actions.
	 */
	export interface FollowupAction {
	  target_limit?: FollowupTargetLimit;
	  target_constraint?: FollowupTargetConstraint;
	  target_filter?: TargetFilters1;
	  actions: Actions1;
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface TargetFilters1 {
	  [k: string]: {
	    element?: Filter19;
	    order?: number;
	  };
	}
	export interface Filter19 {
	  combatants_only?: Combatants17;
	  datafield_evaluations?: DatafieldEvaluations18;
	  require_all_tags?: RequireAllTags17;
	  exclude?: Exclude17;
	  buffs?: Buffs40;
	  items?: Items28;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations18 {
	  [k: string]: {
	    element?: {
	      value1?: number;
	      value0?: string;
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	    };
	    order?: number;
	  };
	}
	export interface Buffs40 {
	  buffs: Buffs41;
	  require_all: RequireAll25;
	  stacks?: Stacks23;
	}
	export interface Buffs41 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks23 {
	  value1?: Quantity34;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Items28 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface TargetFilters2 {
	  [k: string]: {
	    element?: Filter20;
	    order?: number;
	  };
	}
	export interface Filter20 {
	  combatants_only?: Combatants18;
	  datafield_evaluations?: DatafieldEvaluations19;
	  require_all_tags?: RequireAllTags18;
	  exclude?: Exclude18;
	  buffs?: Buffs42;
	  items?: Items29;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations19 {
	  [k: string]: {
	    element?: {
	      value1?: number;
	      value0?: string;
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	    };
	    order?: number;
	  };
	}
	export interface Buffs42 {
	  buffs: Buffs43;
	  require_all: RequireAll26;
	  stacks?: Stacks24;
	}
	export interface Buffs43 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks24 {
	  value1?: Quantity35;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Items29 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface ActionProbability1 {
	  chance: Chance3;
	}
	export interface UnlockedBy9 {
	  prerequisite: UnlockedBy10;
	  unlock_text?: UnlockDescription1;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription1 {
	  text: EnglishText38;
	  description?: TranslatorHelperText33;
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface TargetFilters3 {
	  [k: string]: {
	    element?: Filter21;
	    order?: number;
	  };
	}
	export interface Filter21 {
	  combatants_only?: Combatants19;
	  datafield_evaluations?: DatafieldEvaluations20;
	  require_all_tags?: RequireAllTags19;
	  exclude?: Exclude19;
	  buffs?: Buffs44;
	  items?: Items30;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations20 {
	  [k: string]: {
	    element?: {
	      value1?: number;
	      value0?: string;
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	    };
	    order?: number;
	  };
	}
	export interface Buffs44 {
	  buffs: Buffs45;
	  require_all: RequireAll27;
	  stacks?: Stacks25;
	}
	export interface Buffs45 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks25 {
	  value1?: Quantity36;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Items30 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface ActionProbability2 {
	  chance: Chance4;
	}
	/**
	 * The distance this ability will attempt to move the target.
	 */
	export interface MovementDistanceGridSpaces {
	  value1?: Max33;
	  value0?: Min33;
	}
	export interface MoveSpeedStatModifiers {
	  [k: string]: {
	    element?: Modifier3;
	    order?: number;
	  };
	}
	export interface Modifier3 {
	  type?: ModifierType1;
	  stat?: Stat5;
	}
	/**
	 * One of these animations will be chosen to play during the movement.
	 */
	export interface MovementAnimations {
	  animations?: AnimationsList;
	}
	export interface AnimationsList {
	  [k: string]: {
	    element?: {
	      looping?: Looping1;
	      animation?: AnimationName;
	    };
	    order?: number;
	  };
	}
	export interface UnlockedBy11 {
	  prerequisite: UnlockedBy12;
	  unlock_text?: UnlockDescription2;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription2 {
	  text: EnglishText39;
	  description?: TranslatorHelperText34;
	}
	/**
	 * If a movement is successful, these sounds will play.
	 */
	export interface MovementSounds {
	  [k: string]: {
	    element?: {
	      chance?: ChanceOfPlaying;
	      sound?: Sound2;
	    };
	    order?: number;
	  };
	}
	export interface MoveDistanceStatModifiers {
	  [k: string]: {
	    element?: Modifier4;
	    order?: number;
	  };
	}
	export interface Modifier4 {
	  type?: ModifierType2;
	  stat?: Stat6;
	}
	export interface UnlockedBy13 {
	  prerequisite: UnlockedBy14;
	  unlock_text?: UnlockDescription3;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription3 {
	  text: EnglishText40;
	  description?: TranslatorHelperText35;
	}
	export interface ActionProbability3 {
	  chance: Chance5;
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface TargetFilters4 {
	  [k: string]: {
	    element?: Filter22;
	    order?: number;
	  };
	}
	export interface Filter22 {
	  combatants_only?: Combatants20;
	  datafield_evaluations?: DatafieldEvaluations21;
	  require_all_tags?: RequireAllTags20;
	  exclude?: Exclude20;
	  buffs?: Buffs46;
	  items?: Items31;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations21 {
	  [k: string]: {
	    element?: {
	      value1?: number;
	      value0?: string;
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	    };
	    order?: number;
	  };
	}
	export interface Buffs46 {
	  buffs: Buffs47;
	  require_all: RequireAll28;
	  stacks?: Stacks26;
	}
	export interface Buffs47 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks26 {
	  value1?: Quantity37;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Items31 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface UnlockedBy15 {
	  prerequisite: UnlockedBy16;
	  unlock_text?: UnlockDescription4;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription4 {
	  text: EnglishText41;
	  description?: TranslatorHelperText36;
	}
	export interface UnlockedBy17 {
	  prerequisite: UnlockedBy18;
	  unlock_text?: UnlockDescription5;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription5 {
	  text: EnglishText42;
	  description?: TranslatorHelperText37;
	}
	export interface Color5 {
	  g?: Green14;
	  r?: Red14;
	  b?: Blue14;
	}
	export interface DecalDurationSeconds1 {
	  value1?: Max34;
	  value0?: Min34;
	}
	/**
	 * The decal will choose a random scale between these numbers.
	 */
	export interface DecalScale1 {
	  value1?: Max35;
	  value0?: Min35;
	}
	export interface BaseColor1 {
	  g?: Green15;
	  r?: Red15;
	  b?: Blue15;
	}
	/**
	 * Set this to spawn the explosion a random distance away.
	 */
	export interface RandomDistanceGridSpaces1 {
	  value1?: Max36;
	  value0?: Min36;
	}
	export interface HighlightColor1 {
	  g?: Green16;
	  r?: Red16;
	  b?: Blue16;
	}
	export interface ExplosionScale1 {
	  value1?: Max37;
	  value0?: Min37;
	}
	/**
	 * Set this to spawn the explosion a random delay.
	 */
	export interface RandomDelaySeconds1 {
	  value1?: Max38;
	  value0?: Min38;
	}
	export interface Bursts2 {
	  [k: string]: {
	    element?: Burst2;
	    order?: number;
	  };
	}
	export interface Burst2 {
	  spawn_radius: SpawnRadiusPixels2;
	  radius_as_grid?: SpawnRadiusAsGrid2;
	  spawn_at_ground?: SpawnOnGround2;
	  location: Source3;
	  direction?: BurstDirection2;
	  num_particles: NumberOfParticles3;
	  outward_blast: BlastOutward3;
	  perspective: Perspective2;
	  z_offset?: ZOffset5;
	  scaled_radius?: ScaledSpawnRadius2;
	}
	/**
	 * How far from the source the particles will spawn.
	 */
	export interface SpawnRadiusPixels2 {
	  value1?: Max39;
	  value0?: Min39;
	}
	export interface BurstDirection2 {
	  value1?: Max40;
	  value0?: Min40;
	}
	export interface NumberOfParticles3 {
	  value1?: Max41;
	  value0?: Min41;
	}
	export interface ActionProbability4 {
	  chance: Chance6;
	}
	export interface ItemsToLose {
	  [k: string]: {
	    element?: {
	      quantity?: Quantity38;
	      item_id?: Item5;
	    };
	    order?: number;
	  };
	}
	export interface ActionProbability5 {
	  chance: Chance7;
	}
	export interface ItemsToGain {
	  [k: string]: {
	    element?: {
	      quantity?: Quantity39;
	      item_id?: Item6;
	    };
	    order?: number;
	  };
	}
	export interface Quantity39 {
	  value1?: Max42;
	  value0?: Min42;
	}
	export interface UnlockedBy19 {
	  prerequisite: UnlockedBy20;
	  unlock_text?: UnlockDescription6;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription6 {
	  text: EnglishText43;
	  description?: TranslatorHelperText38;
	}
	export interface UnlockedBy21 {
	  prerequisite: UnlockedBy22;
	  unlock_text?: UnlockDescription7;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription7 {
	  text: EnglishText44;
	  description?: TranslatorHelperText39;
	}
	/**
	 * If set, only targets that match this filter will be picked up.
	 */
	export interface PickupTargetFilter {
	  [k: string]: {
	    element?: Filter23;
	    order?: number;
	  };
	}
	export interface Filter23 {
	  combatants_only?: Combatants21;
	  datafield_evaluations?: DatafieldEvaluations22;
	  require_all_tags?: RequireAllTags21;
	  exclude?: Exclude21;
	  buffs?: Buffs48;
	  items?: Items32;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations22 {
	  [k: string]: {
	    element?: {
	      value1?: number;
	      value0?: string;
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	    };
	    order?: number;
	  };
	}
	export interface Buffs48 {
	  buffs: Buffs49;
	  require_all: RequireAll29;
	  stacks?: Stacks27;
	}
	export interface Buffs49 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks27 {
	  value1?: Quantity40;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Items32 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface ActionProbability6 {
	  chance: Chance8;
	}
	export interface UnlockedBy23 {
	  prerequisite: UnlockedBy24;
	  unlock_text?: UnlockDescription8;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription8 {
	  text: EnglishText45;
	  description?: TranslatorHelperText40;
	}
	export interface BuffsToApply {
	  [k: string]: {
	    element?: {
	      healing_percentage?: HealingPercentage2;
	      stacks?: Stacks28;
	      buff_target: BuffTarget1;
	      stacks_multiply_by_targets?: MultiplyStacksByTargets;
	      damage_modifier?: DamageModifier1;
	      buff: string;
	    };
	    order?: number;
	  };
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface TargetFilters5 {
	  [k: string]: {
	    element?: Filter24;
	    order?: number;
	  };
	}
	export interface Filter24 {
	  combatants_only?: Combatants22;
	  datafield_evaluations?: DatafieldEvaluations23;
	  require_all_tags?: RequireAllTags22;
	  exclude?: Exclude22;
	  buffs?: Buffs50;
	  items?: Items33;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations23 {
	  [k: string]: {
	    element?: {
	      value1?: number;
	      value0?: string;
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	    };
	    order?: number;
	  };
	}
	export interface Buffs50 {
	  buffs: Buffs51;
	  require_all: RequireAll30;
	  stacks?: Stacks29;
	}
	export interface Buffs51 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks29 {
	  value1?: Quantity41;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Items33 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface UnlockedBy25 {
	  prerequisite: UnlockedBy26;
	  unlock_text?: UnlockDescription9;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription9 {
	  text: EnglishText46;
	  description?: TranslatorHelperText41;
	}
	/**
	 * The new entity will spawn a random range away from the chosen location, up to this number of grid spaces.
	 */
	export interface SpawnDistance1 {
	  value1?: Max43;
	  value0?: Min43;
	}
	export interface UnlockedBy27 {
	  prerequisite: UnlockedBy28;
	  unlock_text?: UnlockDescription10;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription10 {
	  text: EnglishText47;
	  description?: TranslatorHelperText42;
	}
	/**
	 * This determines how long the projectile will take to reach its destination. Its vertical height and horizontal move speed will adjust to ensure it is airborne for this amount of time.
	 */
	export interface FlightTimeSeconds {
	  value1?: Max44;
	  value0?: Min44;
	}
	export interface ActionGroups1 {
	  [k: string]: {
	    element?: ActionGroup;
	    order?: number;
	  };
	}
	export interface LobMultipleProjectiles {
	  [k: string]: {
	    element?: ProjectileBatch;
	    order?: number;
	  };
	}
	export interface ProjectileBatch {
	  chance?: BatchChance;
	  direction_from_target?: DirectionFromTarget;
	  distance_from_target?: DistanceFromTargetGridSpaces;
	  quantity?: Quantity42;
	}
	export interface DirectionFromTarget {
	  value1?: Max45;
	  value0?: Min45;
	}
	export interface DistanceFromTargetGridSpaces {
	  value1?: Max46;
	  value0?: Min46;
	}
	/**
	 * How many projectiles to fire in this batch.
	 */
	export interface Quantity42 {
	  value1?: Max47;
	  value0?: Min47;
	}
	export interface FireMultipleProjectiles {
	  [k: string]: {
	    element?: ProjectileBatch1;
	    order?: number;
	  };
	}
	export interface ProjectileBatch1 {
	  chance?: BatchChance1;
	  direction?: DirectionOffset;
	  quantity?: Quantity43;
	}
	/**
	 * This will be added to the baseline aim direction.
	 */
	export interface DirectionOffset {
	  value1?: Max48;
	  value0?: Min48;
	}
	/**
	 * How many projectiles to fire in this batch.
	 */
	export interface Quantity43 {
	  value1?: Max49;
	  value0?: Min49;
	}
	export interface ZBehavior {
	  z_target?: ZTarget;
	  z_time?: ZTime;
	  z_style?: ZStyle;
	}
	export interface LifetimeSeconds {
	  value1?: Max50;
	  value0?: Min50;
	}
	export interface SpeedPixelsSec {
	  value1?: Max51;
	  value0?: Min51;
	}
	export interface ActionGroups2 {
	  [k: string]: {
	    element?: ActionGroup;
	    order?: number;
	  };
	}
	export interface ActionGroups3 {
	  [k: string]: {
	    element?: ActionGroup;
	    order?: number;
	  };
	}
	export interface ActionProbability7 {
	  chance: Chance9;
	}
	export interface UnlockedBy29 {
	  prerequisite: UnlockedBy30;
	  unlock_text?: UnlockDescription11;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription11 {
	  text: EnglishText48;
	  description?: TranslatorHelperText43;
	}
	export interface BuffsToRemove {
	  [k: string]: {
	    element?: Buff5;
	    order?: number;
	  };
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface TargetFilters6 {
	  [k: string]: {
	    element?: Filter25;
	    order?: number;
	  };
	}
	export interface Filter25 {
	  combatants_only?: Combatants23;
	  datafield_evaluations?: DatafieldEvaluations24;
	  require_all_tags?: RequireAllTags23;
	  exclude?: Exclude23;
	  buffs?: Buffs52;
	  items?: Items34;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations24 {
	  [k: string]: {
	    element?: {
	      value1?: number;
	      value0?: string;
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	    };
	    order?: number;
	  };
	}
	export interface Buffs52 {
	  buffs: Buffs53;
	  require_all: RequireAll31;
	  stacks?: Stacks31;
	}
	export interface Buffs53 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks31 {
	  value1?: Quantity44;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Items34 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface ActionProbability8 {
	  chance: Chance10;
	}
	export interface ActionGroups4 {
	  [k: string]: {
	    element?: ActionGroup;
	    order?: number;
	  };
	}
	/**
	 * One of these animations will be chosen to play during the movement.
	 */
	export interface MovementAnimations1 {
	  animations?: AnimationsList1;
	}
	export interface AnimationsList1 {
	  [k: string]: {
	    element?: {
	      looping?: Looping2;
	      animation?: AnimationName1;
	    };
	    order?: number;
	  };
	}
	export interface LeapLandingSounds {
	  [k: string]: {
	    element?: {
	      chance?: ChanceOfPlaying1;
	      sound?: Sound5;
	    };
	    order?: number;
	  };
	}
	export interface LeapStartSounds {
	  [k: string]: {
	    element?: {
	      chance?: ChanceOfPlaying2;
	      sound?: Sound6;
	    };
	    order?: number;
	  };
	}
	export interface UnlockedBy31 {
	  prerequisite: UnlockedBy32;
	  unlock_text?: UnlockDescription12;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription12 {
	  text: EnglishText49;
	  description?: TranslatorHelperText44;
	}
	/**
	 * If set, this action group will only be performed on targets that match the filter.
	 */
	export interface ActionGroupTargetFilter {
	  [k: string]: {
	    element?: Filter26;
	    order?: number;
	  };
	}
	export interface Filter26 {
	  combatants_only?: Combatants24;
	  datafield_evaluations?: DatafieldEvaluations25;
	  require_all_tags?: RequireAllTags24;
	  exclude?: Exclude24;
	  buffs?: Buffs54;
	  items?: Items35;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations25 {
	  [k: string]: {
	    element?: {
	      value1?: number;
	      value0?: string;
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	    };
	    order?: number;
	  };
	}
	export interface Buffs54 {
	  buffs: Buffs55;
	  require_all: RequireAll32;
	  stacks?: Stacks32;
	}
	export interface Buffs55 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks32 {
	  value1?: Quantity45;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Items35 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * A collection of shapes used for abilities, targeting, and interactions.
	 */
	export interface Telegraph {
	  animations?: TelegraphAnimations;
	  shape_collections: ShapeCollections;
	  targets_self: IncludeCasterAsViableTarget;
	  rotate_with_aim?: RotateWithAimDirection;
	}
	export interface TelegraphAnimations {
	  shake?: Shake;
	  scale?: Scale2;
	}
	export interface Shake {
	  times?: ShakeTime;
	  values?: ShakeAmount;
	}
	export interface ShakeTime {
	  value1?: End;
	  value0?: Start;
	}
	export interface ShakeAmount {
	  value1?: End1;
	  value0?: Start1;
	}
	export interface Scale2 {
	  times?: ScaleAnimationTime;
	  style?: Style5;
	  start_value?: ScaleStart;
	}
	export interface ScaleAnimationTime {
	  value1?: End2;
	  value0?: Start2;
	}
	export interface ShapeCollections {
	  [k: string]: {
	    element?: ShapeCollection;
	    order?: number;
	  };
	}
	export interface ShapeCollection {
	  scale?: ScaleModifier2;
	  name?: NameInternal2;
	  offset?: Offset1;
	  mirror?: Mirror;
	  unlocked_by?: UnlockedBy33;
	  shapes: Shapes;
	}
	export interface Offset1 {
	  x?: X;
	  y?: Y;
	}
	export interface Mirror {
	  x?: X1;
	  y?: Y1;
	}
	export interface UnlockedBy33 {
	  prerequisite: UnlockedBy34;
	  unlock_text?: UnlockDescription13;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription13 {
	  text: EnglishText50;
	  description?: TranslatorHelperText45;
	}
	export interface Shapes {
	  [k: string]: {
	    element?: Shape1;
	    order?: number;
	  };
	}
	/**
	 * In grid spaces.
	 */
	export interface Radius {
	  value1?: Outer;
	  value0?: Inner;
	}
	export interface Arc {
	  spread?: SpreadDegrees;
	  angle?: DirectionDegrees;
	}
	export interface Offset2 {
	  x?: X2;
	  y?: Y2;
	}
	/**
	 * You can optionally customize this shape's color in the editor, so it stands out from other shapes.
	 */
	export interface EditorColor {
	  g?: Green17;
	  r?: Red17;
	  b?: Blue17;
	}
	export interface Mirror1 {
	  x?: X3;
	  y?: Y3;
	}
	export interface UnlockedBy35 {
	  prerequisite: UnlockedBy36;
	  unlock_text?: UnlockDescription14;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription14 {
	  text: EnglishText51;
	  description?: TranslatorHelperText46;
	}
	export interface Offset3 {
	  x?: X4;
	  y?: Y4;
	}
	/**
	 * Relative to the collection's origin.
	 */
	export interface Points {
	  [k: string]: {
	    element?: {
	      x?: X5;
	      y?: Y5;
	    };
	    order?: number;
	  };
	}
	export interface Mirror2 {
	  x?: X6;
	  y?: Y6;
	}
	/**
	 * You can optionally customize this shape's color in the editor, so it stands out from other shapes.
	 */
	export interface EditorColor1 {
	  g?: Green18;
	  r?: Red18;
	  b?: Blue18;
	}
	export interface UnlockedBy37 {
	  prerequisite: UnlockedBy38;
	  unlock_text?: UnlockDescription15;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription15 {
	  text: EnglishText52;
	  description?: TranslatorHelperText47;
	}
	/**
	 * This is used for AI (such as creatures) to determine how close or far away to get to use the ability. It is relative to the minimum and maximum ranges established in the ability's targeting and telegraph information.
	 */
	export interface EffectiveRange {
	  value1?: Max52;
	  value0?: Min52;
	}
	export interface CastingAnimations {
	  animations?: AnimationsList2;
	  shake?: Shake1;
	}
	export interface AnimationsList2 {
	  [k: string]: {
	    element?: {
	      animation?: AnimationName2;
	    };
	    order?: number;
	  };
	}
	/**
	 * The caster can shake for some amount during a portion (or all) of the ability cast.
	 */
	export interface Shake1 {
	  times?: ShakeTime1;
	  values?: ShakeAmount1;
	}
	export interface ShakeTime1 {
	  value1?: End3;
	  value0?: Start3;
	}
	export interface ShakeAmount1 {
	  value1?: End4;
	  value0?: Start4;
	}
	/**
	 * If set, and this ability has telegraphs, the telegraphs can be grown or shrunk based on game conditions.
	 */
	export interface TelegraphScaleModifiers {
	  [k: string]: {
	    element?: {
	      conditions?: Conditions3;
	      require_all_conditions?: RequireAllConditions3;
	      multiplier?: Multiplier;
	    };
	    order?: number;
	  };
	}
	/**
	 * What must be true for this scale modifier to exist.
	 */
	export interface Conditions3 {
	  [k: string]: {
	    element?: Condition5;
	    order?: number;
	  };
	}
	/**
	 * If set, this description will appear on the Research Node to explain what it is unlocking.
	 */
	export interface InsightTooltip3 {
	  text: EnglishText53;
	  description?: TranslatorHelperText48;
	}
	/**
	 * When targeting a location, how far (or close) this ability can target.
	 */
	export interface TargetingRangeInGridSpaces1 {
	  value1?: Max53;
	  value0?: Min53;
	}
	/**
	 * An ability that uses Charges must have at least one charge available for the ability to be cast. Each cast consumes a charge.
	 */
	export interface Charges1 {
	  recharge_speed_modifier?: RechargeSpeedStatModifiers;
	  recharge_seconds: RechargeSeconds;
	  max_charges: MaxCharges;
	}
	export interface RechargeSpeedStatModifiers {
	  [k: string]: {
	    element?: Modifier5;
	    order?: number;
	  };
	}
	export interface Modifier5 {
	  type?: ModifierType3;
	  stat?: Stat7;
	}
	/**
	 * If set, this ability will show this number on the hotbar instead of charges or ammunition.
	 */
	export interface HotbarBuffNumber {
	  multiplier?: Multiplier1;
	  number_type?: Type2;
	  buff?: Buff6;
	}
	/**
	 * Describe what this ability does. This is useful for conveying information that the auto-generated tooltip can't provide.
	 */
	export interface TooltipDescription1 {
	  text: EnglishText54;
	}
	/**
	 * If set, this ability will only be castable if the caster has a specific target that meets these rules.
	 */
	export interface SingleTargetingRules {
	  filter?: SingleTargetFiltering;
	  range: RangeInGridSpaces;
	}
	/**
	 * The ability will only be castable on targets that match these filters.
	 */
	export interface SingleTargetFiltering {
	  [k: string]: {
	    element?: Filter27;
	    order?: number;
	  };
	}
	export interface Filter27 {
	  combatants_only?: Combatants25;
	  datafield_evaluations?: DatafieldEvaluations26;
	  require_all_tags?: RequireAllTags25;
	  exclude?: Exclude25;
	  buffs?: Buffs56;
	  items?: Items36;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations26 {
	  [k: string]: {
	    element?: {
	      value1?: number;
	      value0?: string;
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	    };
	    order?: number;
	  };
	}
	export interface Buffs56 {
	  buffs: Buffs57;
	  require_all: RequireAll33;
	  stacks?: Stacks33;
	}
	export interface Buffs57 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks33 {
	  value1?: Quantity46;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Items36 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * The target must meet these range requirements for the ability to be cast (and the actions to be performed.)
	 */
	export interface RangeInGridSpaces {
	  value1?: Max54;
	  value0?: Min54;
	}
	export interface Music1 {
	  wip?: WIP;
	  style: Style6;
	  name: Name20;
	}
	export interface Tracks {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * A dynamic fence that will automatically orient itself and display as posts or walls depending on its surroundings.
	 */
	export interface Fence {
	  sprite: WorldSprite5;
	  description?: Description11;
	  wip?: WIP;
	  requires_land?: RequiresLand1;
	  using_lighting: UseLighting3;
	  name: Name23;
	  height: HitboxHeight;
	  data_fields?: DataFields1;
	  worldmap_tile_color?: WorldMapTileColor1;
	  light_emitter?: LightEmitter;
	  recipe?: Recipe4;
	  uicon: UIIcon10;
	}
	export interface Description11 {
	  text: EnglishText55;
	  description?: TranslatorHelperText49;
	}
	export interface Name23 {
	  text: EnglishText56;
	  description?: TranslatorHelperText50;
	}
	/**
	 * Attaching data fields to this world element will make them readable by other game mechanics/elements. Can be used to store custom data on a world element.
	 */
	export interface DataFields1 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * If set, this item will be drawn on the world map as a colored tile.
	 */
	export interface WorldMapTileColor1 {
	  g?: Green19;
	  r?: Red19;
	  b?: Blue19;
	}
	export interface Recipe4 {
	  components: Ingredients5;
	  artisans?: ArtisansRequired4;
	  badge_cost_modifiers?: CostModifiedByResearch4;
	  output_quantity?: OutputQuantity3;
	  badge_output_modifiers?: OutputModifiedByResearch3;
	  source?: UnlockedBy39;
	  effort_modifier?: EffortModifier6;
	  station: Station4;
	}
	export interface Ingredients5 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface ArtisansRequired4 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface CostModifiedByResearch4 {
	  [k: string]: {
	    element?: {
	      badge_id?: ResearchNode7;
	      value?: ChangePerPoint12;
	    };
	    order?: number;
	  };
	}
	export interface OutputModifiedByResearch3 {
	  [k: string]: {
	    element?: {
	      style?: Style7;
	      badge_id?: ResearchNode8;
	      value?: ChangePerPoint13;
	    };
	    order?: number;
	  };
	}
	export interface Chat {
	  requirements?: Requirements4;
	  wip?: WIP;
	  name: NameInternal5;
	  moments: Moments;
	}
	/**
	 * Conditions that must be true for the quest to proceed.
	 */
	export interface Requirements4 {
	  [k: string]: {
	    element?: Requirement1;
	    order?: number;
	  };
	}
	export interface Moments {
	  [k: string]: {
	    element?: Moment;
	    order?: number;
	  };
	}
	export interface Moment {
	  [k: string]: {
	    element?: {
	      text?: Dialogue;
	      emoji?: Emoji1;
	      speaker: string;
	    };
	    order?: number;
	  };
	}
	export interface Dialogue {
	  text: EnglishText57;
	}
	/**
	 * A basic object that can be used for environmental storytelling.
	 */
	export interface EnvironmentalObject {
	  flippable: Flippable2;
	  hitbox: Hitbox;
	  babbler?: Babbler14;
	  shadow?: Shadow;
	  hide_under_roof?: HideUnderRoof;
	  sprite: WorldSprite6;
	  level?: Level2;
	  description?: Description12;
	  wip?: WIP;
	  particle_emitters?: ParticleEmitters2;
	  random_scaling?: RandomScalingMinimum1;
	  using_lighting: UseLighting4;
	  object?: Object3;
	  spine_idle?: SpineIdle;
	  randomized_subimages?: EditableSubimages;
	  uicon?: UIIcon11;
	  blocks_abilities?: BlocksAbilities;
	  reactions?: Reactions1;
	  states?: EntityStates1;
	  invisible?: Invisible;
	  requires_land?: RequiresLand2;
	  relative_level?: RelativeLevel1;
	  name: Name25;
	  data_fields?: DataFields2;
	  grid_snapping?: GridSnapping2;
	  death_sounds?: DestructionSounds1;
	  worldmap_tile_color?: WorldMapTileColor2;
	  editor_group?: EditorGroup6;
	  light_emitter?: LightEmitter;
	  scale_modifier?: ScaleModifier5;
	  underfoot: Underfoot2;
	}
	export interface Description12 {
	  text: EnglishText58;
	  description?: TranslatorHelperText51;
	}
	export interface ParticleEmitters2 {
	  [k: string]: {
	    element?: ParticleEmitter1;
	    order?: number;
	  };
	}
	export interface ParticleEmitter1 {
	  states?: RequiredStates1;
	  emitter_scale?: EmitterScale4;
	  behind?: Behind1;
	  spine_bone?: SpineBone1;
	  x_offset: XOffset1;
	  y_offset: YOffset5;
	  particle_system: ParticleSystem3;
	}
	/**
	 * If set, the particle system will only emit if the object is in one of these states
	 */
	export interface RequiredStates1 {
	  [k: string]: {
	    element?: State4;
	    order?: number;
	  };
	}
	/**
	 * Define the animations and logic for how this entity enters and exits various states. These states can be interacted with via the Reactions system.
	 */
	export interface EntityStates1 {
	  states: StateDefinitions1;
	  priorities?: StatePriorities1;
	}
	/**
	 * The first state in this list will be the Default State.
	 */
	export interface StateDefinitions1 {
	  [k: string]: {
	    element?: State5;
	    order?: number;
	  };
	}
	/**
	 * The first state in the list will be the starting state when this first spawns.
	 */
	export interface State5 {
	  animations?: Animations1;
	  duration: Duration1;
	  name: StateNameInternal1;
	  next_state?: NextStates1;
	}
	/**
	 * All of these animations will play. Unused tracks will have their animations cleared.
	 */
	export interface Animations1 {
	  [k: string]: {
	    element?: SpineAnimation1;
	    order?: number;
	  };
	}
	export interface SpineAnimation1 {
	  looping: Looping3;
	  track?: Track1;
	  randomized_start?: RandomizedStart1;
	  speed?: Speed8;
	  animation_name: Name24;
	}
	export interface Speed8 {
	  value1?: Max55;
	  value0?: Min55;
	}
	export interface TimeSeconds1 {
	  value1?: Max56;
	  value0?: Min56;
	}
	export interface NextStates1 {
	  [k: string]: {
	    element?: NextStatePriorityGroup1;
	    order?: number;
	  };
	}
	export interface NextStatePriorityGroup1 {
	  states: States2;
	  conditions?: PriorityGroupConditions2;
	}
	/**
	 * One of these states will be chosen at random.
	 */
	export interface States2 {
	  [k: string]: {
	    element?: State6;
	    order?: number;
	  };
	}
	/**
	 * If these conditions are met, then one of the states in this priority group will be chosen.
	 */
	export interface PriorityGroupConditions2 {
	  conditions?: Conditions4;
	  require_all_conditions?: RequireAllConditions4;
	}
	export interface Conditions4 {
	  [k: string]: {
	    element?: Condition6;
	    order?: number;
	  };
	}
	/**
	 * Which abilities are we evaluating?
	 */
	export interface Abilities4 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface Evaluation6 {
	  value1?: number;
	  value0?: string;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	/**
	 * The 'minutes since timestamp' value can be modified up or down based on an Insight.
	 */
	export interface InsightModifier3 {
	  amount?: ChangePerPoint14;
	  insight?: Insight12;
	}
	/**
	 * If set, this description will appear on the Research Node to explain what it is unlocking.
	 */
	export interface InsightTooltip4 {
	  text: EnglishText59;
	  description?: TranslatorHelperText52;
	}
	export interface NumberOfTargets6 {
	  quantity?: Quantity47;
	  comparison?: Evaluation7;
	}
	export interface DistanceRequiredGridSpaces3 {
	  value1?: Max57;
	  value0?: Min57;
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface Targets3 {
	  [k: string]: {
	    element?: Filter28;
	    order?: number;
	  };
	}
	export interface Filter28 {
	  combatants_only?: Combatants26;
	  datafield_evaluations?: DatafieldEvaluations27;
	  require_all_tags?: RequireAllTags26;
	  exclude?: Exclude26;
	  buffs?: Buffs58;
	  items?: Items37;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations27 {
	  [k: string]: {
	    element?: {
	      value1?: number;
	      value0?: string;
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	    };
	    order?: number;
	  };
	}
	export interface Buffs58 {
	  buffs: Buffs59;
	  require_all: RequireAll34;
	  stacks?: Stacks34;
	}
	export interface Buffs59 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks34 {
	  value1?: Quantity48;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Items37 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface HealthEvaluation3 {
	  hp_percentage?: number;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Items38 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * The condition will be met if the player is wielding any of these items.
	 */
	export interface Items39 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * If set, then targets other than yourself will be evaluated.
	 */
	export interface NumberOfTargets7 {
	  value1?: Quantity49;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface BuffTargetFilter3 {
	  [k: string]: {
	    element?: Filter29;
	    order?: number;
	  };
	}
	export interface Filter29 {
	  combatants_only?: Combatants27;
	  datafield_evaluations?: DatafieldEvaluations28;
	  require_all_tags?: RequireAllTags27;
	  exclude?: Exclude27;
	  buffs?: Buffs60;
	  items?: Items40;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations28 {
	  [k: string]: {
	    element?: {
	      value1?: number;
	      value0?: string;
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	    };
	    order?: number;
	  };
	}
	export interface Buffs60 {
	  buffs: Buffs61;
	  require_all: RequireAll37;
	  stacks?: Stacks35;
	}
	export interface Buffs61 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks35 {
	  value1?: Quantity50;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Items40 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * How close or far (in grid spaces) the entities must be to be considered for this condition.
	 */
	export interface BuffTargetRange3 {
	  value1?: Max58;
	  value0?: Min58;
	}
	export interface Stacks36 {
	  value1?: Quantity51;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Buffs62 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface NumberSummoned3 {
	  value1?: Quantity52;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface SummonedEntitiesFilter3 {
	  [k: string]: {
	    element?: Filter30;
	    order?: number;
	  };
	}
	export interface Filter30 {
	  combatants_only?: Combatants28;
	  datafield_evaluations?: DatafieldEvaluations29;
	  require_all_tags?: RequireAllTags28;
	  exclude?: Exclude28;
	  buffs?: Buffs63;
	  items?: Items41;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations29 {
	  [k: string]: {
	    element?: {
	      value1?: number;
	      value0?: string;
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	    };
	    order?: number;
	  };
	}
	export interface Buffs63 {
	  buffs: Buffs64;
	  require_all: RequireAll38;
	  stacks?: Stacks37;
	}
	export interface Buffs64 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks37 {
	  value1?: Quantity53;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Items41 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * On first spawn and on state refresh, this priority list will be checked. The first priority group whose conditions are met will be chosen. If no conditions are met, the Default State will be used.
	 */
	export interface StatePriorities1 {
	  [k: string]: {
	    element?: StatePriorityGroup1;
	    order?: number;
	  };
	}
	export interface StatePriorityGroup1 {
	  states: States3;
	  conditions?: PriorityGroupConditions3;
	  name: PriorityGroupNameInternal1;
	}
	/**
	 * One of these states will be chosen at random.
	 */
	export interface States3 {
	  [k: string]: {
	    element?: State7;
	    order?: number;
	  };
	}
	/**
	 * If these conditions are met, then one of the states in this priority group will be chosen.
	 */
	export interface PriorityGroupConditions3 {
	  conditions?: Conditions5;
	  require_all_conditions?: RequireAllConditions5;
	}
	export interface Conditions5 {
	  [k: string]: {
	    element?: Condition7;
	    order?: number;
	  };
	}
	/**
	 * Which abilities are we evaluating?
	 */
	export interface Abilities5 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface Evaluation8 {
	  value1?: number;
	  value0?: string;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	/**
	 * The 'minutes since timestamp' value can be modified up or down based on an Insight.
	 */
	export interface InsightModifier4 {
	  amount?: ChangePerPoint15;
	  insight?: Insight14;
	}
	/**
	 * If set, this description will appear on the Research Node to explain what it is unlocking.
	 */
	export interface InsightTooltip5 {
	  text: EnglishText60;
	  description?: TranslatorHelperText53;
	}
	export interface NumberOfTargets8 {
	  quantity?: Quantity54;
	  comparison?: Evaluation9;
	}
	export interface DistanceRequiredGridSpaces4 {
	  value1?: Max59;
	  value0?: Min59;
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface Targets4 {
	  [k: string]: {
	    element?: Filter31;
	    order?: number;
	  };
	}
	export interface Filter31 {
	  combatants_only?: Combatants29;
	  datafield_evaluations?: DatafieldEvaluations30;
	  require_all_tags?: RequireAllTags29;
	  exclude?: Exclude29;
	  buffs?: Buffs65;
	  items?: Items42;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations30 {
	  [k: string]: {
	    element?: {
	      value1?: number;
	      value0?: string;
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	    };
	    order?: number;
	  };
	}
	export interface Buffs65 {
	  buffs: Buffs66;
	  require_all: RequireAll39;
	  stacks?: Stacks38;
	}
	export interface Buffs66 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks38 {
	  value1?: Quantity55;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Items42 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface HealthEvaluation4 {
	  hp_percentage?: number;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Items43 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * The condition will be met if the player is wielding any of these items.
	 */
	export interface Items44 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * If set, then targets other than yourself will be evaluated.
	 */
	export interface NumberOfTargets9 {
	  value1?: Quantity56;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface BuffTargetFilter4 {
	  [k: string]: {
	    element?: Filter32;
	    order?: number;
	  };
	}
	export interface Filter32 {
	  combatants_only?: Combatants30;
	  datafield_evaluations?: DatafieldEvaluations31;
	  require_all_tags?: RequireAllTags30;
	  exclude?: Exclude30;
	  buffs?: Buffs67;
	  items?: Items45;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations31 {
	  [k: string]: {
	    element?: {
	      value1?: number;
	      value0?: string;
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	    };
	    order?: number;
	  };
	}
	export interface Buffs67 {
	  buffs: Buffs68;
	  require_all: RequireAll42;
	  stacks?: Stacks39;
	}
	export interface Buffs68 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks39 {
	  value1?: Quantity57;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Items45 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * How close or far (in grid spaces) the entities must be to be considered for this condition.
	 */
	export interface BuffTargetRange4 {
	  value1?: Max60;
	  value0?: Min60;
	}
	export interface Stacks40 {
	  value1?: Quantity58;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Buffs69 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface SummonedEntitiesFilter4 {
	  [k: string]: {
	    element?: Filter33;
	    order?: number;
	  };
	}
	export interface Filter33 {
	  combatants_only?: Combatants31;
	  datafield_evaluations?: DatafieldEvaluations32;
	  require_all_tags?: RequireAllTags31;
	  exclude?: Exclude31;
	  buffs?: Buffs70;
	  items?: Items46;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations32 {
	  [k: string]: {
	    element?: {
	      value1?: number;
	      value0?: string;
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	    };
	    order?: number;
	  };
	}
	export interface Buffs70 {
	  buffs: Buffs71;
	  require_all: RequireAll43;
	  stacks?: Stacks41;
	}
	export interface Buffs71 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks41 {
	  value1?: Quantity59;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Items46 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface NumberSummoned4 {
	  value1?: Quantity60;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Name25 {
	  text: EnglishText61;
	  description?: TranslatorHelperText54;
	}
	/**
	 * Attaching data fields to this world element will make them readable by other game mechanics/elements. Can be used to store custom data on a world element.
	 */
	export interface DataFields2 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * Sound effects to play when this thing is destroyed.
	 */
	export interface DestructionSounds1 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * If set, this item will be drawn on the world map as a colored tile.
	 */
	export interface WorldMapTileColor2 {
	  g?: Green20;
	  r?: Red20;
	  b?: Blue20;
	}
	/**
	 * A region of the world.
	 */
	export interface Area {
	  buildmode_allowed?: BuildModeAllowed;
	  play_ambience: PlayAmbience;
	  ambient_night?: AmbientNightTrack;
	  outdoor_music_day?: OutdoorMusicDay;
	  wip?: WIP;
	  indoor_music?: IndoorMusic;
	  name_color?: NameColor1;
	  discoverable?: Discoverable;
	  show_name: ShowNameUponEntering;
	  name: Name26;
	  ambient_day?: AmbientDayTrack;
	  color_grading?: ColorGradingProfile;
	  outdoor_music_night?: OutdoorMusicNight;
	  editor_group?: EditorGroup7;
	  parent?: ParentArea;
	}
	/**
	 * When the name is displayed, what color the text should be.
	 */
	export interface NameColor1 {
	  g?: Green21;
	  r?: Red21;
	  b?: Blue21;
	}
	export interface Name26 {
	  text: EnglishText62;
	  description?: TranslatorHelperText55;
	}
	/**
	 * A place in the world that gets layered on top of the world map.
	 */
	export interface Scene {
	  name: SceneName;
	  description?: DescriptionInternal;
	  color?: Color6;
	  wip?: WIP;
	  editor_group?: EditorGroup8;
	  phases: Phases;
	}
	export interface SceneName {
	  text: EnglishText63;
	}
	/**
	 * What color the scene will show as in the editor map.
	 */
	export interface Color6 {
	  g?: Green22;
	  r?: Red22;
	  b?: Blue22;
	}
	/**
	 * The phases will be prioritized in the order they appear in this list. Phases farther down the list have a higher priority.
	 */
	export interface Phases {
	  [k: string]: {
	    element?: Phase;
	    order?: number;
	  };
	}
	export interface Phase {
	  unlocked_by?: UnlockedBy40;
	  transition?: TransitionVisuals;
	  phase_id: UniqueID;
	  name?: PhaseNameInternal;
	}
	export interface FullscreenColor {
	  g?: Green23;
	  r?: Red23;
	  b?: Blue23;
	}
	/**
	 * If set, this text will be displayed during the 'Hold' portion of the transition.
	 */
	export interface TextOverlay {
	  text: EnglishText64;
	}
	export interface Effects1 {
	  [k: string]: {
	    element?: TransitionEffect;
	    order?: number;
	  };
	}
	export interface TransitionEffect {
	  chance?: Chance11;
	  effect: VisualEffect2;
	  play_on_entities: PlayOnEntities;
	  play_on_tiles: PlayOnTiles;
	  targets?: Targets5;
	}
	/**
	 * The decal will choose a random scale between these numbers.
	 */
	export interface DecalScale2 {
	  value1?: Max61;
	  value0?: Min61;
	}
	export interface DecalDurationSeconds2 {
	  value1?: Max62;
	  value0?: Min62;
	}
	export interface BaseColor2 {
	  g?: Green24;
	  r?: Red24;
	  b?: Blue24;
	}
	/**
	 * Set this to spawn the explosion a random distance away.
	 */
	export interface RandomDistanceGridSpaces2 {
	  value1?: Max63;
	  value0?: Min63;
	}
	export interface HighlightColor2 {
	  g?: Green25;
	  r?: Red25;
	  b?: Blue25;
	}
	export interface ExplosionScale2 {
	  value1?: Max64;
	  value0?: Min64;
	}
	/**
	 * Set this to spawn the explosion a random delay.
	 */
	export interface RandomDelaySeconds2 {
	  value1?: Max65;
	  value0?: Min65;
	}
	/**
	 * The entities to which the effect will be applied.
	 */
	export interface Targets5 {
	  [k: string]: {
	    element?: Filter34;
	    order?: number;
	  };
	}
	export interface Filter34 {
	  combatants_only?: Combatants32;
	  datafield_evaluations?: DatafieldEvaluations33;
	  require_all_tags?: RequireAllTags32;
	  exclude?: Exclude32;
	  buffs?: Buffs72;
	  items?: Items47;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations33 {
	  [k: string]: {
	    element?: {
	      value1?: number;
	      value0?: string;
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	    };
	    order?: number;
	  };
	}
	export interface Buffs72 {
	  buffs: Buffs73;
	  require_all: RequireAll44;
	  stacks?: Stacks42;
	}
	export interface Buffs73 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks42 {
	  value1?: Quantity61;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Items47 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface ResistanceProfile1 {
	  wip?: WIP;
	  name: Name27;
	  resistances: Resistances;
	}
	/**
	 * Any damage types not listed will have a resistance of zero -- so the entity will take full damage from that type.
	 */
	export interface Resistances {
	  [k: string]: {
	    element?: {
	      key?: DamageType2;
	      value?: Resistance;
	    };
	    order?: number;
	  };
	}
	export interface Juicebox {
	  name: Name28;
	  sprite: WorldSprite7;
	  size: Hitbox1;
	  follow_unlock?: FollowingUnlock;
	  dialogue_sounds: DialogueSounds;
	  color_bright: UIColor1;
	  wip?: WIP;
	  editor_group?: EditorGroup9;
	  uicon: UIIcon12;
	}
	export interface Name28 {
	  text: EnglishText65;
	  description?: TranslatorHelperText56;
	}
	export interface Hitbox1 {
	  height?: Height2;
	  width?: Width2;
	}
	/**
	 * Sounds for Juicebox to play (at random) during dialogue moments.
	 */
	export interface DialogueSounds {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * The color to use for Juicebox's UI.
	 */
	export interface UIColor1 {
	  g?: Green26;
	  r?: Red26;
	  b?: Blue26;
	}
	/**
	 * A simple item that is used for crafting.
	 */
	export interface Component {
	  whopper_bait?: WhopperBait;
	  sprite: WorldSprite8;
	  description?: Description13;
	  effort_modifier?: EffortModifier7;
	  wip?: WIP;
	  material_tags?: Materials1;
	  fishing?: Fishing;
	  bait_num_fish_boost?: BaitPower;
	  using_lighting: UseLighting5;
	  name: Name29;
	  priors?: ProgressionPriors;
	  editor_group?: EditorGroup10;
	  light_emitter?: LightEmitter;
	  recipe?: Recipe5;
	  uicon?: UIIcon13;
	  collection_sound?: CollectionSound1;
	}
	export interface Description13 {
	  text: EnglishText66;
	  description?: TranslatorHelperText57;
	}
	/**
	 * What is this thing made of? This is used for categorization and can otherwise be used by abilities, fulfillments, etc... to broadly categorize interactions.
	 */
	export interface Materials1 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * If set, this item can be obtained via fishing.
	 */
	export interface Fishing {
	  singleton: Singleton;
	  weight: Frequency;
	  unlocked_by?: UnlockedBy41;
	  sources: FishingSources;
	  whopper: Whopper;
	}
	export interface UnlockedBy41 {
	  prerequisite: UnlockedBy42;
	  unlock_text?: UnlockDescription16;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription16 {
	  text: EnglishText67;
	  description?: TranslatorHelperText58;
	}
	export interface FishingSources {
	  [k: string]: {
	    element?: {
	      exclusion?: Exclude33;
	      area_id?: Area1;
	    };
	    order?: number;
	  };
	}
	export interface Name29 {
	  text: EnglishText68;
	  description?: TranslatorHelperText59;
	}
	export interface Recipe5 {
	  components: Ingredients6;
	  artisans?: ArtisansRequired5;
	  badge_cost_modifiers?: CostModifiedByResearch5;
	  output_quantity?: OutputQuantity4;
	  badge_output_modifiers?: OutputModifiedByResearch4;
	  source?: UnlockedBy43;
	  effort_modifier?: EffortModifier8;
	  station: Station5;
	}
	export interface Ingredients6 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface ArtisansRequired5 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface CostModifiedByResearch5 {
	  [k: string]: {
	    element?: {
	      badge_id?: ResearchNode9;
	      value?: ChangePerPoint16;
	    };
	    order?: number;
	  };
	}
	export interface OutputModifiedByResearch4 {
	  [k: string]: {
	    element?: {
	      style?: Style8;
	      badge_id?: ResearchNode10;
	      value?: ChangePerPoint17;
	    };
	    order?: number;
	  };
	}
	export interface BuildingDoor {
	  sprite: WorldSprite9;
	  door_open_sound: DoorOpenSound1;
	  description: Description14;
	  wip?: WIP;
	  placement_sound: PlacementSound3;
	  door_close_distance?: CloseDistance;
	  name: Name30;
	  door_close_sound: DoorCloseSound1;
	  roof_vote: PreferredRoof1;
	  editor_group?: EditorGroup11;
	  recipe?: Recipe6;
	  uicon: UIIcon14;
	  closed_during_combat?: ClosedDuringCombat;
	}
	export interface Description14 {
	  text: EnglishText69;
	  description?: TranslatorHelperText60;
	}
	export interface Name30 {
	  text: EnglishText70;
	  description?: TranslatorHelperText61;
	}
	export interface Recipe6 {
	  components: Ingredients7;
	  artisans?: ArtisansRequired6;
	  badge_cost_modifiers?: CostModifiedByResearch6;
	  output_quantity?: OutputQuantity5;
	  badge_output_modifiers?: OutputModifiedByResearch5;
	  source?: UnlockedBy44;
	  effort_modifier?: EffortModifier9;
	  station: Station6;
	}
	export interface Ingredients7 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface ArtisansRequired6 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface CostModifiedByResearch6 {
	  [k: string]: {
	    element?: {
	      badge_id?: ResearchNode11;
	      value?: ChangePerPoint18;
	    };
	    order?: number;
	  };
	}
	export interface OutputModifiedByResearch5 {
	  [k: string]: {
	    element?: {
	      style?: Style9;
	      badge_id?: ResearchNode12;
	      value?: ChangePerPoint19;
	    };
	    order?: number;
	  };
	}
	export interface BuildingRoof {
	  fill: VerticalFiller;
	  peak: CenterPeak;
	  slope_back: BackSlope;
	  slope_front: FrontSlope;
	  name: Name31;
	  slope_back_edge: BackEdge;
	  slope_front_edge: FrontEdge;
	  wip?: WIP;
	}
	export interface Name31 {
	  text: EnglishText71;
	  description?: TranslatorHelperText62;
	}
	/**
	 * The visual information for how to display a type of character in the game world.
	 */
	export interface CharacterSpecies {
	  name_color: NameColor2;
	  name: Name32;
	  sprite: WorldSprite10;
	  size: Hitbox2;
	  wip?: WIP;
	  uicon: UIIcon15;
	}
	/**
	 * For when this name is displayed in a dialogue window.
	 */
	export interface NameColor2 {
	  g?: Green27;
	  r?: Red27;
	  b?: Blue27;
	}
	export interface Name32 {
	  text: EnglishText72;
	  description?: TranslatorHelperText63;
	}
	export interface Hitbox2 {
	  height?: Height3;
	  width?: Width3;
	}
	/**
	 * Visuals to convey character emotions.
	 */
	export interface Emoji2 {
	  wip?: WIP;
	  name: NameInternal6;
	  sprite: Sprite2;
	  sound?: Sound8;
	}
	/**
	 * A piece of information that a world element can have stored on it.
	 */
	export interface Datafield4 {
	  editable?: Editable;
	  editor_uid_pool?: EditorUIDPool;
	  respawn_values?: RespawnValues;
	  saves_to_world: SaveToBaseWorld;
	  buffer_type: DataType;
	  description: Description15;
	  wip?: WIP;
	  editor_range?: EditorRange;
	  starting_values: FirstSpawnValues;
	  name: Name33;
	  saves_to_inventory: SaveToInventory;
	  saves_to_entity_changes: SaveToGameplay;
	  uicon?: UIIcon16;
	}
	/**
	 * If this element is destroyed and then respawns, you can optionally have this data field reset to different values.
	 */
	export interface RespawnValues {
	  [k: string]: {
	    element?: {
	      weight?: number;
	      locked?: boolean;
	      item?: number;
	    };
	    order?: number;
	  };
	}
	/**
	 * The range of values that this data field can be set to via the Editor.
	 */
	export interface EditorRange {
	  value1?: Max66;
	  value0?: Min66;
	}
	/**
	 * These values are randomly chosen when the world element is spawned.
	 */
	export interface FirstSpawnValues {
	  [k: string]: {
	    element?: {
	      weight?: number;
	      locked?: boolean;
	      item?: number;
	    };
	    order?: number;
	  };
	}
	/**
	 * A thing that can hold stuff.
	 */
	export interface Chest {
	  hitbox: Hitbox;
	  babbler?: Babbler15;
	  shadow?: Shadow;
	  sprite: WorldSprite11;
	  wip?: WIP;
	  requires_land?: RequiresLand3;
	  random_scaling?: RandomScalingMinimum2;
	  using_lighting?: UseLighting6;
	  object?: Object4;
	  name: Name34;
	  data_fields?: DataFields3;
	  death_sounds?: DestructionSounds2;
	  editor_group?: EditorGroup12;
	  light_emitter?: LightEmitter;
	  uicon: UIIcon17;
	}
	export interface Name34 {
	  text: EnglishText73;
	  description?: TranslatorHelperText64;
	}
	/**
	 * Attaching data fields to this world element will make them readable by other game mechanics/elements. Can be used to store custom data on a world element.
	 */
	export interface DataFields3 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * Sound effects to play when this thing is destroyed.
	 */
	export interface DestructionSounds2 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * A pickupable item that is used for important story moments.
	 */
	export interface KeyItem {
	  babbler?: Babbler16;
	  sprite: WorldSprite12;
	  size: Size3;
	  level_viewer_ignore?: IgnoreInLevelViewer2;
	  wip?: WIP;
	  requires_land?: RequiresLand4;
	  can_exist_on_floors?: CanExistOnFloors1;
	  using_lighting?: UseLighting7;
	  name: Name35;
	  spine_idle?: SpineIdle1;
	  grid_snapping?: GridSnapping3;
	  priors?: ProgressionPriors;
	  editor_group?: EditorGroup13;
	  light_emitter?: LightEmitter;
	  scale_modifier?: ScaleModifier6;
	  uicon: UIIcon18;
	  collection_sound?: CollectionSound2;
	}
	export interface Size3 {
	  height?: Height4;
	  width?: Width4;
	}
	export interface Name35 {
	  text: EnglishText74;
	  description?: TranslatorHelperText65;
	}
	export interface PetNest {
	  sprite: WorldSprite13;
	  size: Size4;
	  description?: Description16;
	  wip?: WIP;
	  using_lighting: UseLighting8;
	  name: Name36;
	  priors?: ProgressionPriors;
	  editor_group?: EditorGroup14;
	  light_emitter?: LightEmitter;
	  recipe?: Recipe7;
	  uicon: UIIcon19;
	}
	export interface Size4 {
	  height?: Height5;
	  width?: Width5;
	}
	export interface Description16 {
	  text: EnglishText75;
	  description?: TranslatorHelperText66;
	}
	export interface Name36 {
	  text: EnglishText76;
	  description?: TranslatorHelperText67;
	}
	export interface Recipe7 {
	  components: Ingredients8;
	  artisans?: ArtisansRequired7;
	  badge_cost_modifiers?: CostModifiedByResearch7;
	  output_quantity?: OutputQuantity6;
	  badge_output_modifiers?: OutputModifiedByResearch6;
	  source?: UnlockedBy45;
	  effort_modifier?: EffortModifier10;
	  station: Station7;
	}
	export interface Ingredients8 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface ArtisansRequired7 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface CostModifiedByResearch7 {
	  [k: string]: {
	    element?: {
	      badge_id?: ResearchNode13;
	      value?: ChangePerPoint20;
	    };
	    order?: number;
	  };
	}
	export interface OutputModifiedByResearch6 {
	  [k: string]: {
	    element?: {
	      style?: Style10;
	      badge_id?: ResearchNode14;
	      value?: ChangePerPoint21;
	    };
	    order?: number;
	  };
	}
	export interface DamageType3 {
	  boosts?: Boosts;
	  aggregator: Aggregator;
	  name: Name37;
	  color?: Color7;
	  wip?: WIP;
	  parent?: ParentDamageType;
	  resistance_stat?: ResistanceStat;
	}
	/**
	 * Stats that can boost this damage.
	 */
	export interface Boosts {
	  [k: string]: {
	    element?: {
	      modifier_style: BoostStyle;
	      direct_only?: DirectDamage2;
	      stat: BoostingStat;
	    };
	    order?: number;
	  };
	}
	export interface Name37 {
	  text: EnglishText77;
	  description?: TranslatorHelperText68;
	}
	/**
	 * When you deal this kind of damage, what color its damage popout numbers are.
	 */
	export interface Color7 {
	  g?: Green28;
	  r?: Red28;
	  b?: Blue28;
	}
	/**
	 * Things that this world element cannot be harmed by.
	 */
	export interface Immunities {
	  stun?: Stun1;
	  buffs?: Buffs74;
	}
	/**
	 * Harmful buffs or types of buffs that cannot be applied to this creature.
	 */
	export interface Buffs74 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * Conditions that must be true for the quest to proceed.
	 */
	export interface MomentRequirements2 {
	  [k: string]: {
	    element?: Requirement;
	    order?: number;
	  };
	}
	/**
	 * Items that can be dropped into the world to mark quest locations and trigger quest events.
	 */
	export interface QuestMarker {
	  wip?: WIP;
	  editor_group?: EditorGroup15;
	  name: Name38;
	}
	/**
	 * A piece of protective equipment worn by the player.
	 */
	export interface Armor {
	  reactions?: Reactions1;
	  level: Level3;
	  description: Description17;
	  wip?: WIP;
	  inventory_sound: InventorySound1;
	  equipment_default_stats?: DefaultStats1;
	  equipment_set?: EquipmentSet6;
	  name: Name39;
	  type: ArmorType;
	  priors?: ProgressionPriors;
	  spine_name: SpineKeyword;
	  editor_group?: EditorGroup16;
	  recipe?: Recipe8;
	  uicon: UIIcon20;
	}
	export interface Description17 {
	  text: EnglishText78;
	  description?: TranslatorHelperText69;
	}
	/**
	 * You can allocate stats for this item to have on it by default when obtained. This will not affect already-obtained items.
	 */
	export interface DefaultStats1 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface Name39 {
	  text: EnglishText79;
	  description?: TranslatorHelperText70;
	}
	export interface Recipe8 {
	  components: Ingredients9;
	  artisans?: ArtisansRequired8;
	  badge_cost_modifiers?: CostModifiedByResearch8;
	  source?: UnlockedBy46;
	  effort_modifier?: EffortModifier11;
	  station: Station8;
	}
	export interface Ingredients9 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface ArtisansRequired8 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface CostModifiedByResearch8 {
	  [k: string]: {
	    element?: {
	      badge_id?: ResearchNode15;
	      value?: ChangePerPoint22;
	    };
	    order?: number;
	  };
	}
	export interface GardenBed {
	  flippable: Flippable3;
	  footstep_sound: FootstepSound1;
	  sprite: MainSprite1;
	  description?: Description18;
	  wip?: WIP;
	  placement_sound?: PlacementSound4;
	  undersprite?: UnderSprite1;
	  map_color: MapColor1;
	  name: Name40;
	  dapples?: SunlightDappling1;
	  editor_group?: EditorGroup17;
	  recipe?: Recipe9;
	  planted_sprites: PlantedSprites;
	  uicon: Icon4;
	}
	export interface Description18 {
	  text: EnglishText80;
	  description?: TranslatorHelperText71;
	}
	/**
	 * The color to draw this tile on the map.
	 */
	export interface MapColor1 {
	  g?: Green29;
	  r?: Red29;
	  b?: Blue29;
	}
	export interface Name40 {
	  text: EnglishText81;
	  description?: TranslatorHelperText72;
	}
	export interface SunlightDappling1 {
	  dapple_colors?: Colors2;
	  dapple_chance?: SpawnChance1;
	}
	/**
	 * The color to use for the sunlight dapples.
	 */
	export interface Colors2 {
	  [k: string]: {
	    element?: {
	      g?: Green30;
	      r?: Red30;
	      b?: Blue30;
	    };
	    order?: number;
	  };
	}
	export interface Recipe9 {
	  components: Ingredients10;
	  artisans?: ArtisansRequired9;
	  badge_cost_modifiers?: CostModifiedByResearch9;
	  output_quantity?: OutputQuantity7;
	  badge_output_modifiers?: OutputModifiedByResearch7;
	  source?: UnlockedBy47;
	  effort_modifier?: EffortModifier12;
	  station: Station9;
	}
	export interface Ingredients10 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface ArtisansRequired9 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface CostModifiedByResearch9 {
	  [k: string]: {
	    element?: {
	      badge_id?: ResearchNode16;
	      value?: ChangePerPoint23;
	    };
	    order?: number;
	  };
	}
	export interface OutputModifiedByResearch7 {
	  [k: string]: {
	    element?: {
	      style?: Style11;
	      badge_id?: ResearchNode17;
	      value?: ChangePerPoint24;
	    };
	    order?: number;
	  };
	}
	/**
	 * Each sprite in this list will be for a larger plot. E.g. the first entry will be 1x1, the second entry will be 2x2, etc...
	 */
	export interface PlantedSprites {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * A state that a world element can be in which conveys information about how it should animate
	 */
	export interface AnimationState {
	  wip?: WIP;
	  name: Name41;
	  fallback?: FallbackState;
	  spine_name_default: DefaultSpineAnimationName;
	  description: Description19;
	}
	/**
	 * Categories for things to be placed into in the World Editor.
	 */
	export interface EditorCategory {
	  spawn_mode: SpawnMode;
	  order: Order2;
	  name: Name42;
	  color: Color8;
	  wip?: WIP;
	  icon: Icon5;
	}
	export interface Color8 {
	  g?: Green31;
	  r?: Red31;
	  b?: Blue31;
	}
	/**
	 * A collection of earparty sounds that share a global Gain.
	 */
	export interface EarpartyGroup {
	  falloff?: Falloff;
	  wip?: WIP;
	  parent_group?: ParentGroup;
	  name: Name43;
	  gain: GainModifier;
	}
	/**
	 * For positional sounds, the pixel range for the audio to no longer become audible.
	 */
	export interface Falloff {
	  value1?: Max67;
	  value0?: Min67;
	}
	export interface Quest {
	  pet_quest?: PetQuest;
	  quest_start_log?: QuestLogSummary;
	  quest_start_moments?: QuestStartMoments;
	  quest_end_requirements?: Requirements5;
	  objectives?: Objectives;
	  clues?: Clues;
	  marker_world_text?: QuestMarkerWorldText;
	  wip?: WIP;
	  item_highlights?: WorldElementHighlights;
	  storyline: Storyline1;
	  quest_giver?: QuestGiver;
	  order: Order3;
	  quest_start_requirements?: Requirements8;
	  name: Name44;
	  quest_receiver?: QuestReceiver;
	  quest_end_moments?: QuestEndMoments;
	  ignore_in_progression_map?: IgnoreInProgressionMap1;
	  priors?: ProgressionPriors;
	  map_markers?: MapMarkers;
	}
	/**
	 * If set, this quest will be considered a 'pet quest'. Progress toward this quest will only occur if you have the specified pet with you.
	 */
	export interface PetQuest {
	  pet?: Pet3;
	  name?: ShortName;
	  pet_stage?: PetStage2;
	}
	/**
	 * The name of this quest as displayed in the pet UI. Should be quite short.
	 */
	export interface ShortName {
	  text: EnglishText82;
	}
	export interface QuestLogSummary {
	  text: EnglishText83;
	}
	/**
	 * A sequence of narrative events to tell the story of this quest.
	 */
	export interface QuestStartMoments {
	  [k: string]: {
	    element?: QuestMoment;
	    order?: number;
	  };
	}
	/**
	 * Characters or actors can convey emojis.
	 */
	export interface Emotes {
	  [k: string]: {
	    element?: {
	      key?: Character3;
	      value?: Emoji4;
	    };
	    order?: number;
	  };
	}
	export interface ItemsToGain1 {
	  [k: string]: {
	    element?: {
	      key?: string;
	      value?: Quantity62;
	    };
	    order?: number;
	  };
	}
	/**
	 * Characters can throw items out onto the ground.
	 */
	export interface Drops {
	  [k: string]: {
	    element?: {
	      dropper?: Dropper;
	      items?: ItemsToDrop;
	    };
	    order?: number;
	  };
	}
	export interface ItemsToDrop {
	  [k: string]: {
	    element?: {
	      quantity?: Quantity63;
	      item_id?: Item7;
	    };
	    order?: number;
	  };
	}
	/**
	 * Conditions that must be true for the quest to proceed.
	 */
	export interface Requirements5 {
	  [k: string]: {
	    element?: Requirement1;
	    order?: number;
	  };
	}
	export interface Objectives {
	  [k: string]: {
	    element?: Objective;
	    order?: number;
	  };
	}
	export interface Items48 {
	  [k: string]: {
	    element?: {
	      key?: string;
	      value?: Quantity64;
	    };
	    order?: number;
	  };
	}
	/**
	 * The ability must be used on targets that match these filters to count towards the objective.
	 */
	export interface TargetS {
	  [k: string]: {
	    element?: Filter35;
	    order?: number;
	  };
	}
	export interface Filter35 {
	  combatants_only?: Combatants33;
	  datafield_evaluations?: DatafieldEvaluations34;
	  require_all_tags?: RequireAllTags33;
	  exclude?: Exclude34;
	  buffs?: Buffs75;
	  items?: Items49;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations34 {
	  [k: string]: {
	    element?: {
	      value1?: number;
	      value0?: string;
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	    };
	    order?: number;
	  };
	}
	export interface Buffs75 {
	  buffs: Buffs76;
	  require_all: RequireAll45;
	  stacks?: Stacks43;
	}
	export interface Buffs76 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks43 {
	  value1?: Quantity65;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Items49 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * Progress toward this objective will only count if these requirements are met at the time of using the ability.
	 */
	export interface AbilityUsageRequirements {
	  [k: string]: {
	    element?: AbilityUsageRequirement;
	    order?: number;
	  };
	}
	/**
	 * The player must have at least these quantities of these items.
	 */
	export interface Items50 {
	  [k: string]: {
	    element?: {
	      key?: string;
	      value?: Quantity66;
	    };
	    order?: number;
	  };
	}
	export interface PetStage3 {
	  stage?: "Egg" | "Baby" | "Adult" | "Embiggened";
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	/**
	 * Destruction of targets that match these filters will count towards the objective.
	 */
	export interface TargetS1 {
	  [k: string]: {
	    element?: Filter36;
	    order?: number;
	  };
	}
	export interface Filter36 {
	  combatants_only?: Combatants34;
	  datafield_evaluations?: DatafieldEvaluations35;
	  require_all_tags?: RequireAllTags34;
	  exclude?: Exclude35;
	  buffs?: Buffs77;
	  items?: Items51;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations35 {
	  [k: string]: {
	    element?: {
	      value1?: number;
	      value0?: string;
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	    };
	    order?: number;
	  };
	}
	export interface Buffs77 {
	  buffs: Buffs78;
	  require_all: RequireAll46;
	  stacks?: Stacks44;
	}
	export interface Buffs78 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks44 {
	  value1?: Quantity68;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Items51 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * Progress toward this objective will only count if these requirements are met at the time of destruction.
	 */
	export interface DestructionRequirements {
	  [k: string]: {
	    element?: DestructionRequirement;
	    order?: number;
	  };
	}
	/**
	 * The player must have at least these quantities of these items.
	 */
	export interface Items52 {
	  [k: string]: {
	    element?: {
	      key?: string;
	      value?: Quantity69;
	    };
	    order?: number;
	  };
	}
	export interface PetStage4 {
	  stage?: "Egg" | "Baby" | "Adult" | "Embiggened";
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	/**
	 * Any of these items will count toward this consumption objective.
	 */
	export interface ItemsToConsume {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * You can require this item be placed within a certain distance of a quest marker.
	 */
	export interface QuestMarkerProximity {
	  quest_marker?: string;
	  proximity?: ProximityGridSpaces;
	}
	export interface ItemsToDrop1 {
	  [k: string]: {
	    element?: {
	      key?: string;
	      value?: Quantity73;
	    };
	    order?: number;
	  };
	}
	/**
	 * You can optionally force certain things in the world to drop the items in this quest objective while this quest is active.
	 */
	export interface CustomLootDrops {
	  [k: string]: {
	    element?: CustomLoot;
	    order?: number;
	  };
	}
	export interface CustomLoot {
	  loot?: LootGroup1;
	  sources?: Sources;
	}
	export interface LootGroup1 {
	  time_requirement?: TimeOfDay1;
	  item_tags_used?: ItemTagsUsed1;
	  item_ids_used?: ItemsUsed4;
	  trigger: Trigger2;
	  num_drops?: DropQuantity1;
	  areas?: Areas1;
	  drop_chance: DropChance1;
	}
	/**
	 * The kinds of items required to be used on this for loot to drop.
	 */
	export interface ItemTagsUsed1 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * Specific items required to be used on this for loot to drop.
	 */
	export interface ItemsUsed4 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * A random number of items will drop in this range. Once the player has acquired the req
	 */
	export interface DropQuantity1 {
	  value1?: Max68;
	  value0?: Min68;
	}
	/**
	 * If set, the loot will only drop from something within the listed areas.
	 */
	export interface Areas1 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * What's going to drop this loot?
	 */
	export interface Sources {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * The text that will appear when the player interacts with the target.
	 */
	export interface InteractionText {
	  text: EnglishText85;
	}
	/**
	 * The player must interact with a target that matches this filter.
	 */
	export interface TargetS2 {
	  [k: string]: {
	    element?: Filter37;
	    order?: number;
	  };
	}
	export interface Filter37 {
	  combatants_only?: Combatants35;
	  datafield_evaluations?: DatafieldEvaluations36;
	  require_all_tags?: RequireAllTags35;
	  exclude?: Exclude36;
	  buffs?: Buffs79;
	  items?: Items53;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations36 {
	  [k: string]: {
	    element?: {
	      value1?: number;
	      value0?: string;
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	    };
	    order?: number;
	  };
	}
	export interface Buffs79 {
	  buffs: Buffs80;
	  require_all: RequireAll47;
	  stacks?: Stacks45;
	}
	export interface Buffs80 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks45 {
	  value1?: Quantity74;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Items53 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface InteractionOutcomes {
	  [k: string]: {
	    element?: QuestInteractionOutcome;
	    order?: number;
	  };
	}
	/**
	 * The color of the progress bar that will appear when the player interacts with the target.
	 */
	export interface InteractionBarColor {
	  g?: Green32;
	  r?: Red32;
	  b?: Blue32;
	}
	/**
	 * Conditions that must be true for the quest to proceed.
	 */
	export interface Requirements6 {
	  [k: string]: {
	    element?: Requirement1;
	    order?: number;
	  };
	}
	/**
	 * Things characters can say about this quest while the quest is active.
	 */
	export interface Clues {
	  [k: string]: {
	    element?: {
	      phrases?: Phrases1;
	      speaker?: Speaker1;
	    };
	    order?: number;
	  };
	}
	export interface Phrases1 {
	  [k: string]: {
	    element?: Clue;
	    order?: number;
	  };
	}
	export interface Clue {
	  requirements?: Requirements7;
	  phrase: {
	    text: Text;
	    emoji?: Emoji5;
	  };
	}
	/**
	 * Conditions that must be true for the quest to proceed.
	 */
	export interface Requirements7 {
	  [k: string]: {
	    element?: Requirement1;
	    order?: number;
	  };
	}
	export interface Text {
	  text: EnglishText86;
	}
	/**
	 * You can display text in the world while this quest is active.
	 */
	export interface QuestMarkerWorldText {
	  [k: string]: {
	    element?: QuestMarkerText;
	    order?: number;
	  };
	}
	export interface QuestMarkerText {
	  color?: TextColor;
	  text: Text1;
	  marker: QuestMarker1;
	  sprite?: Sprite3;
	  proximity?: Proximity;
	}
	export interface TextColor {
	  g?: Green33;
	  r?: Red33;
	  b?: Blue33;
	}
	export interface Text1 {
	  text: EnglishText87;
	  description?: TranslatorHelperText73;
	}
	/**
	 * Items to have a glow underneath them while this quest is active.
	 */
	export interface WorldElementHighlights {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * Who/what triggers the quest. If no giver is present, the quest will automatically trigger once requirements are met.
	 */
	export interface QuestGiver {
	  interaction_target?: AutomaticInteractionTarget;
	  same_room?: RequireSameRoom;
	  item: Initiator;
	  show_on_map?: ShowOnMap;
	  proximity?: AutomaticInteractionProximity;
	}
	/**
	 * Conditions that must be true for the quest to proceed.
	 */
	export interface Requirements8 {
	  [k: string]: {
	    element?: Requirement1;
	    order?: number;
	  };
	}
	/**
	 * Who/what triggers the quest. If no giver is present, the quest will automatically trigger once requirements are met.
	 */
	export interface QuestReceiver {
	  interaction_target?: AutomaticInteractionTarget1;
	  same_room?: RequireSameRoom1;
	  item: Initiator1;
	  show_on_map?: ShowOnMap1;
	  proximity?: AutomaticInteractionProximity1;
	}
	/**
	 * A sequence of narrative events to tell the story of this quest.
	 */
	export interface QuestEndMoments {
	  [k: string]: {
	    element?: QuestMoment1;
	    order?: number;
	  };
	}
	/**
	 * Characters or actors can convey emojis.
	 */
	export interface Emotes1 {
	  [k: string]: {
	    element?: {
	      key?: Character4;
	      value?: Emoji7;
	    };
	    order?: number;
	  };
	}
	export interface ItemsToGain2 {
	  [k: string]: {
	    element?: {
	      key?: string;
	      value?: Quantity77;
	    };
	    order?: number;
	  };
	}
	/**
	 * Characters can throw items out onto the ground.
	 */
	export interface Drops1 {
	  [k: string]: {
	    element?: {
	      dropper?: Dropper1;
	      items?: ItemsToDrop2;
	    };
	    order?: number;
	  };
	}
	export interface ItemsToDrop2 {
	  [k: string]: {
	    element?: {
	      quantity?: Quantity78;
	      item_id?: Item12;
	    };
	    order?: number;
	  };
	}
	/**
	 * You can optionally have certain Quest Markers display on the world map while this quest is active.
	 */
	export interface MapMarkers {
	  [k: string]: {
	    element?: MapMarker;
	    order?: number;
	  };
	}
	export interface MapMarker {
	  radius: RadiusGridSpaces;
	  text: TextForWorldMap;
	  marker: QuestMarker2;
	}
	export interface TextForWorldMap {
	  text: EnglishText89;
	}
	export interface Terrain2 {
	  flippable: Flippable4;
	  footstep_sound: FootstepSound2;
	  sprite: MainSprite2;
	  disallow_floors?: DisallowFloors;
	  spice?: VisualSpice;
	  wip?: WIP;
	  cleared_tile?: ClearedTile;
	  shore_tile?: ShoreTile;
	  placement_sound?: PlacementSound5;
	  undersprite?: UnderSprite2;
	  map_color: MapColor2;
	  name: Name45;
	  dapples?: SunlightDappling2;
	  depth_priority: DepthPriority;
	  clear_particle_sprite?: ClearTileParticleSprite;
	  editor_group?: EditorGroup18;
	  shore_interaction?: WaterInteraction;
	  uicon: Icon6;
	}
	/**
	 * Tiles can spawn additional visual elements, depending on what is around them. Tiles will first sample their neighbors, then randomly choose a neighbor based on the weight of that neighbor's spice group. Then, it will roll based on 'spawn chance' to determine whether to spawn the visual spice. Finally, it will choose among the sprites within that group using their weights.
	 */
	export interface VisualSpice {
	  [k: string]: {
	    element?: {
	      weight?: number;
	      locked?: boolean;
	      item?: SpiceGroup;
	    };
	    order?: number;
	  };
	}
	export interface SpiceGroup {
	  chance: SpawnChance2;
	  neighbor?: Neighbor;
	  sprites: Sprites;
	}
	export interface Sprites {
	  [k: string]: {
	    element?: {
	      weight?: number;
	      locked?: boolean;
	      item?: string;
	    };
	    order?: number;
	  };
	}
	/**
	 * The color to draw this tile on the map.
	 */
	export interface MapColor2 {
	  g?: Green34;
	  r?: Red34;
	  b?: Blue34;
	}
	export interface Name45 {
	  text: EnglishText90;
	  description?: TranslatorHelperText74;
	}
	export interface SunlightDappling2 {
	  dapple_colors?: Colors3;
	  dapple_chance?: SpawnChance3;
	}
	/**
	 * The color to use for the sunlight dapples.
	 */
	export interface Colors3 {
	  [k: string]: {
	    element?: {
	      g?: Green35;
	      r?: Red35;
	      b?: Blue35;
	    };
	    order?: number;
	  };
	}
	/**
	 * If set, this tile will be allowed to touch water.
	 */
	export interface WaterInteraction {
	  shore_sprite: ShorelineUnderwaterSprite;
	  shelf_sprite?: ShelfUnderwaterSprite;
	}
	/**
	 * Items that can be used during gameplay to heal or provide temporary boosts.
	 */
	export interface Consumable {
	  sprite: WorldSprite14;
	  level: Level4;
	  description: Description20;
	  wip?: WIP;
	  inventory_sound: InventorySound2;
	  effects: Effects2;
	  fishing?: Fishing;
	  name: Name46;
	  type: Type3;
	  priors?: ProgressionPriors;
	  editor_group?: EditorGroup19;
	  use_sound: ConsumeSound;
	  recipe?: Recipe10;
	  uicon?: UIIcon21;
	}
	export interface Description20 {
	  text: EnglishText91;
	  description?: TranslatorHelperText75;
	}
	export interface Effects2 {
	  [k: string]: {
	    element?: Effect1;
	    order?: number;
	  };
	}
	export interface UnlockedBy48 {
	  prerequisite: UnlockedBy49;
	  unlock_text?: UnlockDescription17;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription17 {
	  text: EnglishText92;
	  description?: TranslatorHelperText76;
	}
	export interface UnlockedBy50 {
	  prerequisite: UnlockedBy51;
	  unlock_text?: UnlockDescription18;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription18 {
	  text: EnglishText93;
	  description?: TranslatorHelperText77;
	}
	export interface Name46 {
	  text: EnglishText94;
	  description?: TranslatorHelperText78;
	}
	export interface Recipe10 {
	  components: Ingredients11;
	  artisans?: ArtisansRequired10;
	  badge_cost_modifiers?: CostModifiedByResearch10;
	  output_quantity?: OutputQuantity8;
	  badge_output_modifiers?: OutputModifiedByResearch8;
	  source?: UnlockedBy52;
	  effort_modifier?: EffortModifier13;
	  station: Station10;
	}
	export interface Ingredients11 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface ArtisansRequired10 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface CostModifiedByResearch10 {
	  [k: string]: {
	    element?: {
	      badge_id?: ResearchNode18;
	      value?: ChangePerPoint25;
	    };
	    order?: number;
	  };
	}
	export interface OutputModifiedByResearch8 {
	  [k: string]: {
	    element?: {
	      style?: Style12;
	      badge_id?: ResearchNode19;
	      value?: ChangePerPoint26;
	    };
	    order?: number;
	  };
	}
	export interface Boss7 {
	  shadow?: Shadow;
	  ending_sequence?: BossDialogueSequence;
	  sprite: WorldSprite15;
	  level: Level5;
	  wip?: WIP;
	  resistance_profile?: ResistanceProfile2;
	  name_color: NameColor3;
	  using_lighting?: UseLighting9;
	  opening_sequence?: BossDialogueSequence1;
	  spine_skin?: SpineSkin;
	  priors?: ProgressionPriors;
	  uicon: UIIcon22;
	  reactions?: Reactions1;
	  dialogue_sfx?: DialogueSounds1;
	  injury_sounds?: InjurySounds1;
	  size: Size5;
	  death?: Death;
	  hp_modifier?: HPModifier1;
	  relative_level?: RelativeLevel2;
	  name: Name47;
	  data_fields?: DataFields4;
	  movement: Motion1;
	  boss_loot?: Loot1;
	  editor_group?: EditorGroup20;
	  light_emitter?: LightEmitter;
	}
	export interface BossDialogueSequence {
	  animation?: BossSpineAnimation;
	  moments: DialogueMoments;
	}
	export interface DialogueMoments {
	  [k: string]: {
	    element?: BossDialogueMoment;
	    order?: number;
	  };
	}
	/**
	 * Characters or actors can convey emojis.
	 */
	export interface Emotes2 {
	  [k: string]: {
	    element?: {
	      key?: Character5;
	      value?: Emoji9;
	    };
	    order?: number;
	  };
	}
	export interface NameColor3 {
	  g?: Green36;
	  r?: Red36;
	  b?: Blue36;
	}
	export interface BossDialogueSequence1 {
	  animation?: BossSpineAnimation;
	  moments: DialogueMoments;
	}
	export interface DialogueSounds1 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * Sound effects to play when this thing takes damage.
	 */
	export interface InjurySounds1 {
	  [k: string]: {
	    element?: {
	      major_injury_sound?: Major1;
	      minor_injury_sound?: Minor1;
	      chance_of_playing?: Chance12;
	    };
	    order?: number;
	  };
	}
	export interface Size5 {
	  height?: Height6;
	  width?: Width6;
	}
	export interface Death {
	  animation: Animation6;
	  particle_burst?: ParticleBurst;
	  death_sound?: DeathSound;
	}
	export interface Name47 {
	  text: EnglishText96;
	}
	/**
	 * Attaching data fields to this world element will make them readable by other game mechanics/elements. Can be used to store custom data on a world element.
	 */
	export interface DataFields4 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface Motion1 {
	  moving?: MovementVisuals2;
	  stationary?: StationaryVisuals2;
	  movespeed?: MovementSpeed2;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave4 {
	  [k: string]: {
	    element?: SineWave5;
	    order?: number;
	  };
	}
	export interface SineWave5 {
	  amplitude?: Amplitude5;
	  speed?: Speed9;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements4 {
	  [k: string]: {
	    element?: FlapEvent4;
	    order?: number;
	  };
	}
	export interface FlapEvent4 {
	  distance?: VerticalDistance4;
	  impulse_seconds?: ImpulseDurationSeconds4;
	  recovery_seconds?: RecoveryDurationSeconds4;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave5 {
	  [k: string]: {
	    element?: SineWave6;
	    order?: number;
	  };
	}
	export interface SineWave6 {
	  amplitude?: Amplitude6;
	  speed?: Speed10;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements5 {
	  [k: string]: {
	    element?: FlapEvent5;
	    order?: number;
	  };
	}
	export interface FlapEvent5 {
	  distance?: VerticalDistance5;
	  impulse_seconds?: ImpulseDurationSeconds5;
	  recovery_seconds?: RecoveryDurationSeconds5;
	}
	export interface Loot1 {
	  [k: string]: {
	    element?: {
	      key?: Item13;
	      value?: Quantity79;
	    };
	    order?: number;
	  };
	}
	/**
	 * A collection of variables used to control the pacing and flow of the game.
	 */
	export interface GameBalance {
	  crafting_efficiencies: CraftingEfficiencies;
	  crafting_growth_per_level: CraftingCostGrowthPerLevel;
	  time_to_kill: TimeToKill;
	  wip?: WIP;
	  equipment_stat_multipliers: EquipmentStatMultipliers;
	  badge_research_seconds_by_depth: ResearchTimeGrowthPerLevel;
	  home_teleport_cooldown: HomeTeleportCooldownSeconds;
	  crafting_base_effort_per_component: CraftingEffortPerComponent;
	  time_to_die: TimeToDie;
	  badge_base_research_seconds: ResearchBaseSeconds;
	  tile_respawn_minutes: ClearedTileRespawnMinutes;
	  buildmode_range: BuildModeRange;
	  dps_growth_per_level: DPSGrowthLevel;
	  time_to_harvest: TimeToHarvest;
	  healing_cooldown: HealingCooldownSeconds;
	  item_respawn_minutes: WorldElementRespawnMinutes;
	  player_base_hp_mod: PlayerBaseHP;
	  movespeed_base: BaseGameplayMoveSpeed;
	  name: Name48;
	  crafting_growth_per_quality: CraftingCostGrowthPerQuality;
	  boss_time_to_kill: BossTimeToKill;
	  minutes_per_game_day: MinutesPerGameDay;
	  badge_base_effort_per_component: ResearchEffortPerComponent;
	}
	/**
	 * How recipes for stackable items become more efficient over time as you craft more of them.
	 */
	export interface CraftingEfficiencies {
	  skill_levels?: SkillLevels;
	  num_crafts?: NumCraftsForLevel1;
	  growth_per_level?: CostGrowthPerSkillLevel;
	}
	/**
	 * At each skill level, how do recipes become more efficient?
	 */
	export interface SkillLevels {
	  [k: string]: {
	    element?: {
	      output?: OutputIncrease;
	      cost?: CostReduction;
	    };
	    order?: number;
	  };
	}
	/**
	 * The rough number of seconds it should take the player to defeat a creature of equal level under constant hits.
	 */
	export interface TimeToKill {
	  start?: SecondsAtLevel1;
	  per_level?: SecondsChangePerLevel;
	  minimum?: MinSeconds1;
	  maximum?: MaxSeconds1;
	}
	/**
	 * Stats have a 'value per point', which is multiplied against these weights. For example, if a trinket has a weight of 0.5 and 'Haste' has a value per point of 10%, then a trinket with 1 point of haste will give 5% haste.
	 */
	export interface EquipmentStatMultipliers {
	  itg_weapon?: Weapon;
	  itg_trinket?: Trinket1;
	  itg_helm?: Helm;
	  itg_chestarmor?: Suit;
	  itg_pants?: Boots;
	  itg_gloves?: Gloves;
	}
	/**
	 * The rough number of seconds it should take the player to be killed by an equal level creature under constant hits.
	 */
	export interface TimeToDie {
	  start?: SecondsAtLevel11;
	  per_level?: SecondsChangePerLevel1;
	  minimum?: MinSeconds2;
	  maximum?: MaxSeconds2;
	}
	/**
	 * The rough number of seconds it should take the player to harvest a resource of equal level.
	 */
	export interface TimeToHarvest {
	  start?: SecondsAtLevel12;
	  per_level?: SecondsChangePerLevel2;
	  minimum?: MinSeconds3;
	  maximum?: MaxSeconds3;
	}
	/**
	 * The name of this gameplay balance mode.
	 */
	export interface Name48 {
	  text: EnglishText97;
	  description?: TranslatorHelperText79;
	}
	export interface EquipmentSet7 {
	  color: Color9;
	  wip?: WIP;
	  name: Name49;
	  bonuses: Bonuses;
	}
	/**
	 * What color the set's name and item borders should be displayed on the UI.
	 */
	export interface Color9 {
	  g?: Green37;
	  r?: Red37;
	  b?: Blue37;
	}
	export interface Name49 {
	  text: EnglishText98;
	  description?: TranslatorHelperText80;
	}
	export interface Bonuses {
	  [k: string]: {
	    element?: SetBonus;
	    order?: number;
	  };
	}
	export interface SetBonus {
	  reactions?: Reactions1;
	  stats?: Stats1;
	  num_pieces: Pieces;
	}
	export interface Stats1 {
	  [k: string]: {
	    element?: {
	      amount?: Amount2;
	      stat?: Stat8;
	    };
	    order?: number;
	  };
	}
	/**
	 * A postprocessing effect that can be used to change the feel of an area or situation.
	 */
	export interface ColorGrading {
	  wip?: WIP;
	  name: ProfileNameInternal;
	  values: Values;
	}
	export interface Values {
	  brightness?: Brightness1;
	  contrast_r?: RedMultiplier;
	  contrast_b?: BlueMultiplier;
	  light_levels?: LightLevels;
	  shadow_multiplier?: ShadowMultiplier;
	  highlight_multiplier?: HighlightMultiplier;
	  saturation?: Saturation;
	  contrast_g?: GreenMultiplier;
	  dark_levels?: DarkLevels;
	  shadow_threshold?: ShadowThreshold;
	  highlight_threshold?: HighlightThreshold;
	}
	export interface Schema1 {
	  _type: Type4;
	  wip?: WIP;
	  title?: Name50;
	  description?: Description21;
	}
	export interface PropertyDefinitions {
	  [k: string]: {
	    element?: Schema2;
	    order?: number;
	  };
	}
	export interface Player {
	  name_color: NameColor4;
	  shadow: Shadow;
	  injury_sounds: InjurySounds2;
	  name: Name51;
	  sprite: WorldSprite16;
	  size: Size6;
	  wip?: WIP;
	  editor_group?: EditorGroup21;
	  uicon: UIIcon23;
	}
	/**
	 * For when this name is displayed in a dialogue window.
	 */
	export interface NameColor4 {
	  g?: Green38;
	  r?: Red38;
	  b?: Blue38;
	}
	/**
	 * Sound effects to play when this thing takes damage.
	 */
	export interface InjurySounds2 {
	  [k: string]: {
	    element?: {
	      major_injury_sound?: Major2;
	      minor_injury_sound?: Minor2;
	      chance_of_playing?: Chance13;
	    };
	    order?: number;
	  };
	}
	export interface Name51 {
	  text: EnglishText99;
	  description?: TranslatorHelperText81;
	}
	export interface Size6 {
	  height?: Height7;
	  width?: Width7;
	}
	export interface PetMastery {
	  stage: PetStage5;
	  order: SortOrder;
	  name: Name52;
	  description: Description22;
	  wip?: WIP;
	  pet: Pet6;
	  uicon: Icon7;
	}
	export interface Name52 {
	  text: EnglishText100;
	}
	export interface Description22 {
	  text: EnglishText101;
	}
	export interface BuildingPillar {
	  placement_sound: PlacementSound6;
	  name: Name53;
	  sprite: WorldSprite17;
	  roof_vote: PreferredRoof2;
	  description: Description23;
	  wip?: WIP;
	  editor_group?: EditorGroup22;
	  pillar_distance: PillarSupportDistance;
	  recipe?: Recipe11;
	  uicon: UIIcon24;
	}
	export interface Name53 {
	  text: EnglishText102;
	  description?: TranslatorHelperText82;
	}
	export interface Description23 {
	  text: EnglishText103;
	  description?: TranslatorHelperText83;
	}
	export interface Recipe11 {
	  components: Ingredients12;
	  artisans?: ArtisansRequired11;
	  badge_cost_modifiers?: CostModifiedByResearch11;
	  output_quantity?: OutputQuantity9;
	  badge_output_modifiers?: OutputModifiedByResearch9;
	  source?: UnlockedBy53;
	  effort_modifier?: EffortModifier14;
	  station: Station11;
	}
	export interface Ingredients12 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface ArtisansRequired11 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface CostModifiedByResearch11 {
	  [k: string]: {
	    element?: {
	      badge_id?: ResearchNode20;
	      value?: ChangePerPoint27;
	    };
	    order?: number;
	  };
	}
	export interface OutputModifiedByResearch9 {
	  [k: string]: {
	    element?: {
	      style?: Style13;
	      badge_id?: ResearchNode21;
	      value?: ChangePerPoint28;
	    };
	    order?: number;
	  };
	}
	/**
	 * Items that haven't yet been brought into the Game Changer, but exist as placeholders for UIDs.
	 */
	export interface UnimplementedItem {
	  wip?: WIP;
	  name?: Name54;
	  uicon?: Icon8;
	}
	export interface Name54 {
	  text: EnglishText104;
	  description?: TranslatorHelperText84;
	}
	export interface Video {
	  gain?: AudioGainModifier;
	  progress_bar_color?: ProgressBarColor;
	  wip?: WIP;
	  progress_bar_background?: ProgressBarBackgroundColor;
	  progress_bar_height?: ProgressBarHeightPixels;
	  name: VideoName;
	  video_path: VideoFilePath;
	  skip_points?: SkipPoints;
	  progress_bar_alpha?: ProgressBarAlpha;
	  progress_bar_background_alpha?: ProgressBarBackgroundAlpha;
	  border_color?: BorderColor;
	}
	export interface ProgressBarColor {
	  g?: Green39;
	  r?: Red39;
	  b?: Blue39;
	}
	export interface ProgressBarBackgroundColor {
	  g?: Green40;
	  r?: Red40;
	  b?: Blue40;
	}
	/**
	 * Set specific times (in seconds) that the video player will skip ahead to for this video.
	 */
	export interface SkipPoints {
	  [k: string]: {
	    element?: TimestampSeconds;
	    order?: number;
	  };
	}
	/**
	 * If there are 'bars' around the video due to aspect ratio issues, you can customize the color those bars will be drawn. The bars will not be visibile at a 16:9 aspect ratio.
	 */
	export interface BorderColor {
	  g?: Green41;
	  r?: Red41;
	  b?: Blue41;
	}
	/**
	 * Conditions that must be true for the quest to proceed.
	 */
	export interface Requirements9 {
	  [k: string]: {
	    element?: Requirement1;
	    order?: number;
	  };
	}
	/**
	 * A companion character who can help with crafting and research.
	 */
	export interface Buddy9 {
	  hitbox: Hitbox;
	  sounds: Sounds;
	  sprite: WorldSprite18;
	  banner_background?: BannerBackground;
	  description: Description24;
	  insight_unlock?: InsightUnlocker;
	  wip?: WIP;
	  color_dark: UIColorDark;
	  background_info?: BackgroundInformation1;
	  name: BuddyName;
	  object: WorldObject;
	  banner_portrait?: BannerPortrait;
	  looks_at_player: LooksAtPlayer;
	  follow_unlock?: FollowingUnlock1;
	  priors?: ProgressionPriors;
	  color_bright: UIColorBright;
	  color_mid: UIColorMid;
	  editor_group?: EditorGroup23;
	  uicon: UIIcon25;
	}
	export interface Sounds {
	  research_collect?: ResearchCollected;
	  comfort_gained?: ComfortGained;
	  comfort_lost?: ComfortLost;
	  interact?: Interact;
	  follow_start?: FollowStart;
	  follow_end?: FollowEnd;
	  blocked?: ActionBlocked;
	  research_start?: ResearchStart;
	}
	/**
	 * Backstory text displayed in the buddy's UI menu.
	 */
	export interface Description24 {
	  text: EnglishText105;
	  description?: TranslatorHelperText85;
	}
	/**
	 * The color to use for the buddy's UI backgrounds.
	 */
	export interface UIColorDark {
	  g?: Green42;
	  r?: Red42;
	  b?: Blue42;
	}
	/**
	 * For developer use. Just for establishing background information.
	 */
	export interface BackgroundInformation1 {
	  brief?: Brief1;
	  pronouns?: Pronouns1;
	  personality?: Personality1;
	  notes?: Notes1;
	}
	/**
	 * Information about this character's background and their role in the game world.
	 */
	export interface Notes1 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface BuddyName {
	  text: EnglishText106;
	  description?: TranslatorHelperText86;
	}
	/**
	 * The color to use for the buddy's UI highlights.
	 */
	export interface UIColorBright {
	  g?: Green43;
	  r?: Red43;
	  b?: Blue43;
	}
	/**
	 * The color to use for the buddy's UI midtones.
	 */
	export interface UIColorMid {
	  g?: Green44;
	  r?: Red44;
	  b?: Blue44;
	}
	export interface BossPhase1 {
	  boss: Boss8;
	  reactions?: Reactions1;
	  ending_sequence?: BossDialogueSequence2;
	  description?: DescriptionInternal1;
	  music?: Music3;
	  abilities?: Abilities6;
	  wip?: WIP;
	  opening_sequence?: BossDialogueSequence3;
	  order: Order4;
	  name: NameInternal7;
	  zoom_level?: ZoomLevel;
	  movement?: MotionOverride2;
	}
	export interface BossDialogueSequence2 {
	  animation?: BossSpineAnimation;
	  moments: DialogueMoments;
	}
	/**
	 * What abilities the boss will use during this phase.
	 */
	export interface Abilities6 {
	  [k: string]: {
	    element?: BossAbilityAI;
	    order?: number;
	  };
	}
	export interface BossAbilityAI {
	  targeting?: Targeting;
	  conditions?: AbilityUsageConditions;
	  movement?: MotionOverride1;
	  ability_id: Ability8;
	  weight: Weight;
	  post_ability_pause?: PostAbilityPause1;
	  destination?: Destination2;
	  post_ability_pause_ignore_chance?: PostAbilityPauseIgnoreChance;
	  direction_randomness?: DirectionRandomness1;
	  followup_abilities?: FollowupAbilities;
	}
	/**
	 * The boss will choose the nearest target that matches these types.
	 */
	export interface PotentialTargets {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * The boss will only choose targets that are within this range.
	 */
	export interface Range {
	  value1?: Max69;
	  value0?: Min69;
	}
	/**
	 * If set, the boss will only use this ability if its conditions are met.
	 */
	export interface AbilityUsageConditions {
	  conditions?: Conditions6;
	  require_all_conditions?: RequireAllConditions6;
	}
	export interface Conditions6 {
	  [k: string]: {
	    element?: Condition8;
	    order?: number;
	  };
	}
	/**
	 * Which abilities are we evaluating?
	 */
	export interface Abilities7 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface Evaluation10 {
	  value1?: number;
	  value0?: string;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	/**
	 * The 'minutes since timestamp' value can be modified up or down based on an Insight.
	 */
	export interface InsightModifier5 {
	  amount?: ChangePerPoint29;
	  insight?: Insight16;
	}
	/**
	 * If set, this description will appear on the Research Node to explain what it is unlocking.
	 */
	export interface InsightTooltip6 {
	  text: EnglishText107;
	  description?: TranslatorHelperText87;
	}
	export interface NumberOfTargets10 {
	  quantity?: Quantity80;
	  comparison?: Evaluation11;
	}
	export interface DistanceRequiredGridSpaces5 {
	  value1?: Max70;
	  value0?: Min70;
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface Targets6 {
	  [k: string]: {
	    element?: Filter38;
	    order?: number;
	  };
	}
	export interface Filter38 {
	  combatants_only?: Combatants36;
	  datafield_evaluations?: DatafieldEvaluations37;
	  require_all_tags?: RequireAllTags36;
	  exclude?: Exclude37;
	  buffs?: Buffs81;
	  items?: Items54;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations37 {
	  [k: string]: {
	    element?: {
	      value1?: number;
	      value0?: string;
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	    };
	    order?: number;
	  };
	}
	export interface Buffs81 {
	  buffs: Buffs82;
	  require_all: RequireAll48;
	  stacks?: Stacks46;
	}
	export interface Buffs82 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks46 {
	  value1?: Quantity81;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Items54 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface HealthEvaluation5 {
	  hp_percentage?: number;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Items55 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * The condition will be met if the player is wielding any of these items.
	 */
	export interface Items56 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * If set, then targets other than yourself will be evaluated.
	 */
	export interface NumberOfTargets11 {
	  value1?: Quantity82;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface BuffTargetFilter5 {
	  [k: string]: {
	    element?: Filter39;
	    order?: number;
	  };
	}
	export interface Filter39 {
	  combatants_only?: Combatants37;
	  datafield_evaluations?: DatafieldEvaluations38;
	  require_all_tags?: RequireAllTags37;
	  exclude?: Exclude38;
	  buffs?: Buffs83;
	  items?: Items57;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations38 {
	  [k: string]: {
	    element?: {
	      value1?: number;
	      value0?: string;
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	    };
	    order?: number;
	  };
	}
	export interface Buffs83 {
	  buffs: Buffs84;
	  require_all: RequireAll51;
	  stacks?: Stacks47;
	}
	export interface Buffs84 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks47 {
	  value1?: Quantity83;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Items57 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * How close or far (in grid spaces) the entities must be to be considered for this condition.
	 */
	export interface BuffTargetRange5 {
	  value1?: Max71;
	  value0?: Min71;
	}
	export interface Stacks48 {
	  value1?: Quantity84;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Buffs85 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface SummonedEntitiesFilter5 {
	  [k: string]: {
	    element?: Filter40;
	    order?: number;
	  };
	}
	export interface Filter40 {
	  combatants_only?: Combatants38;
	  datafield_evaluations?: DatafieldEvaluations39;
	  require_all_tags?: RequireAllTags38;
	  exclude?: Exclude39;
	  buffs?: Buffs86;
	  items?: Items58;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations39 {
	  [k: string]: {
	    element?: {
	      value1?: number;
	      value0?: string;
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	    };
	    order?: number;
	  };
	}
	export interface Buffs86 {
	  buffs: Buffs87;
	  require_all: RequireAll52;
	  stacks?: Stacks49;
	}
	export interface Buffs87 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks49 {
	  value1?: Quantity85;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Items58 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface NumberSummoned5 {
	  value1?: Quantity86;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface MotionOverride1 {
	  moving?: MovementVisuals3;
	  stationary?: StationaryVisuals3;
	  movespeed?: MovementSpeed3;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave6 {
	  [k: string]: {
	    element?: SineWave7;
	    order?: number;
	  };
	}
	export interface SineWave7 {
	  amplitude?: Amplitude7;
	  speed?: Speed11;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements6 {
	  [k: string]: {
	    element?: FlapEvent6;
	    order?: number;
	  };
	}
	export interface FlapEvent6 {
	  distance?: VerticalDistance6;
	  impulse_seconds?: ImpulseDurationSeconds6;
	  recovery_seconds?: RecoveryDurationSeconds6;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave7 {
	  [k: string]: {
	    element?: SineWave8;
	    order?: number;
	  };
	}
	export interface SineWave8 {
	  amplitude?: Amplitude8;
	  speed?: Speed12;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements7 {
	  [k: string]: {
	    element?: FlapEvent7;
	    order?: number;
	  };
	}
	export interface FlapEvent7 {
	  distance?: VerticalDistance7;
	  impulse_seconds?: ImpulseDurationSeconds7;
	  recovery_seconds?: RecoveryDurationSeconds7;
	}
	/**
	 * If set, the boss will wait for this many seconds after using this ability before moving on to the next ability.
	 */
	export interface PostAbilityPause1 {
	  value1?: MaxSeconds4;
	  value0?: MinSeconds4;
	}
	/**
	 * If set, the boss will move to this destination before casting the ability.
	 */
	export interface Destination2 {
	  targets: PotentialTargets1;
	  choose_random?: ChooseRandom1;
	  range?: Range1;
	}
	/**
	 * The boss will choose the nearest of the quest markers listed here.
	 */
	export interface PotentialTargets1 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * The boss will only choose quest markers that are within this range.
	 */
	export interface Range1 {
	  value1?: Max72;
	  value0?: Min72;
	}
	/**
	 * If set, these abilities will be cast after the current one. These abilities must already be listed in this phase's abilities, or they will be ignored.
	 */
	export interface FollowupAbilities {
	  [k: string]: {
	    element?: FollowupAbility;
	    order?: number;
	  };
	}
	export interface FollowupAbility {
	  instant?: Instant;
	  weight?: Weight1;
	  ability?: Ability9;
	}
	export interface BossDialogueSequence3 {
	  animation?: BossSpineAnimation;
	  moments: DialogueMoments;
	}
	export interface MotionOverride2 {
	  moving?: MovementVisuals4;
	  stationary?: StationaryVisuals4;
	  movespeed?: MovementSpeed4;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave8 {
	  [k: string]: {
	    element?: SineWave9;
	    order?: number;
	  };
	}
	export interface SineWave9 {
	  amplitude?: Amplitude9;
	  speed?: Speed13;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements8 {
	  [k: string]: {
	    element?: FlapEvent8;
	    order?: number;
	  };
	}
	export interface FlapEvent8 {
	  distance?: VerticalDistance8;
	  impulse_seconds?: ImpulseDurationSeconds8;
	  recovery_seconds?: RecoveryDurationSeconds8;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave9 {
	  [k: string]: {
	    element?: SineWave10;
	    order?: number;
	  };
	}
	export interface SineWave10 {
	  amplitude?: Amplitude10;
	  speed?: Speed14;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements9 {
	  [k: string]: {
	    element?: FlapEvent9;
	    order?: number;
	  };
	}
	export interface FlapEvent9 {
	  distance?: VerticalDistance9;
	  impulse_seconds?: ImpulseDurationSeconds9;
	  recovery_seconds?: RecoveryDurationSeconds9;
	}
	export interface PetEgg {
	  using_lighting: UseLighting10;
	  name: Name55;
	  sprite: WorldSprite19;
	  size: Size7;
	  description: Description25;
	  priors?: ProgressionPriors;
	  wip?: WIP;
	  editor_group?: EditorGroup24;
	  light_emitter?: LightEmitter;
	  uicon: UIIcon26;
	}
	export interface Name55 {
	  text: EnglishText108;
	  description?: TranslatorHelperText88;
	}
	export interface Size7 {
	  height?: Height8;
	  width?: Width8;
	}
	export interface Description25 {
	  text: EnglishText109;
	  description?: TranslatorHelperText89;
	}
	export interface CraftingStation {
	  flippable?: Flippable5;
	  hitbox: Hitbox;
	  babbler?: Babbler35;
	  shadow?: Shadow;
	  sprite: WorldSprite20;
	  description: Description26;
	  wip?: WIP;
	  station_assembly_sounds?: AssemblySounds;
	  use_as_prior: CountAsProgressionRequirement;
	  placement_sound: PlacementSound7;
	  using_lighting: UseLighting11;
	  name: Name56;
	  spine_idle?: SpineIdle2;
	  object?: Object5;
	  editor_group?: EditorGroup25;
	  light_emitter?: LightEmitter;
	  station_open_sound?: AssemblyUIStartSound;
	  recipe?: Recipe12;
	  requires_floor: RequiresFloor1;
	  uicon: UIIcon27;
	}
	export interface Description26 {
	  text: EnglishText110;
	  description?: TranslatorHelperText90;
	}
	/**
	 * Order them from least intense to most intense.
	 */
	export interface AssemblySounds {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface Name56 {
	  text: EnglishText111;
	  description?: TranslatorHelperText91;
	}
	export interface Recipe12 {
	  components: Ingredients13;
	  artisans?: ArtisansRequired12;
	  badge_cost_modifiers?: CostModifiedByResearch12;
	  output_quantity?: OutputQuantity10;
	  badge_output_modifiers?: OutputModifiedByResearch10;
	  source?: UnlockedBy54;
	  effort_modifier?: EffortModifier15;
	  station: Station12;
	}
	export interface Ingredients13 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface ArtisansRequired12 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface CostModifiedByResearch12 {
	  [k: string]: {
	    element?: {
	      badge_id?: ResearchNode22;
	      value?: ChangePerPoint30;
	    };
	    order?: number;
	  };
	}
	export interface OutputModifiedByResearch10 {
	  [k: string]: {
	    element?: {
	      style?: Style14;
	      badge_id?: ResearchNode23;
	      value?: ChangePerPoint31;
	    };
	    order?: number;
	  };
	}
	export interface ImpassableTile {
	  flippable: Flippable6;
	  footstep_sound: FootstepSound3;
	  sprite: MainSprite3;
	  wip?: WIP;
	  placement_sound?: PlacementSound8;
	  undersprite?: UnderSprite3;
	  map_color: MapColor3;
	  name: Name57;
	  dapples?: SunlightDappling3;
	  editor_group?: EditorGroup26;
	  shore_interaction?: WaterInteraction1;
	  uicon: Icon9;
	}
	/**
	 * The color to draw this tile on the map.
	 */
	export interface MapColor3 {
	  g?: Green45;
	  r?: Red45;
	  b?: Blue45;
	}
	export interface Name57 {
	  text: EnglishText112;
	  description?: TranslatorHelperText92;
	}
	export interface SunlightDappling3 {
	  dapple_colors?: Colors4;
	  dapple_chance?: SpawnChance4;
	}
	/**
	 * The color to use for the sunlight dapples.
	 */
	export interface Colors4 {
	  [k: string]: {
	    element?: {
	      g?: Green46;
	      r?: Red46;
	      b?: Blue46;
	    };
	    order?: number;
	  };
	}
	/**
	 * If set, this tile will be allowed to touch water.
	 */
	export interface WaterInteraction1 {
	  shore_sprite: ShorelineUnderwaterSprite1;
	  shelf_sprite?: ShelfUnderwaterSprite1;
	}
	export interface BuffType {
	  wip?: WIP;
	  exclusive?: Exclusive1;
	  name: Name58;
	}
	export interface Name58 {
	  text: EnglishText113;
	}
	/**
	 * A tag used to convey properties of an item in Crashlands 2. All tags have mechanical implications for how the item is handled by various game systems.
	 */
	export interface ItemTag {
	  respawnable?: Respawnable1;
	  recipe_category?: RecipeCategory1;
	  wip?: WIP;
	  parent_tag?: ParentTag;
	  inventory_sound?: InventorySound3;
	  crafting_effort?: CraftingEffortMultiplier;
	  num_craft_for_skill?: NumCraftsForFirstSkillLevel;
	  name: TagName;
	  invulnerable?: Invulnerable;
	  editor_category?: EditorCategory1;
	  settable_on_items?: SettableOnItems;
	  priority: TagPriority;
	  uicon?: UIIcon28;
	  buildmode?: BuildModeAccessible;
	}
	/**
	 * If the tag is displayed to the player (e.g. on the Equipment screen), they will see this name.
	 */
	export interface TagName {
	  text: EnglishText114;
	  description?: TranslatorHelperText93;
	}
	/**
	 * A sprite asset found in the Game Maker project.
	 */
	export interface Sprite4 {
	  spine: Spine;
	  transitions?: SpineTransitions;
	  wip?: WIP;
	  blinks?: SpineBlinkTracks;
	  name: Name59;
	}
	export interface SpineTransitions {
	  [k: string]: {
	    element?: TransitionGroup;
	    order?: number;
	  };
	}
	export interface TransitionGroup {
	  source: From;
	  transition: Transition;
	  transition_reversed?: TransitionReversed;
	  destination: To;
	}
	export interface From {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface Transition {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface TransitionReversed {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface To {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * Each blink track will run independently, allowing you to have a character that blinks with multiple sets of eyes (or whatever it has).
	 */
	export interface SpineBlinkTracks {
	  [k: string]: {
	    element?: {
	      track_name?: TrackName;
	      slots?: AttachmentSlots;
	    };
	    order?: number;
	  };
	}
	export interface AttachmentSlots {
	  [k: string]: {
	    element?: {
	      behaviors?: Behaviors;
	      slot?: SlotName;
	    };
	    order?: number;
	  };
	}
	export interface Behaviors {
	  [k: string]: {
	    element?: Behavior;
	    order?: number;
	  };
	}
	export interface Behavior {
	  conditions?: Conditions7;
	  visuals: Visuals;
	}
	export interface Conditions7 {
	  playing_animations?: PlayingAnimation;
	  images?: OtherAttachmentImage;
	}
	/**
	 * Animations that must be playing for this blink group to be active. If no animations are specified, the blink will always run.
	 */
	export interface PlayingAnimation {
	  animations?: AnimationNames;
	  track?: AnimationTrack;
	}
	export interface AnimationNames {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * Check whether another attachment slot is set to a certain image name.
	 */
	export interface OtherAttachmentImage {
	  slot?: Slot;
	  images?: Attachment;
	}
	/**
	 * If any of these images are set in the slot, this condition is met.
	 */
	export interface Attachment {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface Visuals {
	  image?: Image;
	  alpha?: Alpha1;
	}
	/**
	 * Name of the attachment image to set in this slot. Set to '-1' to remove the attachment image from the slot.
	 */
	export interface Image {
	  active?: Active;
	  inactive?: Inactive;
	}
	/**
	 * If set, will override the alpha of the attachment slot.
	 */
	export interface Alpha1 {
	  active?: Active1;
	  inactive?: Inactive1;
	}
	export interface SeedPack {
	  free_regrows?: FreeRegrows;
	  grows_into: GrowsInto;
	  growth_minutes: MinutesToGrow;
	  sprite: WorldSprite21;
	  description: Description27;
	  required_tile: GardenBed1;
	  wip?: WIP;
	  num_regrows: NumberOfRegrows;
	  shiny_boost?: ShinyBoostingInsights;
	  using_lighting?: UseLighting12;
	  name: Name60;
	  regrow_insights?: RegrowBoostingInsights;
	  priors?: ProgressionPriors;
	  growth_minutes_insight_modifier?: GrowthMinutesInsightModifier;
	  editor_group?: EditorGroup27;
	  light_emitter?: LightEmitter;
	  shiny_chance: ShinyChance;
	  recipe?: Recipe13;
	  uicon: UIIcon29;
	}
	/**
	 * Each time this Seed Pack grows into a plant, it can have a chance to not consume one of its 'Regrows'.
	 */
	export interface FreeRegrows {
	  free_regrow_chance?: FreeRegrowChance;
	  insight?: FreeRegrowInsight;
	}
	export interface Description27 {
	  text: EnglishText115;
	  description?: TranslatorHelperText94;
	}
	/**
	 * You can have Insights give additional, independent chances for a Seed Pack to become shiny (if fertilized).
	 */
	export interface ShinyBoostingInsights {
	  [k: string]: {
	    element?: ShinyBoostingInsight;
	    order?: number;
	  };
	}
	export interface ShinyBoostingInsight {
	  chance?: AddedChance;
	  insight?: Insight18;
	}
	export interface Name60 {
	  text: EnglishText116;
	  description?: TranslatorHelperText95;
	}
	export interface GrowthMinutesInsightModifier {
	  amount?: ChangePerPoint32;
	  insight?: Insight20;
	}
	export interface Recipe13 {
	  components: Ingredients14;
	  artisans?: ArtisansRequired13;
	  badge_cost_modifiers?: CostModifiedByResearch13;
	  output_quantity?: OutputQuantity11;
	  badge_output_modifiers?: OutputModifiedByResearch11;
	  source?: UnlockedBy55;
	  effort_modifier?: EffortModifier16;
	  station: Station13;
	}
	export interface Ingredients14 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface ArtisansRequired13 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface CostModifiedByResearch13 {
	  [k: string]: {
	    element?: {
	      badge_id?: ResearchNode24;
	      value?: ChangePerPoint33;
	    };
	    order?: number;
	  };
	}
	export interface OutputModifiedByResearch11 {
	  [k: string]: {
	    element?: {
	      style?: Style15;
	      badge_id?: ResearchNode25;
	      value?: ChangePerPoint34;
	    };
	    order?: number;
	  };
	}
	/**
	 * A sound asset controlled by the Earparty audio engine. Earparty Sounds can contain multiple audio files, which are played as variations of the Earparty Sound.
	 */
	export interface EarpartySound {
	  looping?: Looping4;
	  seconds_cooldown?: CooldownSeconds1;
	  gain: Gain;
	  wip?: WIP;
	  variability?: Variability;
	  falloff?: Falloff1;
	  probability?: PlayChance;
	  name: NameFromGMSProject;
	  group: EarpartyGroup1;
	  auto_pitch?: AutoPitch;
	  priority: Priority;
	  non_repeating_number?: NonRepeatingInterval;
	}
	/**
	 * If the sound is played positionally, the range for it to longer be audible.
	 */
	export interface Falloff1 {
	  value1?: Max73;
	  value0?: Min73;
	}
	export interface Dock2 {
	  flippable: Flippable7;
	  footstep_sound: FootstepSound4;
	  sprite: MainSprite4;
	  description?: Description28;
	  wip?: WIP;
	  placement_sound?: PlacementSound9;
	  undersprite?: UnderSprite4;
	  map_color: MapColor4;
	  name: Name61;
	  dapples?: SunlightDappling4;
	  editor_group?: EditorGroup28;
	  shore_interaction?: WaterInteraction2;
	  recipe?: Recipe14;
	  uicon: Icon10;
	}
	export interface Description28 {
	  text: EnglishText117;
	  description?: TranslatorHelperText96;
	}
	/**
	 * The color to draw this tile on the map.
	 */
	export interface MapColor4 {
	  g?: Green47;
	  r?: Red47;
	  b?: Blue47;
	}
	export interface Name61 {
	  text: EnglishText118;
	  description?: TranslatorHelperText97;
	}
	export interface SunlightDappling4 {
	  dapple_colors?: Colors5;
	  dapple_chance?: SpawnChance5;
	}
	/**
	 * The color to use for the sunlight dapples.
	 */
	export interface Colors5 {
	  [k: string]: {
	    element?: {
	      g?: Green48;
	      r?: Red48;
	      b?: Blue48;
	    };
	    order?: number;
	  };
	}
	/**
	 * If set, this tile will be allowed to touch water.
	 */
	export interface WaterInteraction2 {
	  shore_sprite: ShorelineUnderwaterSprite2;
	  shelf_sprite?: ShelfUnderwaterSprite2;
	}
	export interface Recipe14 {
	  components: Ingredients15;
	  artisans?: ArtisansRequired14;
	  badge_cost_modifiers?: CostModifiedByResearch14;
	  output_quantity?: OutputQuantity12;
	  badge_output_modifiers?: OutputModifiedByResearch12;
	  source?: UnlockedBy56;
	  effort_modifier?: EffortModifier17;
	  station: Station14;
	}
	export interface Ingredients15 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface ArtisansRequired14 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface CostModifiedByResearch14 {
	  [k: string]: {
	    element?: {
	      badge_id?: ResearchNode26;
	      value?: ChangePerPoint35;
	    };
	    order?: number;
	  };
	}
	export interface OutputModifiedByResearch12 {
	  [k: string]: {
	    element?: {
	      style?: Style16;
	      badge_id?: ResearchNode27;
	      value?: ChangePerPoint36;
	    };
	    order?: number;
	  };
	}
	export interface Moon {
	  days_per_cycle: DaysPerCycle;
	  wip?: WIP;
	  low_quality_night_color: NightColorLowQuality;
	  high_quality_night_color: NightColorHighQuality;
	  name: Name62;
	}
	/**
	 * What colors to use for night when Low Quality lighting is enabled.
	 */
	export interface NightColorLowQuality {
	  g?: Green49;
	  r?: Red49;
	  b?: Blue49;
	}
	/**
	 * What colors to use for night when High Quality lighting is enabled.
	 */
	export interface NightColorHighQuality {
	  g?: Green50;
	  r?: Red50;
	  b?: Blue50;
	}
	export interface Name62 {
	  text: EnglishText119;
	}
	export interface Wieldable {
	  sprite?: WorldSprite22;
	  level: Level6;
	  description: Description29;
	  wip?: WIP;
	  wield_sound: WieldSound;
	  fishing?: Fishing;
	  type: Type5;
	  priors?: ProgressionPriors;
	  manual_pickup?: ManualPickup1;
	  swing_sound: UseSound;
	  recipe?: Recipe15;
	  uicon: UIIcon30;
	  reactions?: Reactions1;
	  level_viewer_ignore?: IgnoreInLevelViewer3;
	  inventory_sound: InventorySound4;
	  equipment_default_stats?: DefaultStats2;
	  equipment_set?: EquipmentSet9;
	  name: Name63;
	  ability?: Ability10;
	  editor_group?: EditorGroup29;
	  stackable?: Stackable;
	  scale_modifier?: ScaleModifier7;
	  collection_sound?: CollectionSound3;
	  wield_spine_name?: SpineAttachmentName;
	}
	export interface Description29 {
	  text: EnglishText120;
	  description?: TranslatorHelperText98;
	}
	export interface Recipe15 {
	  components: Ingredients16;
	  artisans?: ArtisansRequired15;
	  badge_cost_modifiers?: CostModifiedByResearch15;
	  output_quantity?: OutputQuantity13;
	  badge_output_modifiers?: OutputModifiedByResearch13;
	  source?: UnlockedBy57;
	  effort_modifier?: EffortModifier18;
	  station: Station15;
	}
	export interface Ingredients16 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface ArtisansRequired15 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface CostModifiedByResearch15 {
	  [k: string]: {
	    element?: {
	      badge_id?: ResearchNode28;
	      value?: ChangePerPoint37;
	    };
	    order?: number;
	  };
	}
	export interface OutputModifiedByResearch13 {
	  [k: string]: {
	    element?: {
	      style?: Style17;
	      badge_id?: ResearchNode29;
	      value?: ChangePerPoint38;
	    };
	    order?: number;
	  };
	}
	/**
	 * You can allocate stats for this item to have on it by default when obtained. This will not affect already-obtained items.
	 */
	export interface DefaultStats2 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface Name63 {
	  text: EnglishText121;
	  description?: TranslatorHelperText99;
	}
	export interface Creature {
	  friendly_help_range: FriendlyHelpRange;
	  shadow?: Shadow;
	  sprite: WorldSprite23;
	  level: Level7;
	  noncombat_ai: NonCombatAI;
	  wip?: WIP;
	  effort_modifier?: EffortModifier19;
	  resistance_profile?: ResistanceProfile3;
	  protection?: ProtectionBehaviors;
	  random_scaling?: RandomScalingMinimum3;
	  using_lighting?: UseLighting13;
	  object: Object6;
	  spine_skin?: SpineSkin1;
	  priors?: ProgressionPriors;
	  uicon: UIIcon31;
	  deaggro_seconds: DeaggroDuration;
	  hp_bar_offset?: HealthBarVerticalOffset;
	  reactions?: Reactions1;
	  injury_sounds?: InjurySounds3;
	  immunities?: Immunities;
	  size: Size8;
	  combat_ai?: CombatBehavior;
	  level_viewer_ignore?: IgnoreInLevelViewer4;
	  hp_modifier?: HPModifier2;
	  aggro_radius: AggroDeaggroDistances;
	  relative_level?: RelativeLevel3;
	  family?: Family;
	  loot?: Loot2;
	  name: Name64;
	  data_fields?: DataFields5;
	  respawn_multiplier?: RespawnTimeMultiplier1;
	  death_sounds?: DestructionSounds3;
	  movement: Motion2;
	  editor_group?: EditorGroup30;
	  light_emitter?: LightEmitter;
	  scale_modifier?: ScaleModifier8;
	  flee?: Fleeing;
	}
	/**
	 * How the creature behaves when it is just existing in the world.
	 */
	export interface NonCombatAI {
	  states: NonCombatStates;
	}
	export interface NonCombatStates {
	  idle: Idle;
	  roam: Roam;
	  interactions?: Interactions;
	}
	export interface Idle {
	  duration: DurationSeconds1;
	  weight: Weight2;
	  repeating: Repeatable;
	}
	export interface DurationSeconds1 {
	  value1?: Max74;
	  value0?: Min74;
	}
	export interface Roam {
	  repeating: Repeatable1;
	  movement?: MotionOverride3;
	  distance: RoamDistance;
	  weight: Weight3;
	  attract?: Attractants;
	  repel?: Repellants;
	}
	export interface MotionOverride3 {
	  moving?: MovementVisuals5;
	  stationary?: StationaryVisuals5;
	  movespeed?: MovementSpeed5;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave10 {
	  [k: string]: {
	    element?: SineWave11;
	    order?: number;
	  };
	}
	export interface SineWave11 {
	  amplitude?: Amplitude11;
	  speed?: Speed15;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements10 {
	  [k: string]: {
	    element?: FlapEvent10;
	    order?: number;
	  };
	}
	export interface FlapEvent10 {
	  distance?: VerticalDistance10;
	  impulse_seconds?: ImpulseDurationSeconds10;
	  recovery_seconds?: RecoveryDurationSeconds10;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave11 {
	  [k: string]: {
	    element?: SineWave12;
	    order?: number;
	  };
	}
	export interface SineWave12 {
	  amplitude?: Amplitude12;
	  speed?: Speed16;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements11 {
	  [k: string]: {
	    element?: FlapEvent11;
	    order?: number;
	  };
	}
	export interface FlapEvent11 {
	  distance?: VerticalDistance11;
	  impulse_seconds?: ImpulseDurationSeconds11;
	  recovery_seconds?: RecoveryDurationSeconds11;
	}
	/**
	 * How far the creature will wander from its current position.
	 */
	export interface RoamDistance {
	  value1?: Max75;
	  value0?: Min75;
	}
	/**
	 * World elements that the creature can wander toward.
	 */
	export interface Attractants {
	  probability: AttractionProbability;
	  detection_range: DetectionRange;
	  movement?: MotionOverride4;
	  targets: AttractionTargets;
	}
	export interface MotionOverride4 {
	  moving?: MovementVisuals6;
	  stationary?: StationaryVisuals6;
	  movespeed?: MovementSpeed6;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave12 {
	  [k: string]: {
	    element?: SineWave13;
	    order?: number;
	  };
	}
	export interface SineWave13 {
	  amplitude?: Amplitude13;
	  speed?: Speed17;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements12 {
	  [k: string]: {
	    element?: FlapEvent12;
	    order?: number;
	  };
	}
	export interface FlapEvent12 {
	  distance?: VerticalDistance12;
	  impulse_seconds?: ImpulseDurationSeconds12;
	  recovery_seconds?: RecoveryDurationSeconds12;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave13 {
	  [k: string]: {
	    element?: SineWave14;
	    order?: number;
	  };
	}
	export interface SineWave14 {
	  amplitude?: Amplitude14;
	  speed?: Speed18;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements13 {
	  [k: string]: {
	    element?: FlapEvent13;
	    order?: number;
	  };
	}
	export interface FlapEvent13 {
	  distance?: VerticalDistance13;
	  impulse_seconds?: ImpulseDurationSeconds13;
	  recovery_seconds?: RecoveryDurationSeconds13;
	}
	export interface AttractionTargets {
	  [k: string]: {
	    element?: AttractionBehavior;
	    order?: number;
	  };
	}
	export interface AttractionBehavior {
	  weight: Weight4;
	  detection_range?: DetectionRange1;
	  movement?: MotionOverride5;
	  targets: Targets7;
	}
	export interface MotionOverride5 {
	  moving?: MovementVisuals7;
	  stationary?: StationaryVisuals7;
	  movespeed?: MovementSpeed7;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave14 {
	  [k: string]: {
	    element?: SineWave15;
	    order?: number;
	  };
	}
	export interface SineWave15 {
	  amplitude?: Amplitude15;
	  speed?: Speed19;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements14 {
	  [k: string]: {
	    element?: FlapEvent14;
	    order?: number;
	  };
	}
	export interface FlapEvent14 {
	  distance?: VerticalDistance14;
	  impulse_seconds?: ImpulseDurationSeconds14;
	  recovery_seconds?: RecoveryDurationSeconds14;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave15 {
	  [k: string]: {
	    element?: SineWave16;
	    order?: number;
	  };
	}
	export interface SineWave16 {
	  amplitude?: Amplitude16;
	  speed?: Speed20;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements15 {
	  [k: string]: {
	    element?: FlapEvent15;
	    order?: number;
	  };
	}
	export interface FlapEvent15 {
	  distance?: VerticalDistance15;
	  impulse_seconds?: ImpulseDurationSeconds15;
	  recovery_seconds?: RecoveryDurationSeconds15;
	}
	export interface Targets7 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * World elements that the creature will try to get away from. This will always take precedence over attractants.
	 */
	export interface Repellants {
	  probability: RepelProbability;
	  detection_range: DetectionRange2;
	  movement?: MotionOverride6;
	  targets: RepelTargets;
	}
	export interface MotionOverride6 {
	  moving?: MovementVisuals8;
	  stationary?: StationaryVisuals8;
	  movespeed?: MovementSpeed8;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave16 {
	  [k: string]: {
	    element?: SineWave17;
	    order?: number;
	  };
	}
	export interface SineWave17 {
	  amplitude?: Amplitude17;
	  speed?: Speed21;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements16 {
	  [k: string]: {
	    element?: FlapEvent16;
	    order?: number;
	  };
	}
	export interface FlapEvent16 {
	  distance?: VerticalDistance16;
	  impulse_seconds?: ImpulseDurationSeconds16;
	  recovery_seconds?: RecoveryDurationSeconds16;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave17 {
	  [k: string]: {
	    element?: SineWave18;
	    order?: number;
	  };
	}
	export interface SineWave18 {
	  amplitude?: Amplitude18;
	  speed?: Speed22;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements17 {
	  [k: string]: {
	    element?: FlapEvent17;
	    order?: number;
	  };
	}
	export interface FlapEvent17 {
	  distance?: VerticalDistance17;
	  impulse_seconds?: ImpulseDurationSeconds17;
	  recovery_seconds?: RecoveryDurationSeconds17;
	}
	export interface RepelTargets {
	  [k: string]: {
	    element?: RepelBehavior;
	    order?: number;
	  };
	}
	export interface RepelBehavior {
	  weight: Weight5;
	  detection_range?: DetectionRange3;
	  movement?: MotionOverride7;
	  targets: Targets8;
	}
	export interface MotionOverride7 {
	  moving?: MovementVisuals9;
	  stationary?: StationaryVisuals9;
	  movespeed?: MovementSpeed9;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave18 {
	  [k: string]: {
	    element?: SineWave19;
	    order?: number;
	  };
	}
	export interface SineWave19 {
	  amplitude?: Amplitude19;
	  speed?: Speed23;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements18 {
	  [k: string]: {
	    element?: FlapEvent18;
	    order?: number;
	  };
	}
	export interface FlapEvent18 {
	  distance?: VerticalDistance18;
	  impulse_seconds?: ImpulseDurationSeconds18;
	  recovery_seconds?: RecoveryDurationSeconds18;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave19 {
	  [k: string]: {
	    element?: SineWave20;
	    order?: number;
	  };
	}
	export interface SineWave20 {
	  amplitude?: Amplitude20;
	  speed?: Speed24;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements19 {
	  [k: string]: {
	    element?: FlapEvent19;
	    order?: number;
	  };
	}
	export interface FlapEvent19 {
	  distance?: VerticalDistance19;
	  impulse_seconds?: ImpulseDurationSeconds19;
	  recovery_seconds?: RecoveryDurationSeconds19;
	}
	export interface Targets8 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * The creature can use abilities on things in the environment.
	 */
	export interface Interactions {
	  [k: string]: {
	    element?: Interaction;
	    order?: number;
	  };
	}
	export interface Interaction {
	  casts: Casts;
	  name: NameInternal8;
	  repeating: Repeatable2;
	  ability: Ability11;
	  movement?: MotionOverride8;
	  weight: Weight6;
	  detection_radius: DetectionRadius;
	  targets?: TargetFilter6;
	}
	/**
	 * How many times the creature will attempt to use the ability if the target continues to exist.
	 */
	export interface Casts {
	  value1?: Max76;
	  value0?: Min76;
	}
	export interface MotionOverride8 {
	  moving?: MovementVisuals10;
	  stationary?: StationaryVisuals10;
	  movespeed?: MovementSpeed10;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave20 {
	  [k: string]: {
	    element?: SineWave21;
	    order?: number;
	  };
	}
	export interface SineWave21 {
	  amplitude?: Amplitude21;
	  speed?: Speed25;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements20 {
	  [k: string]: {
	    element?: FlapEvent20;
	    order?: number;
	  };
	}
	export interface FlapEvent20 {
	  distance?: VerticalDistance20;
	  impulse_seconds?: ImpulseDurationSeconds20;
	  recovery_seconds?: RecoveryDurationSeconds20;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave21 {
	  [k: string]: {
	    element?: SineWave22;
	    order?: number;
	  };
	}
	export interface SineWave22 {
	  amplitude?: Amplitude22;
	  speed?: Speed26;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements21 {
	  [k: string]: {
	    element?: FlapEvent21;
	    order?: number;
	  };
	}
	export interface FlapEvent21 {
	  distance?: VerticalDistance21;
	  impulse_seconds?: ImpulseDurationSeconds21;
	  recovery_seconds?: RecoveryDurationSeconds21;
	}
	/**
	 * The creature will attempt to use this ability on targets that match these filters. If no filters present, the creature will just cast the ability.
	 */
	export interface TargetFilter6 {
	  [k: string]: {
	    element?: Filter41;
	    order?: number;
	  };
	}
	export interface Filter41 {
	  combatants_only?: Combatants39;
	  datafield_evaluations?: DatafieldEvaluations40;
	  require_all_tags?: RequireAllTags39;
	  exclude?: Exclude40;
	  buffs?: Buffs88;
	  items?: Items59;
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations40 {
	  [k: string]: {
	    element?: {
	      value1?: number;
	      value0?: string;
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	    };
	    order?: number;
	  };
	}
	export interface Buffs88 {
	  buffs: Buffs89;
	  require_all: RequireAll53;
	  stacks?: Stacks50;
	}
	export interface Buffs89 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks50 {
	  value1?: Quantity87;
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	}
	export interface Items59 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * These are items that the creature will try to protect if something bad happens to them.
	 */
	export interface ProtectionBehaviors {
	  [k: string]: {
	    element?: ProtectionBehavior;
	    order?: number;
	  };
	}
	export interface ProtectionBehavior {
	  death?: RespondToDestruction;
	  damage?: RespondToDamage;
	  items?: Items60;
	}
	export interface Items60 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * Sound effects to play when this thing takes damage.
	 */
	export interface InjurySounds3 {
	  [k: string]: {
	    element?: {
	      major_injury_sound?: Major3;
	      minor_injury_sound?: Minor3;
	      chance_of_playing?: Chance14;
	    };
	    order?: number;
	  };
	}
	export interface Size8 {
	  height?: Height9;
	  width?: Width9;
	}
	/**
	 * How the creature fights during combat.
	 */
	export interface CombatBehavior {
	  aggro_sound: AggroSound;
	  aggro_player: AggroOntoPlayer;
	  aggro_targets?: AggroTargets;
	  movement?: MotionOverride9;
	  abilities: CombatAbilities;
	  post_movement_pause?: PostMovementPause;
	}
	/**
	 * The creature will attack these targets when they get into its aggro range.
	 */
	export interface AggroTargets {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface MotionOverride9 {
	  moving?: MovementVisuals11;
	  stationary?: StationaryVisuals11;
	  movespeed?: MovementSpeed11;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave22 {
	  [k: string]: {
	    element?: SineWave23;
	    order?: number;
	  };
	}
	export interface SineWave23 {
	  amplitude?: Amplitude23;
	  speed?: Speed27;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements22 {
	  [k: string]: {
	    element?: FlapEvent22;
	    order?: number;
	  };
	}
	export interface FlapEvent22 {
	  distance?: VerticalDistance22;
	  impulse_seconds?: ImpulseDurationSeconds22;
	  recovery_seconds?: RecoveryDurationSeconds22;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave23 {
	  [k: string]: {
	    element?: SineWave24;
	    order?: number;
	  };
	}
	export interface SineWave24 {
	  amplitude?: Amplitude24;
	  speed?: Speed28;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements23 {
	  [k: string]: {
	    element?: FlapEvent23;
	    order?: number;
	  };
	}
	export interface FlapEvent23 {
	  distance?: VerticalDistance23;
	  impulse_seconds?: ImpulseDurationSeconds23;
	  recovery_seconds?: RecoveryDurationSeconds23;
	}
	export interface CombatAbilities {
	  [k: string]: {
	    element?: CombatAbility;
	    order?: number;
	  };
	}
	export interface CombatAbility {
	  ability: Ability12;
	  movement?: MotionOverride10;
	  weight: Weight7;
	  post_ability_pause?: PostAbilityPause2;
	  post_ability_pause_ignore_chance?: PostAbilityPauseIgnoreChance1;
	  direction_randomness?: DirectionRandomness2;
	  post_movement_pause?: PostMovementPauseOverride;
	  followup_abilities?: FollowupAbilities1;
	}
	export interface MotionOverride10 {
	  moving?: MovementVisuals12;
	  stationary?: StationaryVisuals12;
	  movespeed?: MovementSpeed12;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave24 {
	  [k: string]: {
	    element?: SineWave25;
	    order?: number;
	  };
	}
	export interface SineWave25 {
	  amplitude?: Amplitude25;
	  speed?: Speed29;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements24 {
	  [k: string]: {
	    element?: FlapEvent24;
	    order?: number;
	  };
	}
	export interface FlapEvent24 {
	  distance?: VerticalDistance24;
	  impulse_seconds?: ImpulseDurationSeconds24;
	  recovery_seconds?: RecoveryDurationSeconds24;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave25 {
	  [k: string]: {
	    element?: SineWave26;
	    order?: number;
	  };
	}
	export interface SineWave26 {
	  amplitude?: Amplitude26;
	  speed?: Speed30;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements25 {
	  [k: string]: {
	    element?: FlapEvent25;
	    order?: number;
	  };
	}
	export interface FlapEvent25 {
	  distance?: VerticalDistance25;
	  impulse_seconds?: ImpulseDurationSeconds25;
	  recovery_seconds?: RecoveryDurationSeconds25;
	}
	/**
	 * If set, the creature will wait for this many seconds after using this ability before moving on to the next ability.
	 */
	export interface PostAbilityPause2 {
	  value1?: MaxSeconds5;
	  value0?: MinSeconds5;
	}
	/**
	 * If the creature moves in combat to get into position to perform this ability, it can wait for a brief moment before beginning to cast.
	 */
	export interface PostMovementPauseOverride {
	  value1?: MaxSeconds6;
	  value0?: MinSeconds6;
	}
	/**
	 * If set, these abilities will be cast after the current one. These abilities must already be listed in the creature's Combat Abilities, or they will be ignored.
	 */
	export interface FollowupAbilities1 {
	  [k: string]: {
	    element?: FollowupAbility1;
	    order?: number;
	  };
	}
	export interface FollowupAbility1 {
	  instant?: Instant1;
	  weight?: Weight8;
	  ability?: Ability13;
	}
	/**
	 * If the creature moves in combat to get into position to perform an ability, it can wait for a brief moment before beginning to use its abilities.
	 */
	export interface PostMovementPause {
	  value1?: MaxSeconds7;
	  value0?: MinSeconds7;
	}
	/**
	 * When something gets within the minimum, the creature will react. When it goes outside the maximum range, the creature will stop reacting. There should ideally be at least a gap of 1 grid space between the minimum and the maximum to prevent rapid deaggro/reaggro.
	 */
	export interface AggroDeaggroDistances {
	  value1?: DeaggroRadius;
	  value0?: AggroRadius;
	}
	export interface Loot2 {
	  [k: string]: {
	    element?: LootGroup2;
	    order?: number;
	  };
	}
	/**
	 * A collection of items that share the same rules about how they drop.
	 */
	export interface LootGroup2 {
	  source_listed?: IncludeAsSource1;
	  time_requirement?: TimeOfDay2;
	  datafield_evaluations?: DatafieldEvaluations41;
	  item_ids_used?: ItemsUsed5;
	  bonus_loot?: ConsiderAsBonus1;
	  items_dropped: Items61;
	  datafield_link?: DatafieldQuantityLink1;
	  num_drops?: DropQuantity2;
	  drop_chance?: DropChance2;
	  badge_requirement?: UnlockedBy58;
	  item_tags_used?: ItemTagsUsed2;
	  ignore_in_progression_map?: IgnoreInProgressionMap2;
	  trigger: Trigger3;
	  areas?: Areas2;
	}
	/**
	 * This loot group can check for data fields on the entity, and only drop if the conditions are met.
	 */
	export interface DatafieldEvaluations41 {
	  [k: string]: {
	    element?: {
	      value1?: number;
	      value0?: string;
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	    };
	    order?: number;
	  };
	}
	/**
	 * Specific items required to be used on this for loot to drop.
	 */
	export interface ItemsUsed5 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface Items61 {
	  [k: string]: {
	    element?: {
	      weight?: number;
	      locked?: boolean;
	      item?: string;
	    };
	    order?: number;
	  };
	}
	/**
	 * A random number of items will drop in this range.
	 */
	export interface DropQuantity2 {
	  value1?: Max77;
	  value0?: Min77;
	}
	/**
	 * The kinds of items required to be used on this for loot to drop.
	 */
	export interface ItemTagsUsed2 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * If set, the loot will only drop from something within the listed areas.
	 */
	export interface Areas2 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface Name64 {
	  text: EnglishText122;
	  description?: TranslatorHelperText100;
	}
	/**
	 * Attaching data fields to this world element will make them readable by other game mechanics/elements. Can be used to store custom data on a world element.
	 */
	export interface DataFields5 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	/**
	 * Sound effects to play when this thing is destroyed.
	 */
	export interface DestructionSounds3 {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface Motion2 {
	  moving?: MovementVisuals13;
	  stationary?: StationaryVisuals13;
	  movespeed?: MovementSpeed13;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave26 {
	  [k: string]: {
	    element?: SineWave27;
	    order?: number;
	  };
	}
	export interface SineWave27 {
	  amplitude?: Amplitude27;
	  speed?: Speed31;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements26 {
	  [k: string]: {
	    element?: FlapEvent26;
	    order?: number;
	  };
	}
	export interface FlapEvent26 {
	  distance?: VerticalDistance26;
	  impulse_seconds?: ImpulseDurationSeconds26;
	  recovery_seconds?: RecoveryDurationSeconds26;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave27 {
	  [k: string]: {
	    element?: SineWave28;
	    order?: number;
	  };
	}
	export interface SineWave28 {
	  amplitude?: Amplitude28;
	  speed?: Speed32;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements27 {
	  [k: string]: {
	    element?: FlapEvent27;
	    order?: number;
	  };
	}
	export interface FlapEvent27 {
	  distance?: VerticalDistance27;
	  impulse_seconds?: ImpulseDurationSeconds27;
	  recovery_seconds?: RecoveryDurationSeconds27;
	}
	/**
	 * This creature may run in fear from things by entering a 'fleeing' state.
	 */
	export interface Fleeing {
	  targets?: FleeTargets;
	  health_based?: FleeWhenInjured;
	  sound?: FleeSound;
	  seconds: FleeDurationSeconds;
	  movement?: MotionOverride11;
	}
	/**
	 * The creature will immediately begin fleeing from these targets if it enters combat with them.
	 */
	export interface FleeTargets {
	  [k: string]: {
	    element?: string;
	    order?: number;
	  };
	}
	export interface FleeWhenInjured {
	  probability?: Probablity;
	  health_threshold?: HealthThreshold2;
	}
	export interface FleeDurationSeconds {
	  value1?: Max78;
	  value0?: Min78;
	}
	export interface MotionOverride11 {
	  moving?: MovementVisuals14;
	  movespeed?: MovementSpeed14;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave28 {
	  [k: string]: {
	    element?: SineWave29;
	    order?: number;
	  };
	}
	export interface SineWave29 {
	  amplitude?: Amplitude29;
	  speed?: Speed33;
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements28 {
	  [k: string]: {
	    element?: FlapEvent28;
	    order?: number;
	  };
	}
	export interface FlapEvent28 {
	  distance?: VerticalDistance28;
	  impulse_seconds?: ImpulseDurationSeconds28;
	  recovery_seconds?: RecoveryDurationSeconds28;
	}
	/**
	 * Details about a level of quality for an item.
	 */
	export interface ItemQuality {
	  color: Color10;
	  dark_color: DarkColor;
	  wip?: WIP;
	  name: QualityName;
	  effort: Effort;
	}
	/**
	 * The color to use when showing items of this quality level.
	 */
	export interface Color10 {
	  g?: Green51;
	  r?: Red51;
	  b?: Blue51;
	}
	/**
	 * The color to use as a backdrop when showing items of this quality level.
	 */
	export interface DarkColor {
	  g?: Green52;
	  r?: Red52;
	  b?: Blue52;
	}
	/**
	 * The term used to describe items of this level of quality (e.g. Common, Rare, Legendary
	 */
	export interface QualityName {
	  text: EnglishText123;
	  description?: TranslatorHelperText101;
	}
	/**
	 * A particle system asset defined in the Game Maker project.
	 */
	export interface ParticleSystem5 {
	  wip?: WIP;
	  name: Name65;
	}
	export interface BossDialogueSequence4 {
	  animation?: BossSpineAnimation;
	  moments: DialogueMoments;
	}
	/**
	 * A pickupable recipe.
	 */
	export interface Schematic {
	  priors?: ProgressionPriors;
	  wip?: WIP;
	  editor_group?: EditorGroup31;
	  name: NameInternal9;
	}
	/**
	 * A group of creature types that consider each other to be friendly and part of the same species. Creatures in a family won't damage each other.
	 */
	export interface CreatureFamily {
	  wip?: WIP;
	  name: FamilyNameInternal;
	  icon: IconInternal;
	}
	export interface CameraAnchor {
	  zoom?: Zoom;
	  radius: RadiusGrid;
	  wip?: WIP;
	  name: NameInternal10;
	  bias: BiasAmount;
	}
	
}
