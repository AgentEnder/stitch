export namespace Crashlands2 {
	/* eslint-disable */
	/**
	 * This file was automatically generated by json-schema-to-typescript.
	 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
	 * and run json-schema-to-typescript to regenerate this file.
	 */
	
	export type Brightness = number;
	/**
	 * The number of tiles that the light will illuminate (although it does fade out at the edges).
	 */
	export type TileRadius = number;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude = number;
	export type Affects = "Brightness" | "Radius";
	export type Red = number;
	export type Blue = number;
	export type Green = number;
	/**
	 * Whether the tile should be X-flipped randomly when placed.
	 */
	export type Flippable = boolean;
	/**
	 * The sprite to use when displaying the tile in the UI (e.g. Build Mode).
	 */
	export type Icon = string;
	export type Red1 = number;
	export type Blue1 = number;
	export type Green1 = number;
	/**
	 * If this mote is a draft, it will be unavailable to players and won't be part of the localization system. 'Review' means it is still a draft, but ready to have a final pass for staging. If it is staged, it will be localized but still unavailable to players.
	 */
	export type Staging = "Draft" | "Review" | "Staged";
	/**
	 * The sound to play when the player walks on this tile.
	 */
	export type FootstepSound = string;
	/**
	 * The sprite to draw below the main sprite. Subimages must correspond with the Sprite.
	 */
	export type UnderSprite = string;
	/**
	 * The sound to play when this tile is placed in the editor or in Build Mode.
	 */
	export type PlacementSound = string;
	/**
	 * The probability of a given tile having Dapples on it.
	 */
	export type SpawnChance = number;
	export type Red2 = number;
	export type Blue2 = number;
	export type Green2 = number;
	/**
	 * This is a large sprite that will be drawn underwater if this tile is at a shoreline. It helps create a sense of the water getting deeper.
	 */
	export type ShelfUnderwaterSprite = string;
	/**
	 * If this tile is against water, the Shoreline Water Sprite will be drawn in the water to convey how the tile interacts with the water.
	 */
	export type ShorelineUnderwaterSprite = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip = boolean;
	export type EnglishText = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup = string;
	/**
	 * The primary sprite of the tile.
	 */
	export type MainSprite = string;
	/**
	 * Whether the tile should be X-flipped randomly when placed.
	 */
	export type Flippable1 = boolean;
	/**
	 * The sprite to use when displaying the tile in the UI (e.g. Build Mode).
	 */
	export type Icon1 = string;
	export type Red3 = number;
	export type Blue3 = number;
	export type Green3 = number;
	/**
	 * The sound to play when the player walks on this tile.
	 */
	export type FootstepSound1 = string;
	/**
	 * The sprite to draw below the main sprite. Subimages must correspond with the Sprite.
	 */
	export type UnderSprite1 = string;
	/**
	 * The sound to play when this tile is placed in the editor or in Build Mode.
	 */
	export type PlacementSound1 = string;
	/**
	 * The probability of a given tile having Dapples on it.
	 */
	export type SpawnChance1 = number;
	export type Red4 = number;
	export type Blue4 = number;
	export type Green4 = number;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip1 = boolean;
	export type EnglishText1 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText1 = string;
	/**
	 * What workstation the player must be near to craft this recipe.
	 */
	export type Station = string;
	export type Style = "Additive" | "Multiplicative";
	export type ChangePerPoint = number;
	export type ResearchNode = string;
	export type ChangePerPoint1 = number;
	export type ResearchNode1 = string;
	export type UnlockedBy = string;
	/**
	 * Change this number to increase or decrease the number of materials required to craft this item.
	 */
	export type EffortModifier = number;
	export type OutputQuantity = number;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup1 = string;
	/**
	 * The primary sprite of the tile.
	 */
	export type MainSprite1 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip2 = boolean;
	export type EnglishText2 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText2 = string;
	/**
	 * Whether the player walks over the top of this item.
	 */
	export type Underfoot = boolean;
	export type Width = number;
	export type Height = number;
	/**
	 * Whether the object can be passed through or not. Solid objects cannot move, and they use the grid for collisions. So if a solid object is much smaller than a grid space, it will cause visual confusion. If the item is larger than a grid space, it will become a 2x2 or 3x3, etc... to fit.
	 */
	export type Solid = boolean;
	/**
	 * The type of hitbox to use. This will influence collisions, as well as how the object intercepts mouse clicks.
	 */
	export type Type = "Cylinder" | "Cone" | "Box" | "Pyramid";
	/**
	 * If true, this item stop rendering while underneath a building's roof.
	 */
	export type HideUnderRoof = boolean;
	/**
	 * If false, the object will always render itself at its normal color and won't be darkened or brightened by lighting.
	 */
	export type UseLighting = boolean;
	export type Object = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip3 = boolean;
	export type EnglishText3 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText3 = string;
	/**
	 * What workstation the player must be near to craft this recipe.
	 */
	export type Station1 = string;
	export type Style1 = "Additive" | "Multiplicative";
	export type ChangePerPoint2 = number;
	export type ResearchNode2 = string;
	export type ChangePerPoint3 = number;
	export type ResearchNode3 = string;
	export type UnlockedBy1 = string;
	/**
	 * Change this number to increase or decrease the number of materials required to craft this item.
	 */
	export type EffortModifier1 = number;
	export type OutputQuantity1 = number;
	export type Duration =
	  | {
	      duration_type?: "Time";
	      time: TimeSeconds;
	    }
	  | {
	      duration_type?: "Animation";
	    }
	  | {
	      duration_type?: "Indefinite";
	    };
	export type Min = number;
	export type Max = number;
	export type Condition =
	  | {
	      abilities?: Abilities;
	      casting_state: Casting;
	      condition_type?: "Ability";
	    }
	  | {
	      datafield_evaluation: Evaluation;
	      condition_type?: "Datafield";
	    }
	  | {
	      daytime: DuringDaytime;
	      condition_type?: "Daylight";
	    }
	  | {
	      combat: InCombat;
	      condition_type?: "Combat";
	    }
	  | {
	      timestamp: Timestamp;
	      insight_modifier?: InsightModifier;
	      condition_type?: "Timestamp";
	      evaluation: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      minutes_passed: MinutesSinceTimestamp;
	    }
	  | {
	      condition_type?: "Moon";
	      moon: ActiveMoon;
	    }
	  | {
	      quest_status: QuestStatus;
	      quest: QuestToCheck;
	      condition_type?: "Quest";
	    }
	  | {
	      condition_type?: "Artisan Following";
	      following: Following;
	      artisan: Buddy;
	    }
	  | {
	      unlock_text?: InsightTooltip;
	      prerequisite: Insight1;
	      condition_type?: "Insight";
	    }
	  | {
	      proximity_quantity: NumberOfTargets;
	      proximity_range: DistanceRequiredGridSpaces;
	      proximity_targets: Targets;
	      proximity_ignores_stealth: IgnoreStealthedTargets;
	      condition_type?: "Proximity";
	    }
	  | {
	      condition_type?: "Health";
	      hp_evaluation: HealthEvaluation;
	    }
	  | {
	      require_all: RequireAll2;
	      condition_type?: "Item Equipped";
	      items: Items2;
	    }
	  | {
	      condition_type?: "Item Wielding";
	      items: Items3;
	    }
	  | {
	      num_pieces: NumberOfPiecesEquipped;
	      condition_type?: "Wearing Equipment Set";
	      equipment_set: EquipmentSet;
	    }
	  | {
	      condition_type?: "Buffs";
	      buffs: Buffs4;
	      buff_exclusive?: Exclusive;
	      buff_require_all: RequireAll3;
	      buff_check_self: CheckSelf;
	      buff_own_only: OwnBuffsOnly;
	      buff_num_targets?: NumberOfTargets1;
	      buff_target_filter?: BuffTargetFilter;
	      buff_proximity?: BuffTargetRange;
	      buff_stack_evaluation?: Stacks4;
	      buff_target: TargetEntity;
	    }
	  | {
	      condition_type?: "Boss Defeated";
	      boss: Boss;
	    }
	  | {
	      summoned_filter?: SummonedEntitiesFilter;
	      comparison: NumberSummoned;
	      condition_type?: "Summoned Entities";
	    }
	  | {
	      condition_type?: "Area";
	      areas: Areas;
	    }
	  | {
	      weather_ids: Weather;
	      condition_type?: "Weather";
	    }
	  | {
	      phase: Phase;
	      condition_type?: "Boss Phase";
	    };
	/**
	 * If set, the ability's casting state must match this checkbox.
	 */
	export type Casting = boolean;
	export type DuringDaytime = boolean;
	export type InCombat = boolean;
	export type Timestamp = string;
	export type Insight = string;
	/**
	 * How much the 'Minutes Since Timestamp' should be adjusted (up or down) for each point invested in the Insight.
	 */
	export type ChangePerPoint4 = number;
	/**
	 * If greater than 0, then this many minutes will have passed since the timestamp was set. If less than 0, the timestamp will be this many minutes from now.
	 */
	export type MinutesSinceTimestamp = number;
	export type ActiveMoon = string;
	export type QuestStatus = "Complete" | "Started" | "Not Started";
	/**
	 * The quest whose status we are querying.
	 */
	export type QuestToCheck = string;
	export type Following = boolean;
	export type Buddy = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip4 = boolean;
	export type EnglishText4 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText4 = string;
	export type Insight1 = string;
	export type Quantity = number;
	export type Evaluation1 = "==" | "!=" | "<" | "<=" | ">" | ">=";
	export type Min1 = number;
	export type Max1 = number;
	export type Quantity1 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude = boolean;
	export type Quantity2 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll1 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants1 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags1 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude1 = boolean;
	/**
	 * If checked, the proximity check will fail on targets that are stealthed.
	 */
	export type IgnoreStealthedTargets = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the items listed are equipped at the same time.
	 */
	export type RequireAll2 = boolean;
	/**
	 * If the player is wearing at least this many pieces, the condition will be met.
	 */
	export type NumberOfPiecesEquipped = number;
	export type EquipmentSet = string;
	/**
	 * If checked, this condition will only be considered met if the defined conditions are NOT met.
	 */
	export type Exclusive = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on yourself at the same time.
	 */
	export type RequireAll3 = boolean;
	/**
	 * Obsolete--delete.
	 */
	export type CheckSelf = boolean;
	/**
	 * If checked, only buffs created by you will be checked. Otherwise, all buffs will be checked.
	 */
	export type OwnBuffsOnly = boolean;
	export type Quantity3 = number;
	export type Quantity4 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll4 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants2 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags2 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude2 = boolean;
	export type Quantity5 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll5 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants3 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags3 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude3 = boolean;
	export type Min2 = number;
	export type Max2 = number;
	export type Quantity6 = number;
	/**
	 * Which entity's buffs to query.
	 */
	export type TargetEntity = "Self" | "Other" | "All Entities";
	export type Boss = string;
	export type Quantity7 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll6 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants4 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags4 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude4 = boolean;
	export type Quantity8 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll7 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants5 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags5 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude5 = boolean;
	export type Quantity9 = number;
	export type Phase = string;
	/**
	 * If true, then every condition must be met. If false, then only one of the conditions must be met.
	 */
	export type RequireAllConditions = boolean;
	export type State1 = string;
	export type RandomizedStart = boolean;
	export type Looping = boolean;
	export type Min3 = number;
	export type Max3 = number;
	export type Name3 = string;
	export type Track = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler = string;
	/**
	 * If true, then the default babbler will be overridden when the entity is in this state.
	 */
	export type OverrideBabbler = boolean;
	/**
	 * This is the name of the variable used for the state in the game's code. Only lowercase letters and underscores.
	 */
	export type StateNameInternal = string;
	export type Condition1 =
	  | {
	      abilities?: Abilities1;
	      casting_state: Casting1;
	      condition_type?: "Ability";
	    }
	  | {
	      datafield_evaluation: Evaluation2;
	      condition_type?: "Datafield";
	    }
	  | {
	      daytime: DuringDaytime1;
	      condition_type?: "Daylight";
	    }
	  | {
	      combat: InCombat1;
	      condition_type?: "Combat";
	    }
	  | {
	      timestamp: Timestamp1;
	      insight_modifier?: InsightModifier1;
	      condition_type?: "Timestamp";
	      evaluation: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      minutes_passed: MinutesSinceTimestamp1;
	    }
	  | {
	      condition_type?: "Moon";
	      moon: ActiveMoon1;
	    }
	  | {
	      quest_status: QuestStatus1;
	      quest: QuestToCheck1;
	      condition_type?: "Quest";
	    }
	  | {
	      condition_type?: "Artisan Following";
	      following: Following1;
	      artisan: Buddy1;
	    }
	  | {
	      unlock_text?: InsightTooltip1;
	      prerequisite: Insight3;
	      condition_type?: "Insight";
	    }
	  | {
	      proximity_quantity: NumberOfTargets2;
	      proximity_range: DistanceRequiredGridSpaces1;
	      proximity_targets: Targets1;
	      proximity_ignores_stealth: IgnoreStealthedTargets1;
	      condition_type?: "Proximity";
	    }
	  | {
	      condition_type?: "Health";
	      hp_evaluation: HealthEvaluation1;
	    }
	  | {
	      require_all: RequireAll10;
	      condition_type?: "Item Equipped";
	      items: Items10;
	    }
	  | {
	      condition_type?: "Item Wielding";
	      items: Items11;
	    }
	  | {
	      num_pieces: NumberOfPiecesEquipped1;
	      condition_type?: "Wearing Equipment Set";
	      equipment_set: EquipmentSet1;
	    }
	  | {
	      condition_type?: "Buffs";
	      buffs: Buffs17;
	      buff_exclusive?: Exclusive1;
	      buff_require_all: RequireAll11;
	      buff_check_self: CheckSelf1;
	      buff_own_only: OwnBuffsOnly1;
	      buff_num_targets?: NumberOfTargets3;
	      buff_target_filter?: BuffTargetFilter1;
	      buff_proximity?: BuffTargetRange1;
	      buff_stack_evaluation?: Stacks11;
	      buff_target: TargetEntity1;
	    }
	  | {
	      condition_type?: "Boss Defeated";
	      boss: Boss1;
	    }
	  | {
	      summoned_filter?: SummonedEntitiesFilter1;
	      comparison: NumberSummoned1;
	      condition_type?: "Summoned Entities";
	    }
	  | {
	      condition_type?: "Area";
	      areas: Areas1;
	    }
	  | {
	      weather_ids: Weather1;
	      condition_type?: "Weather";
	    }
	  | {
	      phase: Phase1;
	      condition_type?: "Boss Phase";
	    };
	/**
	 * If set, the ability's casting state must match this checkbox.
	 */
	export type Casting1 = boolean;
	export type DuringDaytime1 = boolean;
	export type InCombat1 = boolean;
	export type Timestamp1 = string;
	export type Insight2 = string;
	/**
	 * How much the 'Minutes Since Timestamp' should be adjusted (up or down) for each point invested in the Insight.
	 */
	export type ChangePerPoint5 = number;
	/**
	 * If greater than 0, then this many minutes will have passed since the timestamp was set. If less than 0, the timestamp will be this many minutes from now.
	 */
	export type MinutesSinceTimestamp1 = number;
	export type ActiveMoon1 = string;
	export type QuestStatus1 = "Complete" | "Started" | "Not Started";
	/**
	 * The quest whose status we are querying.
	 */
	export type QuestToCheck1 = string;
	export type Following1 = boolean;
	export type Buddy1 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip5 = boolean;
	export type EnglishText5 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText5 = string;
	export type Insight3 = string;
	export type Quantity10 = number;
	export type Evaluation3 = "==" | "!=" | "<" | "<=" | ">" | ">=";
	export type Min4 = number;
	export type Max4 = number;
	export type Quantity11 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll8 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants6 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags6 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude6 = boolean;
	export type Quantity12 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll9 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants7 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags7 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude7 = boolean;
	/**
	 * If checked, the proximity check will fail on targets that are stealthed.
	 */
	export type IgnoreStealthedTargets1 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the items listed are equipped at the same time.
	 */
	export type RequireAll10 = boolean;
	/**
	 * If the player is wearing at least this many pieces, the condition will be met.
	 */
	export type NumberOfPiecesEquipped1 = number;
	export type EquipmentSet1 = string;
	/**
	 * If checked, this condition will only be considered met if the defined conditions are NOT met.
	 */
	export type Exclusive1 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on yourself at the same time.
	 */
	export type RequireAll11 = boolean;
	/**
	 * Obsolete--delete.
	 */
	export type CheckSelf1 = boolean;
	/**
	 * If checked, only buffs created by you will be checked. Otherwise, all buffs will be checked.
	 */
	export type OwnBuffsOnly1 = boolean;
	export type Quantity13 = number;
	export type Quantity14 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll12 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants8 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags8 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude8 = boolean;
	export type Quantity15 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll13 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants9 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags9 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude9 = boolean;
	export type Min5 = number;
	export type Max5 = number;
	export type Quantity16 = number;
	/**
	 * Which entity's buffs to query.
	 */
	export type TargetEntity1 = "Self" | "Other" | "All Entities";
	export type Boss1 = string;
	export type Quantity17 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll14 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants10 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags10 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude10 = boolean;
	export type Quantity18 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll15 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants11 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags11 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude11 = boolean;
	export type Quantity19 = number;
	export type Phase1 = string;
	/**
	 * If true, then every condition must be met. If false, then only one of the conditions must be met.
	 */
	export type RequireAllConditions1 = boolean;
	export type State2 = string;
	/**
	 * A brief decription about this group for internal reference.
	 */
	export type PriorityGroupNameInternal = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup2 = string;
	/**
	 * If true, this item will not be shown in the progression map.
	 */
	export type IgnoreInProgressionMap = boolean;
	export type Sprite = string;
	/**
	 * Change this if the in-game shadow ends up too big or too small for the object.
	 */
	export type ScaleModifier = number;
	export type WorldSprite = string;
	/**
	 * If true, this resource will snap to the grid when placed. Only applies to non-solid objects.
	 */
	export type GridSnapping = boolean;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip6 = boolean;
	export type EnglishText6 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText6 = string;
	/**
	 * Whether this item can be X-flipped in the Editor.
	 */
	export type Flippable2 = boolean;
	export type UIIcon = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler1 = string;
	/**
	 * If set, the particle system will be drawn behind the object
	 */
	export type Behind = boolean;
	export type State3 = string;
	/**
	 * If set, the particle will anchor to this spine bone, and the X and Y offsets will be relative to the bone's position
	 */
	export type SpineBone = string;
	/**
	 * Relative to the object's origin
	 */
	export type XOffset = number;
	export type EmitterScale = number;
	/**
	 * Relative to the object's origin
	 */
	export type YOffset = number;
	export type ParticleSystem = string;
	/**
	 * The sound to play when this is placed in the editor or in Build Mode.
	 */
	export type PlacementSound2 = string;
	/**
	 * If true, this item can be flipped horizontally in Build Mode.
	 */
	export type BuildModeFlippable = boolean;
	/**
	 * If set, this world element will be considered a variant of another world element. Its recipe will be rolled together with that item, and they will share crafting efficiencies.
	 */
	export type VariantParent = string;
	/**
	 * Whether this item must have a floor under it to be validly placed in the world.
	 */
	export type RequiresFloor = boolean;
	export type UIIcon1 = string;
	/**
	 * Structural base items will vote on their preferred roof. The roof type with the most votes will be displayed.
	 */
	export type PreferredRoof = string;
	/**
	 * How many tiles away this pillar can support walls or doors.
	 */
	export type PillarSupportDistance = number;
	/**
	 * The sound to play when this is placed in the editor or in Build Mode.
	 */
	export type PlacementSound3 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip7 = boolean;
	export type EnglishText7 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText7 = string;
	/**
	 * What workstation the player must be near to craft this recipe.
	 */
	export type Station2 = string;
	export type Style2 = "Additive" | "Multiplicative";
	export type ChangePerPoint6 = number;
	export type ResearchNode4 = string;
	export type ChangePerPoint7 = number;
	export type ResearchNode5 = string;
	export type UnlockedBy2 = string;
	/**
	 * Change this number to increase or decrease the number of materials required to craft this item.
	 */
	export type EffortModifier2 = number;
	export type OutputQuantity2 = number;
	/**
	 * If set, this world element will be considered a variant of another world element. Its recipe will be rolled together with that item, and they will share crafting efficiencies.
	 */
	export type VariantParent1 = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup3 = string;
	export type WorldSprite1 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip8 = boolean;
	export type EnglishText8 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText8 = string;
	export type UIIcon2 = string;
	/**
	 * If checked, this door won't open until the player is out of combat.
	 */
	export type ClosedDuringCombat = boolean;
	export type DoorOpenSound = string;
	export type DoorCloseSound = string;
	/**
	 * This sound will play when the door is unlocked, but it will be overridden if the key being used has a custom unlock sound.
	 */
	export type DoorUnlockSound = string;
	/**
	 * Entities that the door will open for (like the player) must at least this far away (in grid spaces) before the door will close.
	 */
	export type CloseDistance = number;
	/**
	 * Structural base items will vote on their preferred roof. The roof type with the most votes will be displayed.
	 */
	export type PreferredRoof1 = string;
	/**
	 * The sound to play when this is placed in the editor or in Build Mode.
	 */
	export type PlacementSound4 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip9 = boolean;
	export type EnglishText9 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText9 = string;
	/**
	 * What workstation the player must be near to craft this recipe.
	 */
	export type Station3 = string;
	export type Style3 = "Additive" | "Multiplicative";
	export type ChangePerPoint8 = number;
	export type ResearchNode6 = string;
	export type ChangePerPoint9 = number;
	export type ResearchNode7 = string;
	export type UnlockedBy3 = string;
	/**
	 * Change this number to increase or decrease the number of materials required to craft this item.
	 */
	export type EffortModifier3 = number;
	export type OutputQuantity3 = number;
	/**
	 * If set, this world element will be considered a variant of another world element. Its recipe will be rolled together with that item, and they will share crafting efficiencies.
	 */
	export type VariantParent2 = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup4 = string;
	export type WorldSprite2 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip10 = boolean;
	export type EnglishText10 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText10 = string;
	export type UIIcon3 = string;
	/**
	 * If set, this world element will be considered a variant of another world element. Its recipe will be rolled together with that item, and they will share crafting efficiencies.
	 */
	export type VariantParent3 = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup5 = string;
	/**
	 * Structural base items will vote on their preferred roof. The roof type with the most votes will be displayed.
	 */
	export type PreferredRoof2 = string;
	export type WorldSprite3 = string;
	/**
	 * The sound to play when this is placed in the editor or in Build Mode.
	 */
	export type PlacementSound5 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip11 = boolean;
	export type EnglishText11 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText11 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip12 = boolean;
	export type EnglishText12 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText12 = string;
	/**
	 * What workstation the player must be near to craft this recipe.
	 */
	export type Station4 = string;
	export type Style4 = "Additive" | "Multiplicative";
	export type ChangePerPoint10 = number;
	export type ResearchNode8 = string;
	export type ChangePerPoint11 = number;
	export type ResearchNode9 = string;
	export type UnlockedBy4 = string;
	/**
	 * Change this number to increase or decrease the number of materials required to craft this item.
	 */
	export type EffortModifier4 = number;
	export type OutputQuantity4 = number;
	/**
	 * If false, the object will always render itself at its normal color and won't be darkened or brightened by lighting.
	 */
	export type UseLighting1 = boolean;
	export type Object1 = string;
	/**
	 * Overrides the default collection jingle when picking up this item.
	 */
	export type JingleOverride = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip13 = boolean;
	export type EnglishText13 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText13 = string;
	/**
	 * What workstation the player must be near to craft this recipe.
	 */
	export type Station5 = string;
	export type Style5 = "Additive" | "Multiplicative";
	export type ChangePerPoint12 = number;
	export type ResearchNode10 = string;
	export type ChangePerPoint13 = number;
	export type ResearchNode11 = string;
	export type UnlockedBy5 = string;
	/**
	 * Change this number to increase or decrease the number of materials required to craft this item.
	 */
	export type EffortModifier5 = number;
	export type OutputQuantity5 = number;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup6 = string;
	export type WorldSprite4 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip14 = boolean;
	export type EnglishText14 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText14 = string;
	/**
	 * If using a Spine sprite, the object will try to play an animation with this name when it is spawned.
	 */
	export type SpineIdle = string;
	/**
	 * Whether the tile should be X-flipped randomly when placed.
	 */
	export type Flippable3 = boolean;
	export type UIIcon4 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler2 = string;
	/**
	 * If set, the particle system will be drawn behind the object
	 */
	export type Behind1 = boolean;
	export type State4 = string;
	/**
	 * If set, the particle will anchor to this spine bone, and the X and Y offsets will be relative to the bone's position
	 */
	export type SpineBone1 = string;
	/**
	 * Relative to the object's origin
	 */
	export type XOffset1 = number;
	export type EmitterScale1 = number;
	/**
	 * Relative to the object's origin
	 */
	export type YOffset1 = number;
	export type ParticleSystem1 = string;
	/**
	 * The sound to play when this is placed in the editor or in Build Mode.
	 */
	export type PlacementSound6 = string;
	/**
	 * If true, this item can be flipped horizontally in Build Mode.
	 */
	export type BuildModeFlippable1 = boolean;
	/**
	 * Whether this item must have a floor under it to be validly placed in the world.
	 */
	export type RequiresFloor1 = boolean;
	export type AssemblyUIStartSound = string;
	/**
	 * If false, then crafted items in the Progression Map will not display this station as a prerequisite. Useful to resolve 'infinite looping' issues, for example with the Basic Workstation, which is required to construct itself.
	 */
	export type CountAsProgressionRequirement = boolean;
	export type UIIcon5 = string;
	/**
	 * If false, the object will always render itself at its normal color and won't be darkened or brightened by lighting.
	 */
	export type UseLighting2 = boolean;
	export type Width1 = number;
	export type Height1 = number;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip15 = boolean;
	export type EnglishText15 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText15 = string;
	/**
	 * What workstation the player must be near to craft this recipe.
	 */
	export type Station6 = string;
	export type Style6 = "Additive" | "Multiplicative";
	export type ChangePerPoint14 = number;
	export type ResearchNode12 = string;
	export type ChangePerPoint15 = number;
	export type ResearchNode13 = string;
	export type UnlockedBy6 = string;
	/**
	 * Change this number to increase or decrease the number of materials required to craft this item.
	 */
	export type EffortModifier6 = number;
	export type OutputQuantity6 = number;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup7 = string;
	export type WorldSprite5 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip16 = boolean;
	export type EnglishText16 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText16 = string;
	export type UIIcon6 = string;
	/**
	 * If false, the object will always render itself at its normal color and won't be darkened or brightened by lighting.
	 */
	export type UseLighting3 = boolean;
	/**
	 * If false, this item can be placed in water.
	 */
	export type RequiresLand = boolean;
	/**
	 * The height of the hitbox for this fence. Important for making the fence easily clickable via the Editor or build mode.
	 */
	export type HitboxHeight = number;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip17 = boolean;
	export type EnglishText17 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText17 = string;
	/**
	 * What workstation the player must be near to craft this recipe.
	 */
	export type Station7 = string;
	export type Style7 = "Additive" | "Multiplicative";
	export type ChangePerPoint16 = number;
	export type ResearchNode14 = string;
	export type ChangePerPoint17 = number;
	export type ResearchNode15 = string;
	export type UnlockedBy7 = string;
	/**
	 * Change this number to increase or decrease the number of materials required to craft this item.
	 */
	export type EffortModifier7 = number;
	export type OutputQuantity7 = number;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup8 = string;
	export type Red5 = number;
	export type Blue5 = number;
	export type Green5 = number;
	export type WorldSprite6 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip18 = boolean;
	export type EnglishText18 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText18 = string;
	/**
	 * A world element that can be harvested or picked up.
	 */
	export type Resource = Resource1 & Resource2;
	/**
	 * Whether the player walks over the top of this resource.
	 */
	export type Underfoot1 = boolean;
	/**
	 * If true, this item stop rendering while underneath a building's roof.
	 */
	export type HideUnderRoof1 = boolean;
	/**
	 * If false, the object will always render itself at its normal color and won't be darkened or brightened by lighting.
	 */
	export type UseLighting4 = boolean;
	/**
	 * If false, this item can be placed in water.
	 */
	export type RequiresLand1 = boolean;
	/**
	 * When first spawned in the world, this thing can randomly scale itself down (to a minimum) to add variety. This scale should be preserved between sessions, so this will only apply to newly-created instances of this asset.
	 */
	export type RandomScalingMinimum = number;
	export type Object2 = string;
	/**
	 * If set, dynamically-spawned versions of this item will disappear after this much time has passed since it was created.
	 */
	export type DynamicExpirationMinutes = number;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip19 = boolean;
	export type EnglishText19 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText19 = string;
	export type Condition2 =
	  | {
	      abilities?: Abilities2;
	      target_entity: TargetEntity2;
	      casting_state: Casting2;
	      condition_type?: "Ability";
	    }
	  | {
	      datafield_evaluation: Evaluation4;
	      target_entity: TargetEntity3;
	      condition_type?: "Datafield";
	    }
	  | {
	      daytime: DuringDaytime2;
	      condition_type?: "Daylight";
	    }
	  | {
	      combat: InCombat2;
	      condition_type?: "Combat";
	    }
	  | {
	      timestamp: Timestamp2;
	      insight_modifier?: InsightModifier2;
	      condition_type?: "Timestamp";
	      evaluation: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      minutes_passed: MinutesSinceTimestamp2;
	    }
	  | {
	      condition_type?: "Moon";
	      moon: ActiveMoon2;
	    }
	  | {
	      quest_status: QuestStatus2;
	      quest: QuestToCheck2;
	      condition_type?: "Quest";
	    }
	  | {
	      condition_type?: "Artisan Following";
	      following: Following2;
	      artisan: Buddy2;
	    }
	  | {
	      unlock_text?: InsightTooltip2;
	      prerequisite: Insight5;
	      condition_type?: "Insight";
	    }
	  | {
	      proximity_quantity: NumberOfTargets4;
	      proximity_range: DistanceRequiredGridSpaces2;
	      proximity_targets: Targets2;
	      proximity_ignores_stealth: IgnoreStealthedTargets2;
	      condition_type?: "Proximity";
	    }
	  | {
	      target_entity: TargetEntity4;
	      condition_type?: "Health";
	      hp_evaluation: HealthEvaluation2;
	    }
	  | {
	      require_all: RequireAll18;
	      condition_type?: "Item Equipped";
	      items: Items18;
	    }
	  | {
	      condition_type?: "Item Wielding";
	      items: Items19;
	    }
	  | {
	      num_pieces: NumberOfPiecesEquipped2;
	      condition_type?: "Wearing Equipment Set";
	      equipment_set: EquipmentSet2;
	    }
	  | {
	      condition_type?: "Buffs";
	      buffs: Buffs30;
	      buff_exclusive?: Exclusive2;
	      buff_require_all: RequireAll19;
	      buff_check_self: CheckSelf2;
	      buff_own_only: OwnBuffsOnly2;
	      buff_num_targets?: NumberOfTargets5;
	      buff_target_filter?: BuffTargetFilter2;
	      buff_proximity?: BuffTargetRange2;
	      buff_stack_evaluation?: Stacks18;
	      buff_target: TargetEntity5;
	    }
	  | {
	      condition_type?: "Boss Defeated";
	      boss: Boss2;
	    }
	  | {
	      summoned_filter?: SummonedEntitiesFilter2;
	      comparison: NumberSummoned2;
	      condition_type?: "Summoned Entities";
	    }
	  | {
	      condition_type?: "Area";
	      areas: Areas2;
	    }
	  | {
	      weather_ids: Weather2;
	      condition_type?: "Weather";
	    }
	  | {
	      phase: Phase2;
	      condition_type?: "Boss Phase";
	    };
	/**
	 * Which entity's ability to query.
	 */
	export type TargetEntity2 = "Self" | "Other";
	/**
	 * If set, the ability's casting state must match this checkbox.
	 */
	export type Casting2 = boolean;
	/**
	 * Which entity's data fields to query.
	 */
	export type TargetEntity3 = "Self" | "Other";
	export type DuringDaytime2 = boolean;
	export type InCombat2 = boolean;
	export type Timestamp2 = string;
	export type Insight4 = string;
	/**
	 * How much the 'Minutes Since Timestamp' should be adjusted (up or down) for each point invested in the Insight.
	 */
	export type ChangePerPoint18 = number;
	/**
	 * If greater than 0, then this many minutes will have passed since the timestamp was set. If less than 0, the timestamp will be this many minutes from now.
	 */
	export type MinutesSinceTimestamp2 = number;
	export type ActiveMoon2 = string;
	export type QuestStatus2 = "Complete" | "Started" | "Not Started";
	/**
	 * The quest whose status we are querying.
	 */
	export type QuestToCheck2 = string;
	export type Following2 = boolean;
	export type Buddy2 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip20 = boolean;
	export type EnglishText20 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText20 = string;
	export type Insight5 = string;
	export type Quantity20 = number;
	export type Evaluation5 = "==" | "!=" | "<" | "<=" | ">" | ">=";
	export type Min6 = number;
	export type Max6 = number;
	export type Quantity21 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll16 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants12 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags12 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude12 = boolean;
	export type Quantity22 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll17 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants13 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags13 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude13 = boolean;
	/**
	 * If checked, the proximity check will fail on targets that are stealthed.
	 */
	export type IgnoreStealthedTargets2 = boolean;
	/**
	 * Which entity's health to query.
	 */
	export type TargetEntity4 = "Self" | "Other";
	/**
	 * If checked, this condition will only be met if ALL of the items listed are equipped at the same time.
	 */
	export type RequireAll18 = boolean;
	/**
	 * If the player is wearing at least this many pieces, the condition will be met.
	 */
	export type NumberOfPiecesEquipped2 = number;
	export type EquipmentSet2 = string;
	/**
	 * If checked, this condition will only be considered met if the defined conditions are NOT met.
	 */
	export type Exclusive2 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on yourself at the same time.
	 */
	export type RequireAll19 = boolean;
	/**
	 * Obsolete--delete.
	 */
	export type CheckSelf2 = boolean;
	/**
	 * If checked, only buffs created by you will be checked. Otherwise, all buffs will be checked.
	 */
	export type OwnBuffsOnly2 = boolean;
	export type Quantity23 = number;
	export type Quantity24 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll20 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants14 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags14 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude14 = boolean;
	export type Quantity25 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll21 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants15 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags15 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude15 = boolean;
	export type Min7 = number;
	export type Max7 = number;
	export type Quantity26 = number;
	/**
	 * Which entity's buffs to query.
	 */
	export type TargetEntity5 = "Self" | "Other" | "All Entities";
	export type Boss2 = string;
	export type Quantity27 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll22 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants16 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags16 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude16 = boolean;
	export type Quantity28 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll23 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants17 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags17 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude17 = boolean;
	export type Quantity29 = number;
	export type Phase2 = string;
	/**
	 * If false, then any of the conditions can be met for the actions to occur.
	 */
	export type RequireAllConditions2 = boolean;
	export type Trigger =
	  | {
	      damage_types?: DamageTypes;
	      attacker_distance?: AttackerDistance;
	      trigger_type?: "Take Damage";
	      direct_damage?: DirectDamage;
	      health_threshold?: HealthThreshold;
	      target_filter?: TargetFilter;
	      critical_damage?: CriticalHit;
	      items_used?: ItemsUsed;
	      abilities_used?: AbilitiesUsed;
	    }
	  | {
	      target_filter?: TargetFilter1;
	      trigger_type?: "Kill";
	    }
	  | {
	      seconds: Seconds;
	      trigger_type?: "Interval";
	    }
	  | {
	      trigger_type?: "Creation";
	    }
	  | {
	      target_filter?: MyKillerTargetFilter;
	      trigger_type?: "Death";
	    }
	  | {
	      trigger_type?: "Spawn";
	    }
	  | {
	      trigger_type?: "Datafield Change";
	      datafield: Datafield;
	    }
	  | {
	      trigger_type?: "Daylight Change";
	      transition: TriggerTime;
	    }
	  | {
	      damage_types?: DamageTypes1;
	      attacker_distance?: TargetDistance;
	      trigger_type?: "Deal Damage";
	      direct_damage?: DirectDamage1;
	      health_threshold?: HealthThreshold1;
	      target_filter?: TargetFilter2;
	      critical_damage?: CriticalHit1;
	      items_used?: ItemsUsed1;
	      abilities_used?: AbilitiesUsed1;
	    }
	  | {
	      target_filter?: TargetFilter3;
	      trigger_type?: "Ability Cast";
	      items_used?: ItemsUsed2;
	      abilities_used?: Abilities3;
	    }
	  | {
	      target_filter?: TargetFilter4;
	      trigger_type: "Buff Application";
	      buffs: Buffs63;
	      apply_to_other: AppliedToOther;
	    }
	  | {
	      target_filter?: TargetFilter5;
	      trigger_type: "Buff Expiration";
	      buffs: Buffs68;
	      buff_on_self: CheckBuffsOnSelf;
	      buff_on_other: CheckBuffsOnOther;
	    }
	  | {
	      trigger_type: "Healing Received";
	      direct_healing?: DirectHealing;
	    }
	  | {
	      trigger_type: "Healing Sent";
	      direct_healing?: DirectHealing1;
	    }
	  | {
	      trigger_type: "Boss Phase Start";
	      boss_phase: BossPhase;
	    }
	  | {
	      on_gain: TriggerOnStackGain;
	      on_loss: TriggerOnStackLoss;
	      each_stack: TriggerOnEachStack;
	      trigger_type: "Buff Stack Change";
	      buffs: Buffs69;
	    }
	  | {
	      trigger_type: "Thrift";
	    }
	  | {
	      interval_seconds: Seconds1;
	      trigger_type?: "Fixed Interval";
	      interval_offset: Offset;
	    }
	  | {
	      target_filter?: TargetFilter6;
	      trigger_type?: "Ability Cast On Me";
	      items_used?: ItemsUsed3;
	      abilities_used?: Abilities4;
	    };
	export type Min8 = number;
	export type Max8 = number;
	/**
	 * If set, this trigger will only occur if the kind of damage received matches this checkbox (direct or periodic).
	 */
	export type DirectDamage = boolean;
	/**
	 * If set, this trigger will only occur if the damage taken drops your health below this percent.
	 */
	export type HealthThreshold = number;
	export type Quantity30 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll24 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants18 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags18 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude18 = boolean;
	export type Quantity31 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll25 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants19 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags19 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude19 = boolean;
	/**
	 * If set, this trigger will only occur if receiving critical damage that matches this checkbox.
	 */
	export type CriticalHit = boolean;
	export type Quantity32 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll26 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants20 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags20 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude20 = boolean;
	export type Quantity33 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll27 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants21 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags21 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude21 = boolean;
	export type Min9 = number;
	export type Max9 = number;
	export type Quantity34 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll28 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants22 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags22 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude22 = boolean;
	export type Quantity35 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll29 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants23 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags23 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude23 = boolean;
	export type Datafield = string;
	export type TriggerTime = "Day Start" | "Night Start" | "Both";
	export type Min10 = number;
	export type Max10 = number;
	/**
	 * If set, this trigger will only occur if the kind of damage received matches this checkbox (direct or periodic).
	 */
	export type DirectDamage1 = boolean;
	/**
	 * If set, this trigger will only occur if the damage dealt drops the target's health below this percent.
	 */
	export type HealthThreshold1 = number;
	export type Quantity36 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll30 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants24 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags24 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude24 = boolean;
	export type Quantity37 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll31 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants25 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags25 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude25 = boolean;
	/**
	 * If set, this trigger will only occur if receiving critical damage that matches this checkbox.
	 */
	export type CriticalHit1 = boolean;
	export type Quantity38 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll32 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants26 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags26 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude26 = boolean;
	export type Quantity39 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll33 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants27 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags27 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude27 = boolean;
	export type Quantity40 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll34 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants28 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags28 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude28 = boolean;
	export type Quantity41 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll35 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants29 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags29 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude29 = boolean;
	/**
	 * If set, this trigger will occur when the caster applies a buff to something else, as opposed to the caster gaining the buff.
	 */
	export type AppliedToOther = boolean;
	export type Quantity42 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll36 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants30 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags30 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude30 = boolean;
	export type Quantity43 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll37 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants31 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags31 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude31 = boolean;
	/**
	 * If set, buffs expiring on yourself will be checked.
	 */
	export type CheckBuffsOnSelf = boolean;
	/**
	 * If set, buffs you have applied to other targets will be checked.
	 */
	export type CheckBuffsOnOther = boolean;
	/**
	 * If set, then the healing must match this checkbox. Indirect healing comes from buffs, while direct healing comes from all other sources.
	 */
	export type DirectHealing = boolean;
	/**
	 * If set, then the healing must match this checkbox. Indirect healing comes from buffs, while direct healing comes from all other sources.
	 */
	export type DirectHealing1 = boolean;
	export type BossPhase = string;
	/**
	 * If set, this trigger will occur when the buff stack count increases.
	 */
	export type TriggerOnStackGain = boolean;
	/**
	 * If set, this trigger will occur when the buff stack count decreases.
	 */
	export type TriggerOnStackLoss = boolean;
	/**
	 * If true, this trigger will occur for each stack that is gained or lost in one go. If false, this trigger will only occur once, regardless of how many stacks are gained or lost.
	 */
	export type TriggerOnEachStack = boolean;
	/**
	 * How many seconds between this interval firing. This interval is synchronized to the game clock.
	 */
	export type Seconds1 =
	  | {
	      style?: "Number";
	      number: number;
	    }
	  | {
	      style?: "Datafield";
	      datafield: string;
	    };
	/**
	 * How many seconds to offset the interval by.
	 */
	export type Offset =
	  | {
	      style?: "Number";
	      number: number;
	    }
	  | {
	      style?: "Datafield";
	      datafield: string;
	    };
	export type Quantity44 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll38 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants32 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags32 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude32 = boolean;
	export type Quantity45 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll39 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants33 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags33 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude33 = boolean;
	export type Action =
	  | {
	      ability: Ability;
	      action_type?: "Cast Ability";
	      target_entity: TargetEntity6;
	      blame?: Blame;
	    }
	  | {
	      ability?: Ability1;
	      action_type?: "Finish Ability";
	    }
	  | {
	      ability?: Ability2;
	      action_type?: "Stop Ability";
	    }
	  | {
	      voice?: PlayAsVoice;
	      action_type?: "Play a Sound";
	      target_entity: SoundLocation;
	      sound: Sound;
	    }
	  | {
	      damage_modifier?: DamageModifier;
	      target_entity: TargetEntity7;
	      healing_percentage?: HealingPercentage;
	      buff: Buff;
	      stacks: Stacks37;
	      action_type?: "Buff";
	    }
	  | {
	      summoned?: EntityIsSummoned;
	      distance_range?: SpawnDistance;
	      inherits_threat?: InheritThreat;
	      require_line_of_sight?: RequireLineOfSight;
	      non_overlap: AttemptNonOverlap;
	      forced_spawning?: IgnoreAllConflicts;
	      action_type?: "Create Entity";
	      spawn_item: ThingToSpawn;
	      spawn_location?: NewEntityLocation;
	    }
	  | {
	      drop_loot: DropLoot;
	      counts_as_death: CountsAsDeath;
	      action_type?: "Destroy";
	      target_entity: TargetEntity8;
	    }
	  | {
	      timestamp: Timestamp3;
	      action_type?: "Set Timestamp";
	      target_entity?: TargetEntity9;
	      offset: OffsetMinutes;
	    }
	  | {
	      timestamp: Timestamp4;
	      minutes: IncrementMinutes;
	      action_type?: "Increment Timestamp";
	      target_entity?: TargetEntity10;
	    }
	  | {
	      action_type?: "Set Datafield";
	      value: Value;
	      target_entity?: TargetEntity11;
	      datafield: Datafield1;
	    }
	  | {
	      action_type?: "Increment Datafield";
	      value: Value1;
	      target_entity?: TargetEntity12;
	      datafield: Datafield2;
	    }
	  | {
	      badge_modifiers?: InsightDamageModifiers;
	      target_entity: TargetEntity13;
	      direct_damage?: DirectDamage2;
	      damage_success_sound?: ImpactSound;
	      datafield_modifiers?: DatafieldMultipliers;
	      damage_failure_sound?: FailureSound;
	      target_filter?: TargetFilters;
	      action_type?: "Damage";
	      damage_profile: DamageProfile;
	    }
	  | {
	      action_type?: "Refresh State";
	    }
	  | {
	      action_type?: "Copy Datafield";
	      target_entity: DatafieldOwner1;
	      datafield: Datafield3;
	    }
	  | {
	      action_type?: "Heal";
	      target_entity: HealingTarget;
	      healing_percentage: HealingPercentage1;
	    }
	  | {
	      action_type?: "Boss Phase Change";
	      boss_phase: NewBossPhase;
	    }
	  | {
	      buff_to_remove?: Buff2;
	      target_entity: TargetEntity14;
	      negative?: RemoveNegativeBuffs;
	      stacks?: Stacks40;
	      action_type?: "Remove Buff";
	      positive?: RemovePositiveBuffs;
	    }
	  | {
	      ability?: Ability3;
	      action_type?: "Restore Charge";
	      charges?: Charges;
	      target_entity: TargetEntity15;
	    }
	  | {
	      action_type?: "Drop Loot";
	      loot_items: LootItems;
	    }
	  | {
	      action_type: "Visual Effect";
	      visual_effect: VisualEffect;
	    };
	/**
	 * Which ability to cast. Won't cast if already casting it.
	 */
	export type Ability = string;
	/**
	 * Which entity to cast this ability on.
	 */
	export type TargetEntity6 = "Self" | "Other";
	/**
	 * If this ability causes threat, should the threat be attributed to myself, or the 'other' entity (from the trigger)?
	 */
	export type Blame = "Self" | "Other";
	/**
	 * Which ability to finish casting, if it's already casting. Won't do anything if the ability is not already casting. If unset, will finish whatever ability is currently casting.
	 */
	export type Ability1 = string;
	/**
	 * Which ability to stop casting, if it's already casting. Won't do anything if the ability is not already casting. If unset, will stop whatever ability is currently casting.
	 */
	export type Ability2 = string;
	/**
	 * Only one 'Voice' sound can be playing at a time per Entity.
	 */
	export type PlayAsVoice = boolean;
	/**
	 * Where to play the sound at.
	 */
	export type SoundLocation = "Self" | "Other";
	export type Sound = string;
	/**
	 * If set, and if the buff deals damage, this will modify its damage.
	 */
	export type DamageModifier = number;
	/**
	 * Which entity to cast this buff on.
	 */
	export type TargetEntity7 = "Self" | "Other" | "Summoner";
	/**
	 * If set, and if the buff can heal, this will set how much health it restores (based on the level of the user).
	 */
	export type HealingPercentage = number;
	export type Buff = string;
	/**
	 * How many stacks of the buff to apply.
	 */
	export type Stacks37 = number;
	/**
	 * 'Summoned' entities exist on behalf of their creators, and their actions will cast blame to the creator. Defaults to false.
	 */
	export type EntityIsSummoned = boolean;
	export type Min11 = number;
	export type Max11 = number;
	/**
	 * If true, the new entity will inherit its creator's 'Threat' situation, putting it in combat with whatever created it..
	 */
	export type InheritThreat = boolean;
	/**
	 * If false, the new entity can spawn just about anywhere, including in other buildings.
	 */
	export type RequireLineOfSight = boolean;
	/**
	 * Whether spawning will attempt to find a clear space.
	 */
	export type AttemptNonOverlap = boolean;
	/**
	 * If set, this entity will spawn wherever you say, regardless of whether that is allowed.
	 */
	export type IgnoreAllConflicts = boolean;
	export type ThingToSpawn = string;
	/**
	 * Where the new entity will be created.
	 */
	export type NewEntityLocation = "Self" | "Other";
	/**
	 * Whether the destroyed entity should drop loot as if it were killed by the player (if possible).
	 */
	export type DropLoot = boolean;
	/**
	 * If false, the destroyed entity will just stop existing. If true, the entity will trigger any Death events and play its death animations.
	 */
	export type CountsAsDeath = boolean;
	/**
	 * Which entity to destroy.
	 */
	export type TargetEntity8 = "Self" | "Other";
	export type Timestamp3 = string;
	/**
	 * Which entity's timestamp to set.
	 */
	export type TargetEntity9 = "Self" | "Other";
	/**
	 * By default, the timestamp will be set to the current playtime minutes. You can add an offset to this, so the timestamp will be earlier or later than the current time.
	 */
	export type OffsetMinutes = number;
	export type Timestamp4 = string;
	export type IncrementMinutes = number;
	/**
	 * Which entity's timestamp to set.
	 */
	export type TargetEntity10 = "Self" | "Other";
	export type Value = number;
	/**
	 * Which entity's datafield to set.
	 */
	export type TargetEntity11 = "Self" | "Other";
	export type Datafield1 = string;
	export type Value1 = number;
	/**
	 * Which entity's datafield to increment.
	 */
	export type TargetEntity12 = "Self" | "Other";
	export type Datafield2 = string;
	export type ChangePerPoint19 = number;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip21 = boolean;
	export type EnglishText21 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText21 = string;
	export type Insight6 = string;
	/**
	 * Which entity to deal damage to.
	 */
	export type TargetEntity13 = "Self" | "Other";
	/**
	 * Whether to force-set this damage as direct or indirect.
	 */
	export type DirectDamage2 = boolean;
	/**
	 * This sound will only play if damage is dealt.
	 */
	export type ImpactSound = string;
	export type DatafieldOwner = "Self" | "Target Entity";
	export type DataField = string;
	/**
	 * This sound will play if no targets were damaged.
	 */
	export type FailureSound = string;
	export type Quantity46 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll40 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants34 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags34 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude34 = boolean;
	export type Quantity47 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll41 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants35 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags35 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude35 = boolean;
	export type DamageAmount = number;
	export type DamageType = string;
	export type Modifier = number;
	export type Filter36 = string;
	export type Buff1 = string;
	export type Amount = number;
	/**
	 * If set, this will consume damage from the buff's pool.
	 */
	export type ConsumeDamage = boolean;
	/**
	 * If true, only buffs created by the caster will be used for damage calculations.
	 */
	export type OwnOnly = boolean;
	/**
	 * Which entity the buff is on.
	 */
	export type BuffTarget = "All Entities" | "Self" | "Target Entity" | "Summoner";
	/**
	 * Whether to force-set this damage as direct or indirect.
	 */
	export type DirectDamage3 = boolean;
	/**
	 * If false, this damage will never crit.
	 */
	export type CanCrit = boolean;
	/**
	 * The entity from which to copy the data.
	 */
	export type DatafieldOwner1 = "Summoner" | "Other";
	export type Datafield3 = string;
	/**
	 * The entity from which to copy the data.
	 */
	export type HealingTarget = "Self" | "Other";
	/**
	 * How much health to restore, based on % of typical max health for things of that level.
	 */
	export type HealingPercentage1 = number;
	/**
	 * Which boss phase to change to. This will only work if you are currently fighting the boss to whom this phase belongs.
	 */
	export type NewBossPhase = string;
	export type Buff2 = string;
	/**
	 * Which entity to cast this buff on.
	 */
	export type TargetEntity14 = "Self" | "Other";
	export type RemoveNegativeBuffs = boolean;
	/**
	 * How many stacks of the buff to remove. If unset, all stacks will be removed.
	 */
	export type Stacks40 = number;
	export type RemovePositiveBuffs = boolean;
	/**
	 * This ability will have its charges restored.
	 */
	export type Ability3 = string;
	/**
	 * How many charges of the ability to restore.
	 */
	export type Charges = number;
	/**
	 * The entity for which to restore ability charges.
	 */
	export type TargetEntity15 = "Self" | "Other";
	export type Min12 = number;
	export type Max12 = number;
	export type Chance = number;
	export type Item = string;
	export type VisualEffect =
	  | {
	      effect_type: "Electric Arc";
	      electric_arc_source: Source;
	      electric_arc_destination: Destination;
	      electric_arc_color: Color1;
	      electric_arc_source_distance?: DistanceFromSourcePixels;
	      electric_arc_destination_distance?: DistanceFromDestinationPixels;
	    }
	  | {
	      effect_type: "Ground Decal";
	      decal_max_alpha?: MaxAlpha;
	      decal_duration?: DecalDurationSeconds;
	      decal_sprite: DecalSprite;
	      decal_scale?: DecalScale;
	      decal_location: Location;
	    }
	  | {
	      effect_type: "Explosion";
	      explosion_y_offset?: YOffset2;
	      explosion_z_offset?: ZOffset;
	      explosion_color: BaseColor;
	      explosion_sound?: Sound1;
	      explosion_slomo_burst: SlowMotionPulse;
	      explosion_highlight_color?: HighlightColor;
	      explosion_smoke?: ShowSmoke;
	      explosion_scale?: ExplosionScale;
	      explosion_random_distance?: RandomDistanceGridSpaces;
	      explosion_random_delay?: RandomDelaySeconds;
	      explosion_debris?: DebrisParticles;
	      explosion_location: Location1;
	    }
	  | {
	      effect_type: "Particle Burst";
	      burst_particle: Particle;
	      bursts: Bursts;
	    }
	  | {
	      effect_type: "Particle System Burst";
	      particle_system_y_offset?: YOffset3;
	      particle_system_z_offset?: ZOffset2;
	      particle_system_emitter_scale?: EmitterScale2;
	      particle_system_location: Location2;
	      particle_system: ParticleSystem2;
	    }
	  | {
	      effect_type: "Lightning";
	      lightning_num_bolts?: NumberOfBolts;
	      lightning_spread?: SpreadDegrees;
	      lightning_z_offset?: ZOffset3;
	      lightning_source: Source2;
	      lightning_distance: DistanceGrid;
	      lightning_color: Color3;
	      lightning_aim_offset?: AimOffset;
	    }
	  | {
	      effect_type: "Slomo Burst";
	      slomo_duration: Seconds2;
	      slomo_amount: GameSpeed;
	    };
	export type Source = "Self" | "Ground Target" | "Target Entity" | "Summoner";
	export type Destination = "Self" | "Ground Target" | "Target Entity" | "Summoner";
	export type Red6 = number;
	export type Blue6 = number;
	export type Green6 = number;
	export type DistanceFromSourcePixels = number;
	export type DistanceFromDestinationPixels = number;
	export type MaxAlpha = number;
	export type Min13 = number;
	export type Max13 = number;
	/**
	 * This sprite will be drawn subtractively.
	 */
	export type DecalSprite = string;
	export type Min14 = number;
	export type Max14 = number;
	export type Location = "Self" | "Ground Target" | "Target Entity" | "Summoner";
	/**
	 * Can be useful for depth-sorting. For example, a Y offset of 1 will spawn the explosion in front of whatever is explosing.
	 */
	export type YOffset2 = number;
	/**
	 * If spawning on the ground, this will be height above ground. If spawning on targets, it will spawn at their height midpoints, plus this offset.
	 */
	export type ZOffset = number;
	export type Red7 = number;
	export type Blue7 = number;
	export type Green7 = number;
	/**
	 * There is a default explosion sound, but you can override it here.
	 */
	export type Sound1 = string;
	/**
	 * If true, there will be a brief slow-down of the game when the explosion occurs to make it feel more impactful. Use sparingly.
	 */
	export type SlowMotionPulse = boolean;
	export type Red8 = number;
	export type Blue8 = number;
	export type Green8 = number;
	/**
	 * If true, smoke will be spawned at the explosion location.
	 */
	export type ShowSmoke = boolean;
	export type Min15 = number;
	export type Max15 = number;
	export type Min16 = number;
	export type Max16 = number;
	export type Min17 = number;
	export type Max17 = number;
	/**
	 * The sprite to use for the debris.
	 */
	export type Sprite1 = string;
	export type ParticleScale = number;
	export type NumberOfParticles = number;
	export type Location1 = "Self" | "Ground Target" | "Target Entity" | "Summoner";
	export type Min18 = number;
	export type Max18 = number;
	export type Min19 = number;
	export type Max19 = number;
	export type AlphaValue = number;
	export type Min20 = number;
	export type Max20 = number;
	export type Min21 = number;
	export type Max21 = number;
	export type ParticleNameInternal = string;
	/**
	 * If set, this particle will use the properties of the parent particle, but will override any values you have specified here.
	 */
	export type Parent = string;
	export type Sprite2 = string;
	export type Min22 = number;
	export type Max22 = number;
	export type Red9 = number;
	export type Blue9 = number;
	export type Green9 = number;
	export type Lighting = "Lit" | "Unlit" | "Additive";
	/**
	 * Whether the particles should shrink over the course of their lifetimes.
	 */
	export type Shrinking = boolean;
	/**
	 * Will be ignored if Sprite is set.
	 */
	export type Shape =
	  | "Pixel"
	  | "Disk"
	  | "Square"
	  | "Line"
	  | "Star"
	  | "Circle"
	  | "Ring"
	  | "Sphere"
	  | "Flare"
	  | "Spark"
	  | "Explosion"
	  | "Cloud"
	  | "Smoke"
	  | "Snow";
	export type XScale = number;
	export type YScale = number;
	/**
	 * Note that this will be ignored if you set the particle to 'Shrinking'.
	 */
	export type SizeChangePerSecond = number;
	/**
	 * This is an amount that will be randomly added or removed from the particle's size each step.
	 */
	export type SizeWiggle = number;
	export type Min23 = number;
	export type Max23 = number;
	/**
	 * If true, the particle will rotate relative to the direction it is moving.
	 */
	export type OrientationRelative = boolean;
	export type OrientationChangeSec = number;
	/**
	 * This is an amount that will be randomly added or removed from the particle's rotation each step.
	 */
	export type OrientationWiggle = number;
	/**
	 * How much speed the particles should gain or lose per second.
	 */
	export type Acceleration = number;
	/**
	 * This is proportional to the game's base gravity.
	 */
	export type Gravity = number;
	/**
	 * Billboard bursts are good for shooting things up and out. Ground bursts are good for making smoke rings and such.
	 */
	export type Perspective = "Billboard" | "Isometric";
	/**
	 * If checked, the particles will spawn at z=0 instead of on a target or caster.
	 */
	export type SpawnOnGround = boolean;
	export type Min24 = number;
	export type Max24 = number;
	/**
	 * If set, the burst will use the direction the ability cast is aiming as its baseline direction.
	 */
	export type UseAimDirection = boolean;
	export type Min25 = number;
	export type Max25 = number;
	/**
	 * If set, the radius of the spawning will scale relative to the caster's 'scale' modifier. Useful for keeping particles lined up with telegraphs.
	 */
	export type ScaledSpawnRadius = boolean;
	export type Source1 = "Self" | "Ground Target" | "Target Entity" | "Summoner";
	/**
	 * If set, the particles will always move away from the center of the source.
	 */
	export type BlastOutward = boolean;
	export type Min26 = number;
	export type Max26 = number;
	/**
	 * If set, the spawn radius will be treated as grid spaces instead of pixels.
	 */
	export type SpawnRadiusAsGrid = boolean;
	/**
	 * If spawning on the ground, this will be height above ground. If spawning on targets, it will spawn at their height midpoints, plus this offset.
	 */
	export type ZOffset1 = number;
	/**
	 * Can be useful for depth-sorting. For example, a Y offset of 1 will spawn the explosion in front of whatever is explosing.
	 */
	export type YOffset3 = number;
	/**
	 * If spawning on the ground, this will be height above ground. If spawning on targets, it will spawn at their height midpoints, plus this offset.
	 */
	export type ZOffset2 = number;
	export type EmitterScale2 = number;
	export type Location2 = "Self" | "Ground Target" | "Target Entity" | "Summoner";
	export type ParticleSystem2 = string;
	export type Min27 = number;
	export type Max27 = number;
	/**
	 * The total angle the bolts will cover. 360 means a full circle.
	 */
	export type SpreadDegrees = number;
	/**
	 * If spawning on the ground, this will be height above ground. If spawning on targets, it will spawn at their height midpoints, plus this offset.
	 */
	export type ZOffset3 = number;
	export type Source2 = "Self" | "Ground Target" | "Target Entity" | "Summoner";
	export type Min28 = number;
	export type Max28 = number;
	export type Red10 = number;
	export type Blue10 = number;
	export type Green10 = number;
	export type AimOffset = number;
	/**
	 * How long the slow-mo effect will last.
	 */
	export type Seconds2 = number;
	export type GameSpeed = number;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip22 = boolean;
	export type EnglishText22 = string;
	export type NameInternal = string;
	export type Red11 = number;
	export type Blue11 = number;
	export type Green11 = number;
	export type ScaleModifier1 = number;
	export type IgnoreInLevelViewer = boolean;
	/**
	 * If true, this item will not appear in the world editor.
	 */
	export type EditorExcluded = boolean;
	export type WorldSprite7 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip23 = boolean;
	export type EnglishText23 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText22 = string;
	/**
	 * Whether this item will randomly X-flip when placed in the world editor. Defaults to true if unset.
	 */
	export type Flippable4 = boolean;
	export type UIIcon7 = string;
	/**
	 * When destroyed, this world element will respawn using the base respawn minutes combined with this multiplier. Higher multiplier means longer time between respawns.
	 */
	export type RespawnTimeMultiplier = number;
	/**
	 * If true, this item will draw under terrain but above water, and it cannot be placed on land.
	 */
	export type WaterLayer = boolean;
	/**
	 * If true, this item will be fully reset after its respawn timer expires, even if it wasn't destroyed. This only applies
	 */
	export type CanReset = boolean;
	/**
	 * Whether to show the celebration UI when acquiring this item.
	 */
	export type CelebratePickup = boolean;
	/**
	 * If set to false, this world element will not respawn once it has been destroyed. Defaults to true if unset.
	 */
	export type Respawnable = boolean;
	/**
	 * Higher effort items are considered more rare or harder to reach, and recipes will call for fewer of them. Lower effort items will be considered 'cheap', and therefore recipes will demand more of them.
	 */
	export type EffortModifier8 = number;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup9 = string;
	/**
	 * If set, this game element will adjust its level to match the player's level at the time it is spawned, plus this number.
	 */
	export type RelativeLevel = number;
	export type SpineSkin = string;
	export type CanExistOnFloors = boolean;
	/**
	 * The smallest version of this resource. Used for automatic editor merging.
	 */
	export type AutoMergeRootItem = string;
	/**
	 * If true, this item will randomly select a skin from its available skins when spawned.
	 */
	export type RandomizedSpineSkin = boolean;
	/**
	 * If true, this resource will snap to the grid when placed. Only applies to non-solid objects.
	 */
	export type GridSnapping1 = boolean;
	/**
	 * Whether this world element can be struck by bullet-style projectiles. Solid world elements will always be struck by bullets.
	 */
	export type BulletInteraction = "All Bullets" | "Passthrough Only" | "No Bullets";
	/**
	 * A number that is connected to the relative power level of this thing.
	 */
	export type Level = number;
	/**
	 * A unique sound to be played when this item is collected into your body.
	 */
	export type CollectionSound = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler3 = string;
	/**
	 * Whether this resource can be picked up by the player. If pickupable, the resource cannot be damaged and cannot drop loot.
	 */
	export type Pickupable = boolean;
	/**
	 * If true, the player will automatically pick up loot dropped by this item or caused by this item.
	 */
	export type AlwaysAutocollectLoot = boolean;
	/**
	 * If true, this the player will be able to fish up whoppers from this resrouce.
	 */
	export type WhopperPool = boolean;
	/**
	 * What proportion of this tile should spawn this resource.
	 */
	export type Coverage = number;
	export type Resource2 =
	  | {
	      manual_pickup?: ManualPickup;
	      pickupable?: true;
	    }
	  | {
	      death_sounds?: DestructionSounds;
	      injury_sounds?: InjurySounds;
	      resistance_profile?: ResistanceProfile;
	      hp_modifier?: HPModifier;
	      loot?: Loot;
	      pickupable?: false;
	    };
	/**
	 * If true, the player must manually interact with the resource to pick it up.
	 */
	export type ManualPickup = boolean;
	export type Chance1 = number;
	/**
	 * Plays when receiving damage that has been mitigated.
	 */
	export type Minor = string;
	/**
	 * Plays when receiving damage that hasn't been mitigated.
	 */
	export type Major = string;
	export type ResistanceProfile = string;
	/**
	 * By default, this world element will have a max HP relative to its level. Change this value to further customize its max HP.
	 */
	export type HPModifier = number;
	export type Min29 = number;
	export type Max29 = number;
	/**
	 * When this loot group is able to drop.
	 */
	export type TimeOfDay = "Always" | "Day" | "Night";
	/**
	 * What event will cause this loot to drop.
	 */
	export type Trigger1 = "Death" | "Damage";
	/**
	 * If unlocked by an insight, whether to show this loot group in the insight's tooltip. Defaults to true.
	 */
	export type ShowInInsight = boolean;
	export type UnlockedBy8 = string;
	/**
	 * If true, this loot group will be considered a 'bonus' and will not be counted as part of the normal effort calculations.
	 */
	export type ConsiderAsBonus = boolean;
	/**
	 * If true, this loot group will not be shown in the progression map.
	 */
	export type IgnoreInProgressionMap1 = boolean;
	/**
	 * The probability for this loot group to occur.
	 */
	export type DropChance = number;
	/**
	 * If set, the 'Drop Quantity' value will multiply against the value retrieved from this data field.
	 */
	export type DatafieldQuantityLink = string;
	/**
	 * Whether to include this loot group when listing the 'sources' of an item in its tooltip.
	 */
	export type IncludeAsSource = boolean;
	/**
	 * If false, the object will always render itself at its normal color and won't be darkened or brightened by lighting.
	 */
	export type UseLighting5 = boolean;
	/**
	 * When first spawned in the world, this thing can randomly scale itself down (to a minimum) to add variety. This scale should be preserved between sessions, so this will only apply to newly-created instances of this asset.
	 */
	export type RandomScalingMinimum1 = number;
	export type Object3 = string;
	export type Width2 = number;
	export type Height2 = number;
	/**
	 * If set, dynamically-spawned versions of this item will disappear after this much time has passed since it was created.
	 */
	export type DynamicExpirationMinutes1 = number;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip24 = boolean;
	export type EnglishText24 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText23 = string;
	export type ScaleModifier2 = number;
	export type IgnoreInLevelViewer1 = boolean;
	/**
	 * If true, this item will not appear in the world editor.
	 */
	export type EditorExcluded1 = boolean;
	export type WorldSprite8 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip25 = boolean;
	export type EnglishText25 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText24 = string;
	export type UIIcon8 = string;
	/**
	 * When destroyed, this world element will respawn using the base respawn minutes combined with this multiplier. Higher multiplier means longer time between respawns.
	 */
	export type RespawnTimeMultiplier1 = number;
	/**
	 * If true, this item will be fully reset after its respawn timer expires, even if it wasn't destroyed. This only applies
	 */
	export type CanReset1 = boolean;
	export type InheritFrom = string;
	/**
	 * The frequency of this item will be multiplied by this number. E.g. 200% means this item will be considered twice as common as the item it is inheriting from.
	 */
	export type FrequencyMultiplier = number;
	/**
	 * If set, this thing cannot be stunned. Only applies to creatures, since nothing else can be stunned by default.
	 */
	export type Stun = boolean;
	export type Family = string;
	/**
	 * Higher effort items are considered more rare or harder to reach, and recipes will call for fewer of them. Lower effort items will be considered 'cheap', and therefore recipes will demand more of them.
	 */
	export type EffortModifier9 = number;
	export type AggroRadius = number;
	export type DeaggroRadius = number;
	/**
	 * How long the creature must be outside the deaggro radius before exiting combat.
	 */
	export type DeaggroDuration = number;
	/**
	 * How close (in grid spaces) you need to be to another creature of the same family who is in combat before you also get involved to help them.
	 */
	export type FriendlyHelpRange = number;
	/**
	 * If true, this creature will respond angrily if something destroys the items it wants to protect.
	 */
	export type RespondToDestruction = boolean;
	/**
	 * If true, this creature will respond angrily if something damages the items it wants to protect.
	 */
	export type RespondToDamage = boolean;
	/**
	 * Affects the probability of choosing the Roaming state.
	 */
	export type Weight = number;
	/**
	 * The chance the creature looks for an attractant instead of just roaming around.
	 */
	export type AttractionProbability = number;
	/**
	 * How far away the creature will notice things to be attracted to.
	 */
	export type DetectionRange = number;
	export type MovementVisuals =
	  | {
	      animation?: HopAnimationName;
	      style: "Hop";
	      babbler?: Babbler4;
	      hop_speed: HopVerticalSpeed;
	      hop_anticipation?: HopAnticipationSeconds;
	      hop_followthrough?: PostHopFollowthroughSeconds;
	    }
	  | {
	      style: "Run";
	      babbler?: Babbler5;
	      run_vertical_speed: RunVerticalBounceSpeed;
	      animation?: RunAnimationName;
	    }
	  | {
	      style: "Crawl";
	      babbler?: Babbler6;
	      animation?: CrawlAnimationName;
	    }
	  | {
	      animation?: Animation;
	      style: "Fly";
	      z_baseline: BaselineAltitudePixels;
	      babbler?: Babbler7;
	      z_sine?: AltitudeSineWave;
	      flaps?: FlappingVerticalMovements;
	    };
	/**
	 * Defaults to 'hop' but can be overridden.
	 */
	export type HopAnimationName = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler4 = string;
	/**
	 * As a percentage of base gravity. This is fairly sensitive.
	 */
	export type HopVerticalSpeed = number;
	/**
	 * How long to hold before rising off the ground, to make room for a pre-hop animation.
	 */
	export type HopAnticipationSeconds = number;
	/**
	 * How long to hold after landing on the ground from a hop, to make room for animations.
	 */
	export type PostHopFollowthroughSeconds = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler5 = string;
	/**
	 * How fast the character should pop up off the ground with each leg movement. As a percentage of base gravity. This is fairly sensitive.
	 */
	export type RunVerticalBounceSpeed = number;
	/**
	 * Defaults to 'run' but can be overridden.
	 */
	export type RunAnimationName = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler6 = string;
	/**
	 * Defaults to 'crawl' but can be overridden.
	 */
	export type CrawlAnimationName = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler7 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed3 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude1 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance = number;
	/**
	 * How the actor animates while not actively moving.
	 */
	export type StationaryVisuals =
	  | {
	      style?: "Stand";
	      babbler?: Babbler8;
	      animation?: Animation1;
	    }
	  | {
	      animation?: Animation2;
	      style: "Fly";
	      z_baseline: BaselineAltitudePixels1;
	      babbler?: Babbler9;
	      z_sine?: AltitudeSineWave1;
	      flaps?: FlappingVerticalMovements1;
	    };
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler8 = string;
	/**
	 * Defaults to 'idle.
	 */
	export type Animation1 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation2 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels1 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler9 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed4 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude2 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds1 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds1 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance1 = number;
	/**
	 * Relative to the global movement speed.
	 */
	export type MovementSpeed = number;
	/**
	 * How strongly the creature is attracted to these targets.
	 */
	export type Weight1 = number;
	/**
	 * How far away the creature will be attracted to these targets. Overrides baseline detection range.
	 */
	export type DetectionRange1 = number;
	export type MovementVisuals1 =
	  | {
	      animation?: HopAnimationName1;
	      style: "Hop";
	      babbler?: Babbler10;
	      hop_speed: HopVerticalSpeed1;
	      hop_anticipation?: HopAnticipationSeconds1;
	      hop_followthrough?: PostHopFollowthroughSeconds1;
	    }
	  | {
	      style: "Run";
	      babbler?: Babbler11;
	      run_vertical_speed: RunVerticalBounceSpeed1;
	      animation?: RunAnimationName1;
	    }
	  | {
	      style: "Crawl";
	      babbler?: Babbler12;
	      animation?: CrawlAnimationName1;
	    }
	  | {
	      animation?: Animation3;
	      style: "Fly";
	      z_baseline: BaselineAltitudePixels2;
	      babbler?: Babbler13;
	      z_sine?: AltitudeSineWave2;
	      flaps?: FlappingVerticalMovements2;
	    };
	/**
	 * Defaults to 'hop' but can be overridden.
	 */
	export type HopAnimationName1 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler10 = string;
	/**
	 * As a percentage of base gravity. This is fairly sensitive.
	 */
	export type HopVerticalSpeed1 = number;
	/**
	 * How long to hold before rising off the ground, to make room for a pre-hop animation.
	 */
	export type HopAnticipationSeconds1 = number;
	/**
	 * How long to hold after landing on the ground from a hop, to make room for animations.
	 */
	export type PostHopFollowthroughSeconds1 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler11 = string;
	/**
	 * How fast the character should pop up off the ground with each leg movement. As a percentage of base gravity. This is fairly sensitive.
	 */
	export type RunVerticalBounceSpeed1 = number;
	/**
	 * Defaults to 'run' but can be overridden.
	 */
	export type RunAnimationName1 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler12 = string;
	/**
	 * Defaults to 'crawl' but can be overridden.
	 */
	export type CrawlAnimationName1 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation3 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels2 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler13 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed5 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude3 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds2 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds2 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance2 = number;
	/**
	 * How the actor animates while not actively moving.
	 */
	export type StationaryVisuals1 =
	  | {
	      style?: "Stand";
	      babbler?: Babbler14;
	      animation?: Animation4;
	    }
	  | {
	      animation?: Animation5;
	      style: "Fly";
	      z_baseline: BaselineAltitudePixels3;
	      babbler?: Babbler15;
	      z_sine?: AltitudeSineWave3;
	      flaps?: FlappingVerticalMovements3;
	    };
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler14 = string;
	/**
	 * Defaults to 'idle.
	 */
	export type Animation4 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation5 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels3 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler15 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed6 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude4 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds3 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds3 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance3 = number;
	/**
	 * Relative to the global movement speed.
	 */
	export type MovementSpeed1 = number;
	export type MovementVisuals2 =
	  | {
	      animation?: HopAnimationName2;
	      style: "Hop";
	      babbler?: Babbler16;
	      hop_speed: HopVerticalSpeed2;
	      hop_anticipation?: HopAnticipationSeconds2;
	      hop_followthrough?: PostHopFollowthroughSeconds2;
	    }
	  | {
	      style: "Run";
	      babbler?: Babbler17;
	      run_vertical_speed: RunVerticalBounceSpeed2;
	      animation?: RunAnimationName2;
	    }
	  | {
	      style: "Crawl";
	      babbler?: Babbler18;
	      animation?: CrawlAnimationName2;
	    }
	  | {
	      animation?: Animation6;
	      style: "Fly";
	      z_baseline: BaselineAltitudePixels4;
	      babbler?: Babbler19;
	      z_sine?: AltitudeSineWave4;
	      flaps?: FlappingVerticalMovements4;
	    };
	/**
	 * Defaults to 'hop' but can be overridden.
	 */
	export type HopAnimationName2 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler16 = string;
	/**
	 * As a percentage of base gravity. This is fairly sensitive.
	 */
	export type HopVerticalSpeed2 = number;
	/**
	 * How long to hold before rising off the ground, to make room for a pre-hop animation.
	 */
	export type HopAnticipationSeconds2 = number;
	/**
	 * How long to hold after landing on the ground from a hop, to make room for animations.
	 */
	export type PostHopFollowthroughSeconds2 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler17 = string;
	/**
	 * How fast the character should pop up off the ground with each leg movement. As a percentage of base gravity. This is fairly sensitive.
	 */
	export type RunVerticalBounceSpeed2 = number;
	/**
	 * Defaults to 'run' but can be overridden.
	 */
	export type RunAnimationName2 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler18 = string;
	/**
	 * Defaults to 'crawl' but can be overridden.
	 */
	export type CrawlAnimationName2 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation6 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels4 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler19 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed7 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude5 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds4 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds4 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance4 = number;
	/**
	 * How the actor animates while not actively moving.
	 */
	export type StationaryVisuals2 =
	  | {
	      style?: "Stand";
	      babbler?: Babbler20;
	      animation?: Animation7;
	    }
	  | {
	      animation?: Animation8;
	      style: "Fly";
	      z_baseline: BaselineAltitudePixels5;
	      babbler?: Babbler21;
	      z_sine?: AltitudeSineWave5;
	      flaps?: FlappingVerticalMovements5;
	    };
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler20 = string;
	/**
	 * Defaults to 'idle.
	 */
	export type Animation7 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation8 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels5 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler21 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed8 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude6 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds5 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds5 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance5 = number;
	/**
	 * Relative to the global movement speed.
	 */
	export type MovementSpeed2 = number;
	/**
	 * If unchecked, the creature will go back to idle when done roaming. Otherwise, it will sometimes roam again.
	 */
	export type Repeatable = boolean;
	export type Min30 = number;
	export type Max30 = number;
	/**
	 * The chance the creature looks for an repellant instead of just roaming around.
	 */
	export type RepelProbability = number;
	/**
	 * How far away the creature will notice things to be repelled by.
	 */
	export type DetectionRange2 = number;
	export type MovementVisuals3 =
	  | {
	      animation?: HopAnimationName3;
	      style: "Hop";
	      babbler?: Babbler22;
	      hop_speed: HopVerticalSpeed3;
	      hop_anticipation?: HopAnticipationSeconds3;
	      hop_followthrough?: PostHopFollowthroughSeconds3;
	    }
	  | {
	      style: "Run";
	      babbler?: Babbler23;
	      run_vertical_speed: RunVerticalBounceSpeed3;
	      animation?: RunAnimationName3;
	    }
	  | {
	      style: "Crawl";
	      babbler?: Babbler24;
	      animation?: CrawlAnimationName3;
	    }
	  | {
	      animation?: Animation9;
	      style: "Fly";
	      z_baseline: BaselineAltitudePixels6;
	      babbler?: Babbler25;
	      z_sine?: AltitudeSineWave6;
	      flaps?: FlappingVerticalMovements6;
	    };
	/**
	 * Defaults to 'hop' but can be overridden.
	 */
	export type HopAnimationName3 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler22 = string;
	/**
	 * As a percentage of base gravity. This is fairly sensitive.
	 */
	export type HopVerticalSpeed3 = number;
	/**
	 * How long to hold before rising off the ground, to make room for a pre-hop animation.
	 */
	export type HopAnticipationSeconds3 = number;
	/**
	 * How long to hold after landing on the ground from a hop, to make room for animations.
	 */
	export type PostHopFollowthroughSeconds3 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler23 = string;
	/**
	 * How fast the character should pop up off the ground with each leg movement. As a percentage of base gravity. This is fairly sensitive.
	 */
	export type RunVerticalBounceSpeed3 = number;
	/**
	 * Defaults to 'run' but can be overridden.
	 */
	export type RunAnimationName3 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler24 = string;
	/**
	 * Defaults to 'crawl' but can be overridden.
	 */
	export type CrawlAnimationName3 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation9 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels6 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler25 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed9 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude7 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds6 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds6 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance6 = number;
	/**
	 * How the actor animates while not actively moving.
	 */
	export type StationaryVisuals3 =
	  | {
	      style?: "Stand";
	      babbler?: Babbler26;
	      animation?: Animation10;
	    }
	  | {
	      animation?: Animation11;
	      style: "Fly";
	      z_baseline: BaselineAltitudePixels7;
	      babbler?: Babbler27;
	      z_sine?: AltitudeSineWave7;
	      flaps?: FlappingVerticalMovements7;
	    };
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler26 = string;
	/**
	 * Defaults to 'idle.
	 */
	export type Animation10 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation11 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels7 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler27 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed10 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude8 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds7 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds7 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance7 = number;
	/**
	 * Relative to the global movement speed.
	 */
	export type MovementSpeed3 = number;
	/**
	 * How strongly the creature is repelled by these targets.
	 */
	export type Weight2 = number;
	/**
	 * How far away the creature will be attracted to these targets. Overrides baseline detection range.
	 */
	export type DetectionRange3 = number;
	export type MovementVisuals4 =
	  | {
	      animation?: HopAnimationName4;
	      style: "Hop";
	      babbler?: Babbler28;
	      hop_speed: HopVerticalSpeed4;
	      hop_anticipation?: HopAnticipationSeconds4;
	      hop_followthrough?: PostHopFollowthroughSeconds4;
	    }
	  | {
	      style: "Run";
	      babbler?: Babbler29;
	      run_vertical_speed: RunVerticalBounceSpeed4;
	      animation?: RunAnimationName4;
	    }
	  | {
	      style: "Crawl";
	      babbler?: Babbler30;
	      animation?: CrawlAnimationName4;
	    }
	  | {
	      animation?: Animation12;
	      style: "Fly";
	      z_baseline: BaselineAltitudePixels8;
	      babbler?: Babbler31;
	      z_sine?: AltitudeSineWave8;
	      flaps?: FlappingVerticalMovements8;
	    };
	/**
	 * Defaults to 'hop' but can be overridden.
	 */
	export type HopAnimationName4 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler28 = string;
	/**
	 * As a percentage of base gravity. This is fairly sensitive.
	 */
	export type HopVerticalSpeed4 = number;
	/**
	 * How long to hold before rising off the ground, to make room for a pre-hop animation.
	 */
	export type HopAnticipationSeconds4 = number;
	/**
	 * How long to hold after landing on the ground from a hop, to make room for animations.
	 */
	export type PostHopFollowthroughSeconds4 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler29 = string;
	/**
	 * How fast the character should pop up off the ground with each leg movement. As a percentage of base gravity. This is fairly sensitive.
	 */
	export type RunVerticalBounceSpeed4 = number;
	/**
	 * Defaults to 'run' but can be overridden.
	 */
	export type RunAnimationName4 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler30 = string;
	/**
	 * Defaults to 'crawl' but can be overridden.
	 */
	export type CrawlAnimationName4 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation12 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels8 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler31 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed11 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude9 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds8 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds8 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance8 = number;
	/**
	 * How the actor animates while not actively moving.
	 */
	export type StationaryVisuals4 =
	  | {
	      style?: "Stand";
	      babbler?: Babbler32;
	      animation?: Animation13;
	    }
	  | {
	      animation?: Animation14;
	      style: "Fly";
	      z_baseline: BaselineAltitudePixels9;
	      babbler?: Babbler33;
	      z_sine?: AltitudeSineWave9;
	      flaps?: FlappingVerticalMovements9;
	    };
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler32 = string;
	/**
	 * Defaults to 'idle.
	 */
	export type Animation13 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation14 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels9 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler33 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed12 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude10 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds9 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds9 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance9 = number;
	/**
	 * Relative to the global movement speed.
	 */
	export type MovementSpeed4 = number;
	export type Min31 = number;
	export type Max31 = number;
	/**
	 * Affects the probability of choosing the Idle state over other states.
	 */
	export type Weight3 = number;
	/**
	 * If unchecked, the creature will try to go to a different state when this one ends.
	 */
	export type Repeatable1 = boolean;
	/**
	 * Affects the probability of choosing this state.
	 */
	export type Weight4 = number;
	/**
	 * The ability the creature will attempt to cast.
	 */
	export type Ability4 = string;
	export type MovementVisuals5 =
	  | {
	      animation?: HopAnimationName5;
	      style: "Hop";
	      babbler?: Babbler34;
	      hop_speed: HopVerticalSpeed5;
	      hop_anticipation?: HopAnticipationSeconds5;
	      hop_followthrough?: PostHopFollowthroughSeconds5;
	    }
	  | {
	      style: "Run";
	      babbler?: Babbler35;
	      run_vertical_speed: RunVerticalBounceSpeed5;
	      animation?: RunAnimationName5;
	    }
	  | {
	      style: "Crawl";
	      babbler?: Babbler36;
	      animation?: CrawlAnimationName5;
	    }
	  | {
	      animation?: Animation15;
	      style: "Fly";
	      z_baseline: BaselineAltitudePixels10;
	      babbler?: Babbler37;
	      z_sine?: AltitudeSineWave10;
	      flaps?: FlappingVerticalMovements10;
	    };
	/**
	 * Defaults to 'hop' but can be overridden.
	 */
	export type HopAnimationName5 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler34 = string;
	/**
	 * As a percentage of base gravity. This is fairly sensitive.
	 */
	export type HopVerticalSpeed5 = number;
	/**
	 * How long to hold before rising off the ground, to make room for a pre-hop animation.
	 */
	export type HopAnticipationSeconds5 = number;
	/**
	 * How long to hold after landing on the ground from a hop, to make room for animations.
	 */
	export type PostHopFollowthroughSeconds5 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler35 = string;
	/**
	 * How fast the character should pop up off the ground with each leg movement. As a percentage of base gravity. This is fairly sensitive.
	 */
	export type RunVerticalBounceSpeed5 = number;
	/**
	 * Defaults to 'run' but can be overridden.
	 */
	export type RunAnimationName5 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler36 = string;
	/**
	 * Defaults to 'crawl' but can be overridden.
	 */
	export type CrawlAnimationName5 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation15 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels10 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler37 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed13 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude11 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds10 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds10 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance10 = number;
	/**
	 * How the actor animates while not actively moving.
	 */
	export type StationaryVisuals5 =
	  | {
	      style?: "Stand";
	      babbler?: Babbler38;
	      animation?: Animation16;
	    }
	  | {
	      animation?: Animation17;
	      style: "Fly";
	      z_baseline: BaselineAltitudePixels11;
	      babbler?: Babbler39;
	      z_sine?: AltitudeSineWave11;
	      flaps?: FlappingVerticalMovements11;
	    };
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler38 = string;
	/**
	 * Defaults to 'idle.
	 */
	export type Animation16 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation17 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels11 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler39 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed14 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude12 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds11 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds11 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance11 = number;
	/**
	 * Relative to the global movement speed.
	 */
	export type MovementSpeed5 = number;
	/**
	 * If unchecked, the creature will try to go to a different state when this one ends.
	 */
	export type Repeatable2 = boolean;
	/**
	 * How far away the creature will look to find a viable target or location to use this ability (in grid spaces)
	 */
	export type DetectionRadius = number;
	export type Min32 = number;
	export type Max32 = number;
	export type Quantity49 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll42 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants36 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags36 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude36 = boolean;
	export type Quantity50 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll43 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants37 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags37 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude37 = boolean;
	export type NameInternal1 = string;
	/**
	 * Move the health bar up or down to better position it relative to the world element's visual size. Positive numbers go up.
	 */
	export type HealthBarVerticalOffset = number;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup10 = string;
	/**
	 * If set, this game element will adjust its level to match the player's level at the time it is spawned, plus this number.
	 */
	export type RelativeLevel1 = number;
	export type MovementVisuals6 =
	  | {
	      animation?: HopAnimationName6;
	      style: "Hop";
	      babbler?: Babbler40;
	      hop_speed: HopVerticalSpeed6;
	      hop_anticipation?: HopAnticipationSeconds6;
	      hop_followthrough?: PostHopFollowthroughSeconds6;
	    }
	  | {
	      style: "Run";
	      babbler?: Babbler41;
	      run_vertical_speed: RunVerticalBounceSpeed6;
	      animation?: RunAnimationName6;
	    }
	  | {
	      style: "Crawl";
	      babbler?: Babbler42;
	      animation?: CrawlAnimationName6;
	    }
	  | {
	      animation?: Animation18;
	      style: "Fly";
	      z_baseline: BaselineAltitudePixels12;
	      babbler?: Babbler43;
	      z_sine?: AltitudeSineWave12;
	      flaps?: FlappingVerticalMovements12;
	    };
	/**
	 * Defaults to 'hop' but can be overridden.
	 */
	export type HopAnimationName6 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler40 = string;
	/**
	 * As a percentage of base gravity. This is fairly sensitive.
	 */
	export type HopVerticalSpeed6 = number;
	/**
	 * How long to hold before rising off the ground, to make room for a pre-hop animation.
	 */
	export type HopAnticipationSeconds6 = number;
	/**
	 * How long to hold after landing on the ground from a hop, to make room for animations.
	 */
	export type PostHopFollowthroughSeconds6 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler41 = string;
	/**
	 * How fast the character should pop up off the ground with each leg movement. As a percentage of base gravity. This is fairly sensitive.
	 */
	export type RunVerticalBounceSpeed6 = number;
	/**
	 * Defaults to 'run' but can be overridden.
	 */
	export type RunAnimationName6 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler42 = string;
	/**
	 * Defaults to 'crawl' but can be overridden.
	 */
	export type CrawlAnimationName6 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation18 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels12 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler43 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed15 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude13 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds12 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds12 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance12 = number;
	/**
	 * How the actor animates while not actively moving.
	 */
	export type StationaryVisuals6 =
	  | {
	      style?: "Stand";
	      babbler?: Babbler44;
	      animation?: Animation19;
	    }
	  | {
	      animation?: Animation20;
	      style: "Fly";
	      z_baseline: BaselineAltitudePixels13;
	      babbler?: Babbler45;
	      z_sine?: AltitudeSineWave13;
	      flaps?: FlappingVerticalMovements13;
	    };
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler44 = string;
	/**
	 * Defaults to 'idle.
	 */
	export type Animation19 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation20 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels13 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler45 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed16 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude14 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds13 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds13 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance13 = number;
	/**
	 * Relative to the global movement speed.
	 */
	export type MovementSpeed6 = number;
	export type SpineSkin1 = string;
	export type Chance2 = number;
	/**
	 * Plays when receiving damage that has been mitigated.
	 */
	export type Minor1 = string;
	/**
	 * Plays when receiving damage that hasn't been mitigated.
	 */
	export type Major1 = string;
	export type MinSeconds = number;
	export type MaxSeconds = number;
	export type MovementVisuals7 =
	  | {
	      animation?: HopAnimationName7;
	      style: "Hop";
	      babbler?: Babbler46;
	      hop_speed: HopVerticalSpeed7;
	      hop_anticipation?: HopAnticipationSeconds7;
	      hop_followthrough?: PostHopFollowthroughSeconds7;
	    }
	  | {
	      style: "Run";
	      babbler?: Babbler47;
	      run_vertical_speed: RunVerticalBounceSpeed7;
	      animation?: RunAnimationName7;
	    }
	  | {
	      style: "Crawl";
	      babbler?: Babbler48;
	      animation?: CrawlAnimationName7;
	    }
	  | {
	      animation?: Animation21;
	      style: "Fly";
	      z_baseline: BaselineAltitudePixels14;
	      babbler?: Babbler49;
	      z_sine?: AltitudeSineWave14;
	      flaps?: FlappingVerticalMovements14;
	    };
	/**
	 * Defaults to 'hop' but can be overridden.
	 */
	export type HopAnimationName7 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler46 = string;
	/**
	 * As a percentage of base gravity. This is fairly sensitive.
	 */
	export type HopVerticalSpeed7 = number;
	/**
	 * How long to hold before rising off the ground, to make room for a pre-hop animation.
	 */
	export type HopAnticipationSeconds7 = number;
	/**
	 * How long to hold after landing on the ground from a hop, to make room for animations.
	 */
	export type PostHopFollowthroughSeconds7 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler47 = string;
	/**
	 * How fast the character should pop up off the ground with each leg movement. As a percentage of base gravity. This is fairly sensitive.
	 */
	export type RunVerticalBounceSpeed7 = number;
	/**
	 * Defaults to 'run' but can be overridden.
	 */
	export type RunAnimationName7 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler48 = string;
	/**
	 * Defaults to 'crawl' but can be overridden.
	 */
	export type CrawlAnimationName7 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation21 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels14 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler49 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed17 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude15 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds14 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds14 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance14 = number;
	/**
	 * How the actor animates while not actively moving.
	 */
	export type StationaryVisuals7 =
	  | {
	      style?: "Stand";
	      babbler?: Babbler50;
	      animation?: Animation22;
	    }
	  | {
	      animation?: Animation23;
	      style: "Fly";
	      z_baseline: BaselineAltitudePixels15;
	      babbler?: Babbler51;
	      z_sine?: AltitudeSineWave15;
	      flaps?: FlappingVerticalMovements15;
	    };
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler50 = string;
	/**
	 * Defaults to 'idle.
	 */
	export type Animation22 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation23 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels15 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler51 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed18 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude16 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds15 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds15 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance15 = number;
	/**
	 * Relative to the global movement speed.
	 */
	export type MovementSpeed7 = number;
	/**
	 * Affects how frequently this ability is chosen.
	 */
	export type Weight5 = number;
	export type Ability5 = string;
	export type MinSeconds1 = number;
	export type MaxSeconds1 = number;
	export type MinSeconds2 = number;
	export type MaxSeconds2 = number;
	/**
	 * The creature can randomly ignore the post-ability pause, and instead go right into the next ability.
	 */
	export type PostAbilityPauseIgnoreChance = number;
	export type MinSeconds3 = number;
	export type MaxSeconds3 = number;
	export type MovementVisuals8 =
	  | {
	      animation?: HopAnimationName8;
	      style: "Hop";
	      babbler?: Babbler52;
	      hop_speed: HopVerticalSpeed8;
	      hop_anticipation?: HopAnticipationSeconds8;
	      hop_followthrough?: PostHopFollowthroughSeconds8;
	    }
	  | {
	      style: "Run";
	      babbler?: Babbler53;
	      run_vertical_speed: RunVerticalBounceSpeed8;
	      animation?: RunAnimationName8;
	    }
	  | {
	      style: "Crawl";
	      babbler?: Babbler54;
	      animation?: CrawlAnimationName8;
	    }
	  | {
	      animation?: Animation24;
	      style: "Fly";
	      z_baseline: BaselineAltitudePixels16;
	      babbler?: Babbler55;
	      z_sine?: AltitudeSineWave16;
	      flaps?: FlappingVerticalMovements16;
	    };
	/**
	 * Defaults to 'hop' but can be overridden.
	 */
	export type HopAnimationName8 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler52 = string;
	/**
	 * As a percentage of base gravity. This is fairly sensitive.
	 */
	export type HopVerticalSpeed8 = number;
	/**
	 * How long to hold before rising off the ground, to make room for a pre-hop animation.
	 */
	export type HopAnticipationSeconds8 = number;
	/**
	 * How long to hold after landing on the ground from a hop, to make room for animations.
	 */
	export type PostHopFollowthroughSeconds8 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler53 = string;
	/**
	 * How fast the character should pop up off the ground with each leg movement. As a percentage of base gravity. This is fairly sensitive.
	 */
	export type RunVerticalBounceSpeed8 = number;
	/**
	 * Defaults to 'run' but can be overridden.
	 */
	export type RunAnimationName8 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler54 = string;
	/**
	 * Defaults to 'crawl' but can be overridden.
	 */
	export type CrawlAnimationName8 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation24 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels16 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler55 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed19 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude17 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds16 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds16 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance16 = number;
	/**
	 * How the actor animates while not actively moving.
	 */
	export type StationaryVisuals8 =
	  | {
	      style?: "Stand";
	      babbler?: Babbler56;
	      animation?: Animation25;
	    }
	  | {
	      animation?: Animation26;
	      style: "Fly";
	      z_baseline: BaselineAltitudePixels17;
	      babbler?: Babbler57;
	      z_sine?: AltitudeSineWave17;
	      flaps?: FlappingVerticalMovements17;
	    };
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler56 = string;
	/**
	 * Defaults to 'idle.
	 */
	export type Animation25 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation26 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels17 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler57 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed20 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude18 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds17 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds17 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance17 = number;
	/**
	 * Relative to the global movement speed.
	 */
	export type MovementSpeed8 = number;
	/**
	 * If possible, the creature can aim at a random location near its intended target, within this distance (in grid spaces).
	 */
	export type DistanceRandomness = number;
	/**
	 * The weight choosing this followup ability relative to the other followup abilities in this list.
	 */
	export type Weight6 = number;
	export type Ability6 = string;
	/**
	 * If set, the creature will always cast this ability instantly after finishing the prior ability, ignoring normal behavioral cooldowns.
	 */
	export type Instant = boolean;
	/**
	 * The probability that this ability will be cast after the prior ability.
	 */
	export type Chance3 = number;
	/**
	 * If possible, the creature can add some randomness to the direction of this ability's cast (in degrees).
	 */
	export type DirectionRandomness = number;
	/**
	 * The sound the creature will make when it begins attacking something
	 */
	export type AggroSound = string;
	/**
	 * Whether the creature will attack the player when the player gets into aggro range.
	 */
	export type AggroOntoPlayer = boolean;
	export type ResistanceProfile1 = string;
	/**
	 * By default, max HP is relative to the level of the creature. Change this value to further customize its max HP.
	 */
	export type HPModifier1 = number;
	/**
	 * Whether this world element can be struck by bullet-style projectiles. Solid world elements will always be struck by bullets.
	 */
	export type BulletInteraction1 = "All Bullets" | "Passthrough Only" | "No Bullets";
	/**
	 * A number that is connected to the relative power level of this thing.
	 */
	export type Level1 = number;
	/**
	 * The sound the creature will make when it begins running away from something.
	 */
	export type FleeSound = string;
	/**
	 * How likely it is for the creature to flee when its health drops below the threshold.
	 */
	export type Probablity = number;
	/**
	 * When the creature's health drops below this threshold, it can flee.
	 */
	export type HealthThreshold2 = number;
	export type Min33 = number;
	export type Max33 = number;
	export type MovementVisuals9 =
	  | {
	      animation?: HopAnimationName9;
	      style: "Hop";
	      babbler?: Babbler58;
	      hop_speed: HopVerticalSpeed9;
	      hop_anticipation?: HopAnticipationSeconds9;
	      hop_followthrough?: PostHopFollowthroughSeconds9;
	    }
	  | {
	      style: "Run";
	      babbler?: Babbler59;
	      run_vertical_speed: RunVerticalBounceSpeed9;
	      animation?: RunAnimationName9;
	    }
	  | {
	      style: "Crawl";
	      babbler?: Babbler60;
	      animation?: CrawlAnimationName9;
	    }
	  | {
	      animation?: Animation27;
	      style: "Fly";
	      z_baseline: BaselineAltitudePixels18;
	      babbler?: Babbler61;
	      z_sine?: AltitudeSineWave18;
	      flaps?: FlappingVerticalMovements18;
	    };
	/**
	 * Defaults to 'hop' but can be overridden.
	 */
	export type HopAnimationName9 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler58 = string;
	/**
	 * As a percentage of base gravity. This is fairly sensitive.
	 */
	export type HopVerticalSpeed9 = number;
	/**
	 * How long to hold before rising off the ground, to make room for a pre-hop animation.
	 */
	export type HopAnticipationSeconds9 = number;
	/**
	 * How long to hold after landing on the ground from a hop, to make room for animations.
	 */
	export type PostHopFollowthroughSeconds9 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler59 = string;
	/**
	 * How fast the character should pop up off the ground with each leg movement. As a percentage of base gravity. This is fairly sensitive.
	 */
	export type RunVerticalBounceSpeed9 = number;
	/**
	 * Defaults to 'run' but can be overridden.
	 */
	export type RunAnimationName9 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler60 = string;
	/**
	 * Defaults to 'crawl' but can be overridden.
	 */
	export type CrawlAnimationName9 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation27 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels18 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler61 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed21 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude19 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds18 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds18 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance18 = number;
	/**
	 * Relative to the global movement speed.
	 */
	export type MovementSpeed9 = number;
	export type Min34 = number;
	export type Max34 = number;
	/**
	 * When this loot group is able to drop.
	 */
	export type TimeOfDay1 = "Always" | "Day" | "Night";
	/**
	 * What event will cause this loot to drop.
	 */
	export type Trigger2 = "Death" | "Damage";
	/**
	 * If unlocked by an insight, whether to show this loot group in the insight's tooltip. Defaults to true.
	 */
	export type ShowInInsight1 = boolean;
	export type UnlockedBy9 = string;
	/**
	 * If true, this loot group will be considered a 'bonus' and will not be counted as part of the normal effort calculations.
	 */
	export type ConsiderAsBonus1 = boolean;
	/**
	 * If true, this loot group will not be shown in the progression map.
	 */
	export type IgnoreInProgressionMap2 = boolean;
	/**
	 * The probability for this loot group to occur.
	 */
	export type DropChance1 = number;
	/**
	 * If set, the 'Drop Quantity' value will multiply against the value retrieved from this data field.
	 */
	export type DatafieldQuantityLink1 = string;
	/**
	 * Whether to include this loot group when listing the 'sources' of an item in its tooltip.
	 */
	export type IncludeAsSource1 = boolean;
	export type BossDialogueMoment =
	  | {
	      style: "Dialogue";
	      requirements?: MomentRequirements;
	      speech: {
	        speaker: Speaker;
	        text: {
	          skip?: Skip26;
	          text: EnglishText26;
	        };
	        emotion?: Emoji;
	      };
	    }
	  | {
	      requirements?: MomentRequirements;
	      style: "Emote";
	      emotes: Emotes;
	    }
	  | {
	      style: "Pause";
	      pause_duration: PauseSeconds;
	    }
	  | {
	      style: "Camera Target Set";
	      camera_target: CameraTargetEntity;
	    }
	  | {
	      style: "Camera Target Unset";
	    }
	  | {
	      style: "Camera Zoom";
	      zoom_amount: ZoomAmount;
	    }
	  | {
	      style: "Music Begin";
	      music: Music;
	    }
	  | {
	      style: "Music End";
	    }
	  | {
	      style: "Look Target Set";
	      requirements?: MomentRequirements;
	      look_targets: LookTargets;
	    }
	  | {
	      style: "Look Target Unset";
	      requirements?: MomentRequirements;
	      actors?: Actors;
	    };
	export type Requirement =
	  | {
	      style: "Quest";
	      quest_status: QuestStatus3;
	      quest: QuestToCheck3;
	    }
	  | {
	      style: "Equipped";
	      item: Item1;
	    }
	  | {
	      style: "Time";
	      time: Time;
	    }
	  | {
	      style: "Items Owned";
	      items_owned: Items47;
	    }
	  | {
	      style: "Insight";
	      insight: Insight7;
	      insight_status: InsightStatus;
	    }
	  | {
	      style: "Artisan Following";
	      following: Following3;
	      artisan?: Artisan;
	    }
	  | {
	      style: "Comfort";
	      comfort: Comfort;
	      comfort_status: ComfortStatus;
	    }
	  | {
	      style: "Inventory Evaluation";
	      comparisons: InventoryEvaluation;
	    }
	  | {
	      style: "Area";
	      area: AreaToCheck;
	      exclusive?: Exclude38;
	      item_id: Entity;
	    }
	  | {
	      style: "Teleporter Active";
	      teleporter_area?: TeleporterArea;
	      teleporter_active: ActiveState;
	    }
	  | {
	      style: "Requirement Group";
	      group_requirements: MomentRequirements1;
	      require_all: RequireAll44;
	      invert: Invert;
	    }
	  | {
	      style: "Pet";
	      pet?: Pet;
	      following?: Following4;
	      stage?: PetStage;
	    }
	  | {
	      style: "Boss Defeated";
	      boss: Boss4;
	    }
	  | {
	      style: "Infusion";
	      infusion: Infusion;
	      infusion_status: InfusionStatus;
	    }
	  | {
	      style: "Entity Proximity";
	      same_room: SameRoom;
	      item_ids: Entities;
	      exclusive?: Exclusive3;
	      distance: Distance;
	    };
	export type QuestStatus3 = "Complete" | "Started" | "Not Started";
	/**
	 * The quest whose status we are querying.
	 */
	export type QuestToCheck3 = string;
	/**
	 * The player must be wearing this item.
	 */
	export type Item1 = string;
	export type Time = "Day" | "Night";
	export type Quantity51 = number;
	export type Insight7 = string;
	export type InsightStatus = "Complete" | "Available" | "Locked";
	/**
	 * If false, then this will only trigger if the artisan is not following.
	 */
	export type Following3 = boolean;
	/**
	 * Leave unset to query whether any artisans are either following or not following. Otherwise, this will query the specific artisan you have chosen.
	 */
	export type Artisan = string;
	export type Comfort = string;
	export type ComfortStatus = "Complete" | "Available";
	export type Item2 = string;
	export type Quantity52 = number;
	export type AreaToCheck = string;
	/**
	 * If true, then this requirement will only pass if the entity is NOT in the area.
	 */
	export type Exclude38 = boolean;
	/**
	 * The entity that must be in the area for the requirement to pass.
	 */
	export type Entity = string;
	/**
	 * If not set, this requirement will check for 'any' teleporters.
	 */
	export type TeleporterArea = string;
	/**
	 * The teleporter must be in this state.
	 */
	export type ActiveState = boolean;
	/**
	 * If set to false, then this requirement group will pass if any of its requirements are met.
	 */
	export type RequireAll44 = boolean;
	/**
	 * If set, then this requirement group will 'pass' if its requirements are NOT met.
	 */
	export type Invert = boolean;
	/**
	 * If unset, then this requirement will be met if any of your pets match it.
	 */
	export type Pet = string;
	/**
	 * If set, then this will only trigger if the pet's following state matches this.
	 */
	export type Following4 = boolean;
	export type Boss4 = string;
	export type Infusion = string;
	export type InfusionStatus = "Complete" | "Available" | "Locked";
	/**
	 * If true, this requirement will check whether the entity is in the same room as the player. If outdoors, it will use distance.
	 */
	export type SameRoom = boolean;
	export type EntityType = string;
	/**
	 * Only consider this requirement met if NONE of the listed entities are within the range.
	 */
	export type Exclusive3 = boolean;
	/**
	 * How far from the player (in grid spaces) the entity should be for this requirement to be met.
	 */
	export type Distance = number;
	export type Speaker = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip26 = boolean;
	export type EnglishText26 = string;
	export type Emoji = string;
	export type Emoji1 = string;
	export type Character = string;
	/**
	 * How long to pause before moving to the next quest moment.
	 */
	export type PauseSeconds = number;
	export type CameraTargetEntity = string;
	/**
	 * Higher number means you can see more.
	 */
	export type ZoomAmount = number;
	export type Music = string;
	export type LooksAt = string;
	/**
	 * If set, the boss will play this spine animation during the dialogue sequence.
	 */
	export type BossSpineAnimation = string;
	/**
	 * If false, the object will always render itself at its normal color and won't be darkened or brightened by lighting.
	 */
	export type UseLighting6 = boolean;
	export type Width3 = number;
	export type Height3 = number;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip27 = boolean;
	export type EnglishText27 = string;
	/**
	 * The animation to play when the boss dies.
	 */
	export type Animation28 = string;
	/**
	 * The sound to play when the boss dies.
	 */
	export type DeathSound = string;
	/**
	 * The particle burst to play when the boss dies.
	 */
	export type ParticleBurst = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup11 = string;
	/**
	 * If set, this game element will adjust its level to match the player's level at the time it is spawned, plus this number.
	 */
	export type RelativeLevel2 = number;
	export type Quantity53 = number;
	export type Item3 = string;
	export type MovementVisuals10 =
	  | {
	      animation?: HopAnimationName10;
	      style: "Hop";
	      babbler?: Babbler62;
	      hop_speed: HopVerticalSpeed10;
	      hop_anticipation?: HopAnticipationSeconds10;
	      hop_followthrough?: PostHopFollowthroughSeconds10;
	    }
	  | {
	      style: "Run";
	      babbler?: Babbler63;
	      run_vertical_speed: RunVerticalBounceSpeed10;
	      animation?: RunAnimationName10;
	    }
	  | {
	      style: "Crawl";
	      babbler?: Babbler64;
	      animation?: CrawlAnimationName10;
	    }
	  | {
	      animation?: Animation29;
	      style: "Fly";
	      z_baseline: BaselineAltitudePixels19;
	      babbler?: Babbler65;
	      z_sine?: AltitudeSineWave19;
	      flaps?: FlappingVerticalMovements19;
	    };
	/**
	 * Defaults to 'hop' but can be overridden.
	 */
	export type HopAnimationName10 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler62 = string;
	/**
	 * As a percentage of base gravity. This is fairly sensitive.
	 */
	export type HopVerticalSpeed10 = number;
	/**
	 * How long to hold before rising off the ground, to make room for a pre-hop animation.
	 */
	export type HopAnticipationSeconds10 = number;
	/**
	 * How long to hold after landing on the ground from a hop, to make room for animations.
	 */
	export type PostHopFollowthroughSeconds10 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler63 = string;
	/**
	 * How fast the character should pop up off the ground with each leg movement. As a percentage of base gravity. This is fairly sensitive.
	 */
	export type RunVerticalBounceSpeed10 = number;
	/**
	 * Defaults to 'run' but can be overridden.
	 */
	export type RunAnimationName10 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler64 = string;
	/**
	 * Defaults to 'crawl' but can be overridden.
	 */
	export type CrawlAnimationName10 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation29 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels19 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler65 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed22 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude20 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds19 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds19 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance19 = number;
	/**
	 * How the actor animates while not actively moving.
	 */
	export type StationaryVisuals9 =
	  | {
	      style?: "Stand";
	      babbler?: Babbler66;
	      animation?: Animation30;
	    }
	  | {
	      animation?: Animation31;
	      style: "Fly";
	      z_baseline: BaselineAltitudePixels20;
	      babbler?: Babbler67;
	      z_sine?: AltitudeSineWave20;
	      flaps?: FlappingVerticalMovements20;
	    };
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler66 = string;
	/**
	 * Defaults to 'idle.
	 */
	export type Animation30 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation31 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels20 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler67 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed23 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude21 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds20 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds20 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance20 = number;
	/**
	 * Relative to the global movement speed.
	 */
	export type MovementSpeed10 = number;
	export type SpineSkin2 = string;
	export type Chance4 = number;
	/**
	 * Plays when receiving damage that has been mitigated.
	 */
	export type Minor2 = string;
	/**
	 * Plays when receiving damage that hasn't been mitigated.
	 */
	export type Major2 = string;
	export type ResistanceProfile2 = string;
	export type WorldSprite9 = string;
	/**
	 * Baseline boss HP is defined in the Game Balance motes. Change this value to further customize its max HP.
	 */
	export type HPModifier2 = number;
	export type Red12 = number;
	export type Blue12 = number;
	export type Green12 = number;
	/**
	 * A number that is connected to the relative power level of this thing.
	 */
	export type Level2 = number;
	export type UIIcon9 = string;
	/**
	 * For identification in the Game Changer
	 */
	export type IconInternal = string;
	/**
	 * For identifiaction in the Game Changer
	 */
	export type FamilyNameInternal = string;
	/**
	 * A number that is connected to the relative power level of this thing.
	 */
	export type Level3 = number;
	export type Icon2 = string;
	export type Pet1 = string;
	/**
	 * The stage of the pet's life that this mastery becomes available.
	 */
	export type PetStage1 = "Adult" | "Embiggened";
	export type SortOrder = number;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip28 = boolean;
	export type EnglishText28 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip29 = boolean;
	export type EnglishText29 = string;
	/**
	 * Higher number means it is more common to find this item when fishing.
	 */
	export type Frequency = number;
	/**
	 * If set, this item will not be fishable if the player has already acquired one.
	 */
	export type Singleton = boolean;
	/**
	 * If set, the fish will not be catchable in this area (and its children)
	 */
	export type Exclude39 = boolean;
	/**
	 * Where the player must be standing to catch this fish. Includes all children of this area.
	 */
	export type Area = string;
	/**
	 * If set, this fish will be considered a 'whopper' and will only be catchable via special Whopper Pools.
	 */
	export type Whopper = boolean;
	export type UnlockedBy11 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip30 = boolean;
	export type EnglishText30 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText25 = string;
	/**
	 * A unique sound to be played when this item is collected into your body.
	 */
	export type CollectionSound1 = string;
	export type UIIcon10 = string;
	/**
	 * If set, this component will be considered 'bait'. This number represents how many additional fish you will catch when using it.
	 */
	export type BaitPower = number;
	/**
	 * If true, and this has a set Bait Power, the bait will boost Whopper catches instead of normal fish.
	 */
	export type WhopperBait = boolean;
	/**
	 * If false, the object will always render itself at its normal color and won't be darkened or brightened by lighting.
	 */
	export type UseLighting7 = boolean;
	/**
	 * Higher effort items are considered more rare or harder to reach, and recipes will call for fewer of them. Lower effort items will be considered 'cheap', and therefore recipes will demand more of them.
	 */
	export type EffortModifier10 = number;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip31 = boolean;
	export type EnglishText31 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText26 = string;
	/**
	 * What workstation the player must be near to craft this recipe.
	 */
	export type Station8 = string;
	export type Style8 = "Additive" | "Multiplicative";
	export type ChangePerPoint20 = number;
	export type ResearchNode16 = string;
	export type ChangePerPoint21 = number;
	export type ResearchNode17 = string;
	export type UnlockedBy12 = string;
	/**
	 * Change this number to increase or decrease the number of materials required to craft this item.
	 */
	export type EffortModifier11 = number;
	export type OutputQuantity8 = number;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup12 = string;
	/**
	 * Components default to a scale of 0.5, but you can override this here.
	 */
	export type Scale = number;
	export type WorldSprite10 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip32 = boolean;
	export type EnglishText32 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText27 = string;
	/**
	 * If set, this component won't expire after being dynamically spawned. Components by default expire after an hour of gameplay.
	 */
	export type NoExpiration = boolean;
	/**
	 * If false, the object will always render itself at its normal color and won't be darkened or brightened by lighting.
	 */
	export type UseLighting8 = boolean;
	export type Personality = string;
	/**
	 * A handful of words for a quick overview of the character
	 */
	export type Brief = string;
	export type Pronouns = string;
	/**
	 * Whether the buddy's sprite should flip to face the player during dialogue.
	 */
	export type LooksAtPlayer = boolean;
	/**
	 * The GMS object to use for the buddy in the world.
	 */
	export type WorldObject = string;
	/**
	 * If set, the artisan will not follow the player unless this thing is finished.
	 */
	export type FollowingUnlock = string;
	/**
	 * Once this quest is complete, the Buddy's insights will be visible.
	 */
	export type InsightUnlocker = string;
	export type Red13 = number;
	export type Blue13 = number;
	export type Green13 = number;
	export type Red14 = number;
	export type Blue14 = number;
	export type Green14 = number;
	export type Red15 = number;
	export type Blue15 = number;
	export type Green15 = number;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip33 = boolean;
	export type EnglishText33 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText28 = string;
	/**
	 * The buddy that this buddy will become after the quest is complete. The new buddy will inherit the current buddy's insights.
	 */
	export type ConvertTo = string;
	/**
	 * The quest that will unlock the ability to convert this buddy to another buddy.
	 */
	export type ConvertAfterQuest = string;
	export type Requirement1 =
	  | {
	      style: "Quest";
	      quest_status: QuestStatus4;
	      quest: QuestToCheck4;
	    }
	  | {
	      style: "Equipped";
	      item: Item4;
	    }
	  | {
	      style: "Time";
	      time: Time1;
	    }
	  | {
	      style: "Items Owned";
	      items_owned: Items48;
	    }
	  | {
	      style: "Insight";
	      insight: Insight8;
	      insight_status: InsightStatus1;
	    }
	  | {
	      style: "Artisan Following";
	      following: Following5;
	      artisan?: Artisan1;
	    }
	  | {
	      style: "Comfort";
	      comfort: Comfort1;
	      comfort_status: ComfortStatus1;
	    }
	  | {
	      style: "Inventory Evaluation";
	      comparisons: InventoryEvaluation1;
	    }
	  | {
	      style: "Area";
	      area: AreaToCheck1;
	      exclusive?: Exclude40;
	      item_id: Entity1;
	    }
	  | {
	      style: "Teleporter Active";
	      teleporter_area?: TeleporterArea1;
	      teleporter_active: ActiveState1;
	    }
	  | {
	      style: "Requirement Group";
	      group_requirements: Requirements1;
	      require_all: RequireAll45;
	      invert: Invert1;
	    }
	  | {
	      style: "Pet";
	      pet?: Pet2;
	      following?: Following6;
	      stage?: PetStage2;
	    }
	  | {
	      style: "Boss Defeated";
	      boss: Boss5;
	    }
	  | {
	      style: "Infusion";
	      infusion: Infusion1;
	      infusion_status: InfusionStatus1;
	    };
	export type QuestStatus4 = "Complete" | "Started" | "Not Started";
	/**
	 * The quest whose status we are querying.
	 */
	export type QuestToCheck4 = string;
	/**
	 * The player must be wearing this item.
	 */
	export type Item4 = string;
	export type Time1 = "Day" | "Night";
	export type Quantity54 = number;
	export type Insight8 = string;
	export type InsightStatus1 = "Complete" | "Available" | "Locked";
	/**
	 * If false, then this will only trigger if the artisan is not following.
	 */
	export type Following5 = boolean;
	/**
	 * Leave unset to query whether any artisans are either following or not following. Otherwise, this will query the specific artisan you have chosen.
	 */
	export type Artisan1 = string;
	export type Comfort1 = string;
	export type ComfortStatus1 = "Complete" | "Available";
	export type Item5 = string;
	export type Quantity55 = number;
	export type AreaToCheck1 = string;
	/**
	 * If true, then this requirement will only pass if the entity is NOT in the area.
	 */
	export type Exclude40 = boolean;
	/**
	 * The entity that must be in the area for the requirement to pass.
	 */
	export type Entity1 = string;
	/**
	 * If not set, this requirement will check for 'any' teleporters.
	 */
	export type TeleporterArea1 = string;
	/**
	 * The teleporter must be in this state.
	 */
	export type ActiveState1 = boolean;
	/**
	 * If set to false, then this requirement group will pass if any of its requirements are met.
	 */
	export type RequireAll45 = boolean;
	/**
	 * If set, then this requirement group will 'pass' if its requirements are NOT met.
	 */
	export type Invert1 = boolean;
	/**
	 * If unset, then this requirement will be met if any of your pets match it.
	 */
	export type Pet2 = string;
	/**
	 * If set, then this will only trigger if the pet's following state matches this.
	 */
	export type Following6 = boolean;
	export type Boss5 = string;
	export type Infusion1 = string;
	export type InfusionStatus1 = "Complete" | "Available" | "Locked";
	export type Emoji2 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip34 = boolean;
	export type EnglishText34 = string;
	export type GroupNameInternal = string;
	export type TopicNameInternal = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup13 = string;
	export type WorldSprite11 = string;
	export type Interact = string;
	export type FollowStart = string;
	export type FollowEnd = string;
	/**
	 * For example, when you ask them to follow you, but they can't because they are researching.
	 */
	export type ActionBlocked = string;
	export type ResearchStart = string;
	export type ResearchCollected = string;
	export type ComfortGained = string;
	export type ComfortLost = string;
	/**
	 * The sprite to use for the buddy's banner in the Home UI.
	 */
	export type BannerPortrait = string;
	/**
	 * The sprite to use behind the buddy's banner in the Home UI.
	 */
	export type BannerBackground = string;
	export type UIIcon11 = string;
	export type UIIcon12 = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup14 = string;
	/**
	 * If false, the object will always render itself at its normal color and won't be darkened or brightened by lighting.
	 */
	export type UseLighting9 = boolean;
	export type WorldSprite12 = string;
	export type Width4 = number;
	export type Height4 = number;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip35 = boolean;
	export type EnglishText35 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText29 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip36 = boolean;
	export type EnglishText36 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText30 = string;
	export type UIIcon13 = string;
	/**
	 * A unique sound to be played when this item is collected into your body.
	 */
	export type CollectionSound2 = string;
	/**
	 * If this item unlocks a door, it will play this sound.
	 */
	export type DoorUnlockSound1 = string;
	/**
	 * If false, the object will always render itself at its normal color and won't be darkened or brightened by lighting.
	 */
	export type UseLighting10 = boolean;
	/**
	 * If false, this item can be placed in water.
	 */
	export type RequiresLand2 = boolean;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler68 = string;
	export type Width5 = number;
	export type Height5 = number;
	/**
	 * Overrides the default collection jingle when picking up this item.
	 */
	export type JingleOverride1 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip37 = boolean;
	export type EnglishText37 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText31 = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup15 = string;
	export type ScaleModifier3 = number;
	export type IgnoreInLevelViewer2 = boolean;
	export type CanExistOnFloors1 = boolean;
	export type WorldSprite13 = string;
	/**
	 * If true, this resource will snap to the grid when placed. Only applies to non-solid objects.
	 */
	export type GridSnapping2 = boolean;
	/**
	 * If using a Spine sprite, the object will try to play an animation with this name when it is spawned.
	 */
	export type SpineIdle1 = string;
	/**
	 * If false, the object will always render itself at its normal color and won't be darkened or brightened by lighting.
	 */
	export type UseLighting11 = boolean;
	/**
	 * The sound the pet will make when its ability is activated.
	 */
	export type AbilityActivationSound = string;
	/**
	 * The egg will periodically jiggle and make a sound while hatching.
	 */
	export type EggSounds = string;
	export type Condition3 =
	  | {
	      type?: "Standing on Tile Type";
	      floor_tile: Floor;
	      dock_tile: Dock;
	      terrain_tile: Terrain;
	    }
	  | {
	      type?: "Room Size";
	      interior_tiles: InteriorTileArea;
	    }
	  | {
	      type?: "Be Indoors";
	    }
	  | {
	      type?: "Item Tally";
	      item_tally: {
	        comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	        value0?: Items49;
	        value1?: number;
	      };
	      whole_building: WholeBuilding;
	    }
	  | {
	      type?: "Number of Rooms";
	      num_rooms: NumberOfRooms;
	    }
	  | {
	      type?: "Item Relationships";
	      source_items: SourceItems;
	      destination_items: TargetItems;
	      whole_building: WholeBuilding1;
	      distance: TileDistance;
	    };
	export type Floor = boolean;
	export type Dock = boolean;
	export type Terrain = boolean;
	/**
	 * If true, the entire building will be checked instead of just the Artisan's room.
	 */
	export type WholeBuilding = boolean;
	/**
	 * If true, the entire building will be checked instead of just the Artisan's room.
	 */
	export type WholeBuilding1 = boolean;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip38 = boolean;
	export type EnglishText38 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText32 = string;
	export type Egg = string;
	export type Width6 = number;
	export type Height6 = number;
	export type SkinName = string;
	export type Scale1 = number;
	/**
	 * A small sound the creature can make at random, for added personality.
	 */
	export type ChirpSound = string;
	/**
	 * The sound the pet will make when you open its UI (once it is hatched).
	 */
	export type UIOpenSound = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip39 = boolean;
	export type EnglishText39 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText33 = string;
	/**
	 * The sound the pet will make when you tell it to begin following you.
	 */
	export type FollowSound = string;
	/**
	 * If checked, the pet will be unable to use their attack unless they can find a path to the target.
	 */
	export type AbilityRequiresMelee = boolean;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip40 = boolean;
	export type EnglishText40 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip41 = boolean;
	export type EnglishText41 = string;
	/**
	 * The sound the pet will make when you tell it to go back to its nest.
	 */
	export type StopFollowingSound = string;
	export type Mastery = string;
	export type MasteryDeactivatesSynergy = boolean;
	export type Baby = number;
	export type Embiggened = number;
	/**
	 * Whether this buff changes this stat additively or multiplicatively.
	 */
	export type ModifierStyle = "Add" | "Multiply";
	export type Stat = string;
	export type MovementVisuals11 =
	  | {
	      animation?: HopAnimationName11;
	      style: "Hop";
	      babbler?: Babbler69;
	      hop_speed: HopVerticalSpeed11;
	      hop_anticipation?: HopAnticipationSeconds11;
	      hop_followthrough?: PostHopFollowthroughSeconds11;
	    }
	  | {
	      style: "Run";
	      babbler?: Babbler70;
	      run_vertical_speed: RunVerticalBounceSpeed11;
	      animation?: RunAnimationName11;
	    }
	  | {
	      style: "Crawl";
	      babbler?: Babbler71;
	      animation?: CrawlAnimationName11;
	    }
	  | {
	      animation?: Animation32;
	      style: "Fly";
	      z_baseline: BaselineAltitudePixels21;
	      babbler?: Babbler72;
	      z_sine?: AltitudeSineWave21;
	      flaps?: FlappingVerticalMovements21;
	    };
	/**
	 * Defaults to 'hop' but can be overridden.
	 */
	export type HopAnimationName11 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler69 = string;
	/**
	 * As a percentage of base gravity. This is fairly sensitive.
	 */
	export type HopVerticalSpeed11 = number;
	/**
	 * How long to hold before rising off the ground, to make room for a pre-hop animation.
	 */
	export type HopAnticipationSeconds11 = number;
	/**
	 * How long to hold after landing on the ground from a hop, to make room for animations.
	 */
	export type PostHopFollowthroughSeconds11 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler70 = string;
	/**
	 * How fast the character should pop up off the ground with each leg movement. As a percentage of base gravity. This is fairly sensitive.
	 */
	export type RunVerticalBounceSpeed11 = number;
	/**
	 * Defaults to 'run' but can be overridden.
	 */
	export type RunAnimationName11 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler71 = string;
	/**
	 * Defaults to 'crawl' but can be overridden.
	 */
	export type CrawlAnimationName11 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation32 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels21 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler72 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed24 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude22 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds21 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds21 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance21 = number;
	/**
	 * How the actor animates while not actively moving.
	 */
	export type StationaryVisuals10 =
	  | {
	      style?: "Stand";
	      babbler?: Babbler73;
	      animation?: Animation33;
	    }
	  | {
	      animation?: Animation34;
	      style: "Fly";
	      z_baseline: BaselineAltitudePixels22;
	      babbler?: Babbler74;
	      z_sine?: AltitudeSineWave22;
	      flaps?: FlappingVerticalMovements22;
	    };
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler73 = string;
	/**
	 * Defaults to 'idle.
	 */
	export type Animation33 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation34 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels22 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler74 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed25 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude23 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds22 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds22 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance22 = number;
	/**
	 * Relative to the global movement speed.
	 */
	export type MovementSpeed11 = number;
	/**
	 * This is to show the preview image in the Game Changer.
	 */
	export type PreviewSkin = string;
	export type WorldSprite14 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip42 = boolean;
	export type EnglishText42 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText34 = string;
	export type UIIcon14 = string;
	export type Red16 = number;
	export type Blue16 = number;
	export type Green16 = number;
	/**
	 * If checked, this ability fall back to Enabled if no 'Enablement' criteria are met. If unchecked, it will default to disabled.
	 */
	export type EnabledByDefault = boolean;
	export type Ability8 = string;
	export type MovementVisuals12 =
	  | {
	      animation?: HopAnimationName12;
	      style: "Hop";
	      babbler?: Babbler75;
	      hop_speed: HopVerticalSpeed12;
	      hop_anticipation?: HopAnticipationSeconds12;
	      hop_followthrough?: PostHopFollowthroughSeconds12;
	    }
	  | {
	      style: "Run";
	      babbler?: Babbler76;
	      run_vertical_speed: RunVerticalBounceSpeed12;
	      animation?: RunAnimationName12;
	    }
	  | {
	      style: "Crawl";
	      babbler?: Babbler77;
	      animation?: CrawlAnimationName12;
	    }
	  | {
	      animation?: Animation35;
	      style: "Fly";
	      z_baseline: BaselineAltitudePixels23;
	      babbler?: Babbler78;
	      z_sine?: AltitudeSineWave23;
	      flaps?: FlappingVerticalMovements23;
	    };
	/**
	 * Defaults to 'hop' but can be overridden.
	 */
	export type HopAnimationName12 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler75 = string;
	/**
	 * As a percentage of base gravity. This is fairly sensitive.
	 */
	export type HopVerticalSpeed12 = number;
	/**
	 * How long to hold before rising off the ground, to make room for a pre-hop animation.
	 */
	export type HopAnticipationSeconds12 = number;
	/**
	 * How long to hold after landing on the ground from a hop, to make room for animations.
	 */
	export type PostHopFollowthroughSeconds12 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler76 = string;
	/**
	 * How fast the character should pop up off the ground with each leg movement. As a percentage of base gravity. This is fairly sensitive.
	 */
	export type RunVerticalBounceSpeed12 = number;
	/**
	 * Defaults to 'run' but can be overridden.
	 */
	export type RunAnimationName12 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler77 = string;
	/**
	 * Defaults to 'crawl' but can be overridden.
	 */
	export type CrawlAnimationName12 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation35 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels23 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler78 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed26 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude24 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds23 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds23 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance23 = number;
	/**
	 * How the actor animates while not actively moving.
	 */
	export type StationaryVisuals11 =
	  | {
	      style?: "Stand";
	      babbler?: Babbler79;
	      animation?: Animation36;
	    }
	  | {
	      animation?: Animation37;
	      style: "Fly";
	      z_baseline: BaselineAltitudePixels24;
	      babbler?: Babbler80;
	      z_sine?: AltitudeSineWave24;
	      flaps?: FlappingVerticalMovements24;
	    };
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler79 = string;
	/**
	 * Defaults to 'idle.
	 */
	export type Animation36 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation37 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels24 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler80 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed27 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude25 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds24 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds24 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance24 = number;
	/**
	 * Relative to the global movement speed.
	 */
	export type MovementSpeed12 = number;
	export type MinSeconds4 = number;
	export type MaxSeconds4 = number;
	/**
	 * This enablement will be met if this mastery is active.
	 */
	export type Mastery1 = string;
	/**
	 * This enablement will be met if the pet is at least at this stage of growth.
	 */
	export type Stage = "Baby" | "Adult" | "Embiggened";
	/**
	 * If checked, this ability will be enabled when the stage and mastery requirements are met. If unchecked, the ability will be disabled if the criteria are met.
	 */
	export type Enables = boolean;
	/**
	 * Who the creature will attempt to cast this ability on.
	 */
	export type Target = "Enemy" | "Player";
	export type AbilityCooldownSeconds = number;
	export type UIIcon15 = string;
	export type Insight9 = string;
	/**
	 * How much the regrowth time should be adjusted for each point invested in the Insight.
	 */
	export type ChangePerPoint22 = number;
	/**
	 * If false, the object will always render itself at its normal color and won't be darkened or brightened by lighting.
	 */
	export type UseLighting12 = boolean;
	export type GrowsInto = string;
	export type Insight10 = string;
	/**
	 * This chance only applies if the Insight is fully researched (it doesn't apply point by point if the Insight has multiple points.
	 */
	export type AddedChance = number;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip43 = boolean;
	export type EnglishText43 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText35 = string;
	/**
	 * What workstation the player must be near to craft this recipe.
	 */
	export type Station9 = string;
	export type Style9 = "Additive" | "Multiplicative";
	export type ChangePerPoint23 = number;
	export type ResearchNode18 = string;
	export type ChangePerPoint24 = number;
	export type ResearchNode19 = string;
	export type UnlockedBy13 = string;
	/**
	 * Change this number to increase or decrease the number of materials required to craft this item.
	 */
	export type EffortModifier12 = number;
	export type OutputQuantity9 = number;
	export type GardenBed1 = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup16 = string;
	/**
	 * How many times this seedpack will regrow into the target plant after it is first planted.
	 */
	export type NumberOfRegrows = number;
	export type Insight11 = string;
	export type RegrowsPerPoint = number;
	/**
	 * The baseline chance for a fertilized seedpack of this type to turn into a 'shiny' version of the plant. This opens access to bonus loot groups.
	 */
	export type ShinyChance = number;
	export type MinutesToGrow = number;
	export type WorldSprite15 = string;
	export type FreeRegrowInsight = string;
	/**
	 * Every time the seed pack grows up, it will have this chance to not consume a Regrow.
	 */
	export type FreeRegrowChance = number;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip44 = boolean;
	export type EnglishText44 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText36 = string;
	export type UIIcon16 = string;
	export type ArmorType = string;
	/**
	 * A text string used to choose which image to display.
	 */
	export type SpineKeyword = string;
	/**
	 * Overrides the default collection jingle when picking up this item.
	 */
	export type JingleOverride2 = string;
	export type EquipmentSet3 = string;
	/**
	 * The sound this item makes when being placed in the inventory.
	 */
	export type InventorySound = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip45 = boolean;
	export type EnglishText45 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText37 = string;
	/**
	 * What workstation the player must be near to craft this recipe.
	 */
	export type Station10 = string;
	export type ChangePerPoint25 = number;
	export type ResearchNode20 = string;
	export type UnlockedBy14 = string;
	/**
	 * Change this number to increase or decrease the number of materials required to craft this item.
	 */
	export type EffortModifier13 = number;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup17 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip46 = boolean;
	export type EnglishText46 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText38 = string;
	/**
	 * A number that is connected to the relative power level of this thing.
	 */
	export type Level4 = number;
	export type UIIcon17 = string;
	/**
	 * Overrides the default collection jingle when picking up this item.
	 */
	export type JingleOverride3 = string;
	export type EquipmentSet4 = string;
	/**
	 * The sound this item makes when being placed in the inventory.
	 */
	export type InventorySound1 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip47 = boolean;
	export type EnglishText47 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText39 = string;
	/**
	 * What workstation the player must be near to craft this recipe.
	 */
	export type Station11 = string;
	export type ChangePerPoint26 = number;
	export type ResearchNode21 = string;
	export type UnlockedBy15 = string;
	/**
	 * Change this number to increase or decrease the number of materials required to craft this item.
	 */
	export type EffortModifier14 = number;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup18 = string;
	export type IgnoreInLevelViewer3 = boolean;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip48 = boolean;
	export type EnglishText48 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText40 = string;
	/**
	 * A number that is connected to the relative power level of this thing.
	 */
	export type Level5 = number;
	export type Ability9 = string;
	/**
	 * By default, wieldables cannot be stacked in the inventory. To conserve space, you can make some wieldables stackable if they are consumable.
	 */
	export type Stackable = boolean;
	/**
	 * The sound this thing makes when used (fired, swung, etc).
	 */
	export type UseSound = string;
	/**
	 * The sound this item makes when brought out into the player's hand.
	 */
	export type WieldSound = string;
	/**
	 * By default, we will attempt to use the mote ID.
	 */
	export type SpineAttachmentName = string;
	export type Type1 = string;
	/**
	 * Overrides the default collection jingle when picking up this item.
	 */
	export type JingleOverride4 = string;
	/**
	 * If set, dynamically-spawned versions of this item will disappear after this much time has passed since it was created.
	 */
	export type DynamicExpirationMinutes2 = number;
	export type EquipmentSet5 = string;
	/**
	 * The sound this item makes when being placed in the inventory.
	 */
	export type InventorySound2 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip49 = boolean;
	export type EnglishText49 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText41 = string;
	/**
	 * What workstation the player must be near to craft this recipe.
	 */
	export type Station12 = string;
	export type Style10 = "Additive" | "Multiplicative";
	export type ChangePerPoint27 = number;
	export type ResearchNode22 = string;
	export type ChangePerPoint28 = number;
	export type ResearchNode23 = string;
	export type UnlockedBy16 = string;
	/**
	 * Change this number to increase or decrease the number of materials required to craft this item.
	 */
	export type EffortModifier15 = number;
	export type OutputQuantity10 = number;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup19 = string;
	export type ScaleModifier4 = number;
	export type IgnoreInLevelViewer4 = boolean;
	export type WorldSprite16 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip50 = boolean;
	export type EnglishText50 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText42 = string;
	/**
	 * A number that is connected to the relative power level of this thing.
	 */
	export type Level6 = number;
	/**
	 * A unique sound to be played when this item is collected into your body.
	 */
	export type CollectionSound3 = string;
	export type UIIcon18 = string;
	/**
	 * By default, wieldable items require the player to manually pick them up off the ground. You can uncheck this box to make the items auto-pickup instead.
	 */
	export type ManualPickup1 = boolean;
	/**
	 * If this is a fishing pole, how many fish it pulls up per cast.
	 */
	export type FishingPower = number;
	/**
	 * A number that is connected to the relative power level of this thing.
	 */
	export type Level7 = number;
	export type UIIcon19 = string;
	export type Type2 = string;
	/**
	 * If set, dynamically-spawned versions of this item will disappear after this much time has passed since it was created.
	 */
	export type DynamicExpirationMinutes3 = number;
	/**
	 * The sound this item makes when consumed.
	 */
	export type ConsumeSound = string;
	/**
	 * The sound this item makes when being placed in the inventory.
	 */
	export type InventorySound3 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip51 = boolean;
	export type EnglishText51 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText43 = string;
	/**
	 * What workstation the player must be near to craft this recipe.
	 */
	export type Station13 = string;
	export type Style11 = "Additive" | "Multiplicative";
	export type ChangePerPoint29 = number;
	export type ResearchNode24 = string;
	export type ChangePerPoint30 = number;
	export type ResearchNode25 = string;
	export type UnlockedBy17 = string;
	/**
	 * Change this number to increase or decrease the number of materials required to craft this item.
	 */
	export type EffortModifier16 = number;
	export type OutputQuantity11 = number;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup20 = string;
	export type WorldSprite17 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip52 = boolean;
	export type EnglishText52 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText44 = string;
	export type Effect =
	  | {
	      type?: "Heal";
	      healing_percentage: Healing;
	      unlocked_by?: UnlockedBy18;
	    }
	  | {
	      type?: "Buff";
	      healing_percentage?: Healing1;
	      buff: BuffToApply;
	      unlocked_by?: UnlockedBy20;
	    };
	/**
	 * The healing amount will be automatically calculated based on the level of the item.
	 */
	export type Healing = number;
	export type UnlockedBy19 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip53 = boolean;
	export type EnglishText53 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText45 = string;
	/**
	 * If the buff can heal, heal with this amount. The healing amount will be automatically calculated based on the level of the item.
	 */
	export type Healing1 = number;
	export type BuffToApply = string;
	export type UnlockedBy21 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip54 = boolean;
	export type EnglishText54 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText46 = string;
	/**
	 * Whether the player walks over the top of this item.
	 */
	export type Underfoot2 = boolean;
	/**
	 * If true, this item stop rendering while underneath a building's roof.
	 */
	export type HideUnderRoof2 = boolean;
	/**
	 * If false, the object will always render itself at its normal color and won't be darkened or brightened by lighting.
	 */
	export type UseLighting13 = boolean;
	/**
	 * If false, this item can be placed in water.
	 */
	export type RequiresLand3 = boolean;
	/**
	 * When first spawned in the world, this thing can randomly scale itself down (to a minimum) to add variety. This scale should be preserved between sessions, so this will only apply to newly-created instances of this asset.
	 */
	export type RandomScalingMinimum2 = number;
	export type Object4 = string;
	/**
	 * If set, dynamically-spawned versions of this item will disappear after this much time has passed since it was created.
	 */
	export type DynamicExpirationMinutes4 = number;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip55 = boolean;
	export type EnglishText55 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText47 = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup21 = string;
	export type Red17 = number;
	export type Blue17 = number;
	export type Green17 = number;
	export type ScaleModifier5 = number;
	/**
	 * If set, this game element will adjust its level to match the player's level at the time it is spawned, plus this number.
	 */
	export type RelativeLevel3 = number;
	export type SpineSkin3 = string;
	/**
	 * The smallest version of this resource. Used for automatic editor merging.
	 */
	export type AutoMergeRootItem1 = string;
	export type WorldSprite18 = string;
	/**
	 * If true, this resource will snap to the grid when placed. Only applies to non-solid objects.
	 */
	export type GridSnapping3 = boolean;
	/**
	 * If true, this item will randomly select a skin from its available skins when spawned.
	 */
	export type RandomizedSpineSkin1 = boolean;
	/**
	 * Whether this world element can be struck by bullet-style projectiles. Solid world elements will always be struck by bullets.
	 */
	export type BulletInteraction2 = "All Bullets" | "Passthrough Only" | "No Bullets";
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip56 = boolean;
	export type EnglishText56 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText48 = string;
	/**
	 * If true, this item will not be rendered, but it will still exist and perform mechanics.
	 */
	export type Invisible = boolean;
	/**
	 * If set, the subimages will be modifiable via the Editor. Doesn't apply to world elements using Spine sprites.
	 */
	export type EditableSubimages = boolean;
	/**
	 * If using a Spine sprite, the environmental object will try to play an animation with this name when it is spawned.
	 */
	export type SpineIdle2 = string;
	/**
	 * A number that is connected to the relative power level of this thing.
	 */
	export type Level8 = number;
	/**
	 * Whether the item should be X-flipped randomly when placed.
	 */
	export type Flippable5 = boolean;
	export type UIIcon20 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler81 = string;
	/**
	 * If set, the particle system will be drawn behind the object
	 */
	export type Behind2 = boolean;
	export type State5 = string;
	/**
	 * If set, the particle will anchor to this spine bone, and the X and Y offsets will be relative to the bone's position
	 */
	export type SpineBone2 = string;
	/**
	 * Relative to the object's origin
	 */
	export type XOffset2 = number;
	export type EmitterScale3 = number;
	/**
	 * Relative to the object's origin
	 */
	export type YOffset4 = number;
	export type ParticleSystem3 = string;
	/**
	 * The category this item will be placed in when using the editor. Defaults to 'Structures'.
	 */
	export type EditorCategoryOverride = string;
	/**
	 * If true, this item will prevent abilities from targeting things through it via telegraphs.
	 */
	export type BlocksAbilities = boolean;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup22 = string;
	export type NameInternal2 = string;
	export type UIIcon21 = string;
	export type Width7 = number;
	export type Height7 = number;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip57 = boolean;
	export type EnglishText57 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText49 = string;
	export type BuildModePlacementSound = string;
	export type BuildModePickupSound = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup23 = string;
	export type Chance5 = number;
	/**
	 * Plays when receiving damage that has been mitigated.
	 */
	export type Minor3 = string;
	/**
	 * Plays when receiving damage that hasn't been mitigated.
	 */
	export type Major3 = string;
	export type WorldSprite19 = string;
	export type Red18 = number;
	export type Blue18 = number;
	export type Green18 = number;
	export type UIIcon22 = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup24 = string;
	/**
	 * If set, Juicebox will follow the player once this thing is finished.
	 */
	export type FollowingUnlock1 = string;
	export type Width8 = number;
	export type Height8 = number;
	export type WorldSprite20 = string;
	export type Red19 = number;
	export type Blue19 = number;
	export type Green19 = number;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip58 = boolean;
	export type EnglishText58 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText50 = string;
	export type UIIcon23 = string;
	/**
	 * If true, this item stop rendering while underneath a building's roof.
	 */
	export type HideUnderRoof3 = boolean;
	/**
	 * If false, the object will always render itself at its normal color and won't be darkened or brightened by lighting.
	 */
	export type UseLighting14 = boolean;
	/**
	 * If false, this item can be placed in water.
	 */
	export type RequiresLand4 = boolean;
	/**
	 * When first spawned in the world, this thing can randomly scale itself down (to a minimum) to add variety. This scale should be preserved between sessions, so this will only apply to newly-created instances of this asset.
	 */
	export type RandomScalingMinimum3 = number;
	export type Object5 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler82 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip59 = boolean;
	export type EnglishText59 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText51 = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup25 = string;
	export type WorldSprite21 = string;
	/**
	 * A unique character that lives in the game world.
	 */
	export type Character1 = Character2 & Character3;
	export type Personality1 = string;
	/**
	 * A handful of words for a quick overview of the character
	 */
	export type Brief1 = string;
	export type Pronouns1 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip60 = boolean;
	export type EnglishText60 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText52 = string;
	export type Emoji3 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip61 = boolean;
	export type EnglishText61 = string;
	export type GroupNameInternal1 = string;
	export type TopicNameInternal1 = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup26 = string;
	/**
	 * If true, this item will not appear in the world editor.
	 */
	export type EditorExcluded2 = boolean;
	export type Species = string;
	export type Red20 = number;
	export type Blue20 = number;
	export type Green20 = number;
	/**
	 * Higher % means higher pitch. Pitch also affects audio playback speed.
	 */
	export type VocalPitch = number;
	export type Character3 =
	  | {
	      spine_attachments?: SpineAttachments;
	      spine_skin: SpineSkin4;
	      scale: Scale2;
	      face: Face;
	      front_horn: FrontHorn;
	      head_scale: HeadScale;
	      species?: "species_tendraam";
	      back_horn: BackHorn;
	    }
	  | {
	      spine_skin: SpineSkin5;
	      species?: "species_quadropus";
	      scale: Scale3;
	    }
	  | {
	      spine_skin: SpineSkin6;
	      species: "species_brubus";
	      head_scale: HeadScale1;
	      spine_attachments: SpineAttachments1;
	      scale: Scale4;
	    };
	export type Necklace = string;
	export type Wieldable1 = string;
	export type Bag = string;
	export type Mask = string;
	export type SpineSkin4 = string;
	export type Scale2 = number;
	export type Face = "Cute" | "Angsty" | "Strong" | "Leafy" | "Drab";
	export type FrontHorn = "Slope Dope" | "Tall Bull" | "Leia Blossom" | "Freshly Shorn" | "Yak Flex";
	export type HeadScale = number;
	export type BackHorn = "Slope Dope" | "Tall Bull" | "Leia Blossom" | "Freshly Shorn" | "Yak Flex";
	export type SpineSkin5 = string;
	export type Scale3 = number;
	export type SpineSkin6 = string;
	export type HeadScale1 = number;
	export type Backpack = string;
	export type Necklace1 = string;
	export type Armwrap = string;
	export type FrillForehead = string;
	export type FrillJaw = string;
	export type Beak = string;
	export type Hat = string;
	export type Eyes = string;
	export type Scale4 = number;
	/**
	 * Whether items that have this tag are able to take damage.
	 */
	export type Invulnerable = boolean;
	/**
	 * If an item has multiple tags, the highest priority tag will be displayed on interfaces. For example, you may want something with 'Plant' and 'Component' to just always display 'Component.' In this case, the 'Component' tag should have a higher priority.
	 */
	export type TagPriority = number;
	export type UIIcon24 = string;
	/**
	 * If unchecked, this tag will not be present on items in the game world. Useful for tags that only exist to aggregate other tags for editor purposes.
	 */
	export type SettableOnItems = boolean;
	/**
	 * Items with this tag will multiply the baseline crafting effort by this amount when calculating their component requirements.
	 */
	export type CraftingEffortMultiplier = number;
	/**
	 * If true, items with this tag will be visible in the Build Mode selector and placeable in Build Mode.
	 */
	export type BuildModeAccessible = boolean;
	/**
	 * How many times this item should be crafted to gain the first crafting efficiency level.
	 */
	export type NumCraftsForFirstSkillLevel = number;
	/**
	 * Any items with this tag will also be given the parent tag. E.g. 'Sword' tag would have a parent tag of 'Weapon,' because all swords are weapons.
	 */
	export type ParentTag = string;
	/**
	 * The sound this item makes when being placed in the inventory.
	 */
	export type InventorySound4 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip62 = boolean;
	export type EnglishText62 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText53 = string;
	/**
	 * Items with this tag will appear in this editor category.
	 */
	export type EditorCategory = string;
	/**
	 * Whether items that have this tag will respawn after destroyed in the world.
	 */
	export type Respawnable1 = boolean;
	/**
	 * Recipes with this tag will go into this category.
	 */
	export type RecipeCategory = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup27 = string;
	export type Name29 = string;
	/**
	 * Adjust the baseline time to research this insight by changing this number. E.g. a multiplier of 0.5 will cut the research time in half.
	 */
	export type TimeModifier = number;
	export type Icon3 = string;
	/**
	 * What this insight is unlocked by (if anything)
	 */
	export type UnlockedBy22 = string;
	/**
	 * The maximum number of points that can be invested into this Insight.
	 */
	export type MaximumPoints = number;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip63 = boolean;
	export type EnglishText63 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText54 = string;
	/**
	 * Change this number to increase or decrease the number of materials required to research this Insight.
	 */
	export type EffortModifier17 = number;
	export type Artisan2 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip64 = boolean;
	export type EnglishText64 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText55 = string;
	/**
	 * If set, this insight will not be researchable in the demo version of the game.
	 */
	export type DemoBlocked = boolean;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip65 = boolean;
	export type EnglishText65 = string;
	export type Pet4 = string;
	/**
	 * What stage of the pet's life this quest is available during.
	 */
	export type PetStage3 = "Baby" | "Adult";
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip66 = boolean;
	export type EnglishText66 = string;
	export type Name30 = string;
	export type QuestMoment =
	  | {
	      style: "Dialogue";
	      requirements?: MomentRequirements;
	      speech: {
	        speaker: Speaker1;
	        text: {
	          skip?: Skip67;
	          text: EnglishText67;
	        };
	        emotion?: Emoji4;
	      };
	    }
	  | {
	      requirements?: MomentRequirements;
	      style: "Emote";
	      emotes: Emotes1;
	    }
	  | {
	      style: "Gain Item";
	      bonus?: ItemsAreBonus;
	      requirements?: MomentRequirements;
	      items: ItemsToGain;
	    }
	  | {
	      style: "Pin";
	      pin: WhatToPin;
	    }
	  | {
	      style: "Artisan Follow";
	      artisan: Buddy4;
	    }
	  | {
	      requirements?: MomentRequirements;
	      style: "Drop Item";
	      bonus?: ItemsAreBonus1;
	      drops: Drops;
	    }
	  | {
	      style: "Artisan Stop Following";
	      artisan: Artisan3;
	    }
	  | {
	      style: "Set Area Discovered";
	      area: Area1;
	    }
	  | {
	      style: "Close a Quest";
	      requirements?: MomentRequirements;
	      quest_to_close: Quest1;
	    }
	  | {
	      style: "Pause";
	      pause_duration: PauseSeconds1;
	    }
	  | {
	      style: "Camera Target Set";
	      camera_target: CameraTargetEntity1;
	    }
	  | {
	      style: "Camera Target Unset";
	    }
	  | {
	      style: "Camera Zoom";
	      zoom_amount: ZoomAmount1;
	    }
	  | {
	      style: "Music Begin";
	      music: Music1;
	    }
	  | {
	      style: "Music End";
	    }
	  | {
	      style: "Look Target Set";
	      requirements?: MomentRequirements;
	      look_targets: LookTargets1;
	    }
	  | {
	      style: "Look Target Unset";
	      requirements?: MomentRequirements;
	      actors?: Actors1;
	    };
	export type Speaker1 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip67 = boolean;
	export type EnglishText67 = string;
	export type Emoji4 = string;
	export type Emoji5 = string;
	export type Character4 = string;
	/**
	 * If checked, these items will not be included in the progression map.
	 */
	export type ItemsAreBonus = boolean;
	export type Quantity56 = number;
	export type WhatToPin = string;
	export type Buddy4 = string;
	/**
	 * If checked, these items will not be included in the progression map.
	 */
	export type ItemsAreBonus1 = boolean;
	/**
	 * Who or what will drop these items. If not present, the items will fly out of the player.
	 */
	export type Dropper = string;
	export type Quantity57 = number;
	export type Item6 = string;
	export type Artisan3 = string;
	export type Area1 = string;
	/**
	 * This quest will be set as 'complete', regardless of whether it has been started or not. Its end moments will be skipped.
	 */
	export type Quest1 = string;
	/**
	 * How long to pause before moving to the next quest moment.
	 */
	export type PauseSeconds1 = number;
	export type CameraTargetEntity1 = string;
	/**
	 * Higher number means you can see more.
	 */
	export type ZoomAmount1 = number;
	export type Music1 = string;
	export type LooksAt1 = string;
	export type QuestMoment1 =
	  | {
	      style: "Dialogue";
	      requirements?: MomentRequirements;
	      speech: {
	        speaker: Speaker2;
	        text: {
	          skip?: Skip68;
	          text: EnglishText68;
	        };
	        emotion?: Emoji6;
	      };
	    }
	  | {
	      requirements?: MomentRequirements;
	      style: "Emote";
	      emotes: Emotes2;
	    }
	  | {
	      style: "Gain Item";
	      bonus?: ItemsAreBonus2;
	      requirements?: MomentRequirements;
	      items: ItemsToGain1;
	    }
	  | {
	      style: "Pin";
	      pin: WhatToPin1;
	    }
	  | {
	      style: "Artisan Follow";
	      artisan: Buddy5;
	    }
	  | {
	      requirements?: MomentRequirements;
	      style: "Drop Item";
	      bonus?: ItemsAreBonus3;
	      drops: Drops1;
	    }
	  | {
	      style: "Artisan Stop Following";
	      artisan: Artisan4;
	    }
	  | {
	      style: "Set Area Discovered";
	      area: Area2;
	    }
	  | {
	      style: "Close a Quest";
	      requirements?: MomentRequirements;
	      quest_to_close: Quest2;
	    }
	  | {
	      style: "Pause";
	      pause_duration: PauseSeconds2;
	    }
	  | {
	      style: "Camera Target Set";
	      camera_target: CameraTargetEntity2;
	    }
	  | {
	      style: "Camera Target Unset";
	    }
	  | {
	      style: "Camera Zoom";
	      zoom_amount: ZoomAmount2;
	    }
	  | {
	      style: "Music Begin";
	      music: Music2;
	    }
	  | {
	      style: "Music End";
	    }
	  | {
	      style: "Look Target Set";
	      requirements?: MomentRequirements;
	      look_targets: LookTargets2;
	    }
	  | {
	      style: "Look Target Unset";
	      requirements?: MomentRequirements;
	      actors?: Actors2;
	    };
	export type Speaker2 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip68 = boolean;
	export type EnglishText68 = string;
	export type Emoji6 = string;
	export type Emoji7 = string;
	export type Character5 = string;
	/**
	 * If checked, these items will not be included in the progression map.
	 */
	export type ItemsAreBonus2 = boolean;
	export type Quantity58 = number;
	export type WhatToPin1 = string;
	export type Buddy5 = string;
	/**
	 * If checked, these items will not be included in the progression map.
	 */
	export type ItemsAreBonus3 = boolean;
	/**
	 * Who or what will drop these items. If not present, the items will fly out of the player.
	 */
	export type Dropper1 = string;
	export type Quantity59 = number;
	export type Item7 = string;
	export type Artisan4 = string;
	export type Area2 = string;
	/**
	 * This quest will be set as 'complete', regardless of whether it has been started or not. Its end moments will be skipped.
	 */
	export type Quest2 = string;
	/**
	 * How long to pause before moving to the next quest moment.
	 */
	export type PauseSeconds2 = number;
	export type CameraTargetEntity2 = string;
	/**
	 * Higher number means you can see more.
	 */
	export type ZoomAmount2 = number;
	export type Music2 = string;
	export type LooksAt2 = string;
	export type Storyline = string;
	/**
	 * If true, this quest will not be shown in the progression map.
	 */
	export type IgnoreInProgressionMap3 = boolean;
	/**
	 * If checked, this quest will not be able to be accepted by the player or completed in the game (even retroactively).
	 */
	export type Blocked = boolean;
	/**
	 * If 0, this text will just display next to a point on the map. Otherwise, it will appear inside a radius.
	 */
	export type RadiusGridSpaces = number;
	export type QuestMarker1 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip69 = boolean;
	export type EnglishText69 = string;
	export type QuestMoment2 =
	  | {
	      style: "Dialogue";
	      requirements?: MomentRequirements;
	      speech: {
	        speaker: Speaker3;
	        text: {
	          skip?: Skip70;
	          text: EnglishText70;
	        };
	        emotion?: Emoji8;
	      };
	    }
	  | {
	      requirements?: MomentRequirements;
	      style: "Emote";
	      emotes: Emotes3;
	    }
	  | {
	      style: "Gain Item";
	      bonus?: ItemsAreBonus4;
	      requirements?: MomentRequirements;
	      items: ItemsToGain2;
	    }
	  | {
	      style: "Pin";
	      pin: WhatToPin2;
	    }
	  | {
	      style: "Artisan Follow";
	      artisan: Buddy6;
	    }
	  | {
	      requirements?: MomentRequirements;
	      style: "Drop Item";
	      bonus?: ItemsAreBonus5;
	      drops: Drops2;
	    }
	  | {
	      style: "Artisan Stop Following";
	      artisan: Artisan5;
	    }
	  | {
	      style: "Set Area Discovered";
	      area: Area3;
	    }
	  | {
	      style: "Close a Quest";
	      requirements?: MomentRequirements;
	      quest_to_close: Quest3;
	    }
	  | {
	      style: "Pause";
	      pause_duration: PauseSeconds3;
	    }
	  | {
	      style: "Camera Target Set";
	      camera_target: CameraTargetEntity3;
	    }
	  | {
	      style: "Camera Target Unset";
	    }
	  | {
	      style: "Camera Zoom";
	      zoom_amount: ZoomAmount3;
	    }
	  | {
	      style: "Music Begin";
	      music: Music3;
	    }
	  | {
	      style: "Music End";
	    }
	  | {
	      style: "Look Target Set";
	      requirements?: MomentRequirements;
	      look_targets: LookTargets3;
	    }
	  | {
	      style: "Look Target Unset";
	      requirements?: MomentRequirements;
	      actors?: Actors3;
	    };
	export type Speaker3 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip70 = boolean;
	export type EnglishText70 = string;
	export type Emoji8 = string;
	export type Emoji9 = string;
	export type Character6 = string;
	/**
	 * If checked, these items will not be included in the progression map.
	 */
	export type ItemsAreBonus4 = boolean;
	export type Quantity60 = number;
	export type WhatToPin2 = string;
	export type Buddy6 = string;
	/**
	 * If checked, these items will not be included in the progression map.
	 */
	export type ItemsAreBonus5 = boolean;
	/**
	 * Who or what will drop these items. If not present, the items will fly out of the player.
	 */
	export type Dropper2 = string;
	export type Quantity61 = number;
	export type Item8 = string;
	export type Artisan5 = string;
	export type Area3 = string;
	/**
	 * This quest will be set as 'complete', regardless of whether it has been started or not. Its end moments will be skipped.
	 */
	export type Quest3 = string;
	/**
	 * How long to pause before moving to the next quest moment.
	 */
	export type PauseSeconds3 = number;
	export type CameraTargetEntity3 = string;
	/**
	 * Higher number means you can see more.
	 */
	export type ZoomAmount3 = number;
	export type Music3 = string;
	export type LooksAt3 = string;
	export type Blocked1 = "Yep";
	/**
	 * The interactor can optionally check for distance to an entity other than the player.
	 */
	export type AutomaticInteractionTarget = string;
	/**
	 * If the requirements are met, this interactor will be shown on the world map.
	 */
	export type ShowOnMap = boolean;
	/**
	 * How far away from the interaction target (in grid spaces) the quest giver will automatically begin speaking.
	 */
	export type AutomaticInteractionProximity = number;
	/**
	 * For automatic interactions, whether this interaction will only occur if it is in the same room as the interaction target.
	 */
	export type RequireSameRoom = boolean;
	/**
	 * If set, the quest giver must be in the specified area.
	 */
	export type AreaRequirement = string;
	/**
	 * Who or what must be present for this quest to advance.
	 */
	export type Initiator = string;
	/**
	 * The interactor can optionally check for distance to an entity other than the player.
	 */
	export type AutomaticInteractionTarget1 = string;
	/**
	 * If the requirements are met, this interactor will be shown on the world map.
	 */
	export type ShowOnMap1 = boolean;
	/**
	 * How far away from the interaction target (in grid spaces) the quest giver will automatically begin speaking.
	 */
	export type AutomaticInteractionProximity1 = number;
	/**
	 * For automatic interactions, whether this interaction will only occur if it is in the same room as the interaction target.
	 */
	export type RequireSameRoom1 = boolean;
	/**
	 * If set, the quest giver must be in the specified area.
	 */
	export type AreaRequirement1 = string;
	/**
	 * Who or what must be present for this quest to advance.
	 */
	export type Initiator1 = string;
	export type Objective =
	  | {
	      style: "Turn-in Items";
	      tracking?: TrackProgress;
	      items: Items50;
	    }
	  | {
	      ability: AbilityToUse;
	      progress_infostream?: ProgressInfostream;
	      tracking_text?: ProgressTrackingDescription;
	      objective_id: ObjectiveID;
	      ability_quantity?: NumberOfTimes;
	      style: "Ability Usage";
	      ability_requirements?: AbilityUsageRequirements;
	      ability_targets?: TargetS;
	    }
	  | {
	      progress_infostream?: ProgressInfostream1;
	      tracking_text?: ProgressTrackingDescription1;
	      require_player: RequirePlayerInvolvement;
	      destroy_quantity?: Quantity66;
	      destroy_requirements?: DestructionRequirements;
	      destroy_targets: TargetS1;
	      target_home?: TargetHome;
	      exclusive_home?: ExcludeHome;
	      destroy_target_scene?: TargetScene;
	      objective_id: ObjectiveID1;
	      style: "Destroy";
	    }
	  | {
	      progress_infostream?: ProgressInfostream2;
	      tracking_text?: ProgressTrackingDescription2;
	      objective_id: ObjectiveID2;
	      consume_items: ItemsToConsume;
	      style: "Consume Item";
	      consume_quantity: Quantity70;
	    }
	  | {
	      style: "Open Interface";
	      interface: Interface;
	      objective_id: ObjectiveID3;
	    }
	  | {
	      placement_item: Item11;
	      tracking?: TrackProgress1;
	      progress_infostream?: ProgressInfostream3;
	      tracking_text?: ProgressTrackingDescription3;
	      objective_id: ObjectiveID4;
	      style: "Place Item";
	      map_markers?: MapMarkers1;
	      placement_area?: RequiredArea;
	      marker_proximity?: QuestMarkerProximity;
	      placement_quantity: Quantity71;
	    }
	  | {
	      tracking?: TrackProgress2;
	      progress_infostream?: ProgressInfostream4;
	      objective_id: ObjectiveID5;
	      style: "Craft Item";
	      craft_quantity: Quantity72;
	      item_to_craft: ItemToCraft;
	    }
	  | {
	      style: "Get Custom Loot";
	      tracking?: TrackProgress3;
	      items: ItemsToDrop3;
	      custom_loot: CustomLootDrops;
	    }
	  | {
	      progress_infostream?: ProgressInfostream5;
	      tracking_text?: ProgressTrackingDescription4;
	      interact_text?: InteractionText;
	      interact_color?: InteractionBarColor;
	      interact_duration?: InteractionDuration;
	      interact_quantity?: Quantity74;
	      interact_targets: TargetS2;
	      interact_sound?: InteractionFinishSound;
	      interact_target_home?: TargetHome1;
	      interact_target_scene?: TargetScene1;
	      interact_requirements?: Requirements6;
	      interact_outcomes?: InteractionOutcomes;
	      objective_id: ObjectiveID6;
	      style: "Interact";
	    }
	  | {
	      progress_infostream?: ProgressInfostream6;
	      tracking?: TrackProgress4;
	      objective_id: ObjectiveID7;
	      style: "Acquire Item";
	      quantity: Quantity78;
	      item: Item13;
	    };
	/**
	 * If checked, this objective's progress will be tracked in the Quest log page. The quest must have a log summary for this to appear.
	 */
	export type TrackProgress = boolean;
	/**
	 * How many of this item to turn in.
	 */
	export type Quantity62 = number;
	/**
	 * The player must use this ability to meet the quest objective.
	 */
	export type AbilityToUse = string;
	/**
	 * If set, a counter will pop up in the Infostream indicating your progress toward this objective as you increment it.
	 */
	export type ProgressInfostream = boolean;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip71 = boolean;
	export type EnglishText71 = string;
	/**
	 * A unique number used to save and load this objective's progress to/from disk.
	 */
	export type ObjectiveID = number;
	/**
	 * How many times the ability must be used to meet the quest objective.
	 */
	export type NumberOfTimes = number;
	export type AbilityUsageRequirement =
	  | {
	      style: "Time";
	      time: Time2;
	    }
	  | {
	      style: "Artisan Following";
	      following: Following7;
	      artisan?: Artisan6;
	    }
	  | {
	      style: "Equipped";
	      item: Item9;
	    }
	  | {
	      style: "Items Owned";
	      items_owned: Items51;
	    }
	  | {
	      style: "Area";
	      area: AreaToCheck2;
	      exclusive?: Exclude41;
	      item_id: Entity2;
	    }
	  | {
	      style: "Pet";
	      pet?: Pet5;
	      following?: Following8;
	      stage?: PetStage4;
	    };
	export type Time2 = "Day" | "Night";
	/**
	 * If false, then this will only trigger if the artisan is not following.
	 */
	export type Following7 = boolean;
	/**
	 * Leave unset to query whether any artisans are either following or not following. Otherwise, this will query the specific artisan you have chosen.
	 */
	export type Artisan6 = string;
	/**
	 * The player must be wearing this item.
	 */
	export type Item9 = string;
	export type Quantity63 = number;
	export type AreaToCheck2 = string;
	/**
	 * If true, then this requirement will only pass if the entity is NOT in the area.
	 */
	export type Exclude41 = boolean;
	/**
	 * The entity that must be in the area for the requirement to pass.
	 */
	export type Entity2 = string;
	/**
	 * If unset, then this requirement will be met if any of your pets match it.
	 */
	export type Pet5 = string;
	/**
	 * If set, then this will only trigger if the pet's following state matches this.
	 */
	export type Following8 = boolean;
	export type Quantity64 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll46 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants38 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags38 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude42 = boolean;
	export type Quantity65 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll47 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants39 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags39 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude43 = boolean;
	/**
	 * If set, a counter will pop up in the Infostream indicating your progress toward this objective as you increment it.
	 */
	export type ProgressInfostream1 = boolean;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip72 = boolean;
	export type EnglishText72 = string;
	/**
	 * If checked, this will require the player (or something the player created/owns) to destroy the target. Otherwise, any kind of destruction will count.
	 */
	export type RequirePlayerInvolvement = boolean;
	/**
	 * How many things must be destroyed.
	 */
	export type Quantity66 = number;
	export type DestructionRequirement =
	  | {
	      style: "Time";
	      time: Time3;
	    }
	  | {
	      style: "Artisan Following";
	      following: Following9;
	      artisan?: Artisan7;
	    }
	  | {
	      style: "Equipped";
	      item: Item10;
	    }
	  | {
	      style: "Ability Used";
	      ability: Ability10;
	    }
	  | {
	      style: "Items Owned";
	      items_owned: Items54;
	    }
	  | {
	      style: "Area";
	      area: AreaToCheck3;
	      exclusive?: Exclude44;
	      item_id: Entity3;
	    }
	  | {
	      style: "Pet";
	      pet?: Pet6;
	      following?: Following10;
	      stage?: PetStage5;
	    };
	export type Time3 = "Day" | "Night";
	/**
	 * If false, then this will only trigger if the artisan is not following.
	 */
	export type Following9 = boolean;
	/**
	 * Leave unset to query whether any artisans are either following or not following. Otherwise, this will query the specific artisan you have chosen.
	 */
	export type Artisan7 = string;
	/**
	 * The player must be wearing this item.
	 */
	export type Item10 = string;
	/**
	 * The destruction will only count if this ability is used to do it.
	 */
	export type Ability10 = string;
	export type Quantity67 = number;
	export type AreaToCheck3 = string;
	/**
	 * If true, then this requirement will only pass if the entity is NOT in the area.
	 */
	export type Exclude44 = boolean;
	/**
	 * The entity that must be in the area for the requirement to pass.
	 */
	export type Entity3 = string;
	/**
	 * If unset, then this requirement will be met if any of your pets match it.
	 */
	export type Pet6 = string;
	/**
	 * If set, then this will only trigger if the pet's following state matches this.
	 */
	export type Following10 = boolean;
	export type Quantity68 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll48 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants40 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags40 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude45 = boolean;
	export type Quantity69 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll49 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants41 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags41 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude46 = boolean;
	/**
	 * If set, destruction will only count if the target is originally from this area, even if the target has wandered away.
	 */
	export type TargetHome = string;
	/**
	 * If checked, the target must be from somewhere other than the home area that is set.
	 */
	export type ExcludeHome = boolean;
	/**
	 * If set, destruction will only count if the target is from this scene.
	 */
	export type TargetScene = string;
	/**
	 * A unique number used to save and load this objective's progress to/from disk.
	 */
	export type ObjectiveID1 = number;
	/**
	 * If set, a counter will pop up in the Infostream indicating your progress toward this objective as you increment it.
	 */
	export type ProgressInfostream2 = boolean;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip73 = boolean;
	export type EnglishText73 = string;
	/**
	 * A unique number used to save and load this objective's progress to/from disk.
	 */
	export type ObjectiveID2 = number;
	/**
	 * How many items must be consumed.
	 */
	export type Quantity70 = number;
	/**
	 * Once the player has viewed this interface, the quest objective will be completed.
	 */
	export type Interface =
	  | "Build Mode"
	  | "Insights"
	  | "Crafting"
	  | "Comforts"
	  | "Home"
	  | "Death"
	  | "Quests"
	  | "Equipment"
	  | "Map"
	  | "Teleport List"
	  | "Teleport Sequence"
	  | "Pet"
	  | "Death to Boss"
	  | "Infinisuit";
	/**
	 * A unique number used to save and load this objective's progress to/from disk.
	 */
	export type ObjectiveID3 = number;
	export type Item11 = string;
	/**
	 * If checked, this objective's progress will be tracked in the Quest log page. The quest must have a log summary for this to appear.
	 */
	export type TrackProgress1 = boolean;
	/**
	 * If set, a counter will pop up in the Infostream indicating your progress toward this objective as you increment it.
	 */
	export type ProgressInfostream3 = boolean;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip74 = boolean;
	export type EnglishText74 = string;
	/**
	 * A unique number used to save and load this objective's progress to/from disk.
	 */
	export type ObjectiveID4 = number;
	/**
	 * If 0, this text will just display next to a point on the map. Otherwise, it will appear inside a radius.
	 */
	export type RadiusGridSpaces1 = number;
	export type QuestMarker2 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip75 = boolean;
	export type EnglishText75 = string;
	/**
	 * Where this item must be placed.
	 */
	export type RequiredArea = string;
	export type ProximityGridSpaces = number;
	/**
	 * How many of this item must be placed.
	 */
	export type Quantity71 = number;
	/**
	 * If checked, this objective's progress will be tracked in the Quest log page. The quest must have a log summary for this to appear.
	 */
	export type TrackProgress2 = boolean;
	/**
	 * If set, a counter will pop up in the Infostream indicating your progress toward this objective as you increment it.
	 */
	export type ProgressInfostream4 = boolean;
	/**
	 * A unique number used to save and load this objective's progress to/from disk.
	 */
	export type ObjectiveID5 = number;
	/**
	 * How many of this item must be crafted.
	 */
	export type Quantity72 = number;
	export type ItemToCraft = string;
	/**
	 * If checked, this objective's progress will be tracked in the Quest log page. The quest must have a log summary for this to appear.
	 */
	export type TrackProgress3 = boolean;
	/**
	 * How many of this item will drop. Once the player has all of these items, this objective will be considered complete.
	 */
	export type Quantity73 = number;
	export type Min35 = number;
	export type Max35 = number;
	/**
	 * What event will cause this loot to drop.
	 */
	export type Trigger3 = "Death" | "Damage";
	/**
	 * When this loot group is able to drop.
	 */
	export type TimeOfDay2 = "Always" | "Day" | "Night";
	/**
	 * The probability for this loot group to occur.
	 */
	export type DropChance2 = number;
	/**
	 * If set, a counter will pop up in the Infostream indicating your progress toward this objective as you increment it.
	 */
	export type ProgressInfostream5 = boolean;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip76 = boolean;
	export type EnglishText76 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip77 = boolean;
	export type EnglishText77 = string;
	export type Red21 = number;
	export type Blue21 = number;
	export type Green21 = number;
	/**
	 * How long the player must interact with the target to complete this objective.
	 */
	export type InteractionDuration = number;
	/**
	 * How many times the player must perform this interaction.
	 */
	export type Quantity74 = number;
	export type Quantity75 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll50 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants42 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags42 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude47 = boolean;
	export type Quantity76 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll51 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants43 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags43 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude48 = boolean;
	/**
	 * The sound that will play when the player finishes interacting with the target.
	 */
	export type InteractionFinishSound = string;
	/**
	 * If set, interaction will only count if the target is originally from this area, even if the target has wandered away.
	 */
	export type TargetHome1 = string;
	/**
	 * If set, interaction will only count if the target is in this scene.
	 */
	export type TargetScene1 = string;
	export type QuestInteractionOutcome =
	  | {
	      type: "Set Datafield";
	      value: Value2;
	      datafield: Datafield4;
	    }
	  | {
	      type: "Destroy";
	    }
	  | {
	      type: "Lose Items";
	      items: ItemsToLose;
	    }
	  | {
	      type: "Pickup Item";
	    };
	/**
	 * The new value to set the datafield to.
	 */
	export type Value2 = number;
	export type Datafield4 = string;
	export type Quantity77 = number;
	export type Item12 = string;
	/**
	 * A unique number used to save and load this objective's progress to/from disk.
	 */
	export type ObjectiveID6 = number;
	/**
	 * If set, a counter will pop up in the Infostream indicating your progress toward this objective as you increment it.
	 */
	export type ProgressInfostream6 = boolean;
	/**
	 * If checked, this objective's progress will be tracked in the Quest log page. The quest must have a log summary for this to appear.
	 */
	export type TrackProgress4 = boolean;
	/**
	 * A unique number used to save and load this objective's progress to/from disk.
	 */
	export type ObjectiveID7 = number;
	/**
	 * How many of this item to acquire.
	 */
	export type Quantity78 = number;
	/**
	 * Which item must be acquired. Note that this objective only counts items acquired after you have started the quest.
	 */
	export type Item13 = string;
	export type Emoji10 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip78 = boolean;
	export type EnglishText78 = string;
	export type Speaker4 = string;
	/**
	 * If set, the text will only appear if the player is within this distance of the quest marker.
	 */
	export type Proximity = number;
	export type QuestMarker3 = string;
	/**
	 * If set, this sprite will be drawn alongside the quest marker text.
	 */
	export type Sprite3 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip79 = boolean;
	export type EnglishText79 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText56 = string;
	export type Red22 = number;
	export type Blue22 = number;
	export type Green22 = number;
	/**
	 * For sorting in the Game Changer.
	 */
	export type Order = number;
	/**
	 * Whether this is a Spine sprite.
	 */
	export type Spine = boolean;
	/**
	 * If set, this sprite will be masked in demo versions of the game, making it non-viewable.
	 */
	export type DemoMasked = boolean;
	/**
	 * For your internal reference.
	 */
	export type TrackName = string;
	export type Inactive = number;
	export type Active = number;
	export type Inactive1 = string;
	export type Active1 = string;
	/**
	 * If this Spine has multiple tracks, which track must these animations be playing on?
	 */
	export type AnimationTrack = number;
	/**
	 * The name of the attachment slot (from Spine).
	 */
	export type Slot = string;
	/**
	 * The name of the attachment slot (from Spine).
	 */
	export type SlotName = string;
	/**
	 * The name of the sprite in the GMS project.
	 */
	export type Name31 = string;
	/**
	 * The chance that this action group will occur.
	 */
	export type Chance6 = number;
	/**
	 * If true, the actions in this action group will always attempt to be performed on the caster.
	 */
	export type CastOnSelf = boolean;
	/**
	 * An action to be performed on the targets that have been captured by this Action Group. For example, targets caught in a telegraph, yourself, etc...
	 */
	export type Action1 =
	  | {
	      badge_modifiers?: InsightModifiers;
	      damage_followup?: FollowupActions;
	      unlocked_by?: UnlockedBy23;
	      damage_entity?: EntityToDamage;
	      chance?: ActionProbability;
	      damage_steal_health?: StealHealth;
	      damage_success_sound?: ImpactSound1;
	      datafield_modifiers?: DatafieldMultipliers1;
	      damage_failure_sound?: FailureSound1;
	      target_filter?: TargetFilters2;
	      action_type?: "Damage";
	      damage_profile: DamageProfile;
	    }
	  | {
	      heal_target_filter?: TargetFilters3;
	      chance?: ActionProbability1;
	      healing_percentage: Healing2;
	      unlocked_by?: UnlockedBy25;
	      healing_entity?: EntityToHeal;
	      heal_success_sound?: HealSound;
	      action_type?: "Heal";
	      heal_failure_sound?: FailureSound2;
	    }
	  | {
	      grid_size?: Radius;
	      action_type?: "Clear Terrain";
	    }
	  | {
	      unlocked_by?: UnlockedBy27;
	      move_entity: EntityBeingMoved;
	      move_ignores_solids_while_moving?: IgnoreSolidsWhileMoving;
	      move_direction?: Direction1;
	      traverses_water: MoveOverWater;
	      move_direction_randomness?: DirectionRandomness1;
	      move_sounds?: MovementSounds;
	      move_grid_distance: MovementDistanceGridSpaces;
	      move_destination: EntityDestination;
	      move_speed: Speed28;
	      move_style?: MovementStyle;
	      visual_tether?: VisualTether;
	      premove_effect?: PreMoveEffect;
	      move_distance_modifier?: MoveDistanceStatModifiers;
	      move_animations?: MovementAnimations;
	      move_speed_stat_modifier?: MoveSpeedStatModifiers;
	      telegraph_pullthrough?: ShowTelegraphDuringCast;
	      move_end_action_groups?: ActionGroups1;
	      chance?: ActionProbability2;
	      move_to_entity_edge?: MoveToEntityEdge;
	      action_type?: "Move";
	    }
	  | {
	      sound_id: Sound3;
	      sound_location: SoundLocation1;
	      sound_probability: SoundProbability;
	      sound_as_voice?: PlayAsVoice1;
	      unlocked_by?: UnlockedBy29;
	      action_type?: "Play Sound";
	    }
	  | {
	      drop_loot?: DropLoot1;
	      counts_as_death?: CountsAsDeath1;
	      destroy_entity: EntityToDestroy;
	      chance?: ActionProbability3;
	      unlocked_by?: UnlockedBy31;
	      action_type?: "Destroy";
	      destroy_target_filter?: TargetFilters4;
	    }
	  | {
	      unlocked_by?: UnlockedBy33;
	      action_type?: "Shake Camera";
	      camera_shake_amount: CameraShakeAmount;
	    }
	  | {
	      action_type: "Visual Effect";
	      visual_effect: VisualEffect1;
	    }
	  | {
	      show_on_tooltip?: ShowOnTooltip;
	      action_type?: "Lose Items";
	      chance?: ActionProbability4;
	      items_to_lose: ItemsToLose1;
	    }
	  | {
	      items_to_gain: ItemsToGain3;
	      play_celebration?: PlayPickupCelebration;
	      chance?: ActionProbability5;
	      per_target?: PerTarget;
	      unlocked_by?: UnlockedBy35;
	      action_type?: "Gain Items";
	    }
	  | {
	      action_type?: "Pickup";
	      pickup_target_filter?: PickupTargetFilter;
	      unlocked_by?: UnlockedBy37;
	    }
	  | {
	      target_filter?: TargetFilters5;
	      action_type?: "Buff";
	      buffs: BuffsToApply;
	      chance?: ActionProbability6;
	      unlocked_by?: UnlockedBy39;
	    }
	  | {
	      unlocked_by?: UnlockedBy41;
	      datafield_change_target: DatafieldOwner3;
	      action_type?: "Change Datafield";
	      datafield_change_type: ChangeType;
	      datafield_id: DataField2;
	      datafield_change_value: Value3;
	      datafield_target_filter?: DatafieldTargetFilter;
	    }
	  | {
	      summoned?: EntityIsSummoned1;
	      distance_range?: SpawnDistance1;
	      require_line_of_sight?: RequireLineOfSight1;
	      non_overlap: AttemptNonOverlap1;
	      tooltip_pullthrough?: TooltipPullthrough;
	      pickup_if_player_created?: AutoPickupIfPlayerCaused;
	      action_type?: "Create Entity";
	      spawn_item: EntityToCreate;
	      spawn_location?: NewEntityLocation1;
	    }
	  | {
	      unlocked_by?: UnlockedBy43;
	      action_type?: "Fire Projectile";
	      projectile: Projectile;
	    }
	  | {
	      action_type?: "Fishing";
	    }
	  | {
	      buffs_to_remove?: BuffsToRemove;
	      chance?: ActionProbability7;
	      unlocked_by?: UnlockedBy45;
	      negative?: RemoveNegativeBuffs1;
	      stacks?: Stacks78;
	      target_filter?: TargetFilters6;
	      action_type?: "Remove Buff";
	      buff_target: Target1;
	      positive?: RemovePositiveBuffs1;
	    }
	  | {
	      action_type?: "Change Juke Charges";
	      charges: ChargeIncrementAmount;
	      chance?: ActionProbability8;
	    }
	  | {
	      move_destination: LeapDestination;
	      leap_start_sounds?: LeapStartSounds;
	      leap_land_sounds?: LeapLandingSounds;
	      leap_followthrough_seconds?: FollowthroughSeconds;
	      leap_distance_randomness?: DistanceRandomness1;
	      gravity_modifier?: GravityModifier;
	      move_animations?: MovementAnimations1;
	      telegraph_pullthrough: ShowTelegraphDuringCast1;
	      leap_duration: LeapDuration;
	      leap_impact_action_groups?: ActionGroups5;
	      action_type?: "Leap";
	      traverses_water?: LeapTraversesWater;
	    }
	  | {
	      unlocked_by?: UnlockedBy47;
	      knock_direction_datafield?: DirectionDatafield;
	      knock_distance: DistanceGridSpaces;
	      chance?: ActionProbability9;
	      knocked_entity: EntityToKnockBack;
	      knock_direction_offset?: DirectionOffset1;
	      action_type?: "Knockback";
	      knock_direction_randomness?: DirectionRandomness2;
	      knock_sounds?: KnockSounds;
	      knock_speed?: KnockSpeedModifier;
	      knock_end_actions?: ActionGroups6;
	    }
	  | {
	      action_type?: "Create Pool";
	      chance?: ActionProbability10;
	      pool: AbilityPool;
	    }
	  | {
	      action_type: "Lose Wield Item";
	      chance?: ActionProbability11;
	    };
	export type ChangePerPoint31 = number;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip80 = boolean;
	export type EnglishText80 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText57 = string;
	export type Insight13 = string;
	export type Quantity79 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll52 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants44 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags44 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude49 = boolean;
	export type Quantity80 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll53 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants45 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags45 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude50 = boolean;
	/**
	 * If set, this followup action will only be performed on up to this number of targets.
	 */
	export type FollowupTargetLimit = number;
	/**
	 * If set, the followup action will only apply to targets that had this outcome.
	 */
	export type FollowupTargetConstraint = "Damaged" | "Critically Hit" | "Uncritically Hit";
	export type UnlockedBy24 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip81 = boolean;
	export type EnglishText81 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText58 = string;
	export type EntityToDamage = "Target Entity" | "Self" | "Summoner";
	/**
	 * The chance that this action will occur.
	 */
	export type Chance7 = number;
	/**
	 * This will steal health from the target and give it to the caster, proportional to the damage dealt.
	 */
	export type StealHealth = number;
	/**
	 * This sound will only play if damage is dealt.
	 */
	export type ImpactSound1 = string;
	export type DatafieldOwner2 = "Self" | "Target Entity";
	export type DataField1 = string;
	/**
	 * This sound will play if no targets were damaged.
	 */
	export type FailureSound1 = string;
	export type Quantity81 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll54 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants46 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags46 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude51 = boolean;
	export type Quantity82 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll55 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants47 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags47 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude52 = boolean;
	export type Quantity83 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll56 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants48 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags48 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude53 = boolean;
	export type Quantity84 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll57 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants49 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags49 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude54 = boolean;
	/**
	 * The chance that this action will occur.
	 */
	export type Chance8 = number;
	/**
	 * The healing amount will be automatically calculated based on the level of the user.
	 */
	export type Healing2 = number;
	export type UnlockedBy26 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip82 = boolean;
	export type EnglishText82 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText59 = string;
	export type EntityToHeal = "Target Entity" | "Self" | "Summoner";
	/**
	 * This sound will only play if healing occurred (the recipient was below maximum health).
	 */
	export type HealSound = string;
	/**
	 * This sound will play if no targets were healed.
	 */
	export type FailureSound2 = string;
	/**
	 * The radius of the terrain to clear.
	 */
	export type Radius = number;
	export type UnlockedBy28 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip83 = boolean;
	export type EnglishText83 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText60 = string;
	export type EntityBeingMoved = "Self" | "Target Entity" | "Summoner";
	/**
	 * If true, the mover will move through solid objects while being force-moved.
	 */
	export type IgnoreSolidsWhileMoving = boolean;
	/**
	 * In degrees. 0 is towards the destination, 180 is away from the destination.
	 */
	export type Direction1 = number;
	/**
	 * If true, you will move over water, even if you normally cannot.
	 */
	export type MoveOverWater = boolean;
	/**
	 * The movement direction will be randomly modified (up or down) by up to this amount.
	 */
	export type DirectionRandomness1 = number;
	export type ChanceOfPlaying = number;
	export type Sound2 = string;
	export type Min36 = number;
	export type Max36 = number;
	export type EntityDestination = "Ground Target" | "Target Entity" | "Self" | "Summoner";
	/**
	 * How much faster you will travel the distance, compared to your baseline speed. If zero, you will instantly teleport.
	 */
	export type Speed28 = number;
	export type MovementStyle = "Ease In" | "Linear" | "Instant";
	/**
	 * How much to scale the sprite.
	 */
	export type SpriteScale = number;
	/**
	 * If set, this sprite will be placed at the end of the tether. Useful for making a grappling hook type effect.
	 */
	export type EndSprite = string;
	/**
	 * The sprite to use for the tether.
	 */
	export type Sprite5 = string;
	/**
	 * How much to scale the end sprite.
	 */
	export type EndSpriteScale = number;
	/**
	 * An effect that will occur before the movement of the ability. The mover will still be under 'forced movement' for this duration and won't be able to move themselves or take most actions
	 */
	export type PreMoveEffect = {
	  effect_type: "Grapple";
	  grapple_speed: GrappleSpeedPxSec;
	  grapple_sound?: GrappleSound;
	};
	/**
	 * How fast the grapple will fire outwards.
	 */
	export type GrappleSpeedPxSec = number;
	/**
	 * This sound will play when the grapple hooks onto something.
	 */
	export type GrappleSound = string;
	export type ModifierType = "Add" | "Multiply";
	export type Stat1 = string;
	export type Looping1 = boolean;
	export type AnimationName = string;
	export type ModifierType1 = "Add" | "Multiply";
	export type Stat2 = string;
	/**
	 * If checked, the telegraph for this movement outcome will be drawn during the initial ability cast.
	 */
	export type ShowTelegraphDuringCast = boolean;
	/**
	 * The chance that this action will occur.
	 */
	export type Chance9 = number;
	/**
	 * If moving to an entity, this will move the caster to the edge of the entity, rather than the center.
	 */
	export type MoveToEntityEdge = boolean;
	export type Sound3 = string;
	export type SoundLocation1 = "Self" | "Ground Target" | "Target Entity" | "Summoner" | "Global";
	export type SoundProbability = number;
	/**
	 * If true, then this will be considered a 'voice' sound. Each entity can only play one 'Voice' sound at a time.
	 */
	export type PlayAsVoice1 = boolean;
	export type UnlockedBy30 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip84 = boolean;
	export type EnglishText84 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText61 = string;
	/**
	 * If true, and the destroyed entity has loot tables, it will drop loot as if it were destroyed by the player dealing damage to it.
	 */
	export type DropLoot1 = boolean;
	/**
	 * If false, the destroyed entity will just stop existing. If true, the entity will trigger any Death events and play its death animations.
	 */
	export type CountsAsDeath1 = boolean;
	export type EntityToDestroy = "Target Entity" | "Self" | "Summoner";
	/**
	 * The chance that this action will occur.
	 */
	export type Chance10 = number;
	export type UnlockedBy32 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip85 = boolean;
	export type EnglishText85 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText62 = string;
	export type Quantity85 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll58 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants50 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags50 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude55 = boolean;
	export type Quantity86 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll59 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants51 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags51 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude56 = boolean;
	export type UnlockedBy34 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip86 = boolean;
	export type EnglishText86 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText63 = string;
	export type CameraShakeAmount = number;
	export type VisualEffect1 =
	  | {
	      effect_type: "Electric Arc";
	      electric_arc_source: Source3;
	      electric_arc_destination: Destination1;
	      electric_arc_color: Color4;
	      electric_arc_source_distance?: DistanceFromSourcePixels1;
	      electric_arc_destination_distance?: DistanceFromDestinationPixels1;
	    }
	  | {
	      effect_type: "Ground Decal";
	      decal_max_alpha?: MaxAlpha1;
	      decal_duration?: DecalDurationSeconds1;
	      decal_sprite: DecalSprite1;
	      decal_scale?: DecalScale1;
	      decal_location: Location3;
	    }
	  | {
	      effect_type: "Explosion";
	      explosion_y_offset?: YOffset5;
	      explosion_z_offset?: ZOffset4;
	      explosion_color: BaseColor1;
	      explosion_sound?: Sound4;
	      explosion_slomo_burst: SlowMotionPulse1;
	      explosion_highlight_color?: HighlightColor1;
	      explosion_smoke?: ShowSmoke1;
	      explosion_scale?: ExplosionScale1;
	      explosion_random_distance?: RandomDistanceGridSpaces1;
	      explosion_random_delay?: RandomDelaySeconds1;
	      explosion_debris?: DebrisParticles2;
	      explosion_location: Location4;
	    }
	  | {
	      effect_type: "Particle Burst";
	      burst_particle: Particle;
	      bursts: Bursts1;
	    }
	  | {
	      effect_type: "Particle System Burst";
	      particle_system_y_offset?: YOffset6;
	      particle_system_z_offset?: ZOffset6;
	      particle_system_emitter_scale?: EmitterScale4;
	      particle_system_location: Location5;
	      particle_system: ParticleSystem4;
	    }
	  | {
	      effect_type: "Lightning";
	      lightning_num_bolts?: NumberOfBolts1;
	      lightning_spread?: SpreadDegrees1;
	      lightning_z_offset?: ZOffset7;
	      lightning_source: Source5;
	      lightning_distance: DistanceGrid1;
	      lightning_color: Color5;
	      lightning_aim_offset?: AimOffset1;
	    }
	  | {
	      effect_type: "Slomo Burst";
	      slomo_duration: Seconds3;
	      slomo_amount: GameSpeed1;
	    };
	export type Source3 = "Self" | "Ground Target" | "Target Entity" | "Summoner";
	export type Destination1 = "Self" | "Ground Target" | "Target Entity" | "Summoner";
	export type Red23 = number;
	export type Blue23 = number;
	export type Green23 = number;
	export type DistanceFromSourcePixels1 = number;
	export type DistanceFromDestinationPixels1 = number;
	export type MaxAlpha1 = number;
	export type Min37 = number;
	export type Max37 = number;
	/**
	 * This sprite will be drawn subtractively.
	 */
	export type DecalSprite1 = string;
	export type Min38 = number;
	export type Max38 = number;
	export type Location3 = "Self" | "Ground Target" | "Target Entity" | "Summoner";
	/**
	 * Can be useful for depth-sorting. For example, a Y offset of 1 will spawn the explosion in front of whatever is explosing.
	 */
	export type YOffset5 = number;
	/**
	 * If spawning on the ground, this will be height above ground. If spawning on targets, it will spawn at their height midpoints, plus this offset.
	 */
	export type ZOffset4 = number;
	export type Red24 = number;
	export type Blue24 = number;
	export type Green24 = number;
	/**
	 * There is a default explosion sound, but you can override it here.
	 */
	export type Sound4 = string;
	/**
	 * If true, there will be a brief slow-down of the game when the explosion occurs to make it feel more impactful. Use sparingly.
	 */
	export type SlowMotionPulse1 = boolean;
	export type Red25 = number;
	export type Blue25 = number;
	export type Green25 = number;
	/**
	 * If true, smoke will be spawned at the explosion location.
	 */
	export type ShowSmoke1 = boolean;
	export type Min39 = number;
	export type Max39 = number;
	export type Min40 = number;
	export type Max40 = number;
	export type Min41 = number;
	export type Max41 = number;
	/**
	 * The sprite to use for the debris.
	 */
	export type Sprite6 = string;
	export type ParticleScale1 = number;
	export type NumberOfParticles2 = number;
	export type Location4 = "Self" | "Ground Target" | "Target Entity" | "Summoner";
	/**
	 * Billboard bursts are good for shooting things up and out. Ground bursts are good for making smoke rings and such.
	 */
	export type Perspective1 = "Billboard" | "Isometric";
	/**
	 * If checked, the particles will spawn at z=0 instead of on a target or caster.
	 */
	export type SpawnOnGround1 = boolean;
	export type Min42 = number;
	export type Max42 = number;
	/**
	 * If set, the burst will use the direction the ability cast is aiming as its baseline direction.
	 */
	export type UseAimDirection1 = boolean;
	export type Min43 = number;
	export type Max43 = number;
	/**
	 * If set, the radius of the spawning will scale relative to the caster's 'scale' modifier. Useful for keeping particles lined up with telegraphs.
	 */
	export type ScaledSpawnRadius1 = boolean;
	export type Source4 = "Self" | "Ground Target" | "Target Entity" | "Summoner";
	/**
	 * If set, the particles will always move away from the center of the source.
	 */
	export type BlastOutward1 = boolean;
	export type Min44 = number;
	export type Max44 = number;
	/**
	 * If set, the spawn radius will be treated as grid spaces instead of pixels.
	 */
	export type SpawnRadiusAsGrid1 = boolean;
	/**
	 * If spawning on the ground, this will be height above ground. If spawning on targets, it will spawn at their height midpoints, plus this offset.
	 */
	export type ZOffset5 = number;
	/**
	 * Can be useful for depth-sorting. For example, a Y offset of 1 will spawn the explosion in front of whatever is explosing.
	 */
	export type YOffset6 = number;
	/**
	 * If spawning on the ground, this will be height above ground. If spawning on targets, it will spawn at their height midpoints, plus this offset.
	 */
	export type ZOffset6 = number;
	export type EmitterScale4 = number;
	export type Location5 = "Self" | "Ground Target" | "Target Entity" | "Summoner";
	export type ParticleSystem4 = string;
	export type Min45 = number;
	export type Max45 = number;
	/**
	 * The total angle the bolts will cover. 360 means a full circle.
	 */
	export type SpreadDegrees1 = number;
	/**
	 * If spawning on the ground, this will be height above ground. If spawning on targets, it will spawn at their height midpoints, plus this offset.
	 */
	export type ZOffset7 = number;
	export type Source5 = "Self" | "Ground Target" | "Target Entity" | "Summoner";
	export type Min46 = number;
	export type Max46 = number;
	export type Red26 = number;
	export type Blue26 = number;
	export type Green26 = number;
	export type AimOffset1 = number;
	/**
	 * How long the slow-mo effect will last.
	 */
	export type Seconds3 = number;
	export type GameSpeed1 = number;
	export type ShowOnTooltip = boolean;
	/**
	 * The chance that this action will occur.
	 */
	export type Chance11 = number;
	export type Quantity87 = number;
	export type Item14 = string;
	export type Min47 = number;
	export type Max47 = number;
	export type Item15 = string;
	/**
	 * By default, the pickup celebration will play if the item requires it. You can disable that behavior here.
	 */
	export type PlayPickupCelebration = boolean;
	/**
	 * The chance that this action will occur.
	 */
	export type Chance12 = number;
	/**
	 * If true, the items will be gained for each target captured by this action group.
	 */
	export type PerTarget = boolean;
	export type UnlockedBy36 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip87 = boolean;
	export type EnglishText87 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText64 = string;
	export type Quantity89 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll60 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants52 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags52 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude57 = boolean;
	export type Quantity90 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll61 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants53 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags53 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude58 = boolean;
	export type UnlockedBy38 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip88 = boolean;
	export type EnglishText88 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText65 = string;
	export type Quantity91 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll62 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants54 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags54 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude59 = boolean;
	export type Quantity92 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll63 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants55 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags55 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude60 = boolean;
	/**
	 * If set, and if the buff deals damage, this will modify its damage.
	 */
	export type DamageModifier1 = number;
	/**
	 * If set, and if the buff can heal, this will set how much health it restores (based on the level of the user).
	 */
	export type HealingPercentage2 = number;
	/**
	 * How many stacks of the buff to apply. Stacks will build up within instances of buffs, and then will overflow into new instances if the maximum stacks are reached for the current instance.
	 */
	export type Stacks61 = number;
	/**
	 * The number of stacks applied can be multiplied by the number of targets captured.
	 */
	export type MultiplyStacksByTargets = boolean;
	export type BuffTarget1 = "Self" | "Summoner" | "Target Entity";
	/**
	 * The chance that this action will occur.
	 */
	export type Chance13 = number;
	export type UnlockedBy40 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip89 = boolean;
	export type EnglishText89 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText66 = string;
	export type UnlockedBy42 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip90 = boolean;
	export type EnglishText90 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText67 = string;
	export type DatafieldOwner3 = "Self" | "Target Entity" | "Summoner";
	export type ChangeType = "Set" | "Increment";
	export type DataField2 = string;
	export type Value3 = number;
	export type Quantity93 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll64 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants56 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags56 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude61 = boolean;
	export type Quantity94 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll65 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants57 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags57 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude62 = boolean;
	/**
	 * 'Summoned' entities exist on behalf of their creators, and their actions will cast blame to the creator. Defaults to false.
	 */
	export type EntityIsSummoned1 = boolean;
	export type Min48 = number;
	export type Max48 = number;
	/**
	 * If false, the new entity can spawn just about anywhere, including THROUGH WALLS!
	 */
	export type RequireLineOfSight1 = boolean;
	/**
	 * Whether spawning will attempt to find a clear space.
	 */
	export type AttemptNonOverlap1 = boolean;
	/**
	 * Defaults to True. If True, the tooltip for the spawned entity will be shown on the tooltip of this ability.
	 */
	export type TooltipPullthrough = boolean;
	/**
	 * If true, the player will automatically pick up the item if they caused the entity to be created.
	 */
	export type AutoPickupIfPlayerCaused = boolean;
	export type EntityToCreate = string;
	/**
	 * Where the new entity will be created.
	 */
	export type NewEntityLocation1 = "Ground Target" | "Self" | "Target Entity" | "Summoner";
	export type UnlockedBy44 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip91 = boolean;
	export type EnglishText91 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText68 = string;
	export type Projectile =
	  | {
	      direction_offset?: AimOffset2;
	      time_in_flight: FlightTimeSeconds;
	      style?: "Lob";
	      multiples?: LobMultipleProjectiles;
	      use_fallback?: UseFallbackTarget;
	      ground_impact_action_groups?: ActionGroups2;
	    }
	  | {
	      bullet_multiples?: ProjectileBatches;
	      bullet_impact_action_groups?: ActionGroups3;
	      width: HitboxWidthPixels;
	      style?: "Bullet";
	      z_behavior?: ZBehavior;
	      show_aim_telegraphs?: ShowAimTelegraphs;
	      lifetime_range: LifetimeSeconds;
	      speed_range: SpeedPixelsSec;
	      acceleration?: AccelerationPixelsSec2;
	      expiration_action_groups?: ActionGroups4;
	    };
	/**
	 * This will aim the lobbed projectile the same distance as the intended target, but will shift the aim direction by this amount.
	 */
	export type AimOffset2 = number;
	export type Min49 = number;
	export type Max49 = number;
	export type Condition4 =
	  | {
	      abilities?: Abilities5;
	      casting_state: Casting3;
	      condition_type?: "Ability";
	    }
	  | {
	      datafield_evaluation: Evaluation6;
	      condition_type?: "Datafield";
	    }
	  | {
	      daytime: DuringDaytime3;
	      condition_type?: "Daylight";
	    }
	  | {
	      combat: InCombat3;
	      condition_type?: "Combat";
	    }
	  | {
	      timestamp: Timestamp5;
	      insight_modifier?: InsightModifier3;
	      condition_type?: "Timestamp";
	      evaluation: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      minutes_passed: MinutesSinceTimestamp3;
	    }
	  | {
	      condition_type?: "Moon";
	      moon: ActiveMoon3;
	    }
	  | {
	      quest_status: QuestStatus5;
	      quest: QuestToCheck5;
	      condition_type?: "Quest";
	    }
	  | {
	      condition_type?: "Artisan Following";
	      following: Following11;
	      artisan: Buddy7;
	    }
	  | {
	      unlock_text?: InsightTooltip3;
	      prerequisite: Insight15;
	      condition_type?: "Insight";
	    }
	  | {
	      proximity_quantity: NumberOfTargets6;
	      proximity_range: DistanceRequiredGridSpaces3;
	      proximity_targets: Targets5;
	      proximity_ignores_stealth: IgnoreStealthedTargets3;
	      condition_type?: "Proximity";
	    }
	  | {
	      condition_type?: "Health";
	      hp_evaluation: HealthEvaluation3;
	    }
	  | {
	      require_all: RequireAll68;
	      condition_type?: "Item Equipped";
	      items: Items75;
	    }
	  | {
	      condition_type?: "Item Wielding";
	      items: Items76;
	    }
	  | {
	      num_pieces: NumberOfPiecesEquipped3;
	      condition_type?: "Wearing Equipment Set";
	      equipment_set: EquipmentSet6;
	    }
	  | {
	      condition_type?: "Buffs";
	      buffs: Buffs127;
	      buff_exclusive?: Exclusive4;
	      buff_require_all: RequireAll69;
	      buff_check_self: CheckSelf3;
	      buff_own_only: OwnBuffsOnly3;
	      buff_num_targets?: NumberOfTargets7;
	      buff_target_filter?: BuffTargetFilter3;
	      buff_proximity?: BuffTargetRange3;
	      buff_stack_evaluation?: Stacks68;
	      buff_target: TargetEntity16;
	    }
	  | {
	      condition_type?: "Boss Defeated";
	      boss: Boss6;
	    }
	  | {
	      summoned_filter?: SummonedEntitiesFilter3;
	      comparison: NumberSummoned3;
	      condition_type?: "Summoned Entities";
	    }
	  | {
	      condition_type?: "Area";
	      areas: Areas6;
	    }
	  | {
	      weather_ids: Weather3;
	      condition_type?: "Weather";
	    }
	  | {
	      phase: Phase3;
	      condition_type?: "Boss Phase";
	    };
	/**
	 * If set, the ability's casting state must match this checkbox.
	 */
	export type Casting3 = boolean;
	export type DuringDaytime3 = boolean;
	export type InCombat3 = boolean;
	export type Timestamp5 = string;
	export type Insight14 = string;
	/**
	 * How much the 'Minutes Since Timestamp' should be adjusted (up or down) for each point invested in the Insight.
	 */
	export type ChangePerPoint32 = number;
	/**
	 * If greater than 0, then this many minutes will have passed since the timestamp was set. If less than 0, the timestamp will be this many minutes from now.
	 */
	export type MinutesSinceTimestamp3 = number;
	export type ActiveMoon3 = string;
	export type QuestStatus5 = "Complete" | "Started" | "Not Started";
	/**
	 * The quest whose status we are querying.
	 */
	export type QuestToCheck5 = string;
	export type Following11 = boolean;
	export type Buddy7 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip92 = boolean;
	export type EnglishText92 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText69 = string;
	export type Insight15 = string;
	export type Quantity95 = number;
	export type Evaluation7 = "==" | "!=" | "<" | "<=" | ">" | ">=";
	export type Min50 = number;
	export type Max50 = number;
	export type Quantity96 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll66 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants58 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags58 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude63 = boolean;
	export type Quantity97 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll67 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants59 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags59 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude64 = boolean;
	/**
	 * If checked, the proximity check will fail on targets that are stealthed.
	 */
	export type IgnoreStealthedTargets3 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the items listed are equipped at the same time.
	 */
	export type RequireAll68 = boolean;
	/**
	 * If the player is wearing at least this many pieces, the condition will be met.
	 */
	export type NumberOfPiecesEquipped3 = number;
	export type EquipmentSet6 = string;
	/**
	 * If checked, this condition will only be considered met if the defined conditions are NOT met.
	 */
	export type Exclusive4 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on yourself at the same time.
	 */
	export type RequireAll69 = boolean;
	/**
	 * Obsolete--delete.
	 */
	export type CheckSelf3 = boolean;
	/**
	 * If checked, only buffs created by you will be checked. Otherwise, all buffs will be checked.
	 */
	export type OwnBuffsOnly3 = boolean;
	export type Quantity98 = number;
	export type Quantity99 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll70 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants60 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags60 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude65 = boolean;
	export type Quantity100 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll71 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants61 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags61 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude66 = boolean;
	export type Min51 = number;
	export type Max51 = number;
	export type Quantity101 = number;
	/**
	 * Which entity's buffs to query.
	 */
	export type TargetEntity16 = "Self" | "Other" | "All Entities";
	export type Boss6 = string;
	export type Quantity102 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll72 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants62 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags62 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude67 = boolean;
	export type Quantity103 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll73 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants63 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags63 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude68 = boolean;
	export type Quantity104 = number;
	export type Phase3 = string;
	/**
	 * This will aim the lobbed projectile the same distance as the intended target, but will shift the aim direction by this amount.
	 */
	export type BatchAimOffset = number;
	export type Min52 = number;
	export type Max52 = number;
	/**
	 * The probability of this batch of projectiles firing.
	 */
	export type BatchChance = number;
	/**
	 * If true, then every condition must be met. If false, then only one of the conditions must be met. Defaults to true.
	 */
	export type RequireAllConditions3 = boolean;
	export type Min53 = number;
	export type Max53 = number;
	export type Min54 = number;
	export type Max54 = number;
	/**
	 * If true, and the lobbed projectile has no valid destination, it will search for valid locations to hit.
	 */
	export type UseFallbackTarget = boolean;
	export type Min55 = number;
	export type Max55 = number;
	export type Min56 = number;
	export type Max56 = number;
	export type Condition5 =
	  | {
	      abilities?: Abilities6;
	      casting_state: Casting4;
	      condition_type?: "Ability";
	    }
	  | {
	      datafield_evaluation: Evaluation8;
	      condition_type?: "Datafield";
	    }
	  | {
	      daytime: DuringDaytime4;
	      condition_type?: "Daylight";
	    }
	  | {
	      combat: InCombat4;
	      condition_type?: "Combat";
	    }
	  | {
	      timestamp: Timestamp6;
	      insight_modifier?: InsightModifier4;
	      condition_type?: "Timestamp";
	      evaluation: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      minutes_passed: MinutesSinceTimestamp4;
	    }
	  | {
	      condition_type?: "Moon";
	      moon: ActiveMoon4;
	    }
	  | {
	      quest_status: QuestStatus6;
	      quest: QuestToCheck6;
	      condition_type?: "Quest";
	    }
	  | {
	      condition_type?: "Artisan Following";
	      following: Following12;
	      artisan: Buddy8;
	    }
	  | {
	      unlock_text?: InsightTooltip4;
	      prerequisite: Insight17;
	      condition_type?: "Insight";
	    }
	  | {
	      proximity_quantity: NumberOfTargets8;
	      proximity_range: DistanceRequiredGridSpaces4;
	      proximity_targets: Targets6;
	      proximity_ignores_stealth: IgnoreStealthedTargets4;
	      condition_type?: "Proximity";
	    }
	  | {
	      condition_type?: "Health";
	      hp_evaluation: HealthEvaluation4;
	    }
	  | {
	      require_all: RequireAll76;
	      condition_type?: "Item Equipped";
	      items: Items83;
	    }
	  | {
	      condition_type?: "Item Wielding";
	      items: Items84;
	    }
	  | {
	      num_pieces: NumberOfPiecesEquipped4;
	      condition_type?: "Wearing Equipment Set";
	      equipment_set: EquipmentSet7;
	    }
	  | {
	      condition_type?: "Buffs";
	      buffs: Buffs140;
	      buff_exclusive?: Exclusive5;
	      buff_require_all: RequireAll77;
	      buff_check_self: CheckSelf4;
	      buff_own_only: OwnBuffsOnly4;
	      buff_num_targets?: NumberOfTargets9;
	      buff_target_filter?: BuffTargetFilter4;
	      buff_proximity?: BuffTargetRange4;
	      buff_stack_evaluation?: Stacks75;
	      buff_target: TargetEntity17;
	    }
	  | {
	      condition_type?: "Boss Defeated";
	      boss: Boss7;
	    }
	  | {
	      summoned_filter?: SummonedEntitiesFilter4;
	      comparison: NumberSummoned4;
	      condition_type?: "Summoned Entities";
	    }
	  | {
	      condition_type?: "Area";
	      areas: Areas7;
	    }
	  | {
	      weather_ids: Weather4;
	      condition_type?: "Weather";
	    }
	  | {
	      phase: Phase4;
	      condition_type?: "Boss Phase";
	    };
	/**
	 * If set, the ability's casting state must match this checkbox.
	 */
	export type Casting4 = boolean;
	export type DuringDaytime4 = boolean;
	export type InCombat4 = boolean;
	export type Timestamp6 = string;
	export type Insight16 = string;
	/**
	 * How much the 'Minutes Since Timestamp' should be adjusted (up or down) for each point invested in the Insight.
	 */
	export type ChangePerPoint33 = number;
	/**
	 * If greater than 0, then this many minutes will have passed since the timestamp was set. If less than 0, the timestamp will be this many minutes from now.
	 */
	export type MinutesSinceTimestamp4 = number;
	export type ActiveMoon4 = string;
	export type QuestStatus6 = "Complete" | "Started" | "Not Started";
	/**
	 * The quest whose status we are querying.
	 */
	export type QuestToCheck6 = string;
	export type Following12 = boolean;
	export type Buddy8 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip93 = boolean;
	export type EnglishText93 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText70 = string;
	export type Insight17 = string;
	export type Quantity107 = number;
	export type Evaluation9 = "==" | "!=" | "<" | "<=" | ">" | ">=";
	export type Min57 = number;
	export type Max57 = number;
	export type Quantity108 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll74 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants64 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags64 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude69 = boolean;
	export type Quantity109 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll75 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants65 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags65 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude70 = boolean;
	/**
	 * If checked, the proximity check will fail on targets that are stealthed.
	 */
	export type IgnoreStealthedTargets4 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the items listed are equipped at the same time.
	 */
	export type RequireAll76 = boolean;
	/**
	 * If the player is wearing at least this many pieces, the condition will be met.
	 */
	export type NumberOfPiecesEquipped4 = number;
	export type EquipmentSet7 = string;
	/**
	 * If checked, this condition will only be considered met if the defined conditions are NOT met.
	 */
	export type Exclusive5 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on yourself at the same time.
	 */
	export type RequireAll77 = boolean;
	/**
	 * Obsolete--delete.
	 */
	export type CheckSelf4 = boolean;
	/**
	 * If checked, only buffs created by you will be checked. Otherwise, all buffs will be checked.
	 */
	export type OwnBuffsOnly4 = boolean;
	export type Quantity110 = number;
	export type Quantity111 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll78 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants66 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags66 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude71 = boolean;
	export type Quantity112 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll79 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants67 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags67 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude72 = boolean;
	export type Min58 = number;
	export type Max58 = number;
	export type Quantity113 = number;
	/**
	 * Which entity's buffs to query.
	 */
	export type TargetEntity17 = "Self" | "Other" | "All Entities";
	export type Boss7 = string;
	export type Quantity114 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll80 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants68 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags68 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude73 = boolean;
	export type Quantity115 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll81 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants69 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags69 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude74 = boolean;
	export type Quantity116 = number;
	export type Phase4 = string;
	/**
	 * The probability of this batch of projectiles firing.
	 */
	export type BatchChance1 = number;
	/**
	 * If true, then every condition must be met. If false, then only one of the conditions must be met. Defaults to true.
	 */
	export type RequireAllConditions4 = boolean;
	export type HitboxWidthPixels = number;
	/**
	 * How high the bullet will end up being off the ground (in pixels).
	 */
	export type ZTarget = number;
	/**
	 * What proportion of the projectile's life it takes to reach the Z target..
	 */
	export type ZTime = number;
	export type ZStyle = "Linear" | "Cubic";
	/**
	 * If true, the game will draw a line from the bullet's origin to its destination.
	 */
	export type ShowAimTelegraphs = boolean;
	export type Min59 = number;
	export type Max59 = number;
	export type Min60 = number;
	export type Max60 = number;
	export type AccelerationPixelsSec2 = number;
	export type Buff3 = string;
	/**
	 * The chance that this action will occur.
	 */
	export type Chance14 = number;
	export type UnlockedBy46 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip94 = boolean;
	export type EnglishText94 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText71 = string;
	export type RemoveNegativeBuffs1 = boolean;
	/**
	 * How many stacks of the buff to remove. If unset, all stacks will be removed.
	 */
	export type Stacks78 = number;
	export type Quantity117 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll82 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants70 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags70 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude75 = boolean;
	export type Quantity118 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll83 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants71 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags71 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude76 = boolean;
	export type Target1 = "Self" | "Summoner" | "Target Entity";
	export type RemovePositiveBuffs1 = boolean;
	/**
	 * How many charges of Juke to change.
	 */
	export type ChargeIncrementAmount = number;
	/**
	 * The chance that this action will occur.
	 */
	export type Chance15 = number;
	export type LeapDestination = "Ground Target" | "Target Entity" | "Self" | "Summoner";
	export type ChanceOfPlaying1 = number;
	export type Sound5 = string;
	export type ChanceOfPlaying2 = number;
	export type Sound6 = string;
	/**
	 * You can give some time after the leap for an animation to play. The leaping entity will be immobile while this animation plays.
	 */
	export type FollowthroughSeconds = number;
	/**
	 * The leap can target a random location within this many grid spaces.
	 */
	export type DistanceRandomness1 = number;
	/**
	 * If your leap is going too high, turn gravity down.
	 */
	export type GravityModifier = number;
	export type Looping2 = boolean;
	export type AnimationName1 = string;
	/**
	 * If checked, the telegraph for this movement outcome will be drawn during the initial ability cast, not just while the entity is midair.
	 */
	export type ShowTelegraphDuringCast1 = boolean;
	/**
	 * How many seconds the leaper will be airborne.
	 */
	export type LeapDuration = number;
	/**
	 * If true, the leaper will not be stopped by water.
	 */
	export type LeapTraversesWater = boolean;
	export type UnlockedBy48 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip95 = boolean;
	export type EnglishText95 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText72 = string;
	/**
	 * If true, the knock direction will be settable in the editor the 'Knockback Direction' datafield. This means the knockback won't be away from the caster by default.
	 */
	export type DirectionDatafield = boolean;
	/**
	 * How far the entity will be knocked back.
	 */
	export type DistanceGridSpaces = number;
	/**
	 * The chance that this action will occur.
	 */
	export type Chance16 = number;
	export type EntityToKnockBack = "Target Entity" | "Self" | "Summoner";
	/**
	 * In degrees. 0 is away from the caster, 180 is toward the caster.
	 */
	export type DirectionOffset1 = number;
	/**
	 * The knock direction will be randomly modified (up or down) by up to this amount.
	 */
	export type DirectionRandomness2 = number;
	export type ChanceOfPlaying3 = number;
	export type Sound7 = string;
	/**
	 * How much faster or slower the knockback will be, compared to the baseline speed.
	 */
	export type KnockSpeedModifier = number;
	/**
	 * The chance that this action will occur.
	 */
	export type Chance17 = number;
	export type Start = number;
	export type End = number;
	export type StartTime = number;
	export type EndTime = number;
	export type Location6 = "Target Entity" | "Self" | "Summoner" | "Ground Target";
	export type Red27 = number;
	export type Blue27 = number;
	export type Green27 = number;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip96 = boolean;
	export type EnglishText96 = string;
	export type TooltipIcon = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip97 = boolean;
	export type EnglishText97 = string;
	/**
	 * The sound that will play when the pool is spawned
	 */
	export type SpawnSound = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler83 = string;
	/**
	 * The gap in time between emitting particles. If set to 0, it will emit particles every frame (but at a performance cost.
	 */
	export type EmitIntervalSeconds = number;
	export type Min61 = number;
	export type Max61 = number;
	/**
	 * If set, the radius of the spawning will scale relative to the pool's 'scale' modifier. Useful for keeping particles lined up with telegraphs.
	 */
	export type ScaledSpawnRadius2 = boolean;
	/**
	 * If set, the particles will use the world element as an anchor point, so they will no longer be 'left behind' if the world element moves.
	 */
	export type Local = boolean;
	/**
	 * If set, the particles will always move away from the center of the emitter.
	 */
	export type BlastOutward2 = boolean;
	export type Min62 = number;
	export type Max62 = number;
	export type Min63 = number;
	export type Max63 = number;
	/**
	 * If set, the spawn radius will be treated as grid spaces instead of pixels.
	 */
	export type SpawnRadiusAsGrid2 = boolean;
	/**
	 * If spawning on the ground, this will be height above ground. If spawning on targets, it will spawn at their height midpoints, plus this offset.
	 */
	export type ZOffset8 = number;
	/**
	 * If set, the telegraph for this pool will show while the ability that spawns the pool is being cast.
	 */
	export type ShowTelegraphDuringCast2 = boolean;
	export type Seconds4 = number;
	/**
	 * The chance that this action will occur.
	 */
	export type Chance18 = number;
	export type UnlockedBy50 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip98 = boolean;
	export type EnglishText98 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText73 = string;
	export type Shape1 =
	  | {
	      mirror?: Mirror;
	      rotational_mirror?: RotationalMirror;
	      shape?: "circle";
	      color?: EditorColor;
	      scale?: ScaleModifier6;
	      unlocked_by?: UnlockedBy51;
	      radius: Radius1;
	      arc?: Arc;
	      name?: NameInternal3;
	      offset?: Offset1;
	    }
	  | {
	      mirror?: Mirror1;
	      rotational_mirror?: RotationalMirror1;
	      shape?: "triangles";
	      color?: EditorColor1;
	      points: Points;
	      scale?: ScaleModifier7;
	      unlocked_by?: UnlockedBy53;
	      name?: NameInternal4;
	      offset?: Offset2;
	    };
	export type X = boolean;
	export type Y = boolean;
	/**
	 * How many times to mirror this shape or shape collection.
	 */
	export type Count = number;
	export type Red28 = number;
	export type Blue28 = number;
	export type Green28 = number;
	export type ScaleModifier6 = number;
	export type UnlockedBy52 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip99 = boolean;
	export type EnglishText99 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText74 = string;
	export type Inner = number;
	export type Outer = number;
	export type SpreadDegrees2 = number;
	export type DirectionDegrees = number;
	export type NameInternal3 = string;
	export type X1 = number;
	export type Y1 = number;
	export type X2 = boolean;
	export type Y2 = boolean;
	/**
	 * How many times to mirror this shape or shape collection.
	 */
	export type Count1 = number;
	export type Red29 = number;
	export type Blue29 = number;
	export type Green29 = number;
	export type X3 = number;
	export type Y3 = number;
	export type ScaleModifier7 = number;
	export type UnlockedBy54 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip100 = boolean;
	export type EnglishText100 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText75 = string;
	export type NameInternal4 = string;
	export type X4 = number;
	export type Y4 = number;
	export type X5 = boolean;
	export type Y5 = boolean;
	/**
	 * How many times to mirror this shape or shape collection.
	 */
	export type Count2 = number;
	export type ScaleModifier8 = number;
	export type UnlockedBy56 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip101 = boolean;
	export type EnglishText101 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText76 = string;
	export type NameInternal5 = string;
	export type X6 = number;
	export type Y6 = number;
	export type Start1 = number;
	export type End1 = number;
	export type Start2 = number;
	export type End2 = number;
	export type Style12 = "Ease Out Elastic" | "Ease Out Back" | "Ease Out Cubic" | "Linear";
	/**
	 * This will be the scale before the animation begins. The scale will always end at 1, so the telegraph matches reality when the animation is finished.
	 */
	export type ScaleStart = number;
	export type Start3 = number;
	export type End3 = number;
	/**
	 * If true, the caster will be included as a target if the caster is inside the telegraph.
	 */
	export type IncludeCasterAsViableTarget = boolean;
	export type RotateWithAimDirection = boolean;
	export type Quantity119 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll84 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants72 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags72 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude77 = boolean;
	export type Quantity120 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll85 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants73 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags73 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude78 = boolean;
	export type Min64 = number;
	export type Max64 = number;
	export type NameInternal6 = string;
	export type Min65 = number;
	export type Max65 = number;
	/**
	 * If the game has run out of sound channels, lower priority sounds will be stopped to play higher priority sounds.
	 */
	export type Priority = number;
	/**
	 * Whether the sound should play as a loop.
	 */
	export type Looping3 = boolean;
	export type NameFromGMSProject = string;
	export type EarpartyGroup = string;
	/**
	 * The baseline volume of the sound.
	 */
	export type Gain = number;
	/**
	 * To prevent auditory blowout/spam, sound effects can have a cooldown between plays.
	 */
	export type CooldownSeconds = number;
	/**
	 * The sound's pitch will randomly fluctuate each time it is played by +/- this percentage.
	 */
	export type Variability = number;
	/**
	 * Each time the Earparty sound is played, EarParty will choose a new variation of the sound this many times before repeating the same variation.
	 */
	export type NonRepeatingInterval = number;
	/**
	 * A random roll to cause the sound effect to sometimes not play when the code calls for it.
	 */
	export type PlayChance = number;
	/**
	 * If set, this sound will automatically increment or decrement pitch each time it is played within a certain time frame. If not played for a while, its pitch will reset. Good for making sparkly collection sounds.
	 */
	export type AutoPitch =
	  | {
	      pitchup_per_event?: number;
	      pitchup_max: AutoPitchMaximum;
	    }
	  | {
	      pitchup_min: AutoPitchMinimum;
	      pitchup_per_event?: number;
	    }
	  | {
	      pitchup_per_event?: 0;
	    };
	/**
	 * During auto-pitching, Earparty won't allow the pitch to go above this number.
	 */
	export type AutoPitchMaximum = number;
	/**
	 * During auto-pitching, Earparty won't allow the pitch to go below this number.
	 */
	export type AutoPitchMinimum = number;
	export type Order1 = number;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip102 = boolean;
	export type EnglishText102 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText77 = string;
	/**
	 * If set, this icon will display next to the storyline in the sidebar
	 */
	export type Icon4 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip103 = boolean;
	export type EnglishText103 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText78 = string;
	/**
	 * Whether the tile should be X-flipped randomly when placed.
	 */
	export type Flippable6 = boolean;
	/**
	 * The sprite to use when displaying the tile in the UI (e.g. Build Mode).
	 */
	export type Icon5 = string;
	export type Red30 = number;
	export type Blue30 = number;
	export type Green30 = number;
	/**
	 * The sound to play when the player walks on this tile.
	 */
	export type FootstepSound2 = string;
	/**
	 * The sprite to draw below the main sprite. Subimages must correspond with the Sprite.
	 */
	export type UnderSprite2 = string;
	/**
	 * The sound to play when this tile is placed in the editor or in Build Mode.
	 */
	export type PlacementSound7 = string;
	/**
	 * The probability of a given tile having Dapples on it.
	 */
	export type SpawnChance2 = number;
	export type Red31 = number;
	export type Blue31 = number;
	export type Green31 = number;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip104 = boolean;
	export type EnglishText104 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText79 = string;
	/**
	 * What workstation the player must be near to craft this recipe.
	 */
	export type Station14 = string;
	export type Style13 = "Additive" | "Multiplicative";
	export type ChangePerPoint34 = number;
	export type ResearchNode26 = string;
	export type ChangePerPoint35 = number;
	export type ResearchNode27 = string;
	export type UnlockedBy57 = string;
	/**
	 * Change this number to increase or decrease the number of materials required to craft this item.
	 */
	export type EffortModifier18 = number;
	export type OutputQuantity12 = number;
	/**
	 * If set, this world element will be considered a variant of another world element. Its recipe will be rolled together with that item, and they will share crafting efficiencies.
	 */
	export type VariantParent4 = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup28 = string;
	/**
	 * The primary sprite of the tile.
	 */
	export type MainSprite2 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip105 = boolean;
	export type EnglishText105 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText80 = string;
	/**
	 * Whether the tile should be X-flipped randomly when placed.
	 */
	export type Flippable7 = boolean;
	/**
	 * The sprite to use when displaying the tile in the UI (e.g. Build Mode).
	 */
	export type Icon6 = string;
	export type Red32 = number;
	export type Blue32 = number;
	export type Green32 = number;
	/**
	 * The sound to play when the player walks on this tile.
	 */
	export type FootstepSound3 = string;
	/**
	 * The sprite to draw below the main sprite. Subimages must correspond with the Sprite.
	 */
	export type UnderSprite3 = string;
	/**
	 * The sound to play when this tile is placed in the editor or in Build Mode.
	 */
	export type PlacementSound8 = string;
	/**
	 * The probability of a given tile having Dapples on it.
	 */
	export type SpawnChance3 = number;
	export type Red33 = number;
	export type Blue33 = number;
	export type Green33 = number;
	/**
	 * This is a large sprite that will be drawn underwater if this tile is at a shoreline. It helps create a sense of the water getting deeper.
	 */
	export type ShelfUnderwaterSprite1 = string;
	/**
	 * If this tile is against water, the Shoreline Water Sprite will be drawn in the water to convey how the tile interacts with the water.
	 */
	export type ShorelineUnderwaterSprite1 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip106 = boolean;
	export type EnglishText106 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText81 = string;
	/**
	 * What workstation the player must be near to craft this recipe.
	 */
	export type Station15 = string;
	export type Style14 = "Additive" | "Multiplicative";
	export type ChangePerPoint36 = number;
	export type ResearchNode28 = string;
	export type ChangePerPoint37 = number;
	export type ResearchNode29 = string;
	export type UnlockedBy58 = string;
	/**
	 * Change this number to increase or decrease the number of materials required to craft this item.
	 */
	export type EffortModifier19 = number;
	export type OutputQuantity13 = number;
	/**
	 * If set, this world element will be considered a variant of another world element. Its recipe will be rolled together with that item, and they will share crafting efficiencies.
	 */
	export type VariantParent5 = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup29 = string;
	/**
	 * The primary sprite of the tile.
	 */
	export type MainSprite3 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip107 = boolean;
	export type EnglishText107 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText82 = string;
	export type Red34 = number;
	export type Blue34 = number;
	export type Green34 = number;
	export type Red35 = number;
	export type Blue35 = number;
	export type Green35 = number;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip108 = boolean;
	export type EnglishText108 = string;
	/**
	 * How many days it takes for this moon to come around again. Moons can overlap. One moon must have a 1-day cycle -- that will be the default moon, and will determine the default night colors.
	 */
	export type DaysPerCycle = number;
	/**
	 * Whether the tile should be X-flipped randomly when placed.
	 */
	export type Flippable8 = boolean;
	/**
	 * The sprite to use when displaying the tile in the UI (e.g. Build Mode).
	 */
	export type Icon7 = string;
	export type Red36 = number;
	export type Blue36 = number;
	export type Green36 = number;
	/**
	 * The sound to play when the player walks on this tile.
	 */
	export type FootstepSound4 = string;
	/**
	 * The sprite to draw below the main sprite. Subimages must correspond with the Sprite.
	 */
	export type UnderSprite4 = string;
	/**
	 * The sound to play when this tile is placed in the editor or in Build Mode.
	 */
	export type PlacementSound9 = string;
	/**
	 * The probability of a given tile having Dapples on it.
	 */
	export type SpawnChance4 = number;
	export type Red37 = number;
	export type Blue37 = number;
	export type Green37 = number;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip109 = boolean;
	export type EnglishText109 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText83 = string;
	/**
	 * This is a large sprite that will be drawn underwater if this tile is at a shoreline. It helps create a sense of the water getting deeper.
	 */
	export type ShelfUnderwaterSprite2 = string;
	/**
	 * If this tile is against water, the Shoreline Water Sprite will be drawn in the water to convey how the tile interacts with the water.
	 */
	export type ShorelineUnderwaterSprite2 = string;
	/**
	 * If this tile ends up touching water, it will be replaced with this tile.
	 */
	export type ShoreTile = string;
	/**
	 * If this tile gets cleared via Build Mode, it will be replaced with its 'Cleared Tile' version temporarily. If a tile has a 'Cleared Tile' then it cannot be built on until it is cleared.
	 */
	export type ClearedTile = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup30 = string;
	/**
	 * Cleared terrain tiles will allow floors to be placed on them by default. You can override this default behavior.
	 */
	export type DisallowFloors = boolean;
	/**
	 * Determines how this tile will be depth-sorted against other terrain tiles.
	 */
	export type DepthPriority = number;
	/**
	 * The primary sprite of the tile.
	 */
	export type MainSprite4 = string;
	/**
	 * If this group is chosen, this is the chance that it will actually spawn its spice.
	 */
	export type SpawnChance5 = number;
	export type Neighbor = string;
	/**
	 * When this tile gets cleared, you can customize the sprite that will blast off of it. If not specified, it will just make a smoke blast.
	 */
	export type ClearTileParticleSprite = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip110 = boolean;
	export type EnglishText110 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText84 = string;
	/**
	 * An area that this area can inherit certain properties from, like music and ambience.
	 */
	export type ParentArea = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup31 = string;
	/**
	 * If true, the player can enter build mode in this area. Tru by default.
	 */
	export type BuildModeAllowed = boolean;
	/**
	 * If set, this area will be blocked off in the demo. The player will be teleported out when they enter.
	 */
	export type DemoBlocked2 = boolean;
	export type Red38 = number;
	export type Blue38 = number;
	export type Green38 = number;
	export type Red39 = number;
	export type Blue39 = number;
	export type Green39 = number;
	/**
	 * Uncheck this to have no ambience play in this zone.
	 */
	export type PlayAmbience = boolean;
	/**
	 * The sounds that should play if the player is outdoors in the day.
	 */
	export type AmbientDayTrack = string;
	/**
	 * The sounds that should play if the player is not indoors.
	 */
	export type AmbientNightTrack = string;
	export type ColorGradingProfile = string;
	export type Vignette = string;
	/**
	 * If true, regular docks cannot be built in this area.
	 */
	export type DeepWater = boolean;
	/**
	 * If unchecked, music won't play in this area.
	 */
	export type PlayMusic = boolean;
	export type Condition6 =
	  | {
	      daytime: DuringDaytime5;
	      condition_type?: "Daylight";
	    }
	  | {
	      condition_type?: "Moon";
	      moon: ActiveMoon5;
	    }
	  | {
	      quest_status: QuestStatus7;
	      quest: QuestToCheck7;
	      condition_type?: "Quest";
	    }
	  | {
	      condition_type?: "Artisan Following";
	      following: Following13;
	      artisan: Buddy9;
	    }
	  | {
	      unlock_text?: InsightTooltip5;
	      prerequisite: Insight18;
	      condition_type?: "Insight";
	    }
	  | {
	      num_pieces: NumberOfPiecesEquipped5;
	      condition_type?: "Wearing Equipment Set";
	      equipment_set: EquipmentSet8;
	    }
	  | {
	      require_all: RequireAll86;
	      condition_type?: "Item Equipped";
	      items: Items93;
	    };
	export type DuringDaytime5 = boolean;
	export type ActiveMoon5 = string;
	export type QuestStatus7 = "Complete" | "Started" | "Not Started";
	/**
	 * The quest whose status we are querying.
	 */
	export type QuestToCheck7 = string;
	export type Following13 = boolean;
	export type Buddy9 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip111 = boolean;
	export type EnglishText111 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText85 = string;
	export type Insight18 = string;
	/**
	 * If the player is wearing at least this many pieces, the condition will be met.
	 */
	export type NumberOfPiecesEquipped5 = number;
	export type EquipmentSet8 = string;
	/**
	 * If checked, this condition will only be met if ALL of the items listed are equipped at the same time.
	 */
	export type RequireAll86 = boolean;
	export type RequireAllConditions5 = boolean;
	export type Weather5 = string;
	/**
	 * You can have the camera default to a closer field of view in this area.
	 */
	export type DefaultZoom = number;
	/**
	 * The icon that should be used for the teleporter in this area.
	 */
	export type TeleporterIcon = string;
	export type OutdoorMusicDay = string;
	export type OutdoorMusicNight = string;
	export type IndoorMusic = string;
	/**
	 * The sprite that should be used for the water in this area.
	 */
	export type WaterSprite = string;
	/**
	 * The sprite used for the color blending of the waves.
	 */
	export type WavesSprite = string;
	/**
	 * If true, this unlocker will enable build mode in this area. If false, it will disable build mode.
	 */
	export type EnablesBuildMode = boolean;
	/**
	 * The gameplay unlocker that must be unlocked for this to take effect.
	 */
	export type UnlockedBy59 = string;
	/**
	 * If true, this area will display its name on the world map once discovered.
	 */
	export type Discoverable = boolean;
	/**
	 * When the player enters this area, whether the name of the area should appear on-screen.
	 */
	export type ShowNameUponEntering = boolean;
	export type ColorGrading = string;
	export type ShowOnWater = boolean;
	export type ParticlesSecond = number;
	export type ParticleSystem5 = string;
	export type ShowOnLand = boolean;
	export type Red40 = number;
	export type Blue40 = number;
	export type Green40 = number;
	export type Scale6 = number;
	export type Alpha2 = number;
	export type SpeedPixelsSec1 = number;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed29 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude26 = number;
	export type Sprite7 = string;
	export type SpeedPixelsSec2 = number;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed30 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude27 = number;
	/**
	 * This sound must be part of the 'Ambience' earparty group.
	 */
	export type AmbientSound = string;
	export type Darkness = number;
	export type NameInternal7 = string;
	/**
	 * Whether the item can be flipped in the Editor. If set, it will also randomly flip when placed.
	 */
	export type Flippable9 = boolean;
	export type UIIcon25 = string;
	export type DoorOpenSound1 = string;
	export type DoorCloseSound1 = string;
	export type WorldSprite22 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip112 = boolean;
	export type EnglishText112 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText86 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip113 = boolean;
	export type EnglishText113 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText87 = string;
	export type Icon8 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip114 = boolean;
	export type EnglishText114 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText88 = string;
	/**
	 * If set, then this damage will be counted as a subset of the parent.
	 */
	export type ParentDamageType = string;
	/**
	 * If true, this damage type exists as a 'roll up' to categorize other damage types, but isn't usable as a type of damage itself.
	 */
	export type Aggregator = boolean;
	/**
	 * Whether the stat should be used as a multiplier or added to the damage. Multipliers will assume the stat is a percentage and will use the formula (1+Stat)*Damage.
	 */
	export type BoostStyle = "Add" | "Multiply";
	/**
	 * If the entity dealing damage has this stat, the damage will be boosted by it.
	 */
	export type BoostingStat = string;
	/**
	 * If set, this will dictate if this boost only applies to direct or periodic damage. If unset, it will apply to all damage.
	 */
	export type DirectDamage4 = boolean;
	export type Red41 = number;
	export type Blue41 = number;
	export type Green41 = number;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip115 = boolean;
	export type EnglishText115 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText89 = string;
	/**
	 * If this damage type is reduced by a stat, link to that stat here.
	 */
	export type ResistanceStat = string;
	export type UIIcon26 = string;
	/**
	 * An explanation of what this data field is intended to be used for.
	 */
	export type Description24 = string;
	/**
	 * A human-readable name for this timestamp.
	 */
	export type Name41 = string;
	export type UIIcon27 = string;
	/**
	 * Which row this infusion will appear in. Jem costs go up each tier.
	 */
	export type Tier = number;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip116 = boolean;
	export type EnglishText116 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText90 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip117 = boolean;
	export type EnglishText117 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText91 = string;
	export type Value4 = number;
	export type Stat3 = string;
	/**
	 * If checked, then only one buff of this type can be active at a time.
	 */
	export type Exclusive6 = boolean;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip118 = boolean;
	export type EnglishText118 = string;
	/**
	 * This group can inherit gain from a parent group.
	 */
	export type ParentGroup = string;
	export type Min66 = number;
	export type Max66 = number;
	/**
	 * All sounds in this group will have their gain multiplied by this number at all times. This will also multiply with parent groups. So for example, if this group has a gain modifier of 0.5, and its parent also has a gain modifier of 0.5, then sounds in this group will have a final gain of 0.25.
	 */
	export type GainModifier = number;
	/**
	 * The name of this group of sounds.
	 */
	export type Name44 = string;
	export type UIIcon28 = string;
	export type UnlockedBy60 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip119 = boolean;
	export type EnglishText119 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText92 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip120 = boolean;
	export type EnglishText120 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText93 = string;
	/**
	 * If true, this loot group will not be shown in the progression map.
	 */
	export type IgnoreInProgressionMap4 = boolean;
	/**
	 * Used to order this comfort in the Artisan's list.
	 */
	export type OrderIndex = number;
	export type Condition7 =
	  | {
	      type?: "Standing on Tile Type";
	      floor_tile: Floor2;
	      dock_tile: Dock2;
	      terrain_tile: Terrain2;
	    }
	  | {
	      type?: "Room Size";
	      interior_tiles: InteriorTileArea1;
	    }
	  | {
	      type?: "Be Indoors";
	    }
	  | {
	      type?: "Item Tally";
	      item_tally: {
	        comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	        value0?: Items94;
	        value1?: number;
	      };
	      whole_building: WholeBuilding2;
	    }
	  | {
	      type?: "Number of Rooms";
	      num_rooms: NumberOfRooms1;
	    }
	  | {
	      type?: "Item Relationships";
	      source_items: SourceItems1;
	      destination_items: TargetItems1;
	      whole_building: WholeBuilding3;
	      distance: TileDistance1;
	    };
	export type Floor2 = boolean;
	export type Dock2 = boolean;
	export type Terrain2 = boolean;
	/**
	 * If true, the entire building will be checked instead of just the Artisan's room.
	 */
	export type WholeBuilding2 = boolean;
	/**
	 * If true, the entire building will be checked instead of just the Artisan's room.
	 */
	export type WholeBuilding3 = boolean;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip121 = boolean;
	export type EnglishText121 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText94 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip122 = boolean;
	export type EnglishText122 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText95 = string;
	/**
	 * Which buddy this comfort belongs to.
	 */
	export type Buddy10 = string;
	/**
	 * If true, this data field will be preserved as it exists in the World Editor on each instance.
	 */
	export type SaveToBaseWorld = boolean;
	/**
	 * If a world element has this data field and exists out in the world, the data field will be preserved between game sessions as the player saves and loads.
	 */
	export type SaveToGameplay = boolean;
	export type UIIcon29 = string;
	/**
	 * A human-readable name for this data field.
	 */
	export type Name47 = string;
	/**
	 * If true, this data field can be edited in the World Editor.
	 */
	export type Editable = boolean;
	export type Min67 = number;
	export type Max67 = number;
	/**
	 * The UID pool that this data field should pull from in the Editor.
	 */
	export type EditorUIDPool = "cl2_items";
	/**
	 * How this data is stored in a buffer.
	 */
	export type DataType = "u8" | "u16" | "u32" | "s8" | "s16" | "s32" | "f32";
	/**
	 * An explanation of what this data field is intended to be used for.
	 */
	export type Description26 = string;
	/**
	 * If you pick up a world element that has this data field, the data field can be preserved when the item is in your inventory.
	 */
	export type SaveToInventory = boolean;
	/**
	 * A song or collection of songs that can play in a given context.
	 */
	export type Music4 = Music5 & Music6;
	export type Style15 = "Looping" | "Playlist";
	/**
	 * For internal reference
	 */
	export type Name48 = string;
	export type Music6 =
	  | {
	      style?: "Looping";
	      intro?: Intro;
	      intro_combat?: IntroCombatOverlay;
	      loop: Loop;
	      loop_in_seconds?: LoopInSeconds;
	      loop_combat?: LoopCombatOverlay;
	      pause_seconds?: PauseSeconds4;
	      name?: Name49;
	    }
	  | {
	      style?: "Playlist";
	      tracks: Tracks;
	      name?: Name50;
	    };
	/**
	 * The sound that plays before the loop.
	 */
	export type Intro = string;
	/**
	 * A track to play synchronized with the Intro track while in combat.
	 */
	export type IntroCombatOverlay = string;
	/**
	 * The main part of the track that will play on a loop.
	 */
	export type Loop = string;
	/**
	 * The amount of time after the Intro begins playing for the loop to start. By default, the loop will begin playing when the Intro ends, but you can have them overlap by setting this value.
	 */
	export type LoopInSeconds = number;
	/**
	 * A track to play synchronized with the Combat track while in combat.
	 */
	export type LoopCombatOverlay = string;
	/**
	 * If this track stops and then resumes within this time frame, it will pick up where it left off and continue looping. Otherwise, it will start over, replaying its its intro.
	 */
	export type PauseSeconds4 = number;
	/**
	 * For internal reference
	 */
	export type Name49 = string;
	/**
	 * For internal reference
	 */
	export type Name50 = string;
	/**
	 * How fast things move baseline in tiles per second.
	 */
	export type BaseGameplayMoveSpeed = number;
	/**
	 * Compounding increase in Damage Per Second per level.
	 */
	export type DPSGrowthLevel = number;
	/**
	 * The amount of effort (materials) it takes per component to craft an item. More effort means more components. Item tags add categorical multipliers.
	 */
	export type CraftingEffortPerComponent = number;
	/**
	 * Linear increase in crafting cost per level.
	 */
	export type CraftingCostGrowthPerLevel = number;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip123 = boolean;
	export type EnglishText123 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText96 = string;
	/**
	 * Linear increase in crafting cost for items that have pre-set qualities, such as armor that has built-in stats.
	 */
	export type CraftingCostGrowthPerQuality = number;
	export type MaxSeconds5 = number;
	export type SecondsAtLevel1 = number;
	export type SecondsChangePerLevel = number;
	export type MinSeconds5 = number;
	export type MaxSeconds6 = number;
	export type SecondsAtLevel11 = number;
	export type SecondsChangePerLevel1 = number;
	export type MinSeconds6 = number;
	export type MaxSeconds7 = number;
	export type SecondsAtLevel12 = number;
	export type SecondsChangePerLevel2 = number;
	export type MinSeconds7 = number;
	/**
	 * How many seconds it takes to kill a standard boss.
	 */
	export type BossTimeToKill = number;
	/**
	 * All healing items have the same cooldown. Adjust it here.
	 */
	export type HealingCooldownSeconds = number;
	/**
	 * Seconds to research a starting node for an Artisan.
	 */
	export type ResearchBaseSeconds = number;
	/**
	 * How many more seconds each reseach node takes as you go deeper in the tree.
	 */
	export type ResearchTimeGrowthPerLevel = number;
	/**
	 * This will be the tier at which Insights stop taking longer. All Insights beyond this tier will be at the maximum time.
	 */
	export type ResearchMaximumTier = number;
	/**
	 * Insights will take this long at the maximum tier, scaling quadratically.
	 */
	export type ResearchMaximumTime = number;
	/**
	 * The amount of effort (materials) it takes per component of a research node. More effort means more components.
	 */
	export type ResearchEffortPerComponent = number;
	/**
	 * If a Buddy has full Comforts, how much time research will take compared to baseline.
	 */
	export type MaxComfortResearchTime = number;
	/**
	 * At level 1, the player won't have full HP until their armor is equipped. This number represents the proportion of their 'armored' healt the player will start with.
	 */
	export type PlayerBaseHP = number;
	/**
	 * How many grid spaces away the player can build.
	 */
	export type BuildModeRange = number;
	export type HomeTeleportCooldownSeconds = number;
	export type Helm = number;
	export type Suit = number;
	export type Boots = number;
	export type Gloves = number;
	export type Tool = number;
	export type Weapon = number;
	export type Trinket1 = number;
	/**
	 * How many real-world minutes it takes to go through a full day-night cycle in-game.
	 */
	export type MinutesPerGameDay = number;
	/**
	 * How many real-world minutes it takes for a typical world element to respawn after being destroyed.
	 */
	export type WorldElementRespawnMinutes = number;
	/**
	 * How many real-world minutes it takes for a cleared terrain tile to respawn after being destroyed.
	 */
	export type ClearedTileRespawnMinutes = number;
	/**
	 * The default number of times the player must craft an item to reach the first skill level.
	 */
	export type NumCraftsForLevel1 = number;
	/**
	 * How many more items must be crafted each skill level, relative to the prior skill level. 100% means double.
	 */
	export type CostGrowthPerSkillLevel = number;
	export type CostReduction = number;
	export type OutputIncrease = number;
	/**
	 * When in this editor category, how the editor should select things and interact with the world.
	 */
	export type SpawnMode = "Items" | "Tiles" | "Areas" | "Scenes";
	export type Red42 = number;
	export type Blue42 = number;
	export type Green42 = number;
	export type Icon9 = string;
	/**
	 * The order in which this thing should appear in the Editor selector.
	 */
	export type Order2 = number;
	export type Name52 = string;
	/**
	 * Creates a folder in the World Editor sidebar for this item.
	 */
	export type EditorGroup32 = string;
	export type Red43 = number;
	export type Blue43 = number;
	export type Green43 = number;
	export type TransitionVisuals =
	  | {
	      color: FullscreenColor;
	      fullscreen: true;
	      fade_start_seconds: FadeStartSeconds;
	      fade_hold_seconds: FadeHoldSeconds;
	      fade_end_seconds: FadeEndSeconds;
	      text_overlay?: TextOverlay;
	    }
	  | {
	      fullscreen: false;
	      effects?: Effects2;
	    };
	export type Red44 = number;
	export type Blue44 = number;
	export type Green44 = number;
	/**
	 * How long to fade to the designated color.
	 */
	export type FadeStartSeconds = number;
	/**
	 * How long to hold the vew on the designated color. The scene transition will occur halfway through this hold.
	 */
	export type FadeHoldSeconds = number;
	/**
	 * How long to fade back to normal view.
	 */
	export type FadeEndSeconds = number;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip124 = boolean;
	export type EnglishText124 = string;
	/**
	 * If checked, these transition effects will play on entities that have changed.
	 */
	export type PlayOnEntities = boolean;
	/**
	 * If checked, these transition effects will play on tiles that have changed.
	 */
	export type PlayOnTiles = boolean;
	export type VisualEffect2 =
	  | {
	      effect_type: "Ground Decal";
	      decal_max_alpha?: MaxAlpha2;
	      decal_duration?: DecalDurationSeconds2;
	      decal_sprite: DecalSprite2;
	      decal_scale?: DecalScale2;
	    }
	  | {
	      effect_type: "Explosion";
	      explosion_y_offset?: YOffset7;
	      explosion_z_offset?: ZOffset9;
	      explosion_color: BaseColor2;
	      explosion_sound?: Sound8;
	      explosion_slomo_burst: SlowMotionPulse2;
	      explosion_highlight_color?: HighlightColor2;
	      explosion_smoke?: ShowSmoke2;
	      explosion_scale?: ExplosionScale2;
	      explosion_random_distance?: RandomDistanceGridSpaces2;
	      explosion_random_delay?: RandomDelaySeconds2;
	      explosion_debris?: DebrisParticles4;
	    }
	  | {
	      particle_system: ParticleSystem6;
	      effect_type: "Particle System Burst";
	      particle_system_y_offset?: YOffset8;
	      particle_system_z_offset?: ZOffset10;
	      particle_system_emitter_scale?: EmitterScale5;
	    }
	  | {
	      effect_type: "Skybeam";
	      skybeam_sound?: Sound9;
	      skybeam_width?: SkybeamPixelWidth;
	      skybeam_color: SkybeamColor;
	    };
	export type MaxAlpha2 = number;
	export type Min68 = number;
	export type Max68 = number;
	/**
	 * This sprite will be drawn subtractively.
	 */
	export type DecalSprite2 = string;
	export type Min69 = number;
	export type Max69 = number;
	/**
	 * Can be useful for depth-sorting. For example, a Y offset of 1 will spawn the explosion in front of whatever is explosing.
	 */
	export type YOffset7 = number;
	/**
	 * If spawning on the ground, this will be height above ground. If spawning on targets, it will spawn at their height midpoints, plus this offset.
	 */
	export type ZOffset9 = number;
	export type Red45 = number;
	export type Blue45 = number;
	export type Green45 = number;
	/**
	 * There is a default explosion sound, but you can override it here.
	 */
	export type Sound8 = string;
	/**
	 * If true, there will be a brief slow-down of the game when the explosion occurs to make it feel more impactful. Use sparingly.
	 */
	export type SlowMotionPulse2 = boolean;
	export type Red46 = number;
	export type Blue46 = number;
	export type Green46 = number;
	/**
	 * If true, smoke will be spawned at the explosion location.
	 */
	export type ShowSmoke2 = boolean;
	export type Min70 = number;
	export type Max70 = number;
	export type Min71 = number;
	export type Max71 = number;
	export type Min72 = number;
	export type Max72 = number;
	/**
	 * The sprite to use for the debris.
	 */
	export type Sprite8 = string;
	export type ParticleScale2 = number;
	export type NumberOfParticles5 = number;
	export type ParticleSystem6 = string;
	/**
	 * Can be useful for depth-sorting. For example, a Y offset of 1 will spawn the explosion in front of whatever is explosing.
	 */
	export type YOffset8 = number;
	/**
	 * If spawning on the ground, this will be height above ground. If spawning on targets, it will spawn at their height midpoints, plus this offset.
	 */
	export type ZOffset10 = number;
	export type EmitterScale5 = number;
	/**
	 * What sound this sky beam should play when it appears.
	 */
	export type Sound9 = string;
	/**
	 * If targeting an entity, the skybeam will be based on the entity's width unless this field is set.
	 */
	export type SkybeamPixelWidth = number;
	export type Red47 = number;
	export type Blue47 = number;
	export type Green47 = number;
	/**
	 * The chance that the effect will play on a given target.
	 */
	export type Chance19 = number;
	export type Quantity121 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll87 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants74 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags74 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude79 = boolean;
	export type Quantity122 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll88 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants75 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags75 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude80 = boolean;
	/**
	 * A quest that must be completed to unlock this phase.
	 */
	export type UnlockedBy61 = string;
	/**
	 * For saving in the binary file. This does not affect phase order -- it is only for saving/loading.
	 */
	export type UniqueID = number;
	export type PhaseNameInternal = string;
	/**
	 * Describe what this scene is for (for other developers).
	 */
	export type DescriptionInternal = string;
	export type SceneNameInternal = string;
	export type DisplayAsPercent = boolean;
	/**
	 * The order in which the stats appear in a stat breakdown.
	 */
	export type Order3 = number;
	/**
	 * If checked, the stat will be treated as though its baseline value is 100%, for the sake of multiplying against buffs.
	 */
	export type IsModifier = boolean;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip125 = boolean;
	export type EnglishText125 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText97 = string;
	export type ShowOnPlayerUI = boolean;
	/**
	 * This stat will be indented under its parent where possible.
	 */
	export type ParentStat = string;
	/**
	 * When equipment gets 'stat points', each stat point will boost this stat by this amount.
	 */
	export type ValuePoint = number;
	/**
	 * The lowest this stat can go.
	 */
	export type ValueMin = number;
	export type UsableOnEquipment = boolean;
	/**
	 * The highest this stat can go.
	 */
	export type ValueMax = number;
	export type UsableOnBuffs = boolean;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip126 = boolean;
	export type EnglishText126 = string;
	/**
	 * The starting point of this stat, all else equal.
	 */
	export type ValueDefault = number;
	/**
	 * How many decimals to display.
	 */
	export type DecimalPrecision = number;
	export type DamageAmount1 = number;
	export type DamageType2 = string;
	export type Modifier3 = number;
	export type Filter77 = string;
	/**
	 * Name of this damage profile. For internal use.
	 */
	export type Name54 = string;
	/**
	 * How close the player must get for the camera anchor to lock in.
	 */
	export type RadiusGrid = number;
	/**
	 * If set, the camera will use this zoom level while locked on to this camera anchor. Higher values mean you can see more.
	 */
	export type Zoom = number;
	/**
	 * 100% means the camera goes all the way to the anchor. 50% keeps it halfway between the player and the anchor.
	 */
	export type BiasAmount = number;
	export type NameInternal8 = string;
	/**
	 * If no animation information is present for this state, it can fall back to another state.
	 */
	export type FallbackState = string;
	/**
	 * Unless otherwise specified, we will try to play the animation using this Spine name when we enter this animation state.
	 */
	export type DefaultSpineAnimationName = string;
	/**
	 * Describe scenarios in which this animation state is used.
	 */
	export type Description28 = string;
	export type Name55 = string;
	/**
	 * The particle system's string ID in the Game Maker project.
	 */
	export type Name56 = string;
	export type EnemyAttackSpeed = number;
	export type EnemyHealth = number;
	export type PlayerHealth = number;
	/**
	 * The proportion of the player's items that will go into the DED dummy.
	 */
	export type DEDItemLoss = number;
	export type Red48 = number;
	export type Blue48 = number;
	export type Green48 = number;
	export type Icon10 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip127 = boolean;
	export type EnglishText127 = string;
	export type HealingCooldown = number;
	export type Order4 = number;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip128 = boolean;
	export type EnglishText128 = string;
	export type Sprite9 = string;
	export type NameInternal9 = string;
	/**
	 * During dialogue moments, this emoji will play this sound when displayed.
	 */
	export type Sound10 = string;
	export type Emoji12 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip129 = boolean;
	export type EnglishText129 = string;
	export type NameInternal10 = string;
	export type Brightness1 = number;
	export type Saturation = number;
	export type RedMultiplier = number;
	export type GreenMultiplier = number;
	export type BlueMultiplier = number;
	export type DarkLevels = number;
	export type LightLevels = number;
	export type ShadowThreshold = number;
	export type ShadowMultiplier = number;
	export type HighlightThreshold = number;
	export type HighlightMultiplier = number;
	export type ProfileNameInternal = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip130 = boolean;
	export type EnglishText130 = string;
	export type Red49 = number;
	export type Blue49 = number;
	export type Green49 = number;
	/**
	 * How many pieces of the set the user must be wearing to gain this bonus.
	 */
	export type Pieces = number;
	export type Amount1 = number;
	export type Stat5 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip131 = boolean;
	export type EnglishText131 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText98 = string;
	export type CreditsEntry =
	  | {
	      type: "Gap";
	    }
	  | {
	      type: "Single Entry";
	      role?: Role;
	      name: {
	        name?: string;
	        use_cjk?: CJK;
	      };
	    }
	  | {
	      type: "Group";
	      names: Names;
	      role: Role1;
	    };
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip132 = boolean;
	export type EnglishText132 = string;
	export type CJK = boolean;
	export type CJK1 = boolean;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip133 = boolean;
	export type EnglishText133 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip134 = boolean;
	export type EnglishText134 = string;
	export type Red50 = number;
	export type Blue50 = number;
	export type Green50 = number;
	export type NameInternal11 = string;
	/**
	 * A collection of rules about how a certain kind of data is structured, accessed, and validated.
	 */
	export type Schema = Schema1 & Schema2;
	export type Name59 = string;
	export type Type3 =
	  | "Collection"
	  | "List"
	  | "Text"
	  | "Number"
	  | "Choice"
	  | "Constant"
	  | "Schema Reference"
	  | "Mote Reference";
	export type Description31 = string;
	export type Schema2 =
	  | {
	      exclusiveMinimum?: MinimumIsExclusive;
	      exclusiveMaximum?: MaximumIsExclusive;
	      multipleOf?: MultipleOf;
	      minimumValue?: MinimumValue;
	      maximumValue?: MaximumValue;
	      type?: "number";
	      _type?: "Number";
	    }
	  | {
	      type?: "object";
	      minProperties?: MinimumProperties;
	      maxProperties?: MaximumProperties;
	      _type?: "Collection";
	      properties?: PropertyDefinitions;
	    };
	/**
	 * If true, the number cannot equal the minimum value -- it must be greater.
	 */
	export type MinimumIsExclusive = boolean;
	/**
	 * If true, the number cannot equal the maximum value -- it must be less.
	 */
	export type MaximumIsExclusive = boolean;
	/**
	 * If set, the number in the data must be a multiple of this number.
	 */
	export type MultipleOf = number;
	/**
	 * The lowest allowed value for this number.
	 */
	export type MinimumValue = number;
	/**
	 * The highest allowed value for this number.
	 */
	export type MaximumValue = number;
	export type MinimumProperties = number;
	export type MaximumProperties = number;
	export type Boss8 = string;
	export type NameInternal12 = string;
	export type MovementVisuals13 =
	  | {
	      animation?: HopAnimationName13;
	      style: "Hop";
	      babbler?: Babbler84;
	      hop_speed: HopVerticalSpeed13;
	      hop_anticipation?: HopAnticipationSeconds13;
	      hop_followthrough?: PostHopFollowthroughSeconds13;
	    }
	  | {
	      style: "Run";
	      babbler?: Babbler85;
	      run_vertical_speed: RunVerticalBounceSpeed13;
	      animation?: RunAnimationName13;
	    }
	  | {
	      style: "Crawl";
	      babbler?: Babbler86;
	      animation?: CrawlAnimationName13;
	    }
	  | {
	      animation?: Animation38;
	      style: "Fly";
	      z_baseline: BaselineAltitudePixels25;
	      babbler?: Babbler87;
	      z_sine?: AltitudeSineWave25;
	      flaps?: FlappingVerticalMovements25;
	    };
	/**
	 * Defaults to 'hop' but can be overridden.
	 */
	export type HopAnimationName13 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler84 = string;
	/**
	 * As a percentage of base gravity. This is fairly sensitive.
	 */
	export type HopVerticalSpeed13 = number;
	/**
	 * How long to hold before rising off the ground, to make room for a pre-hop animation.
	 */
	export type HopAnticipationSeconds13 = number;
	/**
	 * How long to hold after landing on the ground from a hop, to make room for animations.
	 */
	export type PostHopFollowthroughSeconds13 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler85 = string;
	/**
	 * How fast the character should pop up off the ground with each leg movement. As a percentage of base gravity. This is fairly sensitive.
	 */
	export type RunVerticalBounceSpeed13 = number;
	/**
	 * Defaults to 'run' but can be overridden.
	 */
	export type RunAnimationName13 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler86 = string;
	/**
	 * Defaults to 'crawl' but can be overridden.
	 */
	export type CrawlAnimationName13 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation38 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels25 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler87 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed31 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude28 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds25 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds25 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance25 = number;
	/**
	 * How the actor animates while not actively moving.
	 */
	export type StationaryVisuals12 =
	  | {
	      style?: "Stand";
	      babbler?: Babbler88;
	      animation?: Animation39;
	    }
	  | {
	      animation?: Animation40;
	      style: "Fly";
	      z_baseline: BaselineAltitudePixels26;
	      babbler?: Babbler89;
	      z_sine?: AltitudeSineWave26;
	      flaps?: FlappingVerticalMovements26;
	    };
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler88 = string;
	/**
	 * Defaults to 'idle.
	 */
	export type Animation39 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation40 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels26 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler89 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed32 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude29 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds26 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds26 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance26 = number;
	/**
	 * Relative to the global movement speed.
	 */
	export type MovementSpeed13 = number;
	/**
	 * Used for sorting the phases in the GC sidebar.
	 */
	export type Order5 = number;
	/**
	 * Higher number means you can see more.
	 */
	export type ZoomLevel = number;
	/**
	 * If set, this music will play during this phase. If unset, there will be no music during this phase.
	 */
	export type Music7 = string;
	/**
	 * Affects how frequently this ability is chosen.
	 */
	export type Weight7 = number;
	export type Targeting =
	  | {
	      style: "Fixed Direction";
	      direction: Direction2;
	    }
	  | {
	      style: "Toward Entity";
	      range?: Range;
	      targets: PotentialTargets;
	      choose_random?: ChooseRandom;
	    };
	/**
	 * The direction (in degrees) that the boss will cast this ability.
	 */
	export type Direction2 = number;
	export type Min73 = number;
	export type Max73 = number;
	/**
	 * If set, the boss will choose a random quest marker from the list, instead of the nearest one.
	 */
	export type ChooseRandom = boolean;
	export type Ability11 = string;
	export type Condition8 =
	  | {
	      abilities?: Abilities8;
	      casting_state: Casting5;
	      condition_type?: "Ability";
	    }
	  | {
	      datafield_evaluation: Evaluation10;
	      condition_type?: "Datafield";
	    }
	  | {
	      daytime: DuringDaytime6;
	      condition_type?: "Daylight";
	    }
	  | {
	      combat: InCombat5;
	      condition_type?: "Combat";
	    }
	  | {
	      timestamp: Timestamp8;
	      insight_modifier?: InsightModifier5;
	      condition_type?: "Timestamp";
	      evaluation: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      minutes_passed: MinutesSinceTimestamp5;
	    }
	  | {
	      condition_type?: "Moon";
	      moon: ActiveMoon6;
	    }
	  | {
	      quest_status: QuestStatus8;
	      quest: QuestToCheck8;
	      condition_type?: "Quest";
	    }
	  | {
	      condition_type?: "Artisan Following";
	      following: Following14;
	      artisan: Buddy11;
	    }
	  | {
	      unlock_text?: InsightTooltip6;
	      prerequisite: Insight20;
	      condition_type?: "Insight";
	    }
	  | {
	      proximity_quantity: NumberOfTargets10;
	      proximity_range: DistanceRequiredGridSpaces5;
	      proximity_targets: Targets8;
	      proximity_ignores_stealth: IgnoreStealthedTargets5;
	      condition_type?: "Proximity";
	    }
	  | {
	      condition_type?: "Health";
	      hp_evaluation: HealthEvaluation5;
	    }
	  | {
	      require_all: RequireAll91;
	      condition_type?: "Item Equipped";
	      items: Items99;
	    }
	  | {
	      condition_type?: "Item Wielding";
	      items: Items100;
	    }
	  | {
	      num_pieces: NumberOfPiecesEquipped6;
	      condition_type?: "Wearing Equipment Set";
	      equipment_set: EquipmentSet10;
	    }
	  | {
	      condition_type?: "Buffs";
	      buffs: Buffs165;
	      buff_exclusive?: Exclusive7;
	      buff_require_all: RequireAll92;
	      buff_check_self: CheckSelf5;
	      buff_own_only: OwnBuffsOnly5;
	      buff_num_targets?: NumberOfTargets11;
	      buff_target_filter?: BuffTargetFilter5;
	      buff_proximity?: BuffTargetRange5;
	      buff_stack_evaluation?: Stacks89;
	      buff_target: TargetEntity18;
	    }
	  | {
	      condition_type?: "Boss Defeated";
	      boss: Boss9;
	    }
	  | {
	      summoned_filter?: SummonedEntitiesFilter5;
	      comparison: NumberSummoned5;
	      condition_type?: "Summoned Entities";
	    }
	  | {
	      condition_type?: "Area";
	      areas: Areas8;
	    }
	  | {
	      weather_ids: Weather6;
	      condition_type?: "Weather";
	    }
	  | {
	      phase: Phase6;
	      condition_type?: "Boss Phase";
	    };
	/**
	 * If set, the ability's casting state must match this checkbox.
	 */
	export type Casting5 = boolean;
	export type DuringDaytime6 = boolean;
	export type InCombat5 = boolean;
	export type Timestamp8 = string;
	export type Insight19 = string;
	/**
	 * How much the 'Minutes Since Timestamp' should be adjusted (up or down) for each point invested in the Insight.
	 */
	export type ChangePerPoint38 = number;
	/**
	 * If greater than 0, then this many minutes will have passed since the timestamp was set. If less than 0, the timestamp will be this many minutes from now.
	 */
	export type MinutesSinceTimestamp5 = number;
	export type ActiveMoon6 = string;
	export type QuestStatus8 = "Complete" | "Started" | "Not Started";
	/**
	 * The quest whose status we are querying.
	 */
	export type QuestToCheck8 = string;
	export type Following14 = boolean;
	export type Buddy11 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip135 = boolean;
	export type EnglishText135 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText99 = string;
	export type Insight20 = string;
	export type Quantity123 = number;
	export type Evaluation11 = "==" | "!=" | "<" | "<=" | ">" | ">=";
	export type Min74 = number;
	export type Max74 = number;
	export type Quantity124 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll89 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants76 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags76 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude81 = boolean;
	export type Quantity125 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll90 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants77 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags77 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude82 = boolean;
	/**
	 * If checked, the proximity check will fail on targets that are stealthed.
	 */
	export type IgnoreStealthedTargets5 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the items listed are equipped at the same time.
	 */
	export type RequireAll91 = boolean;
	/**
	 * If the player is wearing at least this many pieces, the condition will be met.
	 */
	export type NumberOfPiecesEquipped6 = number;
	export type EquipmentSet10 = string;
	/**
	 * If checked, this condition will only be considered met if the defined conditions are NOT met.
	 */
	export type Exclusive7 = boolean;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on yourself at the same time.
	 */
	export type RequireAll92 = boolean;
	/**
	 * Obsolete--delete.
	 */
	export type CheckSelf5 = boolean;
	/**
	 * If checked, only buffs created by you will be checked. Otherwise, all buffs will be checked.
	 */
	export type OwnBuffsOnly5 = boolean;
	export type Quantity126 = number;
	export type Quantity127 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll93 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants78 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags78 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude83 = boolean;
	export type Quantity128 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll94 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants79 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags79 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude84 = boolean;
	export type Min75 = number;
	export type Max75 = number;
	export type Quantity129 = number;
	/**
	 * Which entity's buffs to query.
	 */
	export type TargetEntity18 = "Self" | "Other" | "All Entities";
	export type Boss9 = string;
	export type Quantity130 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll95 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants80 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags80 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude85 = boolean;
	export type Quantity131 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll96 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants81 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags81 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude86 = boolean;
	export type Quantity132 = number;
	export type Phase6 = string;
	/**
	 * If true, then every condition must be met. If false, then only one of the conditions must be met.
	 */
	export type RequireAllConditions6 = boolean;
	export type Min76 = number;
	export type Max76 = number;
	/**
	 * If set, the boss will choose a random quest marker from the list, instead of the nearest one.
	 */
	export type ChooseRandom1 = boolean;
	/**
	 * The boss can randomly ignore the post-ability pause, and instead go right into the next ability.
	 */
	export type PostAbilityPauseIgnoreChance1 = number;
	export type MovementVisuals14 =
	  | {
	      animation?: HopAnimationName14;
	      style: "Hop";
	      babbler?: Babbler90;
	      hop_speed: HopVerticalSpeed14;
	      hop_anticipation?: HopAnticipationSeconds14;
	      hop_followthrough?: PostHopFollowthroughSeconds14;
	    }
	  | {
	      style: "Run";
	      babbler?: Babbler91;
	      run_vertical_speed: RunVerticalBounceSpeed14;
	      animation?: RunAnimationName14;
	    }
	  | {
	      style: "Crawl";
	      babbler?: Babbler92;
	      animation?: CrawlAnimationName14;
	    }
	  | {
	      animation?: Animation41;
	      style: "Fly";
	      z_baseline: BaselineAltitudePixels27;
	      babbler?: Babbler93;
	      z_sine?: AltitudeSineWave27;
	      flaps?: FlappingVerticalMovements27;
	    };
	/**
	 * Defaults to 'hop' but can be overridden.
	 */
	export type HopAnimationName14 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler90 = string;
	/**
	 * As a percentage of base gravity. This is fairly sensitive.
	 */
	export type HopVerticalSpeed14 = number;
	/**
	 * How long to hold before rising off the ground, to make room for a pre-hop animation.
	 */
	export type HopAnticipationSeconds14 = number;
	/**
	 * How long to hold after landing on the ground from a hop, to make room for animations.
	 */
	export type PostHopFollowthroughSeconds14 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler91 = string;
	/**
	 * How fast the character should pop up off the ground with each leg movement. As a percentage of base gravity. This is fairly sensitive.
	 */
	export type RunVerticalBounceSpeed14 = number;
	/**
	 * Defaults to 'run' but can be overridden.
	 */
	export type RunAnimationName14 = string;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler92 = string;
	/**
	 * Defaults to 'crawl' but can be overridden.
	 */
	export type CrawlAnimationName14 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation41 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels27 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler93 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed33 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude30 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds27 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds27 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance27 = number;
	/**
	 * How the actor animates while not actively moving.
	 */
	export type StationaryVisuals13 =
	  | {
	      style?: "Stand";
	      babbler?: Babbler94;
	      animation?: Animation42;
	    }
	  | {
	      animation?: Animation43;
	      style: "Fly";
	      z_baseline: BaselineAltitudePixels28;
	      babbler?: Babbler95;
	      z_sine?: AltitudeSineWave28;
	      flaps?: FlappingVerticalMovements28;
	    };
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler94 = string;
	/**
	 * Defaults to 'idle.
	 */
	export type Animation42 = string;
	/**
	 * Defaults to 'fly' but can be overridden.
	 */
	export type Animation43 = string;
	/**
	 * How high off the ground it should fly by default.
	 */
	export type BaselineAltitudePixels28 = number;
	/**
	 * This world element can passively play a continuously looping sound. Only Earparty sounds marked as 'looping' are eligible for this field.
	 */
	export type Babbler95 = string;
	/**
	 * How fast the sine wave should move through its peaks and valleys.
	 */
	export type Speed34 = number;
	/**
	 * How high/low the the sine wave goes (in pixels). The higher this number, the farther it will move up and down.
	 */
	export type Amplitude31 = number;
	/**
	 * How many seconds it takes for the creature to reach the distance of this flap.
	 */
	export type ImpulseDurationSeconds28 = number;
	/**
	 * How many seconds after the distance is reached for the creature to recover to its normal flight.
	 */
	export type RecoveryDurationSeconds28 = number;
	/**
	 * Flapping will move the creature vertically.
	 */
	export type VerticalDistance28 = number;
	/**
	 * Relative to the global movement speed.
	 */
	export type MovementSpeed14 = number;
	export type MinSeconds8 = number;
	export type MaxSeconds8 = number;
	/**
	 * The weight choosing this followup ability relative to the other followup abilities in this list.
	 */
	export type Weight8 = number;
	export type Ability12 = string;
	/**
	 * If set, the boss will always cast this ability instantly after finishing the prior ability, ignoring normal behavioral cooldowns and range requirements.
	 */
	export type Instant1 = boolean;
	/**
	 * The boss can add some randomness to the direction of this ability's cast (in degrees).
	 */
	export type DirectionRandomness3 = number;
	export type DescriptionInternal1 = string;
	export type Resistance = number;
	export type DamageType3 = string;
	/**
	 * Name of this damage profile. For internal use.
	 */
	export type Name60 = string;
	/**
	 * Requires 9 subimages, going from farthest back slope to the peak (with 1, 2, and 3 fillers) and then the front slope.
	 */
	export type RoofSprite = string;
	export type VerticalFiller = string;
	export type CenterPeak = string;
	export type BackSlope = string;
	export type FrontSlope = string;
	export type BackEdge = string;
	export type FrontEdge = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip136 = boolean;
	export type EnglishText136 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText100 = string;
	/**
	 * The minimum 'Effort' for items to be considered of this quality.
	 */
	export type Effort = number;
	export type Red51 = number;
	export type Blue51 = number;
	export type Green51 = number;
	export type Red52 = number;
	export type Blue52 = number;
	export type Green52 = number;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip137 = boolean;
	export type EnglishText137 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText101 = string;
	/**
	 * The object's string ID in the Game Maker project.
	 */
	export type Name62 = string;
	/**
	 * For developer use.
	 */
	export type VideoName = string;
	/**
	 * The path to the video in the Game Maker project's included files.
	 */
	export type VideoFilePath = string;
	/**
	 * Make this cutscene quieter or louder.
	 */
	export type AudioGainModifier = number;
	export type TimestampSeconds = number;
	export type Red53 = number;
	export type Blue53 = number;
	export type Green53 = number;
	export type ProgressBarAlpha = number;
	export type Red54 = number;
	export type Blue54 = number;
	export type Green54 = number;
	export type ProgressBarBackgroundAlpha = number;
	export type ProgressBarHeightPixels = number;
	export type Red55 = number;
	export type Blue55 = number;
	export type Green55 = number;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip138 = boolean;
	export type EnglishText138 = string;
	export type UIIcon30 = string;
	/**
	 * The object that members of this species will use.
	 */
	export type Object7 = string;
	export type Width9 = number;
	export type Height9 = number;
	export type WorldSprite23 = string;
	export type Red56 = number;
	export type Blue56 = number;
	export type Green56 = number;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip139 = boolean;
	export type EnglishText139 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText102 = string;
	export type Min77 = number;
	export type Max77 = number;
	/**
	 * What this ability is called.
	 */
	export type Name64 = string;
	export type Type4 = "Damage" | "Stacks";
	/**
	 * Which buff to use for the hotbar display.
	 */
	export type Buff4 = string;
	/**
	 * The number will be multiplied against this number when displayed.
	 */
	export type Multiplier = number;
	export type Min78 = number;
	export type Max78 = number;
	/**
	 * This ability can automatically jump aim direction after each tick by a certain amount.
	 */
	export type DirectionJumpPerTick = number;
	/**
	 * While channeling, you can constrain how much the player can move this target reticle. This is relative to the game's base move speed.
	 */
	export type PlayerTargetingGroundSpeedLimit = number;
	export type TickTimings =
	  | {
	      style: "Automatic";
	      duration: ChannelDuration;
	      num_ticks: NumberOfTicks;
	    }
	  | {
	      style: "Manual";
	      tick_times: TickTimes;
	    };
	/**
	 * The number of seconds the ability will channel for.
	 */
	export type ChannelDuration = number;
	/**
	 * The number of times the channel will perform its actions It always performs at the start and end of the channel.
	 */
	export type NumberOfTicks = number;
	export type TickTime = number;
	/**
	 * This ability can automatically smoothly change aim direction over the course of the channel.
	 */
	export type DirectionChangeDuringChannel = number;
	/**
	 * The spine animation to play while channeling.
	 */
	export type ChannelingAnimation = string;
	/**
	 * How the channeling animation will be played.
	 */
	export type AnimationStyle = "Loop" | "Tick" | "Stretch";
	export type Min79 = number;
	export type Max79 = number;
	/**
	 * How fast the targeting position will move towards the target, relative to the game's base move speed.
	 */
	export type ConstantGroundSpeed = number;
	/**
	 * If true, the player or creature can themselves change the targeting position of the ability while it is channeling.
	 */
	export type PlayerReTargetingDuringChannel = boolean;
	/**
	 * For previewing the ability in the Game Changer.
	 */
	export type PreviewSprite = string;
	/**
	 * If checked, the caster will finish casting this ability before dying, even if it has reached zero health. Useful for on-death abilities.
	 */
	export type PostponesDeath = boolean;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip140 = boolean;
	export type EnglishText140 = string;
	export type UsableInCombat = boolean;
	export type UIIcon31 = string;
	export type MaxCharges = number;
	/**
	 * How many seconds it takes for each charge to come back.
	 */
	export type RechargeSeconds = number;
	export type ModifierType2 = "Add" | "Multiply";
	export type Stat6 = string;
	export type Stacks92 = number;
	export type Buff5 = string;
	export type Condition9 =
	  | {
	      daytime: DuringDaytime7;
	      condition_type?: "Daylight";
	    }
	  | {
	      condition_type?: "Moon";
	      moon: ActiveMoon7;
	    }
	  | {
	      quest_status: QuestStatus9;
	      quest: QuestToCheck9;
	      condition_type?: "Quest";
	    }
	  | {
	      condition_type?: "Artisan Following";
	      following: Following15;
	      artisan: Buddy12;
	    }
	  | {
	      unlock_text?: InsightTooltip7;
	      prerequisite: Insight21;
	      condition_type?: "Insight";
	    };
	export type DuringDaytime7 = boolean;
	export type ActiveMoon7 = string;
	export type QuestStatus9 = "Complete" | "Started" | "Not Started";
	/**
	 * The quest whose status we are querying.
	 */
	export type QuestToCheck9 = string;
	export type Following15 = boolean;
	export type Buddy12 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip141 = boolean;
	export type EnglishText141 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText103 = string;
	export type Insight21 = string;
	export type RequireAllConditions7 = boolean;
	/**
	 * If the conditions are met at the start of the cast, the telegraph scale will be multiplied by this amount.
	 */
	export type Multiplier1 = number;
	export type JukeChargesRequired = number;
	/**
	 * If true, this ability can be cast while the caster is being moved by an external force.
	 */
	export type UsableDuringForcedMovement = boolean;
	export type CooldownSeconds1 = number;
	/**
	 * At what point in the cast the cooldown will trigger.
	 */
	export type CooldownTriggerPercentage = number;
	export type ModifierType3 = "Add" | "Multiply";
	export type Stat7 = string;
	/**
	 * If set, this will force-draw the ability's telegraph as either helpful or harmful.
	 */
	export type TelegraphDrawsAsHarmful = boolean;
	export type Start4 = number;
	export type End4 = number;
	export type Start5 = number;
	export type End5 = number;
	export type AnimationName2 = string;
	/**
	 * Whether this ability stops other abilities' casting when it is used. If false, this ability must be instant-cast with no animation.
	 */
	export type StopsOtherCasts = boolean;
	export type Quantity133 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll97 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants82 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags82 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude87 = boolean;
	export type Quantity134 = number;
	/**
	 * If checked, this condition will only be met if ALL of the buffs listed are present on the target at the same time.
	 */
	export type RequireAll98 = boolean;
	/**
	 * If set, only 'entities marked as 'Combatants' will pass the filter. These are entites that can be engaged in combat, like creatures, bosses, or the player.
	 */
	export type Combatants83 = boolean;
	/**
	 * If any of the items are tags, you can require that the targeted item have every tag in the list.
	 */
	export type RequireAllTags83 = boolean;
	/**
	 * If true, world elements that match this filter will *not* be targeted.
	 */
	export type Exclude88 = boolean;
	export type Min80 = number;
	export type Max80 = number;
	/**
	 * If true, the player only needs to aim directionally to find a single target while using a mouse, rather than mousing over the target.
	 */
	export type DirectionalTargetingForPlayer = boolean;
	export type CastDurationSeconds = number;
	/**
	 * This sound will play the instant the ability begins casting.
	 */
	export type StartCastSound = string;
	export type Effect1 =
	  | {
	      outcome?: "Damage";
	      damage_pool: DamagePool;
	      consume_stored_damage: ConsumeStoredDamage;
	      damage_profile: DamageProfile;
	    }
	  | {
	      outcome?: "Heal";
	      healing_percentage: HealingPercent;
	      healing_pool: HealingPool;
	      consume_stored_healing: ConsumeStoredDamage1;
	    }
	  | {
	      outcome?: "Buff";
	      buff: BuffToApply1;
	    }
	  | {
	      outcome?: "Expire";
	    }
	  | {
	      amount: AmountToChange;
	      outcome?: "Change Stacks";
	      stack_change_style: Style16;
	    }
	  | {
	      amount: AmountToSet;
	      outcome?: "Set Stacks";
	    }
	  | {
	      outcome?: "Remove Buff";
	      buff_to_remove: BuffToRemove;
	    }
	  | {
	      amount: AmountToChangeBy;
	      outcome?: "Change Timer";
	      timer_change_style: Style17;
	    }
	  | {
	      outcome?: "Set Timer";
	      new_timer: TimerSecondsToSet;
	    }
	  | {
	      burst_particle: Particle;
	      bursts: Bursts2;
	      outcome?: "Particle Burst";
	    }
	  | {
	      burst_particle_system: ParticleSystem8;
	      system_scale?: EmitterScale6;
	      outcome?: "Particle System Burst";
	    };
	/**
	 * Whether this damage is based on the total damage that has ever been stored into this buff, or whether to use the remaining damage after consumption.
	 */
	export type DamagePool = "Total" | "Remaining";
	/**
	 * Whenever a buff is applied, it can have damage and healing values stored in it.
	 */
	export type ConsumeStoredDamage = boolean;
	/**
	 * Multiplies against the healing pool and then heals the user for this amount.
	 */
	export type HealingPercent = number;
	/**
	 * Whether this damage is based on the total healing that has ever been stored into this buff, or whether to use the remaining healing after consumption.
	 */
	export type HealingPool = "Total" | "Remaining";
	/**
	 * Whenever a buff is applied, it can have damage and healing values stored in it.
	 */
	export type ConsumeStoredDamage1 = boolean;
	/**
	 * This new buff will be applied to the entity afflicted by the current buff.
	 */
	export type BuffToApply1 = string;
	export type AmountToChange = number;
	/**
	 * Whether change the existing stacks by adding or multiplying.
	 */
	export type Style16 = "Add" | "Multiply";
	export type AmountToSet = number;
	/**
	 * This will remove a buff if it is present.
	 */
	export type BuffToRemove = string;
	export type AmountToChangeBy = number;
	/**
	 * How to change the buff's timer.
	 */
	export type Style17 = "Add" | "Multiply";
	/**
	 * This will change the buff's remaining timer to this value.
	 */
	export type TimerSecondsToSet = number;
	/**
	 * Billboard bursts are good for shooting things up and out. Ground bursts are good for making smoke rings and such.
	 */
	export type Perspective2 = "Billboard" | "Isometric";
	/**
	 * If checked, the particles will spawn at z=0 instead of on a target or caster.
	 */
	export type SpawnOnGround2 = boolean;
	export type Min81 = number;
	export type Max81 = number;
	/**
	 * If set, the radius of the spawning will scale relative to the caster's 'scale' modifier. Useful for keeping particles lined up with telegraphs.
	 */
	export type ScaledSpawnRadius3 = boolean;
	/**
	 * If set, the particles will always move away from the center of the source.
	 */
	export type BlastOutward3 = boolean;
	export type Min82 = number;
	export type Max82 = number;
	export type Min83 = number;
	export type Max83 = number;
	/**
	 * If set, the spawn radius will be treated as grid spaces instead of pixels.
	 */
	export type SpawnRadiusAsGrid3 = boolean;
	/**
	 * If spawning on the ground, this will be height above ground. If spawning on targets, it will spawn at their height midpoints, plus this offset.
	 */
	export type ZOffset11 = number;
	export type ParticleSystem8 = string;
	/**
	 * If set, At 100% scale, the emitter will roughly match the hitbox of the world element that it is attached to. However, you can grow or shrink the emitter to make the particles more tightly packed or farther apart.
	 */
	export type EmitterScale6 = number;
	/**
	 * While the player has this buff, an additional sound can be added in to the player's swing sound.
	 */
	export type SwingSoundOverlay = string;
	/**
	 * When this buff gets applied where there is an existing buff, and either we are at the maximum instances or we are adding stacks, what happens to the timer of the existing buff?
	 */
	export type TimerRefreshBehavior =
	  | {
	      style?: "Extend";
	      seconds: Seconds5;
	      extension_max?: ExtensionMaxDuration;
	    }
	  | {
	      style?: "Refresh";
	    }
	  | {
	      style?: "None";
	    };
	/**
	 * Each time this buff is reapplied, its timer will be extended by this many seconds.
	 */
	export type Seconds5 = number;
	/**
	 * How many seconds the buff can be extended to. Can go beyond the baseline duration.
	 */
	export type ExtensionMaxDuration = number;
	export type ExpirationSound = string;
	/**
	 * 0% is the foot of the entity, 100% is the very top of its hitbox.
	 */
	export type VerticalPosition = number;
	export type SpineSprite = string;
	/**
	 * Positive goes up, negative goes down. You can move the sprite up or down relative to its anchor by a fixed number of pixels.
	 */
	export type ZOffsetPixels = number;
	export type LoopingAnimationName = string;
	/**
	 * If set, an object will spawn that plays this sprite's spine animation when the buff is applied.
	 */
	export type ApplicationSpineSprite = string;
	export type CustomVFXObject = string;
	export type ExpiresUponDeath = boolean;
	/**
	 * How many independent applications of this buff can be present on an entity at one time. If unset, then there is no limit.
	 */
	export type MaximumInstances = number;
	export type MaximumStacks = number;
	/**
	 * When attempting to apply the buff to a target that already has the maximum instances of the buff, you can purge the oldest instance of the buff to apply a new instance.
	 */
	export type ReplaceOldest = boolean;
	/**
	 * If true, this buff will stun the target, rendering it unable to do anything for the duration.
	 */
	export type Stun1 = boolean;
	/**
	 * If true, this buff can stun all enemies, including bosses.
	 */
	export type BossStun = boolean;
	/**
	 * If true, negative buffs cannot be applied to a world element who has this buff.
	 */
	export type PreventsNegativeBuffs = boolean;
	export type Red57 = number;
	export type Blue57 = number;
	export type Green57 = number;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip142 = boolean;
	export type EnglishText142 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText104 = string;
	/**
	 * How much to modify the stat by.
	 */
	export type Amount2 = number;
	/**
	 * Whether this to boost the main stat by adding this stat to it, or by multiplying this stat with it.
	 */
	export type ModifierStyle1 = "Add" | "Multiply";
	/**
	 * If true, then the other stat will be mutliplied by the number of stacks before being applied.
	 */
	export type MultiplyByStacks = boolean;
	export type Stat8 = string;
	/**
	 * When pulling the Other Stat, whether we should use the stats of the entity that sent the buff, or the entity that received the buff.
	 */
	export type StatSource = "Sender" | "Receiver";
	/**
	 * Whether this buff changes this stat additively or multiplicatively.
	 */
	export type ModifierStyle2 = "Add" | "Multiply";
	/**
	 * If true, then the stat bonus will be mutliplied by the number of stacks.
	 */
	export type MultiplyByStacks1 = boolean;
	export type Stat9 = string;
	export type DurationSeconds1 = number;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip143 = boolean;
	export type EnglishText143 = string;
	/**
	 * Explain this text to help with localization and development.
	 */
	export type TranslatorHelperText105 = string;
	export type Positive = boolean;
	export type UIIcon32 = string;
	export type Red58 = number;
	export type Blue58 = number;
	export type Green58 = number;
	/**
	 * The gap in time between emitting particles. If set to 0, it will emit particles every frame (but at a performance cost.
	 */
	export type EmitIntervalSeconds1 = number;
	export type Min84 = number;
	export type Max84 = number;
	/**
	 * At 100% scale, the emitter will roughly match the hitbox of the world element that it is attached to. However, you can grow or shrink the emitter to make the particles more tightly packed or farther apart.
	 */
	export type EmitterScale7 = number;
	/**
	 * If set, the particles will use the world element as an anchor point, so they will no longer be 'left behind' if the world element moves.
	 */
	export type Local1 = boolean;
	/**
	 * If set, the particles will always move away from the center of the emitter.
	 */
	export type BlastOutward4 = boolean;
	export type Type5 = string;
	/**
	 * If checked, this text will not be exported for localization.
	 */
	export type Skip144 = boolean;
	export type EnglishText144 = string;
	export type Red59 = number;
	export type Blue59 = number;
	export type Green59 = number;
	/**
	 * If set, the buff will show the amount of damage stored in it instead of the number of stacks.
	 */
	export type ShowDamageInsteadOfStacks = boolean;
	export type ApplicationSound = string;
	export type ReapplicationSound = string;
	/**
	 * If set, this buff will only show the text description and won't show any other information.
	 */
	export type OnlyShowDescription = boolean;
	export type ParticleSystem10 = string;
	/**
	 * If set, the particles will use the world element as an anchor point, so they will no longer be 'left behind' if the world element moves.
	 */
	export type Local2 = boolean;
	/**
	 * The emitter will normally constantly emit as defined. Alternatively, you can have it burst at timed intervals by setting this value.
	 */
	export type BurstIntervalSeconds = number;
	/**
	 * If set, At 100% scale, the emitter will roughly match the hitbox of the world element that it is attached to. However, you can grow or shrink the emitter to make the particles more tightly packed or farther apart.
	 */
	export type EmitterScale8 = number;
	export type Red60 = number;
	export type Blue60 = number;
	export type Green60 = number;
	export type Icon11 = string;
	/**
	 * The order in which this thing should appear in the crafting menu.
	 */
	export type Order6 = number;
	export type Name66 = string;
	export type Red61 = number;
	export type Blue61 = number;
	export type Green61 = number;
	
	export interface Schemas {
	  light_emitter: LightEmitter;
	  impassable_tile: ImpassableTile;
	  garden_bed: GardenBed;
	  cl2_decor: Decor;
	  cl2_pillar: BuildingPillar;
	  cl2_door: BuildingDoor;
	  cl2_wall: BuildingWall;
	  cl2_station: CraftingStation;
	  cl2_nest: PetNest;
	  cl2_fence: Fence;
	  resource: Resource;
	  cl2_creature: Creature;
	  cl2_boss: Boss3;
	  cl2_creature_family: CreatureFamily;
	  cl2_mastery: PetMastery;
	  cl2_item_component: Component;
	  artisan: Buddy3;
	  cl2_pet_egg: PetEgg;
	  cl2_key_item: KeyItem;
	  cl2_pet: Pet3;
	  seed_pack: SeedPack;
	  cl2_armor: Armor;
	  cl2_trinket: Trinket;
	  cl2_wieldable: Wieldable;
	  cl2_consumable: Consumable;
	  cl2_env_item: EnvironmentalObject;
	  cl2_schematic: Schematic;
	  cl2_player: Player;
	  cl2_juicebox: Juicebox;
	  cl2_chest: Chest;
	  cl2_npc: Character1;
	  cl2_item_tag: ItemTag;
	  cl2_quest_marker: QuestMarker;
	  research_node: Insight12;
	  cl2_quest: Quest;
	  gms_sprite: Sprite4;
	  cl2_ability_action_groups: ActionGroups;
	  cl2_reactions: Reactions;
	  cl2_telegraph: Telegraph;
	  earparty_sound: EarpartySound;
	  cl2_storyline: Storyline1;
	  floor_tile: Floor1;
	  cl2_fishing: Fishing;
	  dock_tile: Dock1;
	  cl2_moon: Moon;
	  terrain_tile: Terrain1;
	  cl2_immunities: Immunities;
	  cl2_area: Area4;
	  weather: WeatherEffect;
	  cl2_boss_dialogue: BossDialogueSequence2;
	  cl2_boss_gate: BossGate;
	  cl2_progression_priors: ProgressionPriors;
	  cl2_shadow: Shadow;
	  cl2_wip_item: UnimplementedItem;
	  cl2_damage_type: DamageType1;
	  cl2_timestamp: Timestamp7;
	  cl2_infusion: Infusion2;
	  cl2_buff_type: BuffType;
	  earparty_group: EarpartyGroup1;
	  cl2_artisan_glads: Comfort2;
	  cl2_datafield: Datafield5;
	  cl2_music: Music4;
	  cl2_game_balance: GameBalance;
	  cl2_editor_category: EditorCategory1;
	  cl2_outpost: Scene;
	  cl2_stats: Stat4;
	  cl2_damage_profile: DamageProfile1;
	  cl2_particle_type: Particle;
	  cl2_camera_anchor: CameraAnchor;
	  cl2_hitbox: Hitbox;
	  cl2_animstate: AnimationState;
	  gms_particle_asset: ParticleSystem7;
	  cl2_game_mode: GameMode;
	  cl2_emoji: Emoji11;
	  cl2_quest_moment_requirement: MomentRequirements;
	  cl2_quest_requirement: Requirements9;
	  cl2_chat: Chat;
	  cl2_colorgrade_profile: ColorGrading1;
	  cl2_entity_states: EntityStates;
	  cl2_equipment_set: EquipmentSet9;
	  cl2_credits: Credits;
	  cl2_sub_damage_profile: DamageProfile;
	  schema2: Schema;
	  cl2_boss_phase: BossPhase1;
	  gc_wip: WIP;
	  cl2_resistance_profile: ResistanceProfile3;
	  cl2_roof: BuildingRoof;
	  cl2_item_quality: ItemQuality;
	  gms_object: Object6;
	  video: Video;
	  cl2_npc_species: CharacterSpecies;
	  cl2_ability: Ability13;
	  cl2_buff: Buff6;
	  recipe_category: RecipeCategory1;
	}
	export interface LightEmitter {
	  alpha: Brightness;
	  grid_range: TileRadius;
	  datafield_evaluation?: DatafieldEvaluation;
	  sine_waves?: SineWaves;
	  color: Color;
	}
	/**
	 * Only display this light emitter if a data field on this object matches a criteria.
	 */
	export interface DatafieldEvaluation {
	  comparison: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value0: string;
	  value1: number;
	}
	/**
	 * You can add sine waves to make the light emitter flicker or fade in and out.
	 */
	export interface SineWaves {
	  [k: string]: {
	    order: number;
	    element: SineWave;
	  };
	}
	/**
	 * This will produce a fluctuating number that will be added to its specified property.
	 */
	export interface SineWave {
	  speed: Speed;
	  amplitude: Amplitude;
	  affects: Affects;
	}
	/**
	 * Because lighting colors add together when blended, bear in mind that using partial RGB values (e.g. 100 instead of 255) will end up stacking if these lights are placed in proximity to one another. So two orange lights will create yellow in the intermediate space between them.
	 */
	export interface Color {
	  r: Red;
	  b: Blue;
	  g: Green;
	}
	export interface ImpassableTile {
	  flippable: Flippable;
	  uicon: Icon;
	  map_color: MapColor;
	  wip?: WIP;
	  footstep_sound: FootstepSound;
	  undersprite?: UnderSprite;
	  placement_sound?: PlacementSound;
	  dapples?: SunlightDappling;
	  shore_interaction?: WaterInteraction;
	  name: Name;
	  editor_group?: EditorGroup;
	  sprite: MainSprite;
	}
	/**
	 * The color to draw this tile on the map.
	 */
	export interface MapColor {
	  r: Red1;
	  b: Blue1;
	  g: Green1;
	}
	/**
	 * Here you can indicate aspects of this element that should be considered a 'work in progress.' This means that it has elements that are either unfinished or need to be reworked.
	 */
	export interface WIP {
	  notes?: Notes;
	  staging?: Staging;
	}
	/**
	 * Developers can leave notes on this mote to indicate to what is left to do to finish this mote.
	 */
	export interface Notes {
	  [k: string]: {
	    order: number;
	    element: {
	      timestamp: number;
	      text: string;
	      author: string;
	    };
	  };
	}
	export interface SunlightDappling {
	  dapple_chance: SpawnChance;
	  dapple_colors: Colors;
	}
	/**
	 * The color to use for the sunlight dapples.
	 */
	export interface Colors {
	  [k: string]: {
	    order: number;
	    element: {
	      r: Red2;
	      b: Blue2;
	      g: Green2;
	    };
	  };
	}
	/**
	 * If set, this tile will be allowed to touch water.
	 */
	export interface WaterInteraction {
	  shelf_sprite?: ShelfUnderwaterSprite;
	  shore_sprite: ShorelineUnderwaterSprite;
	}
	export interface Name {
	  skip?: Skip;
	  text: EnglishText;
	  description?: TranslatorHelperText;
	}
	export interface GardenBed {
	  flippable: Flippable1;
	  uicon: Icon1;
	  map_color: MapColor1;
	  wip?: WIP;
	  footstep_sound: FootstepSound1;
	  undersprite?: UnderSprite1;
	  placement_sound?: PlacementSound1;
	  dapples?: SunlightDappling1;
	  name: Name1;
	  recipe?: Recipe;
	  editor_group?: EditorGroup1;
	  planted_sprites: PlantedSprites;
	  sprite: MainSprite1;
	  description?: Description;
	}
	/**
	 * The color to draw this tile on the map.
	 */
	export interface MapColor1 {
	  r: Red3;
	  b: Blue3;
	  g: Green3;
	}
	export interface SunlightDappling1 {
	  dapple_chance: SpawnChance1;
	  dapple_colors: Colors1;
	}
	/**
	 * The color to use for the sunlight dapples.
	 */
	export interface Colors1 {
	  [k: string]: {
	    order: number;
	    element: {
	      r: Red4;
	      b: Blue4;
	      g: Green4;
	    };
	  };
	}
	export interface Name1 {
	  skip?: Skip1;
	  text: EnglishText1;
	  description?: TranslatorHelperText1;
	}
	export interface Recipe {
	  artisans?: ArtisansRequired;
	  station: Station;
	  badge_output_modifiers?: OutputModifiedByResearch;
	  badge_cost_modifiers?: CostModifiedByResearch;
	  source?: UnlockedBy;
	  components: Ingredients;
	  effort_modifier?: EffortModifier;
	  output_quantity?: OutputQuantity;
	}
	export interface ArtisansRequired {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface OutputModifiedByResearch {
	  [k: string]: {
	    order: number;
	    element: {
	      style: Style;
	      value: ChangePerPoint;
	      badge_id: ResearchNode;
	    };
	  };
	}
	export interface CostModifiedByResearch {
	  [k: string]: {
	    order: number;
	    element: {
	      value: ChangePerPoint1;
	      badge_id: ResearchNode1;
	    };
	  };
	}
	export interface Ingredients {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	/**
	 * Each sprite in this list will be for a larger plot. E.g. the first entry will be 1x1, the second entry will be 2x2, etc...
	 */
	export interface PlantedSprites {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Description {
	  skip?: Skip2;
	  text: EnglishText2;
	  description?: TranslatorHelperText2;
	}
	export interface Decor {
	  underfoot?: Underfoot;
	  hitbox: Hitbox;
	  hide_under_roof?: HideUnderRoof;
	  using_lighting: UseLighting;
	  light_emitter?: LightEmitter;
	  priors?: ProgressionPriors;
	  object?: Object;
	  wip?: WIP;
	  name: Name2;
	  recipe?: Recipe1;
	  states?: EntityStates;
	  editor_group?: EditorGroup2;
	  ignore_in_progression_map?: IgnoreInProgressionMap;
	  shadow?: Shadow;
	  sprite: WorldSprite;
	  grid_snapping?: GridSnapping;
	  description: Description1;
	  flippable?: Flippable2;
	  uicon: UIIcon;
	  tags: Categories;
	  babbler?: Babbler1;
	  particle_emitters?: ParticleEmitters;
	  placement_sound: PlacementSound2;
	  buildmode_flippable?: BuildModeFlippable;
	  variant_parent?: VariantParent;
	  requires_floor: RequiresFloor;
	}
	export interface Hitbox {
	  size: Size;
	  solid: Solid;
	  mask: Type;
	}
	export interface Size {
	  width: Width;
	  height: Height;
	}
	/**
	 * When viewing the progression tree, are there certain items you would consider to be prerequisites to this item?
	 */
	export interface ProgressionPriors {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Name2 {
	  skip?: Skip3;
	  text: EnglishText3;
	  description?: TranslatorHelperText3;
	}
	export interface Recipe1 {
	  artisans?: ArtisansRequired1;
	  station: Station1;
	  badge_output_modifiers?: OutputModifiedByResearch1;
	  badge_cost_modifiers?: CostModifiedByResearch1;
	  source?: UnlockedBy1;
	  components: Ingredients1;
	  effort_modifier?: EffortModifier1;
	  output_quantity?: OutputQuantity1;
	}
	export interface ArtisansRequired1 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface OutputModifiedByResearch1 {
	  [k: string]: {
	    order: number;
	    element: {
	      style: Style1;
	      value: ChangePerPoint2;
	      badge_id: ResearchNode2;
	    };
	  };
	}
	export interface CostModifiedByResearch1 {
	  [k: string]: {
	    order: number;
	    element: {
	      value: ChangePerPoint3;
	      badge_id: ResearchNode3;
	    };
	  };
	}
	export interface Ingredients1 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	/**
	 * Define the animations and logic for how this entity enters and exits various states. These states can be interacted with via the Reactions system.
	 */
	export interface EntityStates {
	  states: StateDefinitions;
	  priorities?: StatePriorities;
	}
	/**
	 * The first state in this list will be the Default State.
	 */
	export interface StateDefinitions {
	  [k: string]: {
	    order: number;
	    element: State;
	  };
	}
	/**
	 * The first state in the list will be the starting state when this first spawns.
	 */
	export interface State {
	  duration: Duration;
	  next_state?: NextStates;
	  animations?: Animations;
	  babbler_override?: BabblerOverride;
	  name: StateNameInternal;
	}
	export interface TimeSeconds {
	  value0?: Min;
	  value1?: Max;
	}
	export interface NextStates {
	  [k: string]: {
	    order: number;
	    element: NextStatePriorityGroup;
	  };
	}
	export interface NextStatePriorityGroup {
	  conditions?: PriorityGroupConditions;
	  states: States;
	}
	/**
	 * If these conditions are met, then one of the states in this priority group will be chosen.
	 */
	export interface PriorityGroupConditions {
	  conditions: Conditions;
	  require_all_conditions: RequireAllConditions;
	}
	export interface Conditions {
	  [k: string]: {
	    order: number;
	    element: Condition;
	  };
	}
	/**
	 * Which abilities are we evaluating?
	 */
	export interface Abilities {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface Evaluation {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value0?: string;
	  value1?: number;
	}
	/**
	 * The 'minutes since timestamp' value can be modified up or down based on an Insight.
	 */
	export interface InsightModifier {
	  insight?: Insight;
	  amount?: ChangePerPoint4;
	}
	/**
	 * If set, this description will appear on the Research Node to explain what it is unlocking.
	 */
	export interface InsightTooltip {
	  skip?: Skip4;
	  text: EnglishText4;
	  description?: TranslatorHelperText4;
	}
	export interface NumberOfTargets {
	  quantity?: Quantity;
	  comparison?: Evaluation1;
	}
	export interface DistanceRequiredGridSpaces {
	  value0?: Min1;
	  value1?: Max1;
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface Targets {
	  [k: string]: {
	    order?: number;
	    element?: Filter;
	  };
	}
	export interface Filter {
	  buffs?: Buffs;
	  combatants_only?: Combatants;
	  require_all_tags?: RequireAllTags;
	  exclude?: Exclude;
	  datafield_evaluations?: DatafieldEvaluations;
	  items?: Items;
	  sub_filters?: SubFilters;
	}
	export interface Buffs {
	  stacks?: Stacks;
	  buffs: Buffs1;
	  require_all: RequireAll;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity1;
	}
	export interface Buffs1 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Further refine the original filter, such as by excluding some subset of the orignal items.
	 */
	export interface SubFilters {
	  [k: string]: {
	    order?: number;
	    element?: Filter1;
	  };
	}
	export interface Filter1 {
	  buffs?: Buffs2;
	  combatants_only?: Combatants1;
	  require_all_tags?: RequireAllTags1;
	  exclude?: Exclude1;
	  datafield_evaluations?: DatafieldEvaluations1;
	  items?: Items1;
	}
	export interface Buffs2 {
	  stacks?: Stacks1;
	  buffs: Buffs3;
	  require_all: RequireAll1;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks1 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity2;
	}
	export interface Buffs3 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations1 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items1 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface HealthEvaluation {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  hp_percentage?: number;
	}
	export interface Items2 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The condition will be met if the player is wielding any of these items.
	 */
	export interface Items3 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface Buffs4 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, then targets other than yourself will be evaluated.
	 */
	export interface NumberOfTargets1 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity3;
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface BuffTargetFilter {
	  [k: string]: {
	    order?: number;
	    element?: Filter2;
	  };
	}
	export interface Filter2 {
	  buffs?: Buffs5;
	  combatants_only?: Combatants2;
	  require_all_tags?: RequireAllTags2;
	  exclude?: Exclude2;
	  datafield_evaluations?: DatafieldEvaluations2;
	  items?: Items4;
	  sub_filters?: SubFilters1;
	}
	export interface Buffs5 {
	  stacks?: Stacks2;
	  buffs: Buffs6;
	  require_all: RequireAll4;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks2 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity4;
	}
	export interface Buffs6 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations2 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items4 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Further refine the original filter, such as by excluding some subset of the orignal items.
	 */
	export interface SubFilters1 {
	  [k: string]: {
	    order?: number;
	    element?: Filter3;
	  };
	}
	export interface Filter3 {
	  buffs?: Buffs7;
	  combatants_only?: Combatants3;
	  require_all_tags?: RequireAllTags3;
	  exclude?: Exclude3;
	  datafield_evaluations?: DatafieldEvaluations3;
	  items?: Items5;
	}
	export interface Buffs7 {
	  stacks?: Stacks3;
	  buffs: Buffs8;
	  require_all: RequireAll5;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks3 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity5;
	}
	export interface Buffs8 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations3 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items5 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * How close or far (in grid spaces) the entities must be to be considered for this condition.
	 */
	export interface BuffTargetRange {
	  value0?: Min2;
	  value1?: Max2;
	}
	export interface Stacks4 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity6;
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface SummonedEntitiesFilter {
	  [k: string]: {
	    order?: number;
	    element?: Filter4;
	  };
	}
	export interface Filter4 {
	  buffs?: Buffs9;
	  combatants_only?: Combatants4;
	  require_all_tags?: RequireAllTags4;
	  exclude?: Exclude4;
	  datafield_evaluations?: DatafieldEvaluations4;
	  items?: Items6;
	  sub_filters?: SubFilters2;
	}
	export interface Buffs9 {
	  stacks?: Stacks5;
	  buffs: Buffs10;
	  require_all: RequireAll6;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks5 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity7;
	}
	export interface Buffs10 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations4 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items6 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Further refine the original filter, such as by excluding some subset of the orignal items.
	 */
	export interface SubFilters2 {
	  [k: string]: {
	    order?: number;
	    element?: Filter5;
	  };
	}
	export interface Filter5 {
	  buffs?: Buffs11;
	  combatants_only?: Combatants5;
	  require_all_tags?: RequireAllTags5;
	  exclude?: Exclude5;
	  datafield_evaluations?: DatafieldEvaluations5;
	  items?: Items7;
	}
	export interface Buffs11 {
	  stacks?: Stacks6;
	  buffs: Buffs12;
	  require_all: RequireAll7;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks6 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity8;
	}
	export interface Buffs12 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations5 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items7 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface NumberSummoned {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity9;
	}
	/**
	 * The reactor must be in one of these areas for the reaction to occur.
	 */
	export interface Areas {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The reactor must be in one of these weather conditions for the reaction to occur.
	 */
	export interface Weather {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * One of these states will be chosen at random.
	 */
	export interface States {
	  [k: string]: {
	    order: number;
	    element: State1;
	  };
	}
	/**
	 * All of these animations will play. Unused tracks will have their animations cleared.
	 */
	export interface Animations {
	  [k: string]: {
	    order: number;
	    element: SpineAnimation;
	  };
	}
	export interface SpineAnimation {
	  randomized_start?: RandomizedStart;
	  looping: Looping;
	  speed?: Speed1;
	  animation_name: Name3;
	  track?: Track;
	}
	export interface Speed1 {
	  value0: Min3;
	  value1: Max3;
	}
	/**
	 * Allows for force-playing a certain babbler in this state, or playing no babbler at all in this state.
	 */
	export interface BabblerOverride {
	  babbler?: Babbler;
	  override: OverrideBabbler;
	}
	/**
	 * On first spawn and on state refresh, this priority list will be checked. The first priority group whose conditions are met will be chosen. If no conditions are met, the Default State will be used.
	 */
	export interface StatePriorities {
	  [k: string]: {
	    order: number;
	    element: StatePriorityGroup;
	  };
	}
	export interface StatePriorityGroup {
	  conditions?: PriorityGroupConditions1;
	  states: States1;
	  name: PriorityGroupNameInternal;
	}
	/**
	 * If these conditions are met, then one of the states in this priority group will be chosen.
	 */
	export interface PriorityGroupConditions1 {
	  conditions: Conditions1;
	  require_all_conditions: RequireAllConditions1;
	}
	export interface Conditions1 {
	  [k: string]: {
	    order: number;
	    element: Condition1;
	  };
	}
	/**
	 * Which abilities are we evaluating?
	 */
	export interface Abilities1 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface Evaluation2 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value0?: string;
	  value1?: number;
	}
	/**
	 * The 'minutes since timestamp' value can be modified up or down based on an Insight.
	 */
	export interface InsightModifier1 {
	  insight?: Insight2;
	  amount?: ChangePerPoint5;
	}
	/**
	 * If set, this description will appear on the Research Node to explain what it is unlocking.
	 */
	export interface InsightTooltip1 {
	  skip?: Skip5;
	  text: EnglishText5;
	  description?: TranslatorHelperText5;
	}
	export interface NumberOfTargets2 {
	  quantity?: Quantity10;
	  comparison?: Evaluation3;
	}
	export interface DistanceRequiredGridSpaces1 {
	  value0?: Min4;
	  value1?: Max4;
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface Targets1 {
	  [k: string]: {
	    order?: number;
	    element?: Filter6;
	  };
	}
	export interface Filter6 {
	  buffs?: Buffs13;
	  combatants_only?: Combatants6;
	  require_all_tags?: RequireAllTags6;
	  exclude?: Exclude6;
	  datafield_evaluations?: DatafieldEvaluations6;
	  items?: Items8;
	  sub_filters?: SubFilters3;
	}
	export interface Buffs13 {
	  stacks?: Stacks7;
	  buffs: Buffs14;
	  require_all: RequireAll8;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks7 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity11;
	}
	export interface Buffs14 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations6 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items8 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Further refine the original filter, such as by excluding some subset of the orignal items.
	 */
	export interface SubFilters3 {
	  [k: string]: {
	    order?: number;
	    element?: Filter7;
	  };
	}
	export interface Filter7 {
	  buffs?: Buffs15;
	  combatants_only?: Combatants7;
	  require_all_tags?: RequireAllTags7;
	  exclude?: Exclude7;
	  datafield_evaluations?: DatafieldEvaluations7;
	  items?: Items9;
	}
	export interface Buffs15 {
	  stacks?: Stacks8;
	  buffs: Buffs16;
	  require_all: RequireAll9;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks8 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity12;
	}
	export interface Buffs16 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations7 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items9 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface HealthEvaluation1 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  hp_percentage?: number;
	}
	export interface Items10 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The condition will be met if the player is wielding any of these items.
	 */
	export interface Items11 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface Buffs17 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, then targets other than yourself will be evaluated.
	 */
	export interface NumberOfTargets3 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity13;
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface BuffTargetFilter1 {
	  [k: string]: {
	    order?: number;
	    element?: Filter8;
	  };
	}
	export interface Filter8 {
	  buffs?: Buffs18;
	  combatants_only?: Combatants8;
	  require_all_tags?: RequireAllTags8;
	  exclude?: Exclude8;
	  datafield_evaluations?: DatafieldEvaluations8;
	  items?: Items12;
	  sub_filters?: SubFilters4;
	}
	export interface Buffs18 {
	  stacks?: Stacks9;
	  buffs: Buffs19;
	  require_all: RequireAll12;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks9 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity14;
	}
	export interface Buffs19 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations8 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items12 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Further refine the original filter, such as by excluding some subset of the orignal items.
	 */
	export interface SubFilters4 {
	  [k: string]: {
	    order?: number;
	    element?: Filter9;
	  };
	}
	export interface Filter9 {
	  buffs?: Buffs20;
	  combatants_only?: Combatants9;
	  require_all_tags?: RequireAllTags9;
	  exclude?: Exclude9;
	  datafield_evaluations?: DatafieldEvaluations9;
	  items?: Items13;
	}
	export interface Buffs20 {
	  stacks?: Stacks10;
	  buffs: Buffs21;
	  require_all: RequireAll13;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks10 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity15;
	}
	export interface Buffs21 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations9 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items13 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * How close or far (in grid spaces) the entities must be to be considered for this condition.
	 */
	export interface BuffTargetRange1 {
	  value0?: Min5;
	  value1?: Max5;
	}
	export interface Stacks11 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity16;
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface SummonedEntitiesFilter1 {
	  [k: string]: {
	    order?: number;
	    element?: Filter10;
	  };
	}
	export interface Filter10 {
	  buffs?: Buffs22;
	  combatants_only?: Combatants10;
	  require_all_tags?: RequireAllTags10;
	  exclude?: Exclude10;
	  datafield_evaluations?: DatafieldEvaluations10;
	  items?: Items14;
	  sub_filters?: SubFilters5;
	}
	export interface Buffs22 {
	  stacks?: Stacks12;
	  buffs: Buffs23;
	  require_all: RequireAll14;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks12 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity17;
	}
	export interface Buffs23 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations10 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items14 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Further refine the original filter, such as by excluding some subset of the orignal items.
	 */
	export interface SubFilters5 {
	  [k: string]: {
	    order?: number;
	    element?: Filter11;
	  };
	}
	export interface Filter11 {
	  buffs?: Buffs24;
	  combatants_only?: Combatants11;
	  require_all_tags?: RequireAllTags11;
	  exclude?: Exclude11;
	  datafield_evaluations?: DatafieldEvaluations11;
	  items?: Items15;
	}
	export interface Buffs24 {
	  stacks?: Stacks13;
	  buffs: Buffs25;
	  require_all: RequireAll15;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks13 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity18;
	}
	export interface Buffs25 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations11 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items15 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface NumberSummoned1 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity19;
	}
	/**
	 * The reactor must be in one of these areas for the reaction to occur.
	 */
	export interface Areas1 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The reactor must be in one of these weather conditions for the reaction to occur.
	 */
	export interface Weather1 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * One of these states will be chosen at random.
	 */
	export interface States1 {
	  [k: string]: {
	    order: number;
	    element: State2;
	  };
	}
	export interface Shadow {
	  sprite?: Sprite;
	  scale?: ScaleModifier;
	}
	export interface Description1 {
	  skip?: Skip6;
	  text: EnglishText6;
	  description?: TranslatorHelperText6;
	}
	export interface Categories {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface ParticleEmitters {
	  [k: string]: {
	    order: number;
	    element: ParticleEmitter;
	  };
	}
	export interface ParticleEmitter {
	  behind?: Behind;
	  states?: RequiredStates;
	  spine_bone?: SpineBone;
	  x_offset: XOffset;
	  emitter_scale?: EmitterScale;
	  y_offset: YOffset;
	  particle_system: ParticleSystem;
	}
	/**
	 * If set, the particle system will only emit if the object is in one of these states
	 */
	export interface RequiredStates {
	  [k: string]: {
	    order: number;
	    element: State3;
	  };
	}
	export interface BuildingPillar {
	  uicon: UIIcon1;
	  roof_vote: PreferredRoof;
	  pillar_distance: PillarSupportDistance;
	  wip?: WIP;
	  placement_sound: PlacementSound3;
	  name: Name4;
	  recipe?: Recipe2;
	  variant_parent?: VariantParent1;
	  editor_group?: EditorGroup3;
	  sprite: WorldSprite1;
	  description: Description2;
	}
	export interface Name4 {
	  skip?: Skip7;
	  text: EnglishText7;
	  description?: TranslatorHelperText7;
	}
	export interface Recipe2 {
	  artisans?: ArtisansRequired2;
	  station: Station2;
	  badge_output_modifiers?: OutputModifiedByResearch2;
	  badge_cost_modifiers?: CostModifiedByResearch2;
	  source?: UnlockedBy2;
	  components: Ingredients2;
	  effort_modifier?: EffortModifier2;
	  output_quantity?: OutputQuantity2;
	}
	export interface ArtisansRequired2 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface OutputModifiedByResearch2 {
	  [k: string]: {
	    order: number;
	    element: {
	      style: Style2;
	      value: ChangePerPoint6;
	      badge_id: ResearchNode4;
	    };
	  };
	}
	export interface CostModifiedByResearch2 {
	  [k: string]: {
	    order: number;
	    element: {
	      value: ChangePerPoint7;
	      badge_id: ResearchNode5;
	    };
	  };
	}
	export interface Ingredients2 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Description2 {
	  skip?: Skip8;
	  text: EnglishText8;
	  description?: TranslatorHelperText8;
	}
	export interface BuildingDoor {
	  uicon: UIIcon2;
	  closed_during_combat?: ClosedDuringCombat;
	  door_open_sound: DoorOpenSound;
	  door_close_sound: DoorCloseSound;
	  door_unlock_sound?: DoorUnlockSound;
	  door_close_distance?: CloseDistance;
	  roof_vote: PreferredRoof1;
	  wip?: WIP;
	  placement_sound: PlacementSound4;
	  name: Name5;
	  recipe?: Recipe3;
	  variant_parent?: VariantParent2;
	  editor_group?: EditorGroup4;
	  sprite: WorldSprite2;
	  description: Description3;
	}
	export interface Name5 {
	  skip?: Skip9;
	  text: EnglishText9;
	  description?: TranslatorHelperText9;
	}
	export interface Recipe3 {
	  artisans?: ArtisansRequired3;
	  station: Station3;
	  badge_output_modifiers?: OutputModifiedByResearch3;
	  badge_cost_modifiers?: CostModifiedByResearch3;
	  source?: UnlockedBy3;
	  components: Ingredients3;
	  effort_modifier?: EffortModifier3;
	  output_quantity?: OutputQuantity3;
	}
	export interface ArtisansRequired3 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface OutputModifiedByResearch3 {
	  [k: string]: {
	    order: number;
	    element: {
	      style: Style3;
	      value: ChangePerPoint8;
	      badge_id: ResearchNode6;
	    };
	  };
	}
	export interface CostModifiedByResearch3 {
	  [k: string]: {
	    order: number;
	    element: {
	      value: ChangePerPoint9;
	      badge_id: ResearchNode7;
	    };
	  };
	}
	export interface Ingredients3 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Description3 {
	  skip?: Skip10;
	  text: EnglishText10;
	  description?: TranslatorHelperText10;
	}
	export interface BuildingWall {
	  uicon: UIIcon3;
	  variant_parent?: VariantParent3;
	  editor_group?: EditorGroup5;
	  roof_vote: PreferredRoof2;
	  wip?: WIP;
	  sprite: WorldSprite3;
	  placement_sound: PlacementSound5;
	  description: Description4;
	  name: Name6;
	  recipe?: Recipe4;
	}
	export interface Description4 {
	  skip?: Skip11;
	  text: EnglishText11;
	  description?: TranslatorHelperText11;
	}
	export interface Name6 {
	  skip?: Skip12;
	  text: EnglishText12;
	  description?: TranslatorHelperText12;
	}
	export interface Recipe4 {
	  artisans?: ArtisansRequired4;
	  station: Station4;
	  badge_output_modifiers?: OutputModifiedByResearch4;
	  badge_cost_modifiers?: CostModifiedByResearch4;
	  source?: UnlockedBy4;
	  components: Ingredients4;
	  effort_modifier?: EffortModifier4;
	  output_quantity?: OutputQuantity4;
	}
	export interface ArtisansRequired4 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface OutputModifiedByResearch4 {
	  [k: string]: {
	    order: number;
	    element: {
	      style: Style4;
	      value: ChangePerPoint10;
	      badge_id: ResearchNode8;
	    };
	  };
	}
	export interface CostModifiedByResearch4 {
	  [k: string]: {
	    order: number;
	    element: {
	      value: ChangePerPoint11;
	      badge_id: ResearchNode9;
	    };
	  };
	}
	export interface Ingredients4 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface CraftingStation {
	  hitbox: Hitbox;
	  using_lighting: UseLighting1;
	  light_emitter?: LightEmitter;
	  object?: Object1;
	  wip?: WIP;
	  jingle_override?: JingleOverride;
	  name: Name7;
	  recipe?: Recipe5;
	  editor_group?: EditorGroup6;
	  shadow?: Shadow;
	  sprite: WorldSprite4;
	  description: Description5;
	  spine_idle?: SpineIdle;
	  flippable?: Flippable3;
	  uicon: UIIcon4;
	  babbler?: Babbler2;
	  particle_emitters?: ParticleEmitters1;
	  placement_sound: PlacementSound6;
	  buildmode_flippable?: BuildModeFlippable1;
	  requires_floor: RequiresFloor1;
	  station_open_sound?: AssemblyUIStartSound;
	  station_assembly_sounds?: AssemblySounds;
	  use_as_prior: CountAsProgressionRequirement;
	}
	export interface Name7 {
	  skip?: Skip13;
	  text: EnglishText13;
	  description?: TranslatorHelperText13;
	}
	export interface Recipe5 {
	  artisans?: ArtisansRequired5;
	  station: Station5;
	  badge_output_modifiers?: OutputModifiedByResearch5;
	  badge_cost_modifiers?: CostModifiedByResearch5;
	  source?: UnlockedBy5;
	  components: Ingredients5;
	  effort_modifier?: EffortModifier5;
	  output_quantity?: OutputQuantity5;
	}
	export interface ArtisansRequired5 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface OutputModifiedByResearch5 {
	  [k: string]: {
	    order: number;
	    element: {
	      style: Style5;
	      value: ChangePerPoint12;
	      badge_id: ResearchNode10;
	    };
	  };
	}
	export interface CostModifiedByResearch5 {
	  [k: string]: {
	    order: number;
	    element: {
	      value: ChangePerPoint13;
	      badge_id: ResearchNode11;
	    };
	  };
	}
	export interface Ingredients5 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Description5 {
	  skip?: Skip14;
	  text: EnglishText14;
	  description?: TranslatorHelperText14;
	}
	export interface ParticleEmitters1 {
	  [k: string]: {
	    order: number;
	    element: ParticleEmitter1;
	  };
	}
	export interface ParticleEmitter1 {
	  behind?: Behind1;
	  states?: RequiredStates1;
	  spine_bone?: SpineBone1;
	  x_offset: XOffset1;
	  emitter_scale?: EmitterScale1;
	  y_offset: YOffset1;
	  particle_system: ParticleSystem1;
	}
	/**
	 * If set, the particle system will only emit if the object is in one of these states
	 */
	export interface RequiredStates1 {
	  [k: string]: {
	    order: number;
	    element: State4;
	  };
	}
	/**
	 * Order them from least intense to most intense.
	 */
	export interface AssemblySounds {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface PetNest {
	  uicon: UIIcon5;
	  using_lighting: UseLighting2;
	  light_emitter?: LightEmitter;
	  priors?: ProgressionPriors;
	  wip?: WIP;
	  size: Size1;
	  name: Name8;
	  recipe?: Recipe6;
	  editor_group?: EditorGroup7;
	  sprite: WorldSprite5;
	  description?: Description6;
	}
	export interface Size1 {
	  width: Width1;
	  height: Height1;
	}
	export interface Name8 {
	  skip?: Skip15;
	  text: EnglishText15;
	  description?: TranslatorHelperText15;
	}
	export interface Recipe6 {
	  artisans?: ArtisansRequired6;
	  station: Station6;
	  badge_output_modifiers?: OutputModifiedByResearch6;
	  badge_cost_modifiers?: CostModifiedByResearch6;
	  source?: UnlockedBy6;
	  components: Ingredients6;
	  effort_modifier?: EffortModifier6;
	  output_quantity?: OutputQuantity6;
	}
	export interface ArtisansRequired6 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface OutputModifiedByResearch6 {
	  [k: string]: {
	    order: number;
	    element: {
	      style: Style6;
	      value: ChangePerPoint14;
	      badge_id: ResearchNode12;
	    };
	  };
	}
	export interface CostModifiedByResearch6 {
	  [k: string]: {
	    order: number;
	    element: {
	      value: ChangePerPoint15;
	      badge_id: ResearchNode13;
	    };
	  };
	}
	export interface Ingredients6 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Description6 {
	  skip?: Skip16;
	  text: EnglishText16;
	  description?: TranslatorHelperText16;
	}
	/**
	 * A dynamic fence that will automatically orient itself and display as posts or walls depending on its surroundings.
	 */
	export interface Fence {
	  uicon: UIIcon6;
	  using_lighting: UseLighting3;
	  requires_land?: RequiresLand;
	  light_emitter?: LightEmitter;
	  wip?: WIP;
	  height: HitboxHeight;
	  name: Name9;
	  recipe?: Recipe7;
	  editor_group?: EditorGroup8;
	  worldmap_tile_color?: WorldMapTileColor;
	  sprite: WorldSprite6;
	  data_fields?: DataFields;
	  description?: Description7;
	}
	export interface Name9 {
	  skip?: Skip17;
	  text: EnglishText17;
	  description?: TranslatorHelperText17;
	}
	export interface Recipe7 {
	  artisans?: ArtisansRequired7;
	  station: Station7;
	  badge_output_modifiers?: OutputModifiedByResearch7;
	  badge_cost_modifiers?: CostModifiedByResearch7;
	  source?: UnlockedBy7;
	  components: Ingredients7;
	  effort_modifier?: EffortModifier7;
	  output_quantity?: OutputQuantity7;
	}
	export interface ArtisansRequired7 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface OutputModifiedByResearch7 {
	  [k: string]: {
	    order: number;
	    element: {
	      style: Style7;
	      value: ChangePerPoint16;
	      badge_id: ResearchNode14;
	    };
	  };
	}
	export interface CostModifiedByResearch7 {
	  [k: string]: {
	    order: number;
	    element: {
	      value: ChangePerPoint17;
	      badge_id: ResearchNode15;
	    };
	  };
	}
	export interface Ingredients7 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	/**
	 * If set, this item will be drawn on the world map as a colored tile.
	 */
	export interface WorldMapTileColor {
	  r: Red5;
	  b: Blue5;
	  g: Green5;
	}
	/**
	 * Attaching data fields to this world element will make them readable by other game mechanics/elements. Can be used to store custom data on a world element.
	 */
	export interface DataFields {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Description7 {
	  skip?: Skip18;
	  text: EnglishText18;
	  description?: TranslatorHelperText18;
	}
	export interface Resource1 {
	  underfoot: Underfoot1;
	  hitbox: Hitbox;
	  hide_under_roof?: HideUnderRoof1;
	  using_lighting?: UseLighting4;
	  requires_land?: RequiresLand1;
	  light_emitter?: LightEmitter;
	  random_scaling: RandomScalingMinimum;
	  object: Object2;
	  priors?: ProgressionPriors;
	  wip?: WIP;
	  expiration_minutes?: DynamicExpirationMinutes;
	  name: Name10;
	  reactions?: Reactions;
	  worldmap_tile_color?: WorldMapTileColor1;
	  scale_modifier?: ScaleModifier1;
	  level_viewer_ignore?: IgnoreInLevelViewer;
	  editor_excluded?: EditorExcluded;
	  sprite: WorldSprite7;
	  description?: Description8;
	  flippable?: Flippable4;
	  uicon: UIIcon7;
	  respawn_multiplier?: RespawnTimeMultiplier;
	  water_layer?: WaterLayer;
	  can_reset?: CanReset;
	  celebrate_pickup?: CelebratePickup;
	  respawnable?: Respawnable;
	  effort_modifier?: EffortModifier8;
	  states?: EntityStates;
	  editor_group?: EditorGroup9;
	  relative_level?: RelativeLevel;
	  spine_skin?: SpineSkin;
	  shadow?: Shadow;
	  can_exist_on_floors?: CanExistOnFloors;
	  merge_root?: AutoMergeRootItem;
	  randomized_skin?: RandomizedSpineSkin;
	  grid_snapping?: GridSnapping1;
	  bullet_interaction?: BulletInteraction;
	  data_fields?: DataFields1;
	  material_tags: Materials;
	  level: Level;
	  collection_sound?: CollectionSound;
	  babbler?: Babbler3;
	  pickupable: Pickupable;
	  always_autoloot?: AlwaysAutocollectLoot;
	  whopper_pool?: WhopperPool;
	  spawns?: Spawning;
	}
	export interface Name10 {
	  skip?: Skip19;
	  text: EnglishText19;
	  description?: TranslatorHelperText19;
	}
	export interface Reactions {
	  [k: string]: {
	    order: number;
	    element: Reaction;
	  };
	}
	export interface Reaction {
	  conditions?: Conditions2;
	  require_all_conditions: RequireAllConditions2;
	  triggers: Triggers;
	  actions: Actions;
	  description?: TooltipDescription;
	  name: NameInternal;
	}
	export interface Conditions2 {
	  [k: string]: {
	    order: number;
	    element: Condition2;
	  };
	}
	/**
	 * Which abilities are we evaluating?
	 */
	export interface Abilities2 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface Evaluation4 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value0?: string;
	  value1?: number;
	}
	/**
	 * The 'minutes since timestamp' value can be modified up or down based on an Insight.
	 */
	export interface InsightModifier2 {
	  insight?: Insight4;
	  amount?: ChangePerPoint18;
	}
	/**
	 * If set, this description will appear on the Research Node to explain what it is unlocking.
	 */
	export interface InsightTooltip2 {
	  skip?: Skip20;
	  text: EnglishText20;
	  description?: TranslatorHelperText20;
	}
	export interface NumberOfTargets4 {
	  quantity?: Quantity20;
	  comparison?: Evaluation5;
	}
	export interface DistanceRequiredGridSpaces2 {
	  value0?: Min6;
	  value1?: Max6;
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface Targets2 {
	  [k: string]: {
	    order?: number;
	    element?: Filter12;
	  };
	}
	export interface Filter12 {
	  buffs?: Buffs26;
	  combatants_only?: Combatants12;
	  require_all_tags?: RequireAllTags12;
	  exclude?: Exclude12;
	  datafield_evaluations?: DatafieldEvaluations12;
	  items?: Items16;
	  sub_filters?: SubFilters6;
	}
	export interface Buffs26 {
	  stacks?: Stacks14;
	  buffs: Buffs27;
	  require_all: RequireAll16;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks14 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity21;
	}
	export interface Buffs27 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations12 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items16 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Further refine the original filter, such as by excluding some subset of the orignal items.
	 */
	export interface SubFilters6 {
	  [k: string]: {
	    order?: number;
	    element?: Filter13;
	  };
	}
	export interface Filter13 {
	  buffs?: Buffs28;
	  combatants_only?: Combatants13;
	  require_all_tags?: RequireAllTags13;
	  exclude?: Exclude13;
	  datafield_evaluations?: DatafieldEvaluations13;
	  items?: Items17;
	}
	export interface Buffs28 {
	  stacks?: Stacks15;
	  buffs: Buffs29;
	  require_all: RequireAll17;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks15 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity22;
	}
	export interface Buffs29 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations13 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items17 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface HealthEvaluation2 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  hp_percentage?: number;
	}
	export interface Items18 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The condition will be met if the player is wielding any of these items.
	 */
	export interface Items19 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface Buffs30 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, then targets other than yourself will be evaluated.
	 */
	export interface NumberOfTargets5 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity23;
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface BuffTargetFilter2 {
	  [k: string]: {
	    order?: number;
	    element?: Filter14;
	  };
	}
	export interface Filter14 {
	  buffs?: Buffs31;
	  combatants_only?: Combatants14;
	  require_all_tags?: RequireAllTags14;
	  exclude?: Exclude14;
	  datafield_evaluations?: DatafieldEvaluations14;
	  items?: Items20;
	  sub_filters?: SubFilters7;
	}
	export interface Buffs31 {
	  stacks?: Stacks16;
	  buffs: Buffs32;
	  require_all: RequireAll20;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks16 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity24;
	}
	export interface Buffs32 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations14 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items20 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Further refine the original filter, such as by excluding some subset of the orignal items.
	 */
	export interface SubFilters7 {
	  [k: string]: {
	    order?: number;
	    element?: Filter15;
	  };
	}
	export interface Filter15 {
	  buffs?: Buffs33;
	  combatants_only?: Combatants15;
	  require_all_tags?: RequireAllTags15;
	  exclude?: Exclude15;
	  datafield_evaluations?: DatafieldEvaluations15;
	  items?: Items21;
	}
	export interface Buffs33 {
	  stacks?: Stacks17;
	  buffs: Buffs34;
	  require_all: RequireAll21;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks17 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity25;
	}
	export interface Buffs34 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations15 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items21 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * How close or far (in grid spaces) the entities must be to be considered for this condition.
	 */
	export interface BuffTargetRange2 {
	  value0?: Min7;
	  value1?: Max7;
	}
	export interface Stacks18 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity26;
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface SummonedEntitiesFilter2 {
	  [k: string]: {
	    order?: number;
	    element?: Filter16;
	  };
	}
	export interface Filter16 {
	  buffs?: Buffs35;
	  combatants_only?: Combatants16;
	  require_all_tags?: RequireAllTags16;
	  exclude?: Exclude16;
	  datafield_evaluations?: DatafieldEvaluations16;
	  items?: Items22;
	  sub_filters?: SubFilters8;
	}
	export interface Buffs35 {
	  stacks?: Stacks19;
	  buffs: Buffs36;
	  require_all: RequireAll22;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks19 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity27;
	}
	export interface Buffs36 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations16 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items22 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Further refine the original filter, such as by excluding some subset of the orignal items.
	 */
	export interface SubFilters8 {
	  [k: string]: {
	    order?: number;
	    element?: Filter17;
	  };
	}
	export interface Filter17 {
	  buffs?: Buffs37;
	  combatants_only?: Combatants17;
	  require_all_tags?: RequireAllTags17;
	  exclude?: Exclude17;
	  datafield_evaluations?: DatafieldEvaluations17;
	  items?: Items23;
	}
	export interface Buffs37 {
	  stacks?: Stacks20;
	  buffs: Buffs38;
	  require_all: RequireAll23;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks20 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity28;
	}
	export interface Buffs38 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations17 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items23 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface NumberSummoned2 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity29;
	}
	/**
	 * The reactor must be in one of these areas for the reaction to occur.
	 */
	export interface Areas2 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The reactor must be in one of these weather conditions for the reaction to occur.
	 */
	export interface Weather2 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface Triggers {
	  [k: string]: {
	    order: number;
	    element: Trigger;
	  };
	}
	/**
	 * If set, this trigger will only occur if one of these damage types is used to harm me.
	 */
	export interface DamageTypes {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, this trigger will only occur if the attacker is within this many grid spaces.
	 */
	export interface AttackerDistance {
	  value0?: Min8;
	  value1?: Max8;
	}
	/**
	 * My attacker must match one of these filters.
	 */
	export interface TargetFilter {
	  [k: string]: {
	    order?: number;
	    element?: Filter18;
	  };
	}
	export interface Filter18 {
	  buffs?: Buffs39;
	  combatants_only?: Combatants18;
	  require_all_tags?: RequireAllTags18;
	  exclude?: Exclude18;
	  datafield_evaluations?: DatafieldEvaluations18;
	  items?: Items24;
	  sub_filters?: SubFilters9;
	}
	export interface Buffs39 {
	  stacks?: Stacks21;
	  buffs: Buffs40;
	  require_all: RequireAll24;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks21 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity30;
	}
	export interface Buffs40 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations18 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items24 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Further refine the original filter, such as by excluding some subset of the orignal items.
	 */
	export interface SubFilters9 {
	  [k: string]: {
	    order?: number;
	    element?: Filter19;
	  };
	}
	export interface Filter19 {
	  buffs?: Buffs41;
	  combatants_only?: Combatants19;
	  require_all_tags?: RequireAllTags19;
	  exclude?: Exclude19;
	  datafield_evaluations?: DatafieldEvaluations19;
	  items?: Items25;
	}
	export interface Buffs41 {
	  stacks?: Stacks22;
	  buffs: Buffs42;
	  require_all: RequireAll25;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks22 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity31;
	}
	export interface Buffs42 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations19 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items25 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, this trigger will only occur if one of these items were used to deal damage to me.
	 */
	export interface ItemsUsed {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, this trigger will only occur if one of these abilities were used to deal damage to me.
	 */
	export interface AbilitiesUsed {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The thing I killed must match one of these filters.
	 */
	export interface TargetFilter1 {
	  [k: string]: {
	    order?: number;
	    element?: Filter20;
	  };
	}
	export interface Filter20 {
	  buffs?: Buffs43;
	  combatants_only?: Combatants20;
	  require_all_tags?: RequireAllTags20;
	  exclude?: Exclude20;
	  datafield_evaluations?: DatafieldEvaluations20;
	  items?: Items26;
	  sub_filters?: SubFilters10;
	}
	export interface Buffs43 {
	  stacks?: Stacks23;
	  buffs: Buffs44;
	  require_all: RequireAll26;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks23 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity32;
	}
	export interface Buffs44 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations20 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items26 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Further refine the original filter, such as by excluding some subset of the orignal items.
	 */
	export interface SubFilters10 {
	  [k: string]: {
	    order?: number;
	    element?: Filter21;
	  };
	}
	export interface Filter21 {
	  buffs?: Buffs45;
	  combatants_only?: Combatants21;
	  require_all_tags?: RequireAllTags21;
	  exclude?: Exclude21;
	  datafield_evaluations?: DatafieldEvaluations21;
	  items?: Items27;
	}
	export interface Buffs45 {
	  stacks?: Stacks24;
	  buffs: Buffs46;
	  require_all: RequireAll27;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks24 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity33;
	}
	export interface Buffs46 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations21 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items27 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * How many seconds will pass between this trigger occurring.
	 */
	export interface Seconds {
	  value0?: Min9;
	  value1?: Max9;
	}
	/**
	 * The thing that killed me must match one of these filters.
	 */
	export interface MyKillerTargetFilter {
	  [k: string]: {
	    order?: number;
	    element?: Filter22;
	  };
	}
	export interface Filter22 {
	  buffs?: Buffs47;
	  combatants_only?: Combatants22;
	  require_all_tags?: RequireAllTags22;
	  exclude?: Exclude22;
	  datafield_evaluations?: DatafieldEvaluations22;
	  items?: Items28;
	  sub_filters?: SubFilters11;
	}
	export interface Buffs47 {
	  stacks?: Stacks25;
	  buffs: Buffs48;
	  require_all: RequireAll28;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks25 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity34;
	}
	export interface Buffs48 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations22 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items28 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Further refine the original filter, such as by excluding some subset of the orignal items.
	 */
	export interface SubFilters11 {
	  [k: string]: {
	    order?: number;
	    element?: Filter23;
	  };
	}
	export interface Filter23 {
	  buffs?: Buffs49;
	  combatants_only?: Combatants23;
	  require_all_tags?: RequireAllTags23;
	  exclude?: Exclude23;
	  datafield_evaluations?: DatafieldEvaluations23;
	  items?: Items29;
	}
	export interface Buffs49 {
	  stacks?: Stacks26;
	  buffs: Buffs50;
	  require_all: RequireAll29;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks26 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity35;
	}
	export interface Buffs50 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations23 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items29 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, this trigger will only occur if one of these damage types is used.
	 */
	export interface DamageTypes1 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, this trigger will only occur if the target is within this many grid spaces.
	 */
	export interface TargetDistance {
	  value0?: Min10;
	  value1?: Max10;
	}
	/**
	 * My attacker must match one of these filters.
	 */
	export interface TargetFilter2 {
	  [k: string]: {
	    order?: number;
	    element?: Filter24;
	  };
	}
	export interface Filter24 {
	  buffs?: Buffs51;
	  combatants_only?: Combatants24;
	  require_all_tags?: RequireAllTags24;
	  exclude?: Exclude24;
	  datafield_evaluations?: DatafieldEvaluations24;
	  items?: Items30;
	  sub_filters?: SubFilters12;
	}
	export interface Buffs51 {
	  stacks?: Stacks27;
	  buffs: Buffs52;
	  require_all: RequireAll30;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks27 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity36;
	}
	export interface Buffs52 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations24 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items30 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Further refine the original filter, such as by excluding some subset of the orignal items.
	 */
	export interface SubFilters12 {
	  [k: string]: {
	    order?: number;
	    element?: Filter25;
	  };
	}
	export interface Filter25 {
	  buffs?: Buffs53;
	  combatants_only?: Combatants25;
	  require_all_tags?: RequireAllTags25;
	  exclude?: Exclude25;
	  datafield_evaluations?: DatafieldEvaluations25;
	  items?: Items31;
	}
	export interface Buffs53 {
	  stacks?: Stacks28;
	  buffs: Buffs54;
	  require_all: RequireAll31;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks28 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity37;
	}
	export interface Buffs54 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations25 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items31 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, this trigger will only occur if one of these items were used to deal damage.
	 */
	export interface ItemsUsed1 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, this trigger will only occur if one of these abilities were used to deal damage.
	 */
	export interface AbilitiesUsed1 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * This trigger will only be met if the ability has a target that matches this filter.
	 */
	export interface TargetFilter3 {
	  [k: string]: {
	    order?: number;
	    element?: Filter26;
	  };
	}
	export interface Filter26 {
	  buffs?: Buffs55;
	  combatants_only?: Combatants26;
	  require_all_tags?: RequireAllTags26;
	  exclude?: Exclude26;
	  datafield_evaluations?: DatafieldEvaluations26;
	  items?: Items32;
	  sub_filters?: SubFilters13;
	}
	export interface Buffs55 {
	  stacks?: Stacks29;
	  buffs: Buffs56;
	  require_all: RequireAll32;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks29 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity38;
	}
	export interface Buffs56 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations26 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items32 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Further refine the original filter, such as by excluding some subset of the orignal items.
	 */
	export interface SubFilters13 {
	  [k: string]: {
	    order?: number;
	    element?: Filter27;
	  };
	}
	export interface Filter27 {
	  buffs?: Buffs57;
	  combatants_only?: Combatants27;
	  require_all_tags?: RequireAllTags27;
	  exclude?: Exclude27;
	  datafield_evaluations?: DatafieldEvaluations27;
	  items?: Items33;
	}
	export interface Buffs57 {
	  stacks?: Stacks30;
	  buffs: Buffs58;
	  require_all: RequireAll33;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks30 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity39;
	}
	export interface Buffs58 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations27 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items33 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, this trigger will only occur if one of these items were used to cast an ability.
	 */
	export interface ItemsUsed2 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * This trigger will only occur when one of these abilities are cast.
	 */
	export interface Abilities3 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If applying a buff to another target, the target must match this filter. If receiving a buff from a target, that target must match this filter.
	 */
	export interface TargetFilter4 {
	  [k: string]: {
	    order?: number;
	    element?: Filter28;
	  };
	}
	export interface Filter28 {
	  buffs?: Buffs59;
	  combatants_only?: Combatants28;
	  require_all_tags?: RequireAllTags28;
	  exclude?: Exclude28;
	  datafield_evaluations?: DatafieldEvaluations28;
	  items?: Items34;
	  sub_filters?: SubFilters14;
	}
	export interface Buffs59 {
	  stacks?: Stacks31;
	  buffs: Buffs60;
	  require_all: RequireAll34;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks31 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity40;
	}
	export interface Buffs60 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations28 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items34 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Further refine the original filter, such as by excluding some subset of the orignal items.
	 */
	export interface SubFilters14 {
	  [k: string]: {
	    order?: number;
	    element?: Filter29;
	  };
	}
	export interface Filter29 {
	  buffs?: Buffs61;
	  combatants_only?: Combatants29;
	  require_all_tags?: RequireAllTags29;
	  exclude?: Exclude29;
	  datafield_evaluations?: DatafieldEvaluations29;
	  items?: Items35;
	}
	export interface Buffs61 {
	  stacks?: Stacks32;
	  buffs: Buffs62;
	  require_all: RequireAll35;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks32 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity41;
	}
	export interface Buffs62 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations29 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items35 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * This trigger will only occur if one of these buffs get applied to the target.
	 */
	export interface Buffs63 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The target of the buff must match this filter. If receiving a buff from a target, that target must match this filter.
	 */
	export interface TargetFilter5 {
	  [k: string]: {
	    order?: number;
	    element?: Filter30;
	  };
	}
	export interface Filter30 {
	  buffs?: Buffs64;
	  combatants_only?: Combatants30;
	  require_all_tags?: RequireAllTags30;
	  exclude?: Exclude30;
	  datafield_evaluations?: DatafieldEvaluations30;
	  items?: Items36;
	  sub_filters?: SubFilters15;
	}
	export interface Buffs64 {
	  stacks?: Stacks33;
	  buffs: Buffs65;
	  require_all: RequireAll36;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks33 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity42;
	}
	export interface Buffs65 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations30 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items36 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Further refine the original filter, such as by excluding some subset of the orignal items.
	 */
	export interface SubFilters15 {
	  [k: string]: {
	    order?: number;
	    element?: Filter31;
	  };
	}
	export interface Filter31 {
	  buffs?: Buffs66;
	  combatants_only?: Combatants31;
	  require_all_tags?: RequireAllTags31;
	  exclude?: Exclude31;
	  datafield_evaluations?: DatafieldEvaluations31;
	  items?: Items37;
	}
	export interface Buffs66 {
	  stacks?: Stacks34;
	  buffs: Buffs67;
	  require_all: RequireAll37;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks34 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity43;
	}
	export interface Buffs67 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations31 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items37 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface Buffs68 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface Buffs69 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * This trigger will only be met if the ability caster matches this filter.
	 */
	export interface TargetFilter6 {
	  [k: string]: {
	    order?: number;
	    element?: Filter32;
	  };
	}
	export interface Filter32 {
	  buffs?: Buffs70;
	  combatants_only?: Combatants32;
	  require_all_tags?: RequireAllTags32;
	  exclude?: Exclude32;
	  datafield_evaluations?: DatafieldEvaluations32;
	  items?: Items38;
	  sub_filters?: SubFilters16;
	}
	export interface Buffs70 {
	  stacks?: Stacks35;
	  buffs: Buffs71;
	  require_all: RequireAll38;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks35 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity44;
	}
	export interface Buffs71 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations32 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items38 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Further refine the original filter, such as by excluding some subset of the orignal items.
	 */
	export interface SubFilters16 {
	  [k: string]: {
	    order?: number;
	    element?: Filter33;
	  };
	}
	export interface Filter33 {
	  buffs?: Buffs72;
	  combatants_only?: Combatants33;
	  require_all_tags?: RequireAllTags33;
	  exclude?: Exclude33;
	  datafield_evaluations?: DatafieldEvaluations33;
	  items?: Items39;
	}
	export interface Buffs72 {
	  stacks?: Stacks36;
	  buffs: Buffs73;
	  require_all: RequireAll39;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks36 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity45;
	}
	export interface Buffs73 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations33 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items39 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, this trigger will only occur if one of these items were used to cast an ability on me.
	 */
	export interface ItemsUsed3 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * This trigger will only occur when one of these abilities are cast on me.
	 */
	export interface Abilities4 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface Actions {
	  [k: string]: {
	    order: number;
	    element: Action;
	  };
	}
	/**
	 * The new entity will spawn a random range away from the chosen location, up to this number of grid spaces.
	 */
	export interface SpawnDistance {
	  value0?: Min11;
	  value1?: Max11;
	}
	/**
	 * How much this damage is boosted or suppressed by points spent in Insights.
	 */
	export interface InsightDamageModifiers {
	  [k: string]: {
	    order?: number;
	    element?: {
	      value: ChangePerPoint19;
	      tooltip_text?: InsightTooltipText;
	      badge_id: Insight6;
	    };
	  };
	}
	/**
	 * Explain how the insight changes the damage of this ability. This text will appear on the Insight's tooltip page.
	 */
	export interface InsightTooltipText {
	  skip?: Skip21;
	  text: EnglishText21;
	  description?: TranslatorHelperText21;
	}
	/**
	 * Deal more or less damage, depending on data fields.
	 */
	export interface DatafieldMultipliers {
	  [k: string]: {
	    order?: number;
	    element?: {
	      datafield_owner?: DatafieldOwner;
	      datafield_id?: DataField;
	    };
	  };
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface TargetFilters {
	  [k: string]: {
	    order?: number;
	    element?: Filter34;
	  };
	}
	export interface Filter34 {
	  buffs?: Buffs74;
	  combatants_only?: Combatants34;
	  require_all_tags?: RequireAllTags34;
	  exclude?: Exclude34;
	  datafield_evaluations?: DatafieldEvaluations34;
	  items?: Items40;
	  sub_filters?: SubFilters17;
	}
	export interface Buffs74 {
	  stacks?: Stacks38;
	  buffs: Buffs75;
	  require_all: RequireAll40;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks38 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity46;
	}
	export interface Buffs75 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations34 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items40 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Further refine the original filter, such as by excluding some subset of the orignal items.
	 */
	export interface SubFilters17 {
	  [k: string]: {
	    order?: number;
	    element?: Filter35;
	  };
	}
	export interface Filter35 {
	  buffs?: Buffs76;
	  combatants_only?: Combatants35;
	  require_all_tags?: RequireAllTags35;
	  exclude?: Exclude35;
	  datafield_evaluations?: DatafieldEvaluations35;
	  items?: Items41;
	}
	export interface Buffs76 {
	  stacks?: Stacks39;
	  buffs: Buffs77;
	  require_all: RequireAll41;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks39 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity47;
	}
	export interface Buffs77 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations35 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items41 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface DamageProfile {
	  damage_types: DamageTypes2;
	  modifiers?: Modifiers;
	  buff_damage_source?: BuffDamageSource;
	  direct_damage?: DirectDamage3;
	  can_crit?: CanCrit;
	}
	/**
	 * What kind of damage to deal, and what percent of the 'normal' amount to deal. The actual damage dealt will be calculated based on factors such as the level of the user (or item used), cast times, and stats of the attacker.
	 */
	export interface DamageTypes2 {
	  [k: string]: {
	    order: number;
	    element: {
	      value: DamageAmount;
	      key: DamageType;
	    };
	  };
	}
	/**
	 * Whether to deal extra or reduced damage to certain things, or certain kinds of things.
	 */
	export interface Modifiers {
	  [k: string]: {
	    order: number;
	    element: {
	      value: Modifier;
	      key: Filter36;
	    };
	  };
	}
	/**
	 * If set, you can pull damage from the damage pool of a buff, and use that amount to calculate this ability's damage outcome.
	 */
	export interface BuffDamageSource {
	  buff_id: Buff1;
	  amount: Amount;
	  consume: ConsumeDamage;
	  own_only: OwnOnly;
	  buff_target: BuffTarget;
	}
	export interface LootItems {
	  [k: string]: {
	    order?: number;
	    element?: {
	      quantity?: Quantity48;
	      probability?: Chance;
	      item?: Item;
	    };
	  };
	}
	export interface Quantity48 {
	  value0?: Min12;
	  value1?: Max12;
	}
	export interface Color1 {
	  r?: Red6;
	  b?: Blue6;
	  g?: Green6;
	}
	export interface DecalDurationSeconds {
	  value0?: Min13;
	  value1?: Max13;
	}
	/**
	 * The decal will choose a random scale between these numbers.
	 */
	export interface DecalScale {
	  value0?: Min14;
	  value1?: Max14;
	}
	export interface BaseColor {
	  r?: Red7;
	  b?: Blue7;
	  g?: Green7;
	}
	export interface HighlightColor {
	  r?: Red8;
	  b?: Blue8;
	  g?: Green8;
	}
	export interface ExplosionScale {
	  value0?: Min15;
	  value1?: Max15;
	}
	/**
	 * Set this to spawn the explosion a random distance away.
	 */
	export interface RandomDistanceGridSpaces {
	  value0?: Min16;
	  value1?: Max16;
	}
	/**
	 * Set this to spawn the explosion a random delay.
	 */
	export interface RandomDelaySeconds {
	  value0?: Min17;
	  value1?: Max17;
	}
	/**
	 * These are the particles that will shoot out from the explosion.
	 */
	export interface DebrisParticles {
	  [k: string]: {
	    order?: number;
	    element?: DebrisParticles1;
	  };
	}
	export interface DebrisParticles1 {
	  sprite?: Sprite1;
	  particle_scale?: ParticleScale;
	  num_particles?: NumberOfParticles;
	}
	export interface Particle {
	  p_direction?: Direction;
	  p_direction_increase?: DirectionChangeDegreesSec;
	  alpha?: Alpha;
	  wip?: WIP;
	  speed?: Speed2;
	  size?: Size2;
	  name?: ParticleNameInternal;
	  parent?: Parent;
	  sprite?: Sprite2;
	  life?: LifeSeconds;
	  colors?: Colors2;
	  lighting_style?: Lighting;
	  shrinking?: Shrinking;
	  shape?: Shape;
	  x_scale?: XScale;
	  y_scale?: YScale;
	  size_increase?: SizeChangePerSecond;
	  size_wiggle?: SizeWiggle;
	  orientation?: Orientation;
	  orientation_relative?: OrientationRelative;
	  orientation_increase?: OrientationChangeSec;
	  orientation_wiggle?: OrientationWiggle;
	  acceleration?: Acceleration;
	  p_gravity?: Gravity;
	}
	/**
	 * The direction the particles should go at their defined speed.
	 */
	export interface Direction {
	  value0: Min18;
	  value1: Max18;
	}
	/**
	 * The particles can change direction as they fly.
	 */
	export interface DirectionChangeDegreesSec {
	  value0: Min19;
	  value1: Max19;
	}
	/**
	 * How the particles should change their alpha values over their lifetime.
	 */
	export interface Alpha {
	  [k: string]: {
	    order: number;
	    element: AlphaValue;
	  };
	}
	/**
	 * How fast (in pixels per second) the particles should blast out.
	 */
	export interface Speed2 {
	  value0: Min20;
	  value1: Max20;
	}
	export interface Size2 {
	  value0: Min21;
	  value1: Max21;
	}
	export interface LifeSeconds {
	  value0: Min22;
	  value1: Max22;
	}
	/**
	 * How the particles should cycle through colors over their lifetime.
	 */
	export interface Colors2 {
	  [k: string]: {
	    order: number;
	    element: Color2;
	  };
	}
	export interface Color2 {
	  r: Red9;
	  b: Blue9;
	  g: Green9;
	}
	/**
	 * The rotations of the individual particles (in degrees)
	 */
	export interface Orientation {
	  value0: Min23;
	  value1: Max23;
	}
	export interface Bursts {
	  [k: string]: {
	    order?: number;
	    element?: Burst;
	  };
	}
	export interface Burst {
	  perspective: Perspective;
	  spawn_at_ground?: SpawnOnGround;
	  direction?: BurstDirection;
	  use_aim_direction?: UseAimDirection;
	  num_particles: NumberOfParticles1;
	  scaled_radius?: ScaledSpawnRadius;
	  location: Source1;
	  outward_blast: BlastOutward;
	  spawn_radius: SpawnRadiusPixels;
	  radius_as_grid?: SpawnRadiusAsGrid;
	  z_offset?: ZOffset1;
	}
	export interface BurstDirection {
	  value0?: Min24;
	  value1?: Max24;
	}
	export interface NumberOfParticles1 {
	  value0?: Min25;
	  value1?: Max25;
	}
	/**
	 * How far from the source the particles will spawn.
	 */
	export interface SpawnRadiusPixels {
	  value0?: Min26;
	  value1?: Max26;
	}
	export interface NumberOfBolts {
	  value0?: Min27;
	  value1?: Max27;
	}
	export interface DistanceGrid {
	  value0?: Min28;
	  value1?: Max28;
	}
	export interface Color3 {
	  r?: Red10;
	  b?: Blue10;
	  g?: Green10;
	}
	/**
	 * Describe this reaction, so it can be displayed in a tooltip. If a description is given, then the tooltip will also pull up any available information about this reaction's ability casts, buffs, damage, etc...
	 */
	export interface TooltipDescription {
	  skip?: Skip22;
	  text: EnglishText22;
	}
	/**
	 * If set, this item will be drawn on the world map as a colored tile.
	 */
	export interface WorldMapTileColor1 {
	  r: Red11;
	  b: Blue11;
	  g: Green11;
	}
	export interface Description8 {
	  skip?: Skip23;
	  text: EnglishText23;
	  description?: TranslatorHelperText22;
	}
	/**
	 * Attaching data fields to this world element will make them readable by other game mechanics/elements. Can be used to store custom data on a world element.
	 */
	export interface DataFields1 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	/**
	 * What is this thing made of? This is used for categorization and can otherwise be used by abilities, fulfillments, etc... to broadly categorize interactions.
	 */
	export interface Materials {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	/**
	 * How this thing spawns in the world.
	 */
	export interface Spawning {
	  [k: string]: {
	    order: number;
	    element: {
	      tile: string;
	      chance: Coverage;
	    };
	  };
	}
	/**
	 * Sound effects to play when this thing is destroyed.
	 */
	export interface DestructionSounds {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Sound effects to play when this thing takes damage.
	 */
	export interface InjurySounds {
	  [k: string]: {
	    order?: number;
	    element?: {
	      chance_of_playing?: Chance1;
	      minor_injury_sound?: Minor;
	      major_injury_sound?: Major;
	    };
	  };
	}
	export interface Loot {
	  [k: string]: {
	    order?: number;
	    element?: LootGroup;
	  };
	}
	/**
	 * A collection of items that share the same rules about how they drop.
	 */
	export interface LootGroup {
	  datafield_evaluations?: DatafieldEvaluations36;
	  items_dropped: Items42;
	  num_drops?: DropQuantity;
	  time_requirement?: TimeOfDay;
	  trigger: Trigger1;
	  show_in_insight?: ShowInInsight;
	  badge_requirement?: UnlockedBy8;
	  bonus_loot?: ConsiderAsBonus;
	  item_tags_used?: ItemTagsUsed;
	  ignore_in_progression_map?: IgnoreInProgressionMap1;
	  item_ids_used?: ItemsUsed4;
	  drop_chance?: DropChance;
	  datafield_link?: DatafieldQuantityLink;
	  source_listed?: IncludeAsSource;
	  areas?: Areas3;
	}
	/**
	 * This loot group can check for data fields on the entity, and only drop if the conditions are met.
	 */
	export interface DatafieldEvaluations36 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items42 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      weight?: number;
	      locked?: boolean;
	      item?: string;
	    };
	  };
	}
	/**
	 * A random number of items will drop in this range.
	 */
	export interface DropQuantity {
	  value0?: Min29;
	  value1?: Max29;
	}
	/**
	 * The kinds of items required to be used on this for loot to drop.
	 */
	export interface ItemTagsUsed {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Specific items required to be used on this for loot to drop.
	 */
	export interface ItemsUsed4 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, the loot will only drop from something within the listed areas.
	 */
	export interface Areas3 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface Creature {
	  using_lighting?: UseLighting5;
	  light_emitter?: LightEmitter;
	  random_scaling?: RandomScalingMinimum1;
	  death_sounds?: DestructionSounds1;
	  priors?: ProgressionPriors;
	  object: Object3;
	  wip?: WIP;
	  size: Size3;
	  expiration_minutes?: DynamicExpirationMinutes1;
	  name: Name11;
	  reactions?: Reactions;
	  scale_modifier?: ScaleModifier2;
	  level_viewer_ignore?: IgnoreInLevelViewer1;
	  editor_excluded?: EditorExcluded1;
	  sprite: WorldSprite8;
	  description?: Description9;
	  uicon: UIIcon8;
	  respawn_multiplier?: RespawnTimeMultiplier1;
	  can_reset?: CanReset1;
	  frequency_inheritance?: FrequencyInheritance;
	  immunities?: Immunities;
	  family?: Family;
	  effort_modifier?: EffortModifier9;
	  aggro_radius: AggroDeaggroDistances;
	  deaggro_seconds: DeaggroDuration;
	  friendly_help_range: FriendlyHelpRange;
	  protection?: ProtectionBehaviors;
	  noncombat_ai: NonCombatAI;
	  hp_bar_offset?: HealthBarVerticalOffset;
	  editor_group?: EditorGroup10;
	  relative_level?: RelativeLevel1;
	  movement: Motion;
	  spine_skin?: SpineSkin1;
	  shadow?: Shadow;
	  injury_sounds?: InjurySounds1;
	  combat_ai?: CombatBehavior;
	  resistance_profile?: ResistanceProfile1;
	  hp_modifier?: HPModifier1;
	  bullet_interaction?: BulletInteraction1;
	  data_fields?: DataFields2;
	  level: Level1;
	  flee?: Fleeing;
	  loot?: Loot1;
	}
	/**
	 * Sound effects to play when this thing is destroyed.
	 */
	export interface DestructionSounds1 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Size3 {
	  width: Width2;
	  height: Height2;
	}
	export interface Name11 {
	  skip?: Skip24;
	  text: EnglishText24;
	  description?: TranslatorHelperText23;
	}
	export interface Description9 {
	  skip?: Skip25;
	  text: EnglishText25;
	  description?: TranslatorHelperText24;
	}
	/**
	 * If set, this world element will inherit the frequency of its parent, and can apply a multiplier. Frequency is used to calculate recipes based on how common the item is.
	 */
	export interface FrequencyInheritance {
	  [k: string]: {
	    order: number;
	    element: {
	      inherits_from: InheritFrom;
	      multiplier: FrequencyMultiplier;
	    };
	  };
	}
	/**
	 * Things that this world element cannot be harmed by.
	 */
	export interface Immunities {
	  stun?: Stun;
	  buffs?: Buffs78;
	}
	/**
	 * Harmful buffs or types of buffs that cannot be applied to this creature.
	 */
	export interface Buffs78 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	/**
	 * When something gets within the minimum, the creature will react. When it goes outside the maximum range, the creature will stop reacting. There should ideally be at least a gap of 1 grid space between the minimum and the maximum to prevent rapid deaggro/reaggro.
	 */
	export interface AggroDeaggroDistances {
	  value0: AggroRadius;
	  value1: DeaggroRadius;
	}
	/**
	 * These are items that the creature will try to protect if something bad happens to them.
	 */
	export interface ProtectionBehaviors {
	  [k: string]: {
	    order: number;
	    element: ProtectionBehavior;
	  };
	}
	export interface ProtectionBehavior {
	  death: RespondToDestruction;
	  items: Items43;
	  damage: RespondToDamage;
	}
	export interface Items43 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	/**
	 * How the creature behaves when it is just existing in the world.
	 */
	export interface NonCombatAI {
	  states: NonCombatStates;
	}
	export interface NonCombatStates {
	  roam: Roam;
	  idle: Idle;
	  interactions?: Interactions;
	}
	export interface Roam {
	  weight: Weight;
	  attract?: Attractants;
	  movement?: MotionOverride2;
	  repeating: Repeatable;
	  distance: RoamDistance;
	  repel?: Repellants;
	}
	/**
	 * World elements that the creature can wander toward.
	 */
	export interface Attractants {
	  probability: AttractionProbability;
	  detection_range: DetectionRange;
	  movement?: MotionOverride;
	  targets: AttractionTargets;
	}
	export interface MotionOverride {
	  moving?: MovementVisuals;
	  stationary?: StationaryVisuals;
	  movespeed?: MovementSpeed;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave {
	  [k: string]: {
	    order?: number;
	    element?: {
	      speed?: Speed3;
	      amplitude?: Amplitude1;
	    };
	  };
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent;
	  };
	}
	export interface FlapEvent {
	  impulse_seconds?: ImpulseDurationSeconds;
	  recovery_seconds?: RecoveryDurationSeconds;
	  distance?: VerticalDistance;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave1 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      speed?: Speed4;
	      amplitude?: Amplitude2;
	    };
	  };
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements1 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent1;
	  };
	}
	export interface FlapEvent1 {
	  impulse_seconds?: ImpulseDurationSeconds1;
	  recovery_seconds?: RecoveryDurationSeconds1;
	  distance?: VerticalDistance1;
	}
	export interface AttractionTargets {
	  [k: string]: {
	    order: number;
	    element: AttractionBehavior;
	  };
	}
	export interface AttractionBehavior {
	  weight: Weight1;
	  detection_range?: DetectionRange1;
	  targets: Targets3;
	  movement?: MotionOverride1;
	}
	export interface Targets3 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface MotionOverride1 {
	  moving?: MovementVisuals1;
	  stationary?: StationaryVisuals1;
	  movespeed?: MovementSpeed1;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave2 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      speed?: Speed5;
	      amplitude?: Amplitude3;
	    };
	  };
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements2 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent2;
	  };
	}
	export interface FlapEvent2 {
	  impulse_seconds?: ImpulseDurationSeconds2;
	  recovery_seconds?: RecoveryDurationSeconds2;
	  distance?: VerticalDistance2;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave3 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      speed?: Speed6;
	      amplitude?: Amplitude4;
	    };
	  };
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements3 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent3;
	  };
	}
	export interface FlapEvent3 {
	  impulse_seconds?: ImpulseDurationSeconds3;
	  recovery_seconds?: RecoveryDurationSeconds3;
	  distance?: VerticalDistance3;
	}
	export interface MotionOverride2 {
	  moving?: MovementVisuals2;
	  stationary?: StationaryVisuals2;
	  movespeed?: MovementSpeed2;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave4 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      speed?: Speed7;
	      amplitude?: Amplitude5;
	    };
	  };
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements4 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent4;
	  };
	}
	export interface FlapEvent4 {
	  impulse_seconds?: ImpulseDurationSeconds4;
	  recovery_seconds?: RecoveryDurationSeconds4;
	  distance?: VerticalDistance4;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave5 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      speed?: Speed8;
	      amplitude?: Amplitude6;
	    };
	  };
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements5 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent5;
	  };
	}
	export interface FlapEvent5 {
	  impulse_seconds?: ImpulseDurationSeconds5;
	  recovery_seconds?: RecoveryDurationSeconds5;
	  distance?: VerticalDistance5;
	}
	/**
	 * How far the creature will wander from its current position.
	 */
	export interface RoamDistance {
	  value0: Min30;
	  value1: Max30;
	}
	/**
	 * World elements that the creature will try to get away from. This will always take precedence over attractants.
	 */
	export interface Repellants {
	  probability: RepelProbability;
	  detection_range: DetectionRange2;
	  movement?: MotionOverride3;
	  targets: RepelTargets;
	}
	export interface MotionOverride3 {
	  moving?: MovementVisuals3;
	  stationary?: StationaryVisuals3;
	  movespeed?: MovementSpeed3;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave6 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      speed?: Speed9;
	      amplitude?: Amplitude7;
	    };
	  };
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements6 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent6;
	  };
	}
	export interface FlapEvent6 {
	  impulse_seconds?: ImpulseDurationSeconds6;
	  recovery_seconds?: RecoveryDurationSeconds6;
	  distance?: VerticalDistance6;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave7 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      speed?: Speed10;
	      amplitude?: Amplitude8;
	    };
	  };
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements7 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent7;
	  };
	}
	export interface FlapEvent7 {
	  impulse_seconds?: ImpulseDurationSeconds7;
	  recovery_seconds?: RecoveryDurationSeconds7;
	  distance?: VerticalDistance7;
	}
	export interface RepelTargets {
	  [k: string]: {
	    order: number;
	    element: RepelBehavior;
	  };
	}
	export interface RepelBehavior {
	  weight: Weight2;
	  detection_range?: DetectionRange3;
	  targets: Targets4;
	  movement?: MotionOverride4;
	}
	export interface Targets4 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface MotionOverride4 {
	  moving?: MovementVisuals4;
	  stationary?: StationaryVisuals4;
	  movespeed?: MovementSpeed4;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave8 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      speed?: Speed11;
	      amplitude?: Amplitude9;
	    };
	  };
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements8 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent8;
	  };
	}
	export interface FlapEvent8 {
	  impulse_seconds?: ImpulseDurationSeconds8;
	  recovery_seconds?: RecoveryDurationSeconds8;
	  distance?: VerticalDistance8;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave9 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      speed?: Speed12;
	      amplitude?: Amplitude10;
	    };
	  };
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements9 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent9;
	  };
	}
	export interface FlapEvent9 {
	  impulse_seconds?: ImpulseDurationSeconds9;
	  recovery_seconds?: RecoveryDurationSeconds9;
	  distance?: VerticalDistance9;
	}
	export interface Idle {
	  duration: DurationSeconds;
	  weight: Weight3;
	  repeating: Repeatable1;
	}
	export interface DurationSeconds {
	  value0: Min31;
	  value1: Max31;
	}
	/**
	 * The creature can use abilities on things in the environment.
	 */
	export interface Interactions {
	  [k: string]: {
	    order: number;
	    element: Interaction;
	  };
	}
	export interface Interaction {
	  weight: Weight4;
	  ability: Ability4;
	  movement?: MotionOverride5;
	  repeating: Repeatable2;
	  detection_radius: DetectionRadius;
	  casts: Casts;
	  targets?: TargetFilter7;
	  name: NameInternal1;
	}
	export interface MotionOverride5 {
	  moving?: MovementVisuals5;
	  stationary?: StationaryVisuals5;
	  movespeed?: MovementSpeed5;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave10 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      speed?: Speed13;
	      amplitude?: Amplitude11;
	    };
	  };
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements10 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent10;
	  };
	}
	export interface FlapEvent10 {
	  impulse_seconds?: ImpulseDurationSeconds10;
	  recovery_seconds?: RecoveryDurationSeconds10;
	  distance?: VerticalDistance10;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave11 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      speed?: Speed14;
	      amplitude?: Amplitude12;
	    };
	  };
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements11 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent11;
	  };
	}
	export interface FlapEvent11 {
	  impulse_seconds?: ImpulseDurationSeconds11;
	  recovery_seconds?: RecoveryDurationSeconds11;
	  distance?: VerticalDistance11;
	}
	/**
	 * How many times the creature will attempt to use the ability if the target continues to exist.
	 */
	export interface Casts {
	  value0: Min32;
	  value1: Max32;
	}
	/**
	 * The creature will attempt to use this ability on targets that match these filters. If no filters present, the creature will just cast the ability.
	 */
	export interface TargetFilter7 {
	  [k: string]: {
	    order: number;
	    element: Filter37;
	  };
	}
	export interface Filter37 {
	  buffs?: Buffs79;
	  combatants_only?: Combatants36;
	  require_all_tags?: RequireAllTags36;
	  exclude?: Exclude36;
	  datafield_evaluations?: DatafieldEvaluations37;
	  items?: Items44;
	  sub_filters?: SubFilters18;
	}
	export interface Buffs79 {
	  stacks?: Stacks41;
	  buffs: Buffs80;
	  require_all: RequireAll42;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks41 {
	  comparison: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1: Quantity49;
	}
	export interface Buffs80 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations37 {
	  [k: string]: {
	    order: number;
	    element: {
	      comparison: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0: string;
	      value1: number;
	    };
	  };
	}
	export interface Items44 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	/**
	 * Further refine the original filter, such as by excluding some subset of the orignal items.
	 */
	export interface SubFilters18 {
	  [k: string]: {
	    order: number;
	    element: Filter38;
	  };
	}
	export interface Filter38 {
	  buffs?: Buffs81;
	  combatants_only?: Combatants37;
	  require_all_tags?: RequireAllTags37;
	  exclude?: Exclude37;
	  datafield_evaluations?: DatafieldEvaluations38;
	  items?: Items45;
	}
	export interface Buffs81 {
	  stacks?: Stacks42;
	  buffs: Buffs82;
	  require_all: RequireAll43;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks42 {
	  comparison: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1: Quantity50;
	}
	export interface Buffs82 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations38 {
	  [k: string]: {
	    order: number;
	    element: {
	      comparison: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0: string;
	      value1: number;
	    };
	  };
	}
	export interface Items45 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Motion {
	  moving: MovementVisuals6;
	  stationary: StationaryVisuals6;
	  movespeed: MovementSpeed6;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave12 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      speed?: Speed15;
	      amplitude?: Amplitude13;
	    };
	  };
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements12 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent12;
	  };
	}
	export interface FlapEvent12 {
	  impulse_seconds?: ImpulseDurationSeconds12;
	  recovery_seconds?: RecoveryDurationSeconds12;
	  distance?: VerticalDistance12;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave13 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      speed?: Speed16;
	      amplitude?: Amplitude14;
	    };
	  };
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements13 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent13;
	  };
	}
	export interface FlapEvent13 {
	  impulse_seconds?: ImpulseDurationSeconds13;
	  recovery_seconds?: RecoveryDurationSeconds13;
	  distance?: VerticalDistance13;
	}
	/**
	 * Sound effects to play when this thing takes damage.
	 */
	export interface InjurySounds1 {
	  [k: string]: {
	    order: number;
	    element: {
	      chance_of_playing: Chance2;
	      minor_injury_sound: Minor1;
	      major_injury_sound: Major1;
	    };
	  };
	}
	/**
	 * How the creature fights during combat.
	 */
	export interface CombatBehavior {
	  aggro_targets?: AggroTargets;
	  post_movement_pause?: OBSOLETE;
	  movement?: MotionOverride6;
	  abilities: CombatAbilities;
	  aggro_sound: AggroSound;
	  aggro_player: AggroOntoPlayer;
	}
	/**
	 * The creature will attack these targets when they get into its aggro range.
	 */
	export interface AggroTargets {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	/**
	 * If the creature moves in combat to get into position to perform an ability, it can wait for a brief moment before beginning to use its abilities.
	 */
	export interface OBSOLETE {
	  value0: MinSeconds;
	  value1: MaxSeconds;
	}
	export interface MotionOverride6 {
	  moving?: MovementVisuals7;
	  stationary?: StationaryVisuals7;
	  movespeed?: MovementSpeed7;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave14 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      speed?: Speed17;
	      amplitude?: Amplitude15;
	    };
	  };
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements14 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent14;
	  };
	}
	export interface FlapEvent14 {
	  impulse_seconds?: ImpulseDurationSeconds14;
	  recovery_seconds?: RecoveryDurationSeconds14;
	  distance?: VerticalDistance14;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave15 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      speed?: Speed18;
	      amplitude?: Amplitude16;
	    };
	  };
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements15 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent15;
	  };
	}
	export interface FlapEvent15 {
	  impulse_seconds?: ImpulseDurationSeconds15;
	  recovery_seconds?: RecoveryDurationSeconds15;
	  distance?: VerticalDistance15;
	}
	export interface CombatAbilities {
	  [k: string]: {
	    order: number;
	    element: CombatAbility;
	  };
	}
	export interface CombatAbility {
	  weight: Weight5;
	  ability: Ability5;
	  post_ability_movement_pause?: PostAbilityMovementPause;
	  post_movement_pause?: OBSOLETE1;
	  post_ability_pause_ignore_chance?: PostAbilityPauseIgnoreChance;
	  post_ability_pause?: PostAbilityPause;
	  movement?: MotionOverride7;
	  distance_randomness?: DistanceRandomness;
	  followup_abilities?: FollowupAbilities;
	  direction_randomness?: DirectionRandomness;
	}
	/**
	 * After using this ability, the creature can wait a short time before beginning to move in range for its next attack.
	 */
	export interface PostAbilityMovementPause {
	  value0: MinSeconds1;
	  value1: MaxSeconds1;
	}
	/**
	 * If the creature moves in combat to get into position to perform this ability, it can wait for a brief moment before beginning to cast.
	 */
	export interface OBSOLETE1 {
	  value0: MinSeconds2;
	  value1: MaxSeconds2;
	}
	/**
	 * If set, the creature will wait for this many seconds after using this ability before moving on to the next ability.
	 */
	export interface PostAbilityPause {
	  value0: MinSeconds3;
	  value1: MaxSeconds3;
	}
	export interface MotionOverride7 {
	  moving?: MovementVisuals8;
	  stationary?: StationaryVisuals8;
	  movespeed?: MovementSpeed8;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave16 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      speed?: Speed19;
	      amplitude?: Amplitude17;
	    };
	  };
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements16 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent16;
	  };
	}
	export interface FlapEvent16 {
	  impulse_seconds?: ImpulseDurationSeconds16;
	  recovery_seconds?: RecoveryDurationSeconds16;
	  distance?: VerticalDistance16;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave17 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      speed?: Speed20;
	      amplitude?: Amplitude18;
	    };
	  };
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements17 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent17;
	  };
	}
	export interface FlapEvent17 {
	  impulse_seconds?: ImpulseDurationSeconds17;
	  recovery_seconds?: RecoveryDurationSeconds17;
	  distance?: VerticalDistance17;
	}
	/**
	 * If set, these abilities will be cast after the current one. These abilities must already be listed in the creature's Combat Abilities, or they will be ignored.
	 */
	export interface FollowupAbilities {
	  [k: string]: {
	    order: number;
	    element: FollowupAbility;
	  };
	}
	export interface FollowupAbility {
	  weight: Weight6;
	  ability: Ability6;
	  instant: Instant;
	  chance?: Chance3;
	}
	/**
	 * Attaching data fields to this world element will make them readable by other game mechanics/elements. Can be used to store custom data on a world element.
	 */
	export interface DataFields2 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	/**
	 * This creature may run in fear from things by entering a 'fleeing' state.
	 */
	export interface Fleeing {
	  sound?: FleeSound;
	  health_based?: FleeWhenInjured;
	  seconds: FleeDurationSeconds;
	  movement?: MotionOverride8;
	  targets?: FleeTargets;
	}
	export interface FleeWhenInjured {
	  probability: Probablity;
	  health_threshold: HealthThreshold2;
	}
	export interface FleeDurationSeconds {
	  value0: Min33;
	  value1: Max33;
	}
	export interface MotionOverride8 {
	  moving?: MovementVisuals9;
	  movespeed?: MovementSpeed9;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave18 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      speed?: Speed21;
	      amplitude?: Amplitude19;
	    };
	  };
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements18 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent18;
	  };
	}
	export interface FlapEvent18 {
	  impulse_seconds?: ImpulseDurationSeconds18;
	  recovery_seconds?: RecoveryDurationSeconds18;
	  distance?: VerticalDistance18;
	}
	/**
	 * The creature will immediately begin fleeing from these targets if it enters combat with them.
	 */
	export interface FleeTargets {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Loot1 {
	  [k: string]: {
	    order: number;
	    element: LootGroup1;
	  };
	}
	/**
	 * A collection of items that share the same rules about how they drop.
	 */
	export interface LootGroup1 {
	  datafield_evaluations?: DatafieldEvaluations39;
	  items_dropped: Items46;
	  num_drops?: DropQuantity1;
	  time_requirement?: TimeOfDay1;
	  trigger: Trigger2;
	  show_in_insight?: ShowInInsight1;
	  badge_requirement?: UnlockedBy9;
	  bonus_loot?: ConsiderAsBonus1;
	  item_tags_used?: ItemTagsUsed1;
	  ignore_in_progression_map?: IgnoreInProgressionMap2;
	  item_ids_used?: ItemsUsed5;
	  drop_chance?: DropChance1;
	  datafield_link?: DatafieldQuantityLink1;
	  source_listed?: IncludeAsSource1;
	  areas?: Areas4;
	}
	/**
	 * This loot group can check for data fields on the entity, and only drop if the conditions are met.
	 */
	export interface DatafieldEvaluations39 {
	  [k: string]: {
	    order: number;
	    element: {
	      comparison: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0: string;
	      value1: number;
	    };
	  };
	}
	export interface Items46 {
	  [k: string]: {
	    order: number;
	    element: {
	      weight: number;
	      locked: boolean;
	      item: string;
	    };
	  };
	}
	/**
	 * A random number of items will drop in this range.
	 */
	export interface DropQuantity1 {
	  value0: Min34;
	  value1: Max34;
	}
	/**
	 * The kinds of items required to be used on this for loot to drop.
	 */
	export interface ItemTagsUsed1 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	/**
	 * Specific items required to be used on this for loot to drop.
	 */
	export interface ItemsUsed5 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	/**
	 * If set, the loot will only drop from something within the listed areas.
	 */
	export interface Areas4 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Boss3 {
	  opening_sequence?: BossDialogueSequence;
	  using_lighting?: UseLighting6;
	  ending_sequence?: BossDialogueSequence1;
	  light_emitter?: LightEmitter;
	  priors?: ProgressionPriors;
	  wip?: WIP;
	  size: Size4;
	  dialogue_sfx?: DialogueSounds;
	  name: Name12;
	  reactions?: Reactions;
	  death?: Death;
	  editor_group?: EditorGroup11;
	  relative_level?: RelativeLevel2;
	  boss_loot?: Loot2;
	  movement: Motion1;
	  spine_skin?: SpineSkin2;
	  shadow?: Shadow;
	  injury_sounds?: InjurySounds2;
	  resistance_profile?: ResistanceProfile2;
	  sprite: WorldSprite9;
	  hp_modifier?: HPModifier2;
	  data_fields?: DataFields3;
	  name_color: NameColor;
	  level: Level2;
	  uicon: UIIcon9;
	}
	export interface BossDialogueSequence {
	  moments: DialogueMoments;
	  animation?: BossSpineAnimation;
	}
	export interface DialogueMoments {
	  [k: string]: {
	    order: number;
	    element: BossDialogueMoment;
	  };
	}
	/**
	 * Conditions that must be true for the quest to proceed.
	 */
	export interface MomentRequirements {
	  [k: string]: {
	    order: number;
	    element: Requirement;
	  };
	}
	/**
	 * The player must have at least these quantities of these items.
	 */
	export interface Items47 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      value?: Quantity51;
	      key?: string;
	    };
	  };
	}
	export interface InventoryEvaluation {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: Item2;
	      value1?: Quantity52;
	    };
	  };
	}
	/**
	 * Conditions that must be true for the quest to proceed.
	 */
	export interface MomentRequirements1 {
	  [k: string]: {
	    order: number;
	    element: Requirement;
	  };
	}
	export interface PetStage {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  stage?: "Egg" | "Baby" | "Adult" | "Embiggened";
	}
	export interface Entities {
	  [k: string]: {
	    order?: number;
	    element?: EntityType;
	  };
	}
	/**
	 * Characters or actors can convey emojis.
	 */
	export interface Emotes {
	  [k: string]: {
	    order?: number;
	    element?: {
	      value?: Emoji1;
	      key?: Character;
	    };
	  };
	}
	/**
	 * Here you can dictate which actors are looking at which things. This will remain true until you unset their look targets, or the quest moments come to an end.
	 */
	export interface LookTargets {
	  [k: string]: {
	    order?: number;
	    element?: {
	      value?: LooksAt;
	      key?: string;
	    };
	  };
	}
	/**
	 * These actors will stop being forced to look at something. If unset, all actors will resume default looking behavior.
	 */
	export interface Actors {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface BossDialogueSequence1 {
	  moments: DialogueMoments;
	  animation?: BossSpineAnimation;
	}
	export interface Size4 {
	  width: Width3;
	  height: Height3;
	}
	export interface DialogueSounds {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Name12 {
	  skip?: Skip27;
	  text: EnglishText27;
	}
	export interface Death {
	  animation: Animation28;
	  death_sound?: DeathSound;
	  particle_burst?: ParticleBurst;
	}
	export interface Loot2 {
	  [k: string]: {
	    order: number;
	    element: {
	      value: Quantity53;
	      key: Item3;
	    };
	  };
	}
	export interface Motion1 {
	  moving: MovementVisuals10;
	  stationary: StationaryVisuals9;
	  movespeed: MovementSpeed10;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave19 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      speed?: Speed22;
	      amplitude?: Amplitude20;
	    };
	  };
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements19 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent19;
	  };
	}
	export interface FlapEvent19 {
	  impulse_seconds?: ImpulseDurationSeconds19;
	  recovery_seconds?: RecoveryDurationSeconds19;
	  distance?: VerticalDistance19;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave20 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      speed?: Speed23;
	      amplitude?: Amplitude21;
	    };
	  };
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements20 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent20;
	  };
	}
	export interface FlapEvent20 {
	  impulse_seconds?: ImpulseDurationSeconds20;
	  recovery_seconds?: RecoveryDurationSeconds20;
	  distance?: VerticalDistance20;
	}
	/**
	 * Sound effects to play when this thing takes damage.
	 */
	export interface InjurySounds2 {
	  [k: string]: {
	    order: number;
	    element: {
	      chance_of_playing: Chance4;
	      minor_injury_sound: Minor2;
	      major_injury_sound: Major2;
	    };
	  };
	}
	/**
	 * Attaching data fields to this world element will make them readable by other game mechanics/elements. Can be used to store custom data on a world element.
	 */
	export interface DataFields3 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface NameColor {
	  r: Red12;
	  b: Blue12;
	  g: Green12;
	}
	/**
	 * A group of creature types that consider each other to be friendly and part of the same species. Creatures in a family won't damage each other.
	 */
	export interface CreatureFamily {
	  wip?: WIP;
	  icon: IconInternal;
	  name: FamilyNameInternal;
	  level: Level3;
	}
	export interface PetMastery {
	  uicon: Icon2;
	  pet: Pet1;
	  stage: PetStage1;
	  order: SortOrder;
	  wip?: WIP;
	  description: Description10;
	  name: Name13;
	}
	export interface Description10 {
	  skip?: Skip28;
	  text: EnglishText28;
	}
	export interface Name13 {
	  skip?: Skip29;
	  text: EnglishText29;
	}
	/**
	 * A simple item that is used for crafting.
	 */
	export interface Component {
	  fishing?: Fishing;
	  collection_sound?: CollectionSound1;
	  uicon?: UIIcon10;
	  bait_num_fish_boost?: BaitPower;
	  whopper_bait?: WhopperBait;
	  using_lighting: UseLighting7;
	  light_emitter?: LightEmitter;
	  effort_modifier?: EffortModifier10;
	  priors?: ProgressionPriors;
	  wip?: WIP;
	  name: Name14;
	  recipe?: Recipe8;
	  editor_group?: EditorGroup12;
	  scale_modifier?: Scale;
	  sprite: WorldSprite10;
	  description: Description11;
	  no_expiration?: NoExpiration;
	  material_tags?: Materials1;
	}
	/**
	 * If set, this item can be obtained via fishing.
	 */
	export interface Fishing {
	  weight: Frequency;
	  singleton: Singleton;
	  sources: FishingSources;
	  whopper: Whopper;
	  unlocked_by?: UnlockedBy10;
	}
	export interface FishingSources {
	  [k: string]: {
	    order: number;
	    element: {
	      exclusion: Exclude39;
	      area_id: Area;
	    };
	  };
	}
	export interface UnlockedBy10 {
	  prerequisite: UnlockedBy11;
	  unlock_text?: UnlockDescription;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription {
	  skip?: Skip30;
	  text: EnglishText30;
	  description?: TranslatorHelperText25;
	}
	export interface Name14 {
	  skip?: Skip31;
	  text: EnglishText31;
	  description?: TranslatorHelperText26;
	}
	export interface Recipe8 {
	  artisans?: ArtisansRequired8;
	  station: Station8;
	  badge_output_modifiers?: OutputModifiedByResearch8;
	  badge_cost_modifiers?: CostModifiedByResearch8;
	  source?: UnlockedBy12;
	  components: Ingredients8;
	  effort_modifier?: EffortModifier11;
	  output_quantity?: OutputQuantity8;
	}
	export interface ArtisansRequired8 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface OutputModifiedByResearch8 {
	  [k: string]: {
	    order: number;
	    element: {
	      style: Style8;
	      value: ChangePerPoint20;
	      badge_id: ResearchNode16;
	    };
	  };
	}
	export interface CostModifiedByResearch8 {
	  [k: string]: {
	    order: number;
	    element: {
	      value: ChangePerPoint21;
	      badge_id: ResearchNode17;
	    };
	  };
	}
	export interface Ingredients8 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Description11 {
	  skip?: Skip32;
	  text: EnglishText32;
	  description?: TranslatorHelperText27;
	}
	/**
	 * What is this thing made of? This is used for categorization and can otherwise be used by abilities, fulfillments, etc... to broadly categorize interactions.
	 */
	export interface Materials1 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	/**
	 * A companion character who can help with crafting and research.
	 */
	export interface Buddy3 {
	  hitbox: Hitbox;
	  using_lighting?: UseLighting8;
	  light_emitter?: LightEmitter;
	  background_info?: BackgroundInformation;
	  looks_at_player: LooksAtPlayer;
	  priors?: ProgressionPriors;
	  object: WorldObject;
	  follow_unlock?: FollowingUnlock;
	  wip?: WIP;
	  insight_unlock?: InsightUnlocker;
	  color_bright: UIColorBright;
	  color_mid: UIColorMid;
	  color_dark: UIColorDark;
	  name: BuddyName;
	  convert_to_artisan?: ConvertToOtherBuddy;
	  idle_text?: IdleText;
	  editor_group?: EditorGroup13;
	  sprite: WorldSprite11;
	  sounds: Sounds;
	  banner_portrait?: BannerPortrait;
	  banner_background?: BannerBackground;
	  uicon: UIIcon11;
	}
	/**
	 * For developer use. Just for establishing background information.
	 */
	export interface BackgroundInformation {
	  personality?: Personality;
	  notes?: Notes1;
	  brief?: Brief;
	  pronouns?: Pronouns;
	}
	/**
	 * Information about this character's background and their role in the game world.
	 */
	export interface Notes1 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	/**
	 * The color to use for the buddy's UI highlights.
	 */
	export interface UIColorBright {
	  r: Red13;
	  b: Blue13;
	  g: Green13;
	}
	/**
	 * The color to use for the buddy's UI midtones.
	 */
	export interface UIColorMid {
	  r: Red14;
	  b: Blue14;
	  g: Green14;
	}
	/**
	 * The color to use for the buddy's UI backgrounds.
	 */
	export interface UIColorDark {
	  r: Red15;
	  b: Blue15;
	  g: Green15;
	}
	export interface BuddyName {
	  skip?: Skip33;
	  text: EnglishText33;
	  description?: TranslatorHelperText28;
	}
	/**
	 * This buddy can become a different buddy when the player completes a certain quest.
	 */
	export interface ConvertToOtherBuddy {
	  convert_to: ConvertTo;
	  unlocked_by: ConvertAfterQuest;
	}
	/**
	 * Fallback things the character can say when interacted with when they aren't involved in any quests.
	 */
	export interface IdleText {
	  [k: string]: {
	    order: number;
	    element: Topic;
	  };
	}
	/**
	 * For each topic, the character will say latest Phrase Group whose requirements are met (if any).
	 */
	export interface Topic {
	  requirements?: MomentRequirements2;
	  phrase_groups: PhraseGroups;
	  name: TopicNameInternal;
	}
	/**
	 * Conditions that must be true for the quest to proceed.
	 */
	export interface MomentRequirements2 {
	  [k: string]: {
	    order: number;
	    element: Requirement;
	  };
	}
	/**
	 * The character will say lines from the latest phrase group whose requirements are met.
	 */
	export interface PhraseGroups {
	  [k: string]: {
	    order: number;
	    element: PhraseGroup;
	  };
	}
	export interface PhraseGroup {
	  requirements?: Requirements;
	  phrases: Phrases;
	  name: GroupNameInternal;
	}
	/**
	 * Conditions that must be true for the quest to proceed.
	 */
	export interface Requirements {
	  [k: string]: {
	    order: number;
	    element: Requirement1;
	  };
	}
	/**
	 * The player must have at least these quantities of these items.
	 */
	export interface Items48 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      value?: Quantity54;
	      key?: string;
	    };
	  };
	}
	export interface InventoryEvaluation1 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: Item5;
	      value1?: Quantity55;
	    };
	  };
	}
	/**
	 * Conditions that must be true for the quest to proceed.
	 */
	export interface Requirements1 {
	  [k: string]: {
	    order: number;
	    element: Requirement1;
	  };
	}
	export interface PetStage2 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  stage?: "Egg" | "Baby" | "Adult" | "Embiggened";
	}
	export interface Phrases {
	  [k: string]: {
	    order: number;
	    element: {
	      emoji?: Emoji2;
	      text: {
	        skip?: Skip34;
	        text: EnglishText34;
	      };
	    };
	  };
	}
	export interface Sounds {
	  interact: Interact;
	  follow_start: FollowStart;
	  follow_end: FollowEnd;
	  blocked: ActionBlocked;
	  research_start: ResearchStart;
	  research_collect: ResearchCollected;
	  comfort_gained: ComfortGained;
	  comfort_lost: ComfortLost;
	}
	export interface PetEgg {
	  uicon: UIIcon12;
	  editor_group?: EditorGroup14;
	  using_lighting: UseLighting9;
	  light_emitter?: LightEmitter;
	  priors?: ProgressionPriors;
	  wip?: WIP;
	  sprite: WorldSprite12;
	  size: Size5;
	  description: Description12;
	  name: Name15;
	}
	export interface Size5 {
	  width: Width4;
	  height: Height4;
	}
	export interface Description12 {
	  skip?: Skip35;
	  text: EnglishText35;
	  description?: TranslatorHelperText29;
	}
	export interface Name15 {
	  skip?: Skip36;
	  text: EnglishText36;
	  description?: TranslatorHelperText30;
	}
	/**
	 * A pickupable item that is used for important story moments.
	 */
	export interface KeyItem {
	  fishing?: Fishing;
	  uicon: UIIcon13;
	  collection_sound?: CollectionSound2;
	  door_unlock_sound?: DoorUnlockSound1;
	  using_lighting?: UseLighting10;
	  requires_land?: RequiresLand2;
	  light_emitter?: LightEmitter;
	  priors?: ProgressionPriors;
	  wip?: WIP;
	  babbler?: Babbler68;
	  size: Size6;
	  jingle_override?: JingleOverride1;
	  name: Name16;
	  editor_group?: EditorGroup15;
	  scale_modifier?: ScaleModifier3;
	  level_viewer_ignore?: IgnoreInLevelViewer2;
	  can_exist_on_floors?: CanExistOnFloors1;
	  sprite: WorldSprite13;
	  grid_snapping?: GridSnapping2;
	  spine_idle?: SpineIdle1;
	}
	export interface Size6 {
	  width: Width5;
	  height: Height5;
	}
	export interface Name16 {
	  skip?: Skip37;
	  text: EnglishText37;
	  description?: TranslatorHelperText31;
	}
	export interface Pet3 {
	  using_lighting: UseLighting11;
	  light_emitter?: LightEmitter;
	  ability_sound?: AbilityActivationSound;
	  hatching: Hatching;
	  priors?: ProgressionPriors;
	  wip?: WIP;
	  size: Size7;
	  appearances: Appearances;
	  chirp_sound?: ChirpSound;
	  ui_sound?: UIOpenSound;
	  name: Name18;
	  follow_sound?: FollowSound;
	  ability_melee: AbilityRequiresMelee;
	  ability_name: AbilityName;
	  ability_description: AbilityDescription;
	  follow_stop_sound?: StopFollowingSound;
	  synergies: Synergies;
	  movement: Motion2;
	  spine_skin: PreviewSkin;
	  sprite: WorldSprite14;
	  description: Description13;
	  uicon: UIIcon14;
	  ui_color?: UIColor;
	  abilities: AbilitySequence;
	  ability_cooldown: AbilityCooldownSeconds;
	}
	export interface Hatching {
	  egg_sound: EggSounds;
	  hatching_requirements?: Requirements2;
	  egg: Egg;
	}
	export interface Requirements2 {
	  [k: string]: {
	    order: number;
	    element: CheckMark;
	  };
	}
	export interface CheckMark {
	  requirements: CheckMarkConditions;
	  description: Name17;
	}
	export interface CheckMarkConditions {
	  [k: string]: {
	    order: number;
	    element: Condition3;
	  };
	}
	/**
	 * The number of spaces that are not occupied by structures (walls/doors/pillars).
	 */
	export interface InteriorTileArea {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: number;
	}
	/**
	 * Note that if you include an item tag and an item that also belongs to that tag, the item will be double-counted.
	 */
	export interface Items49 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface NumberOfRooms {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: number;
	}
	/**
	 * The items used to check for relationships. Variant items will count as each other.
	 */
	export interface SourceItems {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value0?: {
	    [k: string]: {
	      order?: number;
	      element?: string;
	    };
	  };
	  value1?: number;
	}
	/**
	 * The items to check against the source items. Variant items will count as each other.
	 */
	export interface TargetItems {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value0?: {
	    [k: string]: {
	      order?: number;
	      element?: string;
	    };
	  };
	  value1?: number;
	}
	/**
	 * The evaluated number of source items must meet the tile distance requirement against the evaluated number of target items.
	 */
	export interface TileDistance {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: number;
	}
	/**
	 * Describe these conditions in a short sentence. This will be next to a checkmark that will check once the requirements are complete.
	 */
	export interface Name17 {
	  skip?: Skip38;
	  text: EnglishText38;
	  description?: TranslatorHelperText32;
	}
	export interface Size7 {
	  width: Width6;
	  height: Height6;
	}
	/**
	 * These appearances correspond with the three stages of a pet's life: Baby, Adult, and Embiggened.
	 */
	export interface Appearances {
	  [k: string]: {
	    order: number;
	    element: {
	      skin_name: SkinName;
	      scale: Scale1;
	    };
	  };
	}
	export interface Name18 {
	  skip?: Skip39;
	  text: EnglishText39;
	  description?: TranslatorHelperText33;
	}
	/**
	 * As shown in the pet interface.
	 */
	export interface AbilityName {
	  skip?: Skip40;
	  text: EnglishText40;
	}
	/**
	 * As shown in the pet interface.
	 */
	export interface AbilityDescription {
	  skip?: Skip41;
	  text: EnglishText41;
	}
	/**
	 * Passive benefits from having this pet with you.
	 */
	export interface Synergies {
	  [k: string]: {
	    order: number;
	    element: Synergy;
	  };
	}
	/**
	 * A passive benefit from having this pet with you.
	 */
	export interface Synergy {
	  reactions?: Reactions1;
	  mastery?: MasteryLink;
	  stat_boost?: StatBoost;
	}
	/**
	 * A set of reactions that get added to the player while this pet is following them.
	 */
	export interface Reactions1 {
	  reactions: Reactions;
	}
	/**
	 * You can activate (or deactivate) this synergy via specific masteries.
	 */
	export interface MasteryLink {
	  mastery_id: Mastery;
	  deactivates: MasteryDeactivatesSynergy;
	}
	/**
	 * Passive stat boost from having this pet with you.
	 */
	export interface StatBoost {
	  amounts: StatBoostAmount;
	  modifier_style: ModifierStyle;
	  stat: Stat;
	}
	export interface StatBoostAmount {
	  value0: Baby;
	  value1: Embiggened;
	}
	export interface Motion2 {
	  moving: MovementVisuals11;
	  stationary: StationaryVisuals10;
	  movespeed: MovementSpeed11;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave21 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      speed?: Speed24;
	      amplitude?: Amplitude22;
	    };
	  };
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements21 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent21;
	  };
	}
	export interface FlapEvent21 {
	  impulse_seconds?: ImpulseDurationSeconds21;
	  recovery_seconds?: RecoveryDurationSeconds21;
	  distance?: VerticalDistance21;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave22 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      speed?: Speed25;
	      amplitude?: Amplitude23;
	    };
	  };
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements22 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent22;
	  };
	}
	export interface FlapEvent22 {
	  impulse_seconds?: ImpulseDurationSeconds22;
	  recovery_seconds?: RecoveryDurationSeconds22;
	  distance?: VerticalDistance22;
	}
	export interface Description13 {
	  skip?: Skip42;
	  text: EnglishText42;
	  description?: TranslatorHelperText34;
	}
	/**
	 * The color to use for this pet's UI.
	 */
	export interface UIColor {
	  r: Red16;
	  b: Blue16;
	  g: Green16;
	}
	/**
	 * The abilities the pet will use in combat (in order).
	 */
	export interface AbilitySequence {
	  [k: string]: {
	    order: number;
	    element: Ability7;
	  };
	}
	/**
	 * The ability the pet will perform on command in combat.
	 */
	export interface Ability7 {
	  enabled_default: EnabledByDefault;
	  ability: Ability8;
	  movement?: MotionOverride9;
	  post_ability_pause: PostAbilityPause1;
	  enablement?: Enablement;
	  target: Target;
	}
	export interface MotionOverride9 {
	  moving?: MovementVisuals12;
	  stationary?: StationaryVisuals11;
	  movespeed?: MovementSpeed12;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave23 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      speed?: Speed26;
	      amplitude?: Amplitude24;
	    };
	  };
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements23 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent23;
	  };
	}
	export interface FlapEvent23 {
	  impulse_seconds?: ImpulseDurationSeconds23;
	  recovery_seconds?: RecoveryDurationSeconds23;
	  distance?: VerticalDistance23;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave24 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      speed?: Speed27;
	      amplitude?: Amplitude25;
	    };
	  };
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements24 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent24;
	  };
	}
	export interface FlapEvent24 {
	  impulse_seconds?: ImpulseDurationSeconds24;
	  recovery_seconds?: RecoveryDurationSeconds24;
	  distance?: VerticalDistance24;
	}
	/**
	 * If set, the creature will wait for this many seconds after using this ability before moving on to the next ability.
	 */
	export interface PostAbilityPause1 {
	  value0: MinSeconds4;
	  value1: MaxSeconds4;
	}
	/**
	 * Links to pet stages or masteries that can either enable or disable this ability in the sequence. Enablements are evaluated starting at the end, and the first one met dictates whether the ability is enabled.
	 */
	export interface Enablement {
	  [k: string]: {
	    order: number;
	    element: AbilityEnablement;
	  };
	}
	export interface AbilityEnablement {
	  mastery?: Mastery1;
	  stage?: Stage;
	  enables: Enables;
	}
	export interface SeedPack {
	  uicon: UIIcon15;
	  growth_minutes_insight_modifier?: GrowthMinutesInsightModifier;
	  using_lighting?: UseLighting12;
	  grows_into: GrowsInto;
	  light_emitter?: LightEmitter;
	  priors?: ProgressionPriors;
	  shiny_boost?: ShinyBoostingInsights;
	  wip?: WIP;
	  name: Name19;
	  recipe?: Recipe9;
	  required_tile: GardenBed1;
	  editor_group?: EditorGroup16;
	  num_regrows: NumberOfRegrows;
	  regrow_insights?: RegrowBoostingInsights;
	  shiny_chance: ShinyChance;
	  growth_minutes: MinutesToGrow;
	  sprite: WorldSprite15;
	  free_regrows?: FreeRegrows;
	  description: Description14;
	}
	export interface GrowthMinutesInsightModifier {
	  insight: Insight9;
	  amount: ChangePerPoint22;
	}
	/**
	 * You can have Insights give additional, independent chances for a Seed Pack to become shiny (if fertilized).
	 */
	export interface ShinyBoostingInsights {
	  [k: string]: {
	    order: number;
	    element: ShinyBoostingInsight;
	  };
	}
	export interface ShinyBoostingInsight {
	  insight: Insight10;
	  chance: AddedChance;
	}
	export interface Name19 {
	  skip?: Skip43;
	  text: EnglishText43;
	  description?: TranslatorHelperText35;
	}
	export interface Recipe9 {
	  artisans?: ArtisansRequired9;
	  station: Station9;
	  badge_output_modifiers?: OutputModifiedByResearch9;
	  badge_cost_modifiers?: CostModifiedByResearch9;
	  source?: UnlockedBy13;
	  components: Ingredients9;
	  effort_modifier?: EffortModifier12;
	  output_quantity?: OutputQuantity9;
	}
	export interface ArtisansRequired9 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface OutputModifiedByResearch9 {
	  [k: string]: {
	    order: number;
	    element: {
	      style: Style9;
	      value: ChangePerPoint23;
	      badge_id: ResearchNode18;
	    };
	  };
	}
	export interface CostModifiedByResearch9 {
	  [k: string]: {
	    order: number;
	    element: {
	      value: ChangePerPoint24;
	      badge_id: ResearchNode19;
	    };
	  };
	}
	export interface Ingredients9 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface RegrowBoostingInsights {
	  [k: string]: {
	    order: number;
	    element: {
	      insight: Insight11;
	      regrows_per_point: RegrowsPerPoint;
	    };
	  };
	}
	/**
	 * Each time this Seed Pack grows into a plant, it can have a chance to not consume one of its 'Regrows'.
	 */
	export interface FreeRegrows {
	  insight: FreeRegrowInsight;
	  free_regrow_chance: FreeRegrowChance;
	}
	export interface Description14 {
	  skip?: Skip44;
	  text: EnglishText44;
	  description?: TranslatorHelperText36;
	}
	/**
	 * A piece of protective equipment worn by the player.
	 */
	export interface Armor {
	  uicon: UIIcon16;
	  type: ArmorType;
	  priors?: ProgressionPriors;
	  wip?: WIP;
	  spine_name: SpineKeyword;
	  jingle_override?: JingleOverride2;
	  equipment_set?: EquipmentSet3;
	  inventory_sound: InventorySound;
	  name: Name20;
	  recipe?: Recipe10;
	  equipment_default_stats?: DefaultStats;
	  reactions?: Reactions;
	  editor_group?: EditorGroup17;
	  description: Description15;
	  level: Level4;
	}
	export interface Name20 {
	  skip?: Skip45;
	  text: EnglishText45;
	  description?: TranslatorHelperText37;
	}
	export interface Recipe10 {
	  artisans?: ArtisansRequired10;
	  station: Station10;
	  badge_cost_modifiers?: CostModifiedByResearch10;
	  source?: UnlockedBy14;
	  components: Ingredients10;
	  effort_modifier?: EffortModifier13;
	}
	export interface ArtisansRequired10 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface CostModifiedByResearch10 {
	  [k: string]: {
	    order: number;
	    element: {
	      value: ChangePerPoint25;
	      badge_id: ResearchNode20;
	    };
	  };
	}
	export interface Ingredients10 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	/**
	 * You can allocate stats for this item to have on it by default when obtained. This will not affect already-obtained items.
	 */
	export interface DefaultStats {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Description15 {
	  skip?: Skip46;
	  text: EnglishText46;
	  description?: TranslatorHelperText38;
	}
	/**
	 * A unique equippable item that conveys a passive benefit.
	 */
	export interface Trinket {
	  uicon: UIIcon17;
	  priors?: ProgressionPriors;
	  wip?: WIP;
	  jingle_override?: JingleOverride3;
	  equipment_set?: EquipmentSet4;
	  inventory_sound: InventorySound1;
	  name: Name21;
	  recipe?: Recipe11;
	  equipment_default_stats?: DefaultStats1;
	  reactions?: Reactions;
	  editor_group?: EditorGroup18;
	  level_viewer_ignore?: IgnoreInLevelViewer3;
	  description: Description16;
	  level: Level5;
	}
	export interface Name21 {
	  skip?: Skip47;
	  text: EnglishText47;
	  description?: TranslatorHelperText39;
	}
	export interface Recipe11 {
	  artisans?: ArtisansRequired11;
	  station: Station11;
	  badge_cost_modifiers?: CostModifiedByResearch11;
	  source?: UnlockedBy15;
	  components: Ingredients11;
	  effort_modifier?: EffortModifier14;
	}
	export interface ArtisansRequired11 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface CostModifiedByResearch11 {
	  [k: string]: {
	    order: number;
	    element: {
	      value: ChangePerPoint26;
	      badge_id: ResearchNode21;
	    };
	  };
	}
	export interface Ingredients11 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	/**
	 * You can allocate stats for this item to have on it by default when obtained. This will not affect already-obtained items.
	 */
	export interface DefaultStats1 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Description16 {
	  skip?: Skip48;
	  text: EnglishText48;
	  description?: TranslatorHelperText40;
	}
	export interface Wieldable {
	  ability?: Ability9;
	  stackable?: Stackable;
	  swing_sound: UseSound;
	  wield_sound: WieldSound;
	  wield_spine_name?: SpineAttachmentName;
	  type: Type1;
	  priors?: ProgressionPriors;
	  wip?: WIP;
	  jingle_override?: JingleOverride4;
	  expiration_minutes?: DynamicExpirationMinutes2;
	  equipment_set?: EquipmentSet5;
	  inventory_sound: InventorySound2;
	  name: Name22;
	  recipe?: Recipe12;
	  equipment_default_stats?: DefaultStats2;
	  reactions?: Reactions;
	  editor_group?: EditorGroup19;
	  scale_modifier?: ScaleModifier4;
	  level_viewer_ignore?: IgnoreInLevelViewer4;
	  sprite?: WorldSprite16;
	  description: Description17;
	  level: Level6;
	  fishing?: Fishing;
	  collection_sound?: CollectionSound3;
	  uicon: UIIcon18;
	  manual_pickup?: ManualPickup1;
	  fishing_power?: FishingPower;
	}
	export interface Name22 {
	  skip?: Skip49;
	  text: EnglishText49;
	  description?: TranslatorHelperText41;
	}
	export interface Recipe12 {
	  artisans?: ArtisansRequired12;
	  station: Station12;
	  badge_output_modifiers?: OutputModifiedByResearch10;
	  badge_cost_modifiers?: CostModifiedByResearch12;
	  source?: UnlockedBy16;
	  components: Ingredients12;
	  effort_modifier?: EffortModifier15;
	  output_quantity?: OutputQuantity10;
	}
	export interface ArtisansRequired12 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface OutputModifiedByResearch10 {
	  [k: string]: {
	    order: number;
	    element: {
	      style: Style10;
	      value: ChangePerPoint27;
	      badge_id: ResearchNode22;
	    };
	  };
	}
	export interface CostModifiedByResearch12 {
	  [k: string]: {
	    order: number;
	    element: {
	      value: ChangePerPoint28;
	      badge_id: ResearchNode23;
	    };
	  };
	}
	export interface Ingredients12 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	/**
	 * You can allocate stats for this item to have on it by default when obtained. This will not affect already-obtained items.
	 */
	export interface DefaultStats2 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Description17 {
	  skip?: Skip50;
	  text: EnglishText50;
	  description?: TranslatorHelperText42;
	}
	/**
	 * Items that can be used during gameplay to heal or provide temporary boosts.
	 */
	export interface Consumable {
	  level: Level7;
	  fishing?: Fishing;
	  uicon?: UIIcon19;
	  type: Type2;
	  priors?: ProgressionPriors;
	  wip?: WIP;
	  expiration_minutes?: DynamicExpirationMinutes3;
	  use_sound: ConsumeSound;
	  inventory_sound: InventorySound3;
	  name: Name23;
	  recipe?: Recipe13;
	  editor_group?: EditorGroup20;
	  sprite: WorldSprite17;
	  description: Description18;
	  effects: Effects;
	}
	export interface Name23 {
	  skip?: Skip51;
	  text: EnglishText51;
	  description?: TranslatorHelperText43;
	}
	export interface Recipe13 {
	  artisans?: ArtisansRequired13;
	  station: Station13;
	  badge_output_modifiers?: OutputModifiedByResearch11;
	  badge_cost_modifiers?: CostModifiedByResearch13;
	  source?: UnlockedBy17;
	  components: Ingredients13;
	  effort_modifier?: EffortModifier16;
	  output_quantity?: OutputQuantity11;
	}
	export interface ArtisansRequired13 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface OutputModifiedByResearch11 {
	  [k: string]: {
	    order: number;
	    element: {
	      style: Style11;
	      value: ChangePerPoint29;
	      badge_id: ResearchNode24;
	    };
	  };
	}
	export interface CostModifiedByResearch13 {
	  [k: string]: {
	    order: number;
	    element: {
	      value: ChangePerPoint30;
	      badge_id: ResearchNode25;
	    };
	  };
	}
	export interface Ingredients13 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Description18 {
	  skip?: Skip52;
	  text: EnglishText52;
	  description?: TranslatorHelperText44;
	}
	export interface Effects {
	  [k: string]: {
	    order: number;
	    element: Effect;
	  };
	}
	export interface UnlockedBy18 {
	  prerequisite: UnlockedBy19;
	  unlock_text?: UnlockDescription1;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription1 {
	  skip?: Skip53;
	  text: EnglishText53;
	  description?: TranslatorHelperText45;
	}
	export interface UnlockedBy20 {
	  prerequisite: UnlockedBy21;
	  unlock_text?: UnlockDescription2;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription2 {
	  skip?: Skip54;
	  text: EnglishText54;
	  description?: TranslatorHelperText46;
	}
	/**
	 * A basic object that can be used for environmental storytelling. It cannot take damage.
	 */
	export interface EnvironmentalObject {
	  underfoot: Underfoot2;
	  hitbox: Hitbox;
	  hide_under_roof?: HideUnderRoof2;
	  using_lighting: UseLighting13;
	  requires_land?: RequiresLand3;
	  light_emitter?: LightEmitter;
	  random_scaling?: RandomScalingMinimum2;
	  death_sounds?: DestructionSounds2;
	  object?: Object4;
	  wip?: WIP;
	  expiration_minutes?: DynamicExpirationMinutes4;
	  name: Name24;
	  reactions?: Reactions;
	  states?: EntityStates;
	  editor_group?: EditorGroup21;
	  worldmap_tile_color?: WorldMapTileColor2;
	  scale_modifier?: ScaleModifier5;
	  relative_level?: RelativeLevel3;
	  spine_skin?: SpineSkin3;
	  shadow?: Shadow;
	  merge_root?: AutoMergeRootItem1;
	  sprite: WorldSprite18;
	  grid_snapping?: GridSnapping3;
	  randomized_skin?: RandomizedSpineSkin1;
	  bullet_interaction?: BulletInteraction2;
	  data_fields?: DataFields4;
	  description?: Description19;
	  invisible?: Invisible;
	  randomized_subimages?: EditableSubimages;
	  spine_idle?: SpineIdle2;
	  level?: Level8;
	  flippable: Flippable5;
	  uicon?: UIIcon20;
	  babbler?: Babbler81;
	  particle_emitters?: ParticleEmitters2;
	  editor_category?: EditorCategoryOverride;
	  blocks_abilities?: BlocksAbilities;
	}
	/**
	 * Sound effects to play when this thing is destroyed.
	 */
	export interface DestructionSounds2 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Name24 {
	  skip?: Skip55;
	  text: EnglishText55;
	  description?: TranslatorHelperText47;
	}
	/**
	 * If set, this item will be drawn on the world map as a colored tile.
	 */
	export interface WorldMapTileColor2 {
	  r: Red17;
	  b: Blue17;
	  g: Green17;
	}
	/**
	 * Attaching data fields to this world element will make them readable by other game mechanics/elements. Can be used to store custom data on a world element.
	 */
	export interface DataFields4 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Description19 {
	  skip?: Skip56;
	  text: EnglishText56;
	  description?: TranslatorHelperText48;
	}
	export interface ParticleEmitters2 {
	  [k: string]: {
	    order: number;
	    element: ParticleEmitter2;
	  };
	}
	export interface ParticleEmitter2 {
	  behind?: Behind2;
	  states?: RequiredStates2;
	  spine_bone?: SpineBone2;
	  x_offset: XOffset2;
	  emitter_scale?: EmitterScale3;
	  y_offset: YOffset4;
	  particle_system: ParticleSystem3;
	}
	/**
	 * If set, the particle system will only emit if the object is in one of these states
	 */
	export interface RequiredStates2 {
	  [k: string]: {
	    order: number;
	    element: State5;
	  };
	}
	/**
	 * A pickupable recipe.
	 */
	export interface Schematic {
	  fishing?: Fishing;
	  priors?: ProgressionPriors;
	  wip?: WIP;
	  editor_group?: EditorGroup22;
	  name: NameInternal2;
	}
	export interface Player {
	  uicon: UIIcon21;
	  size: Size8;
	  wip?: WIP;
	  name: Name25;
	  buildmode_placement_sound: BuildModePlacementSound;
	  buildmode_pickup_sound: BuildModePickupSound;
	  reactions?: Reactions;
	  editor_group?: EditorGroup23;
	  shadow: Shadow;
	  injury_sounds: InjurySounds3;
	  sprite: WorldSprite19;
	  name_color: NameColor1;
	}
	export interface Size8 {
	  width: Width7;
	  height: Height7;
	}
	export interface Name25 {
	  skip?: Skip57;
	  text: EnglishText57;
	  description?: TranslatorHelperText49;
	}
	/**
	 * Sound effects to play when this thing takes damage.
	 */
	export interface InjurySounds3 {
	  [k: string]: {
	    order: number;
	    element: {
	      chance_of_playing: Chance5;
	      minor_injury_sound: Minor3;
	      major_injury_sound: Major3;
	    };
	  };
	}
	/**
	 * For when this name is displayed in a dialogue window.
	 */
	export interface NameColor1 {
	  r: Red18;
	  b: Blue18;
	  g: Green18;
	}
	export interface Juicebox {
	  uicon: UIIcon22;
	  editor_group?: EditorGroup24;
	  dialogue_sounds: DialogueSounds1;
	  follow_unlock?: FollowingUnlock1;
	  wip?: WIP;
	  size: Hitbox1;
	  sprite: WorldSprite20;
	  color_bright: UIColor1;
	  name: Name26;
	}
	/**
	 * Sounds for Juicebox to play (at random) during dialogue moments.
	 */
	export interface DialogueSounds1 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Hitbox1 {
	  width: Width8;
	  height: Height8;
	}
	/**
	 * The color to use for Juicebox's UI.
	 */
	export interface UIColor1 {
	  r: Red19;
	  b: Blue19;
	  g: Green19;
	}
	export interface Name26 {
	  skip?: Skip58;
	  text: EnglishText58;
	  description?: TranslatorHelperText50;
	}
	/**
	 * A thing that can hold stuff.
	 */
	export interface Chest {
	  uicon: UIIcon23;
	  hitbox: Hitbox;
	  hide_under_roof?: HideUnderRoof3;
	  using_lighting?: UseLighting14;
	  requires_land?: RequiresLand4;
	  light_emitter?: LightEmitter;
	  random_scaling?: RandomScalingMinimum3;
	  death_sounds?: DestructionSounds3;
	  object?: Object5;
	  wip?: WIP;
	  babbler?: Babbler82;
	  name: Name27;
	  editor_group?: EditorGroup25;
	  shadow?: Shadow;
	  sprite: WorldSprite21;
	  data_fields?: DataFields5;
	}
	/**
	 * Sound effects to play when this thing is destroyed.
	 */
	export interface DestructionSounds3 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Name27 {
	  skip?: Skip59;
	  text: EnglishText59;
	  description?: TranslatorHelperText51;
	}
	/**
	 * Attaching data fields to this world element will make them readable by other game mechanics/elements. Can be used to store custom data on a world element.
	 */
	export interface DataFields5 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Character2 {
	  fallback_actors?: FallbackActors;
	  background_info?: BackgroundInformation1;
	  wip?: WIP;
	  name: Name28;
	  idle_text?: IdleText1;
	  editor_group?: EditorGroup26;
	  editor_excluded?: EditorExcluded2;
	  speech_sounds?: SpeechSoundsOverride;
	  species: Species;
	  name_color?: NameColor2;
	  vocal_pitch?: VocalPitch;
	}
	/**
	 * If the actor is not available, this actor will be used instead.
	 */
	export interface FallbackActors {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	/**
	 * For developer use. Just for establishing background information.
	 */
	export interface BackgroundInformation1 {
	  personality?: Personality1;
	  notes?: Notes2;
	  brief?: Brief1;
	  pronouns?: Pronouns1;
	}
	/**
	 * Information about this character's background and their role in the game world.
	 */
	export interface Notes2 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Name28 {
	  skip?: Skip60;
	  text: EnglishText60;
	  description?: TranslatorHelperText52;
	}
	/**
	 * Fallback things the character can say when interacted with when they aren't involved in any quests.
	 */
	export interface IdleText1 {
	  [k: string]: {
	    order: number;
	    element: Topic1;
	  };
	}
	/**
	 * For each topic, the character will say latest Phrase Group whose requirements are met (if any).
	 */
	export interface Topic1 {
	  requirements?: MomentRequirements3;
	  phrase_groups: PhraseGroups1;
	  name: TopicNameInternal1;
	}
	/**
	 * Conditions that must be true for the quest to proceed.
	 */
	export interface MomentRequirements3 {
	  [k: string]: {
	    order: number;
	    element: Requirement;
	  };
	}
	/**
	 * The character will say lines from the latest phrase group whose requirements are met.
	 */
	export interface PhraseGroups1 {
	  [k: string]: {
	    order: number;
	    element: PhraseGroup1;
	  };
	}
	export interface PhraseGroup1 {
	  requirements?: Requirements3;
	  phrases: Phrases1;
	  name: GroupNameInternal1;
	}
	/**
	 * Conditions that must be true for the quest to proceed.
	 */
	export interface Requirements3 {
	  [k: string]: {
	    order: number;
	    element: Requirement1;
	  };
	}
	export interface Phrases1 {
	  [k: string]: {
	    order: number;
	    element: {
	      emoji?: Emoji3;
	      text: {
	        skip?: Skip61;
	        text: EnglishText61;
	      };
	    };
	  };
	}
	/**
	 * Overrides the default speech sounds of the NPC's species.
	 */
	export interface SpeechSoundsOverride {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	/**
	 * For when this name is displayed in a dialogue window.
	 */
	export interface NameColor2 {
	  r: Red20;
	  b: Blue20;
	  g: Green20;
	}
	export interface SpineAttachments {
	  necklace?: Necklace;
	  wieldable?: Wieldable1;
	  bag?: Bag;
	  mask?: Mask;
	}
	export interface SpineAttachments1 {
	  backpack?: Backpack;
	  necklace?: Necklace1;
	  armwrap?: Armwrap;
	  frill_forehead?: FrillForehead;
	  frill_jaw?: FrillJaw;
	  beak?: Beak;
	  hat?: Hat;
	  eyes?: Eyes;
	}
	/**
	 * A tag used to convey properties of an item in Crashlands 2. All tags have mechanical implications for how the item is handled by various game systems.
	 */
	export interface ItemTag {
	  invulnerable?: Invulnerable;
	  priority: TagPriority;
	  uicon?: UIIcon24;
	  settable_on_items?: SettableOnItems;
	  crafting_effort?: CraftingEffortMultiplier;
	  buildmode?: BuildModeAccessible;
	  num_craft_for_skill?: NumCraftsForFirstSkillLevel;
	  parent_tag?: ParentTag;
	  wip?: WIP;
	  inventory_sound?: InventorySound4;
	  name: TagName;
	  editor_category?: EditorCategory;
	  respawnable?: Respawnable1;
	  recipe_category?: RecipeCategory;
	}
	/**
	 * If the tag is displayed to the player (e.g. on the Equipment screen), they will see this name.
	 */
	export interface TagName {
	  skip?: Skip62;
	  text: EnglishText62;
	  description?: TranslatorHelperText53;
	}
	/**
	 * Items that can be dropped into the world to mark quest locations and trigger quest events.
	 */
	export interface QuestMarker {
	  wip?: WIP;
	  editor_group?: EditorGroup27;
	  name: Name29;
	}
	export interface Insight12 {
	  time_modifier?: TimeModifier;
	  uicon: Icon3;
	  source?: UnlockedBy22;
	  points_max: MaximumPoints;
	  priors?: ProgressionPriors;
	  wip?: WIP;
	  name: InsightName;
	  recipe?: MaterialRequirements;
	  artisan: Artisan2;
	  description: InsightDescription;
	  demo_blocked?: DemoBlocked;
	}
	export interface InsightName {
	  skip?: Skip63;
	  text: EnglishText63;
	  description?: TranslatorHelperText54;
	}
	export interface MaterialRequirements {
	  components: Ingredients14;
	  effort_modifier: EffortModifier17;
	}
	export interface Ingredients14 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface InsightDescription {
	  skip?: Skip64;
	  text: EnglishText64;
	  description?: TranslatorHelperText55;
	}
	export interface Quest {
	  quest_start_log?: QuestLogSummary;
	  priors?: ProgressionPriors;
	  wip?: WIP;
	  pet_quest?: PetQuest;
	  name: Name30;
	  quest_end_moments?: QuestEndMoments;
	  quest_start_moments?: QuestStartMoments;
	  storyline: Storyline;
	  ignore_in_progression_map?: IgnoreInProgressionMap3;
	  blocked?: Blocked;
	  map_markers?: MapMarkers;
	  demo_blocked?: DemoBlocked1;
	  quest_start_requirements?: Requirements4;
	  quest_giver?: QuestGiver;
	  quest_end_requirements?: Requirements5;
	  quest_receiver?: QuestReceiver;
	  objectives?: Objectives;
	  clues?: Clues;
	  marker_world_text?: QuestMarkerWorldText;
	  order: Order;
	  item_highlights?: WorldElementHighlights;
	}
	export interface QuestLogSummary {
	  skip?: Skip65;
	  text: EnglishText65;
	}
	/**
	 * If set, this quest will be considered a 'pet quest'. Progress toward this quest will only occur if you have the specified pet with you.
	 */
	export interface PetQuest {
	  pet: Pet4;
	  pet_stage: PetStage3;
	  name: ShortName;
	}
	/**
	 * The name of this quest as displayed in the pet UI. Should be quite short.
	 */
	export interface ShortName {
	  skip?: Skip66;
	  text: EnglishText66;
	}
	/**
	 * A sequence of narrative events to tell the story of this quest.
	 */
	export interface QuestEndMoments {
	  [k: string]: {
	    order: number;
	    element: QuestMoment;
	  };
	}
	/**
	 * Characters or actors can convey emojis.
	 */
	export interface Emotes1 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      value?: Emoji5;
	      key?: Character4;
	    };
	  };
	}
	export interface ItemsToGain {
	  [k: string]: {
	    order?: number;
	    element?: {
	      value?: Quantity56;
	      key?: string;
	    };
	  };
	}
	/**
	 * Characters can throw items out onto the ground.
	 */
	export interface Drops {
	  [k: string]: {
	    order?: number;
	    element?: {
	      dropper?: Dropper;
	      items?: ItemsToDrop;
	    };
	  };
	}
	export interface ItemsToDrop {
	  [k: string]: {
	    order?: number;
	    element?: {
	      quantity?: Quantity57;
	      item_id?: Item6;
	    };
	  };
	}
	/**
	 * Here you can dictate which actors are looking at which things. This will remain true until you unset their look targets, or the quest moments come to an end.
	 */
	export interface LookTargets1 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      value?: LooksAt1;
	      key?: string;
	    };
	  };
	}
	/**
	 * These actors will stop being forced to look at something. If unset, all actors will resume default looking behavior.
	 */
	export interface Actors1 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * A sequence of narrative events to tell the story of this quest.
	 */
	export interface QuestStartMoments {
	  [k: string]: {
	    order: number;
	    element: QuestMoment1;
	  };
	}
	/**
	 * Characters or actors can convey emojis.
	 */
	export interface Emotes2 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      value?: Emoji7;
	      key?: Character5;
	    };
	  };
	}
	export interface ItemsToGain1 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      value?: Quantity58;
	      key?: string;
	    };
	  };
	}
	/**
	 * Characters can throw items out onto the ground.
	 */
	export interface Drops1 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      dropper?: Dropper1;
	      items?: ItemsToDrop1;
	    };
	  };
	}
	export interface ItemsToDrop1 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      quantity?: Quantity59;
	      item_id?: Item7;
	    };
	  };
	}
	/**
	 * Here you can dictate which actors are looking at which things. This will remain true until you unset their look targets, or the quest moments come to an end.
	 */
	export interface LookTargets2 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      value?: LooksAt2;
	      key?: string;
	    };
	  };
	}
	/**
	 * These actors will stop being forced to look at something. If unset, all actors will resume default looking behavior.
	 */
	export interface Actors2 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * You can optionally have certain Quest Markers display on the world map while this quest is active.
	 */
	export interface MapMarkers {
	  [k: string]: {
	    order: number;
	    element: MapMarker;
	  };
	}
	export interface MapMarker {
	  radius: RadiusGridSpaces;
	  marker: QuestMarker1;
	  text: TextForWorldMap;
	}
	export interface TextForWorldMap {
	  skip?: Skip69;
	  text: EnglishText69;
	}
	/**
	 * If set, this quest will be blocked in the Demo version of the game. You can optionally add dialogue to wrap up the story.
	 */
	export interface DemoBlocked1 {
	  blocked_moments?: DemoBlockedMoments;
	  blocked: Blocked1;
	}
	/**
	 * A sequence of narrative events to tell the story of this quest.
	 */
	export interface DemoBlockedMoments {
	  [k: string]: {
	    order: number;
	    element: QuestMoment2;
	  };
	}
	/**
	 * Characters or actors can convey emojis.
	 */
	export interface Emotes3 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      value?: Emoji9;
	      key?: Character6;
	    };
	  };
	}
	export interface ItemsToGain2 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      value?: Quantity60;
	      key?: string;
	    };
	  };
	}
	/**
	 * Characters can throw items out onto the ground.
	 */
	export interface Drops2 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      dropper?: Dropper2;
	      items?: ItemsToDrop2;
	    };
	  };
	}
	export interface ItemsToDrop2 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      quantity?: Quantity61;
	      item_id?: Item8;
	    };
	  };
	}
	/**
	 * Here you can dictate which actors are looking at which things. This will remain true until you unset their look targets, or the quest moments come to an end.
	 */
	export interface LookTargets3 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      value?: LooksAt3;
	      key?: string;
	    };
	  };
	}
	/**
	 * These actors will stop being forced to look at something. If unset, all actors will resume default looking behavior.
	 */
	export interface Actors3 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Conditions that must be true for the quest to proceed.
	 */
	export interface Requirements4 {
	  [k: string]: {
	    order: number;
	    element: Requirement1;
	  };
	}
	/**
	 * Who/what triggers the quest. If no giver is present, the quest will automatically trigger once requirements are met.
	 */
	export interface QuestGiver {
	  interaction_target?: AutomaticInteractionTarget;
	  show_on_map?: ShowOnMap;
	  proximity?: AutomaticInteractionProximity;
	  same_room?: RequireSameRoom;
	  area_requirement?: AreaRequirement;
	  item: Initiator;
	}
	/**
	 * Conditions that must be true for the quest to proceed.
	 */
	export interface Requirements5 {
	  [k: string]: {
	    order: number;
	    element: Requirement1;
	  };
	}
	/**
	 * Who/what triggers the quest. If no giver is present, the quest will automatically trigger once requirements are met.
	 */
	export interface QuestReceiver {
	  interaction_target?: AutomaticInteractionTarget1;
	  show_on_map?: ShowOnMap1;
	  proximity?: AutomaticInteractionProximity1;
	  same_room?: RequireSameRoom1;
	  area_requirement?: AreaRequirement1;
	  item: Initiator1;
	}
	export interface Objectives {
	  [k: string]: {
	    order: number;
	    element: Objective;
	  };
	}
	export interface Items50 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      value?: Quantity62;
	      key?: string;
	    };
	  };
	}
	/**
	 * If set, the objective will be tracked in the Quest log page under this description.
	 */
	export interface ProgressTrackingDescription {
	  skip?: Skip71;
	  text: EnglishText71;
	}
	/**
	 * Progress toward this objective will only count if these requirements are met at the time of using the ability.
	 */
	export interface AbilityUsageRequirements {
	  [k: string]: {
	    order?: number;
	    element?: AbilityUsageRequirement;
	  };
	}
	/**
	 * The player must have at least these quantities of these items.
	 */
	export interface Items51 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      value?: Quantity63;
	      key?: string;
	    };
	  };
	}
	export interface PetStage4 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  stage?: "Egg" | "Baby" | "Adult" | "Embiggened";
	}
	/**
	 * The ability must be used on targets that match these filters to count towards the objective.
	 */
	export interface TargetS {
	  [k: string]: {
	    order?: number;
	    element?: Filter39;
	  };
	}
	export interface Filter39 {
	  buffs?: Buffs83;
	  combatants_only?: Combatants38;
	  require_all_tags?: RequireAllTags38;
	  exclude?: Exclude42;
	  datafield_evaluations?: DatafieldEvaluations40;
	  items?: Items52;
	  sub_filters?: SubFilters19;
	}
	export interface Buffs83 {
	  stacks?: Stacks43;
	  buffs: Buffs84;
	  require_all: RequireAll46;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks43 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity64;
	}
	export interface Buffs84 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations40 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items52 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Further refine the original filter, such as by excluding some subset of the orignal items.
	 */
	export interface SubFilters19 {
	  [k: string]: {
	    order?: number;
	    element?: Filter40;
	  };
	}
	export interface Filter40 {
	  buffs?: Buffs85;
	  combatants_only?: Combatants39;
	  require_all_tags?: RequireAllTags39;
	  exclude?: Exclude43;
	  datafield_evaluations?: DatafieldEvaluations41;
	  items?: Items53;
	}
	export interface Buffs85 {
	  stacks?: Stacks44;
	  buffs: Buffs86;
	  require_all: RequireAll47;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks44 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity65;
	}
	export interface Buffs86 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations41 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items53 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, the objective will be tracked in the Quest log page under this description.
	 */
	export interface ProgressTrackingDescription1 {
	  skip?: Skip72;
	  text: EnglishText72;
	}
	/**
	 * Progress toward this objective will only count if these requirements are met at the time of destruction.
	 */
	export interface DestructionRequirements {
	  [k: string]: {
	    order?: number;
	    element?: DestructionRequirement;
	  };
	}
	/**
	 * The player must have at least these quantities of these items.
	 */
	export interface Items54 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      value?: Quantity67;
	      key?: string;
	    };
	  };
	}
	export interface PetStage5 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  stage?: "Egg" | "Baby" | "Adult" | "Embiggened";
	}
	/**
	 * Destruction of targets that match these filters will count towards the objective.
	 */
	export interface TargetS1 {
	  [k: string]: {
	    order?: number;
	    element?: Filter41;
	  };
	}
	export interface Filter41 {
	  buffs?: Buffs87;
	  combatants_only?: Combatants40;
	  require_all_tags?: RequireAllTags40;
	  exclude?: Exclude45;
	  datafield_evaluations?: DatafieldEvaluations42;
	  items?: Items55;
	  sub_filters?: SubFilters20;
	}
	export interface Buffs87 {
	  stacks?: Stacks45;
	  buffs: Buffs88;
	  require_all: RequireAll48;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks45 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity68;
	}
	export interface Buffs88 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations42 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items55 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Further refine the original filter, such as by excluding some subset of the orignal items.
	 */
	export interface SubFilters20 {
	  [k: string]: {
	    order?: number;
	    element?: Filter42;
	  };
	}
	export interface Filter42 {
	  buffs?: Buffs89;
	  combatants_only?: Combatants41;
	  require_all_tags?: RequireAllTags41;
	  exclude?: Exclude46;
	  datafield_evaluations?: DatafieldEvaluations43;
	  items?: Items56;
	}
	export interface Buffs89 {
	  stacks?: Stacks46;
	  buffs: Buffs90;
	  require_all: RequireAll49;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks46 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity69;
	}
	export interface Buffs90 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations43 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items56 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, the objective will be tracked in the Quest log page under this description.
	 */
	export interface ProgressTrackingDescription2 {
	  skip?: Skip73;
	  text: EnglishText73;
	}
	/**
	 * Any of these items will count toward this consumption objective.
	 */
	export interface ItemsToConsume {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, the objective will be tracked in the Quest log page under this description.
	 */
	export interface ProgressTrackingDescription3 {
	  skip?: Skip74;
	  text: EnglishText74;
	}
	/**
	 * You can optionally have certain Quest Markers display on the world map while this objective is incomplete.
	 */
	export interface MapMarkers1 {
	  [k: string]: {
	    order?: number;
	    element?: MapMarker1;
	  };
	}
	export interface MapMarker1 {
	  radius: RadiusGridSpaces1;
	  marker: QuestMarker2;
	  text: TextForWorldMap1;
	}
	export interface TextForWorldMap1 {
	  skip?: Skip75;
	  text: EnglishText75;
	}
	/**
	 * You can require this item be placed within a certain distance of a quest marker.
	 */
	export interface QuestMarkerProximity {
	  proximity?: ProximityGridSpaces;
	  quest_marker?: string;
	}
	export interface ItemsToDrop3 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      value?: Quantity73;
	      key?: string;
	    };
	  };
	}
	/**
	 * You can optionally force certain things in the world to drop the items in this quest objective while this quest is active.
	 */
	export interface CustomLootDrops {
	  [k: string]: {
	    order?: number;
	    element?: CustomLoot;
	  };
	}
	export interface CustomLoot {
	  sources?: Sources;
	  loot?: LootGroup2;
	}
	/**
	 * What's going to drop this loot?
	 */
	export interface Sources {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface LootGroup2 {
	  num_drops?: DropQuantity2;
	  trigger: Trigger3;
	  time_requirement?: TimeOfDay2;
	  item_tags_used?: ItemTagsUsed2;
	  item_ids_used?: ItemsUsed6;
	  drop_chance: DropChance2;
	  areas?: Areas5;
	}
	/**
	 * A random number of items will drop in this range. Once the player has acquired the req
	 */
	export interface DropQuantity2 {
	  value0?: Min35;
	  value1?: Max35;
	}
	/**
	 * The kinds of items required to be used on this for loot to drop.
	 */
	export interface ItemTagsUsed2 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Specific items required to be used on this for loot to drop.
	 */
	export interface ItemsUsed6 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, the loot will only drop from something whose origin is in the listed areas.
	 */
	export interface Areas5 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, the objective will be tracked in the Quest log page under this description.
	 */
	export interface ProgressTrackingDescription4 {
	  skip?: Skip76;
	  text: EnglishText76;
	}
	/**
	 * The text that will appear when the player interacts with the target.
	 */
	export interface InteractionText {
	  skip?: Skip77;
	  text: EnglishText77;
	}
	/**
	 * The color of the progress bar that will appear when the player interacts with the target.
	 */
	export interface InteractionBarColor {
	  r?: Red21;
	  b?: Blue21;
	  g?: Green21;
	}
	/**
	 * The player must interact with a target that matches this filter.
	 */
	export interface TargetS2 {
	  [k: string]: {
	    order?: number;
	    element?: Filter43;
	  };
	}
	export interface Filter43 {
	  buffs?: Buffs91;
	  combatants_only?: Combatants42;
	  require_all_tags?: RequireAllTags42;
	  exclude?: Exclude47;
	  datafield_evaluations?: DatafieldEvaluations44;
	  items?: Items57;
	  sub_filters?: SubFilters21;
	}
	export interface Buffs91 {
	  stacks?: Stacks47;
	  buffs: Buffs92;
	  require_all: RequireAll50;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks47 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity75;
	}
	export interface Buffs92 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations44 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items57 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Further refine the original filter, such as by excluding some subset of the orignal items.
	 */
	export interface SubFilters21 {
	  [k: string]: {
	    order?: number;
	    element?: Filter44;
	  };
	}
	export interface Filter44 {
	  buffs?: Buffs93;
	  combatants_only?: Combatants43;
	  require_all_tags?: RequireAllTags43;
	  exclude?: Exclude48;
	  datafield_evaluations?: DatafieldEvaluations45;
	  items?: Items58;
	}
	export interface Buffs93 {
	  stacks?: Stacks48;
	  buffs: Buffs94;
	  require_all: RequireAll51;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks48 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity76;
	}
	export interface Buffs94 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations45 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items58 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Conditions that must be true for the quest to proceed.
	 */
	export interface Requirements6 {
	  [k: string]: {
	    order: number;
	    element: Requirement1;
	  };
	}
	export interface InteractionOutcomes {
	  [k: string]: {
	    order?: number;
	    element?: QuestInteractionOutcome;
	  };
	}
	export interface ItemsToLose {
	  [k: string]: {
	    order?: number;
	    element?: {
	      value?: Quantity77;
	      key?: Item12;
	    };
	  };
	}
	/**
	 * Things characters can say about this quest while the quest is active.
	 */
	export interface Clues {
	  [k: string]: {
	    order: number;
	    element: {
	      phrases: Phrases2;
	      speaker: Speaker4;
	    };
	  };
	}
	export interface Phrases2 {
	  [k: string]: {
	    order: number;
	    element: Clue;
	  };
	}
	export interface Clue {
	  requirements?: Requirements7;
	  phrase: {
	    emoji?: Emoji10;
	    text: Text;
	  };
	}
	/**
	 * Conditions that must be true for the quest to proceed.
	 */
	export interface Requirements7 {
	  [k: string]: {
	    order: number;
	    element: Requirement1;
	  };
	}
	export interface Text {
	  skip?: Skip78;
	  text: EnglishText78;
	}
	/**
	 * You can display text in the world while this quest is active.
	 */
	export interface QuestMarkerWorldText {
	  [k: string]: {
	    order: number;
	    element: QuestMarkerText;
	  };
	}
	export interface QuestMarkerText {
	  proximity?: Proximity;
	  marker: QuestMarker3;
	  sprite?: Sprite3;
	  text: Text1;
	  color?: TextColor;
	}
	export interface Text1 {
	  skip?: Skip79;
	  text: EnglishText79;
	  description?: TranslatorHelperText56;
	}
	export interface TextColor {
	  r: Red22;
	  b: Blue22;
	  g: Green22;
	}
	/**
	 * Items to have a glow underneath them while this quest is active.
	 */
	export interface WorldElementHighlights {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	/**
	 * A sprite asset found in the Game Maker project.
	 */
	export interface Sprite4 {
	  spine: Spine;
	  demo_masked?: DemoMasked;
	  transitions?: SpineTransitions;
	  blinks?: SpineBlinkTracks;
	  wip?: WIP;
	  name: Name31;
	}
	export interface SpineTransitions {
	  [k: string]: {
	    order: number;
	    element: TransitionGroup;
	  };
	}
	export interface TransitionGroup {
	  transition_reversed?: TransitionReversed;
	  destination: To;
	  source: From;
	  transition: Transition;
	}
	export interface TransitionReversed {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface To {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface From {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Transition {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	/**
	 * Each blink track will run independently, allowing you to have a character that blinks with multiple sets of eyes (or whatever it has).
	 */
	export interface SpineBlinkTracks {
	  [k: string]: {
	    order: number;
	    element: {
	      track_name: TrackName;
	      slots: AttachmentSlots;
	    };
	  };
	}
	export interface AttachmentSlots {
	  [k: string]: {
	    order: number;
	    element: {
	      behaviors: Behaviors;
	      slot: SlotName;
	    };
	  };
	}
	export interface Behaviors {
	  [k: string]: {
	    order: number;
	    element: Behavior;
	  };
	}
	export interface Behavior {
	  visuals: Visuals;
	  conditions?: Conditions3;
	}
	export interface Visuals {
	  alpha?: Alpha1;
	  image?: Image;
	}
	/**
	 * If set, will override the alpha of the attachment slot.
	 */
	export interface Alpha1 {
	  inactive: Inactive;
	  active: Active;
	}
	/**
	 * Name of the attachment image to set in this slot. Set to '-1' to remove the attachment image from the slot.
	 */
	export interface Image {
	  inactive: Inactive1;
	  active: Active1;
	}
	export interface Conditions3 {
	  playing_animations?: PlayingAnimation;
	  images?: OtherAttachmentImage;
	}
	/**
	 * Animations that must be playing for this blink group to be active. If no animations are specified, the blink will always run.
	 */
	export interface PlayingAnimation {
	  animations: AnimationNames;
	  track: AnimationTrack;
	}
	export interface AnimationNames {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	/**
	 * Check whether another attachment slot is set to a certain image name.
	 */
	export interface OtherAttachmentImage {
	  images: Attachment;
	  slot: Slot;
	}
	/**
	 * If any of these images are set in the slot, this condition is met.
	 */
	export interface Attachment {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface ActionGroups {
	  [k: string]: {
	    order: number;
	    element: ActionGroup;
	  };
	}
	export interface ActionGroup {
	  chance?: Chance6;
	  targets_self: CastOnSelf;
	  actions: Actions1;
	  unlocked_by?: UnlockedBy49;
	  telegraph?: Telegraph;
	  target_filter?: ActionGroupTargetFilter;
	  targeting_range?: TargetingRangeInGridSpaces;
	  name?: NameInternal6;
	}
	export interface Actions1 {
	  [k: string]: {
	    order: number;
	    element: Action1;
	  };
	}
	/**
	 * How much this damage is boosted or suppressed by points spent in Insights.
	 */
	export interface InsightModifiers {
	  [k: string]: {
	    order?: number;
	    element?: {
	      value: ChangePerPoint31;
	      tooltip_text?: InsightTooltipText1;
	      badge_id: Insight13;
	    };
	  };
	}
	/**
	 * Explain how the insight changes the damage of this ability. This text will appear on the Insight's tooltip page.
	 */
	export interface InsightTooltipText1 {
	  skip?: Skip80;
	  text: EnglishText80;
	  description?: TranslatorHelperText57;
	}
	export interface FollowupActions {
	  [k: string]: {
	    order?: number;
	    element?: FollowupAction;
	  };
	}
	/**
	 * A followup action will have the targets from the prior action passed into it. Those targets can be further constrained or narrowed down before enacting the followup actions.
	 */
	export interface FollowupAction {
	  target_filter?: TargetFilters1;
	  target_limit?: FollowupTargetLimit;
	  actions: Actions1;
	  target_constraint?: FollowupTargetConstraint;
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface TargetFilters1 {
	  [k: string]: {
	    order?: number;
	    element?: Filter45;
	  };
	}
	export interface Filter45 {
	  buffs?: Buffs95;
	  combatants_only?: Combatants44;
	  require_all_tags?: RequireAllTags44;
	  exclude?: Exclude49;
	  datafield_evaluations?: DatafieldEvaluations46;
	  items?: Items59;
	  sub_filters?: SubFilters22;
	}
	export interface Buffs95 {
	  stacks?: Stacks49;
	  buffs: Buffs96;
	  require_all: RequireAll52;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks49 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity79;
	}
	export interface Buffs96 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations46 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items59 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Further refine the original filter, such as by excluding some subset of the orignal items.
	 */
	export interface SubFilters22 {
	  [k: string]: {
	    order?: number;
	    element?: Filter46;
	  };
	}
	export interface Filter46 {
	  buffs?: Buffs97;
	  combatants_only?: Combatants45;
	  require_all_tags?: RequireAllTags45;
	  exclude?: Exclude50;
	  datafield_evaluations?: DatafieldEvaluations47;
	  items?: Items60;
	}
	export interface Buffs97 {
	  stacks?: Stacks50;
	  buffs: Buffs98;
	  require_all: RequireAll53;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks50 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity80;
	}
	export interface Buffs98 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations47 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items60 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface UnlockedBy23 {
	  prerequisite: UnlockedBy24;
	  unlock_text?: UnlockDescription3;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription3 {
	  skip?: Skip81;
	  text: EnglishText81;
	  description?: TranslatorHelperText58;
	}
	export interface ActionProbability {
	  chance: Chance7;
	}
	/**
	 * Deal more or less damage, depending on data fields.
	 */
	export interface DatafieldMultipliers1 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      datafield_owner?: DatafieldOwner2;
	      datafield_id?: DataField1;
	    };
	  };
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface TargetFilters2 {
	  [k: string]: {
	    order?: number;
	    element?: Filter47;
	  };
	}
	export interface Filter47 {
	  buffs?: Buffs99;
	  combatants_only?: Combatants46;
	  require_all_tags?: RequireAllTags46;
	  exclude?: Exclude51;
	  datafield_evaluations?: DatafieldEvaluations48;
	  items?: Items61;
	  sub_filters?: SubFilters23;
	}
	export interface Buffs99 {
	  stacks?: Stacks51;
	  buffs: Buffs100;
	  require_all: RequireAll54;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks51 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity81;
	}
	export interface Buffs100 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations48 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items61 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Further refine the original filter, such as by excluding some subset of the orignal items.
	 */
	export interface SubFilters23 {
	  [k: string]: {
	    order?: number;
	    element?: Filter48;
	  };
	}
	export interface Filter48 {
	  buffs?: Buffs101;
	  combatants_only?: Combatants47;
	  require_all_tags?: RequireAllTags47;
	  exclude?: Exclude52;
	  datafield_evaluations?: DatafieldEvaluations49;
	  items?: Items62;
	}
	export interface Buffs101 {
	  stacks?: Stacks52;
	  buffs: Buffs102;
	  require_all: RequireAll55;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks52 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity82;
	}
	export interface Buffs102 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations49 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items62 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface TargetFilters3 {
	  [k: string]: {
	    order?: number;
	    element?: Filter49;
	  };
	}
	export interface Filter49 {
	  buffs?: Buffs103;
	  combatants_only?: Combatants48;
	  require_all_tags?: RequireAllTags48;
	  exclude?: Exclude53;
	  datafield_evaluations?: DatafieldEvaluations50;
	  items?: Items63;
	  sub_filters?: SubFilters24;
	}
	export interface Buffs103 {
	  stacks?: Stacks53;
	  buffs: Buffs104;
	  require_all: RequireAll56;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks53 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity83;
	}
	export interface Buffs104 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations50 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items63 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Further refine the original filter, such as by excluding some subset of the orignal items.
	 */
	export interface SubFilters24 {
	  [k: string]: {
	    order?: number;
	    element?: Filter50;
	  };
	}
	export interface Filter50 {
	  buffs?: Buffs105;
	  combatants_only?: Combatants49;
	  require_all_tags?: RequireAllTags49;
	  exclude?: Exclude54;
	  datafield_evaluations?: DatafieldEvaluations51;
	  items?: Items64;
	}
	export interface Buffs105 {
	  stacks?: Stacks54;
	  buffs: Buffs106;
	  require_all: RequireAll57;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks54 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity84;
	}
	export interface Buffs106 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations51 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items64 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface ActionProbability1 {
	  chance: Chance8;
	}
	export interface UnlockedBy25 {
	  prerequisite: UnlockedBy26;
	  unlock_text?: UnlockDescription4;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription4 {
	  skip?: Skip82;
	  text: EnglishText82;
	  description?: TranslatorHelperText59;
	}
	export interface UnlockedBy27 {
	  prerequisite: UnlockedBy28;
	  unlock_text?: UnlockDescription5;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription5 {
	  skip?: Skip83;
	  text: EnglishText83;
	  description?: TranslatorHelperText60;
	}
	/**
	 * If a movement is successful, these sounds will play.
	 */
	export interface MovementSounds {
	  [k: string]: {
	    order?: number;
	    element?: {
	      chance?: ChanceOfPlaying;
	      sound?: Sound2;
	    };
	  };
	}
	/**
	 * The distance this ability will attempt to move the target.
	 */
	export interface MovementDistanceGridSpaces {
	  value0?: Min36;
	  value1?: Max36;
	}
	/**
	 * Creates a visual rope or chain style connection between the source and destination.
	 */
	export interface VisualTether {
	  sprite_scale?: SpriteScale;
	  end_sprite?: EndSprite;
	  sprite: Sprite5;
	  end_sprite_scale?: EndSpriteScale;
	}
	export interface MoveDistanceStatModifiers {
	  [k: string]: {
	    order?: number;
	    element?: Modifier1;
	  };
	}
	export interface Modifier1 {
	  type?: ModifierType;
	  stat?: Stat1;
	}
	/**
	 * One of these animations will be chosen to play during the movement.
	 */
	export interface MovementAnimations {
	  animations?: AnimationsList;
	}
	export interface AnimationsList {
	  [k: string]: {
	    order?: number;
	    element?: {
	      looping?: Looping1;
	      animation?: AnimationName;
	    };
	  };
	}
	export interface MoveSpeedStatModifiers {
	  [k: string]: {
	    order?: number;
	    element?: Modifier2;
	  };
	}
	export interface Modifier2 {
	  type?: ModifierType1;
	  stat?: Stat2;
	}
	export interface ActionGroups1 {
	  [k: string]: {
	    order: number;
	    element: ActionGroup;
	  };
	}
	export interface ActionProbability2 {
	  chance: Chance9;
	}
	export interface UnlockedBy29 {
	  prerequisite: UnlockedBy30;
	  unlock_text?: UnlockDescription6;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription6 {
	  skip?: Skip84;
	  text: EnglishText84;
	  description?: TranslatorHelperText61;
	}
	export interface ActionProbability3 {
	  chance: Chance10;
	}
	export interface UnlockedBy31 {
	  prerequisite: UnlockedBy32;
	  unlock_text?: UnlockDescription7;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription7 {
	  skip?: Skip85;
	  text: EnglishText85;
	  description?: TranslatorHelperText62;
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface TargetFilters4 {
	  [k: string]: {
	    order?: number;
	    element?: Filter51;
	  };
	}
	export interface Filter51 {
	  buffs?: Buffs107;
	  combatants_only?: Combatants50;
	  require_all_tags?: RequireAllTags50;
	  exclude?: Exclude55;
	  datafield_evaluations?: DatafieldEvaluations52;
	  items?: Items65;
	  sub_filters?: SubFilters25;
	}
	export interface Buffs107 {
	  stacks?: Stacks55;
	  buffs: Buffs108;
	  require_all: RequireAll58;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks55 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity85;
	}
	export interface Buffs108 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations52 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items65 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Further refine the original filter, such as by excluding some subset of the orignal items.
	 */
	export interface SubFilters25 {
	  [k: string]: {
	    order?: number;
	    element?: Filter52;
	  };
	}
	export interface Filter52 {
	  buffs?: Buffs109;
	  combatants_only?: Combatants51;
	  require_all_tags?: RequireAllTags51;
	  exclude?: Exclude56;
	  datafield_evaluations?: DatafieldEvaluations53;
	  items?: Items66;
	}
	export interface Buffs109 {
	  stacks?: Stacks56;
	  buffs: Buffs110;
	  require_all: RequireAll59;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks56 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity86;
	}
	export interface Buffs110 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations53 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items66 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface UnlockedBy33 {
	  prerequisite: UnlockedBy34;
	  unlock_text?: UnlockDescription8;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription8 {
	  skip?: Skip86;
	  text: EnglishText86;
	  description?: TranslatorHelperText63;
	}
	export interface Color4 {
	  r?: Red23;
	  b?: Blue23;
	  g?: Green23;
	}
	export interface DecalDurationSeconds1 {
	  value0?: Min37;
	  value1?: Max37;
	}
	/**
	 * The decal will choose a random scale between these numbers.
	 */
	export interface DecalScale1 {
	  value0?: Min38;
	  value1?: Max38;
	}
	export interface BaseColor1 {
	  r?: Red24;
	  b?: Blue24;
	  g?: Green24;
	}
	export interface HighlightColor1 {
	  r?: Red25;
	  b?: Blue25;
	  g?: Green25;
	}
	export interface ExplosionScale1 {
	  value0?: Min39;
	  value1?: Max39;
	}
	/**
	 * Set this to spawn the explosion a random distance away.
	 */
	export interface RandomDistanceGridSpaces1 {
	  value0?: Min40;
	  value1?: Max40;
	}
	/**
	 * Set this to spawn the explosion a random delay.
	 */
	export interface RandomDelaySeconds1 {
	  value0?: Min41;
	  value1?: Max41;
	}
	/**
	 * These are the particles that will shoot out from the explosion.
	 */
	export interface DebrisParticles2 {
	  [k: string]: {
	    order?: number;
	    element?: DebrisParticles3;
	  };
	}
	export interface DebrisParticles3 {
	  sprite?: Sprite6;
	  particle_scale?: ParticleScale1;
	  num_particles?: NumberOfParticles2;
	}
	export interface Bursts1 {
	  [k: string]: {
	    order?: number;
	    element?: Burst1;
	  };
	}
	export interface Burst1 {
	  perspective: Perspective1;
	  spawn_at_ground?: SpawnOnGround1;
	  direction?: BurstDirection1;
	  use_aim_direction?: UseAimDirection1;
	  num_particles: NumberOfParticles3;
	  scaled_radius?: ScaledSpawnRadius1;
	  location: Source4;
	  outward_blast: BlastOutward1;
	  spawn_radius: SpawnRadiusPixels1;
	  radius_as_grid?: SpawnRadiusAsGrid1;
	  z_offset?: ZOffset5;
	}
	export interface BurstDirection1 {
	  value0?: Min42;
	  value1?: Max42;
	}
	export interface NumberOfParticles3 {
	  value0?: Min43;
	  value1?: Max43;
	}
	/**
	 * How far from the source the particles will spawn.
	 */
	export interface SpawnRadiusPixels1 {
	  value0?: Min44;
	  value1?: Max44;
	}
	export interface NumberOfBolts1 {
	  value0?: Min45;
	  value1?: Max45;
	}
	export interface DistanceGrid1 {
	  value0?: Min46;
	  value1?: Max46;
	}
	export interface Color5 {
	  r?: Red26;
	  b?: Blue26;
	  g?: Green26;
	}
	export interface ActionProbability4 {
	  chance: Chance11;
	}
	export interface ItemsToLose1 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      quantity?: Quantity87;
	      item_id?: Item14;
	    };
	  };
	}
	export interface ItemsToGain3 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      quantity?: Quantity88;
	      item_id?: Item15;
	    };
	  };
	}
	export interface Quantity88 {
	  value0?: Min47;
	  value1?: Max47;
	}
	export interface ActionProbability5 {
	  chance: Chance12;
	}
	export interface UnlockedBy35 {
	  prerequisite: UnlockedBy36;
	  unlock_text?: UnlockDescription9;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription9 {
	  skip?: Skip87;
	  text: EnglishText87;
	  description?: TranslatorHelperText64;
	}
	/**
	 * If set, only targets that match this filter will be picked up.
	 */
	export interface PickupTargetFilter {
	  [k: string]: {
	    order?: number;
	    element?: Filter53;
	  };
	}
	export interface Filter53 {
	  buffs?: Buffs111;
	  combatants_only?: Combatants52;
	  require_all_tags?: RequireAllTags52;
	  exclude?: Exclude57;
	  datafield_evaluations?: DatafieldEvaluations54;
	  items?: Items67;
	  sub_filters?: SubFilters26;
	}
	export interface Buffs111 {
	  stacks?: Stacks57;
	  buffs: Buffs112;
	  require_all: RequireAll60;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks57 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity89;
	}
	export interface Buffs112 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations54 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items67 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Further refine the original filter, such as by excluding some subset of the orignal items.
	 */
	export interface SubFilters26 {
	  [k: string]: {
	    order?: number;
	    element?: Filter54;
	  };
	}
	export interface Filter54 {
	  buffs?: Buffs113;
	  combatants_only?: Combatants53;
	  require_all_tags?: RequireAllTags53;
	  exclude?: Exclude58;
	  datafield_evaluations?: DatafieldEvaluations55;
	  items?: Items68;
	}
	export interface Buffs113 {
	  stacks?: Stacks58;
	  buffs: Buffs114;
	  require_all: RequireAll61;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks58 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity90;
	}
	export interface Buffs114 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations55 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items68 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface UnlockedBy37 {
	  prerequisite: UnlockedBy38;
	  unlock_text?: UnlockDescription10;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription10 {
	  skip?: Skip88;
	  text: EnglishText88;
	  description?: TranslatorHelperText65;
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface TargetFilters5 {
	  [k: string]: {
	    order?: number;
	    element?: Filter55;
	  };
	}
	export interface Filter55 {
	  buffs?: Buffs115;
	  combatants_only?: Combatants54;
	  require_all_tags?: RequireAllTags54;
	  exclude?: Exclude59;
	  datafield_evaluations?: DatafieldEvaluations56;
	  items?: Items69;
	  sub_filters?: SubFilters27;
	}
	export interface Buffs115 {
	  stacks?: Stacks59;
	  buffs: Buffs116;
	  require_all: RequireAll62;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks59 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity91;
	}
	export interface Buffs116 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations56 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items69 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Further refine the original filter, such as by excluding some subset of the orignal items.
	 */
	export interface SubFilters27 {
	  [k: string]: {
	    order?: number;
	    element?: Filter56;
	  };
	}
	export interface Filter56 {
	  buffs?: Buffs117;
	  combatants_only?: Combatants55;
	  require_all_tags?: RequireAllTags55;
	  exclude?: Exclude60;
	  datafield_evaluations?: DatafieldEvaluations57;
	  items?: Items70;
	}
	export interface Buffs117 {
	  stacks?: Stacks60;
	  buffs: Buffs118;
	  require_all: RequireAll63;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks60 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity92;
	}
	export interface Buffs118 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations57 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items70 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface BuffsToApply {
	  [k: string]: {
	    order?: number;
	    element?: {
	      damage_modifier?: DamageModifier1;
	      healing_percentage?: HealingPercentage2;
	      buff: string;
	      stacks?: Stacks61;
	      stacks_multiply_by_targets?: MultiplyStacksByTargets;
	      buff_target: BuffTarget1;
	    };
	  };
	}
	export interface ActionProbability6 {
	  chance: Chance13;
	}
	export interface UnlockedBy39 {
	  prerequisite: UnlockedBy40;
	  unlock_text?: UnlockDescription11;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription11 {
	  skip?: Skip89;
	  text: EnglishText89;
	  description?: TranslatorHelperText66;
	}
	export interface UnlockedBy41 {
	  prerequisite: UnlockedBy42;
	  unlock_text?: UnlockDescription12;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription12 {
	  skip?: Skip90;
	  text: EnglishText90;
	  description?: TranslatorHelperText67;
	}
	/**
	 * If set, only targets that match this filter will have their datafields changed.
	 */
	export interface DatafieldTargetFilter {
	  [k: string]: {
	    order?: number;
	    element?: Filter57;
	  };
	}
	export interface Filter57 {
	  buffs?: Buffs119;
	  combatants_only?: Combatants56;
	  require_all_tags?: RequireAllTags56;
	  exclude?: Exclude61;
	  datafield_evaluations?: DatafieldEvaluations58;
	  items?: Items71;
	  sub_filters?: SubFilters28;
	}
	export interface Buffs119 {
	  stacks?: Stacks62;
	  buffs: Buffs120;
	  require_all: RequireAll64;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks62 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity93;
	}
	export interface Buffs120 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations58 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items71 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Further refine the original filter, such as by excluding some subset of the orignal items.
	 */
	export interface SubFilters28 {
	  [k: string]: {
	    order?: number;
	    element?: Filter58;
	  };
	}
	export interface Filter58 {
	  buffs?: Buffs121;
	  combatants_only?: Combatants57;
	  require_all_tags?: RequireAllTags57;
	  exclude?: Exclude62;
	  datafield_evaluations?: DatafieldEvaluations59;
	  items?: Items72;
	}
	export interface Buffs121 {
	  stacks?: Stacks63;
	  buffs: Buffs122;
	  require_all: RequireAll65;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks63 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity94;
	}
	export interface Buffs122 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations59 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items72 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The new entity will spawn a random range away from the chosen location, up to this number of grid spaces.
	 */
	export interface SpawnDistance1 {
	  value0?: Min48;
	  value1?: Max48;
	}
	export interface UnlockedBy43 {
	  prerequisite: UnlockedBy44;
	  unlock_text?: UnlockDescription13;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription13 {
	  skip?: Skip91;
	  text: EnglishText91;
	  description?: TranslatorHelperText68;
	}
	/**
	 * This determines how long the projectile will take to reach its destination. Its vertical height and horizontal move speed will adjust to ensure it is airborne for this amount of time.
	 */
	export interface FlightTimeSeconds {
	  value0?: Min49;
	  value1?: Max49;
	}
	export interface LobMultipleProjectiles {
	  [k: string]: {
	    order?: number;
	    element?: ProjectileBatch;
	  };
	}
	export interface ProjectileBatch {
	  conditions?: Conditions4;
	  direction_offset?: BatchAimOffset;
	  direction_from_target: DirectionFromTarget;
	  chance?: BatchChance;
	  require_all_conditions?: RequireAllConditions3;
	  distance_from_target: DistanceFromTargetGridSpaces;
	  quantity: Quantity105;
	}
	export interface Conditions4 {
	  [k: string]: {
	    order?: number;
	    element?: Condition4;
	  };
	}
	/**
	 * Which abilities are we evaluating?
	 */
	export interface Abilities5 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface Evaluation6 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value0?: string;
	  value1?: number;
	}
	/**
	 * The 'minutes since timestamp' value can be modified up or down based on an Insight.
	 */
	export interface InsightModifier3 {
	  insight?: Insight14;
	  amount?: ChangePerPoint32;
	}
	/**
	 * If set, this description will appear on the Research Node to explain what it is unlocking.
	 */
	export interface InsightTooltip3 {
	  skip?: Skip92;
	  text: EnglishText92;
	  description?: TranslatorHelperText69;
	}
	export interface NumberOfTargets6 {
	  quantity?: Quantity95;
	  comparison?: Evaluation7;
	}
	export interface DistanceRequiredGridSpaces3 {
	  value0?: Min50;
	  value1?: Max50;
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface Targets5 {
	  [k: string]: {
	    order?: number;
	    element?: Filter59;
	  };
	}
	export interface Filter59 {
	  buffs?: Buffs123;
	  combatants_only?: Combatants58;
	  require_all_tags?: RequireAllTags58;
	  exclude?: Exclude63;
	  datafield_evaluations?: DatafieldEvaluations60;
	  items?: Items73;
	  sub_filters?: SubFilters29;
	}
	export interface Buffs123 {
	  stacks?: Stacks64;
	  buffs: Buffs124;
	  require_all: RequireAll66;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks64 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity96;
	}
	export interface Buffs124 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations60 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items73 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Further refine the original filter, such as by excluding some subset of the orignal items.
	 */
	export interface SubFilters29 {
	  [k: string]: {
	    order?: number;
	    element?: Filter60;
	  };
	}
	export interface Filter60 {
	  buffs?: Buffs125;
	  combatants_only?: Combatants59;
	  require_all_tags?: RequireAllTags59;
	  exclude?: Exclude64;
	  datafield_evaluations?: DatafieldEvaluations61;
	  items?: Items74;
	}
	export interface Buffs125 {
	  stacks?: Stacks65;
	  buffs: Buffs126;
	  require_all: RequireAll67;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks65 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity97;
	}
	export interface Buffs126 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations61 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items74 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface HealthEvaluation3 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  hp_percentage?: number;
	}
	export interface Items75 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The condition will be met if the player is wielding any of these items.
	 */
	export interface Items76 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface Buffs127 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, then targets other than yourself will be evaluated.
	 */
	export interface NumberOfTargets7 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity98;
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface BuffTargetFilter3 {
	  [k: string]: {
	    order?: number;
	    element?: Filter61;
	  };
	}
	export interface Filter61 {
	  buffs?: Buffs128;
	  combatants_only?: Combatants60;
	  require_all_tags?: RequireAllTags60;
	  exclude?: Exclude65;
	  datafield_evaluations?: DatafieldEvaluations62;
	  items?: Items77;
	  sub_filters?: SubFilters30;
	}
	export interface Buffs128 {
	  stacks?: Stacks66;
	  buffs: Buffs129;
	  require_all: RequireAll70;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks66 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity99;
	}
	export interface Buffs129 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations62 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items77 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Further refine the original filter, such as by excluding some subset of the orignal items.
	 */
	export interface SubFilters30 {
	  [k: string]: {
	    order?: number;
	    element?: Filter62;
	  };
	}
	export interface Filter62 {
	  buffs?: Buffs130;
	  combatants_only?: Combatants61;
	  require_all_tags?: RequireAllTags61;
	  exclude?: Exclude66;
	  datafield_evaluations?: DatafieldEvaluations63;
	  items?: Items78;
	}
	export interface Buffs130 {
	  stacks?: Stacks67;
	  buffs: Buffs131;
	  require_all: RequireAll71;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks67 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity100;
	}
	export interface Buffs131 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations63 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items78 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * How close or far (in grid spaces) the entities must be to be considered for this condition.
	 */
	export interface BuffTargetRange3 {
	  value0?: Min51;
	  value1?: Max51;
	}
	export interface Stacks68 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity101;
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface SummonedEntitiesFilter3 {
	  [k: string]: {
	    order?: number;
	    element?: Filter63;
	  };
	}
	export interface Filter63 {
	  buffs?: Buffs132;
	  combatants_only?: Combatants62;
	  require_all_tags?: RequireAllTags62;
	  exclude?: Exclude67;
	  datafield_evaluations?: DatafieldEvaluations64;
	  items?: Items79;
	  sub_filters?: SubFilters31;
	}
	export interface Buffs132 {
	  stacks?: Stacks69;
	  buffs: Buffs133;
	  require_all: RequireAll72;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks69 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity102;
	}
	export interface Buffs133 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations64 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items79 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Further refine the original filter, such as by excluding some subset of the orignal items.
	 */
	export interface SubFilters31 {
	  [k: string]: {
	    order?: number;
	    element?: Filter64;
	  };
	}
	export interface Filter64 {
	  buffs?: Buffs134;
	  combatants_only?: Combatants63;
	  require_all_tags?: RequireAllTags63;
	  exclude?: Exclude68;
	  datafield_evaluations?: DatafieldEvaluations65;
	  items?: Items80;
	}
	export interface Buffs134 {
	  stacks?: Stacks70;
	  buffs: Buffs135;
	  require_all: RequireAll73;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks70 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity103;
	}
	export interface Buffs135 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations65 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items80 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface NumberSummoned3 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity104;
	}
	/**
	 * The reactor must be in one of these areas for the reaction to occur.
	 */
	export interface Areas6 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The reactor must be in one of these weather conditions for the reaction to occur.
	 */
	export interface Weather3 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface DirectionFromTarget {
	  value0?: Min52;
	  value1?: Max52;
	}
	export interface DistanceFromTargetGridSpaces {
	  value0?: Min53;
	  value1?: Max53;
	}
	/**
	 * How many projectiles to fire in this batch.
	 */
	export interface Quantity105 {
	  value0?: Min54;
	  value1?: Max54;
	}
	export interface ActionGroups2 {
	  [k: string]: {
	    order: number;
	    element: ActionGroup;
	  };
	}
	/**
	 * You can set up unique batches of bullets to fire in different circumstances. Each batch can have its own chance to fire, direction offset, and quantity.
	 */
	export interface ProjectileBatches {
	  [k: string]: {
	    order?: number;
	    element?: ProjectileBatch1;
	  };
	}
	export interface ProjectileBatch1 {
	  quantity: Quantity106;
	  direction: DirectionOffset;
	  conditions?: Conditions5;
	  chance: BatchChance1;
	  require_all_conditions?: RequireAllConditions4;
	}
	/**
	 * How many projectiles to fire in this batch.
	 */
	export interface Quantity106 {
	  value0?: Min55;
	  value1?: Max55;
	}
	/**
	 * This will be added to the baseline aim direction.
	 */
	export interface DirectionOffset {
	  value0?: Min56;
	  value1?: Max56;
	}
	export interface Conditions5 {
	  [k: string]: {
	    order?: number;
	    element?: Condition5;
	  };
	}
	/**
	 * Which abilities are we evaluating?
	 */
	export interface Abilities6 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface Evaluation8 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value0?: string;
	  value1?: number;
	}
	/**
	 * The 'minutes since timestamp' value can be modified up or down based on an Insight.
	 */
	export interface InsightModifier4 {
	  insight?: Insight16;
	  amount?: ChangePerPoint33;
	}
	/**
	 * If set, this description will appear on the Research Node to explain what it is unlocking.
	 */
	export interface InsightTooltip4 {
	  skip?: Skip93;
	  text: EnglishText93;
	  description?: TranslatorHelperText70;
	}
	export interface NumberOfTargets8 {
	  quantity?: Quantity107;
	  comparison?: Evaluation9;
	}
	export interface DistanceRequiredGridSpaces4 {
	  value0?: Min57;
	  value1?: Max57;
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface Targets6 {
	  [k: string]: {
	    order?: number;
	    element?: Filter65;
	  };
	}
	export interface Filter65 {
	  buffs?: Buffs136;
	  combatants_only?: Combatants64;
	  require_all_tags?: RequireAllTags64;
	  exclude?: Exclude69;
	  datafield_evaluations?: DatafieldEvaluations66;
	  items?: Items81;
	  sub_filters?: SubFilters32;
	}
	export interface Buffs136 {
	  stacks?: Stacks71;
	  buffs: Buffs137;
	  require_all: RequireAll74;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks71 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity108;
	}
	export interface Buffs137 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations66 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items81 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Further refine the original filter, such as by excluding some subset of the orignal items.
	 */
	export interface SubFilters32 {
	  [k: string]: {
	    order?: number;
	    element?: Filter66;
	  };
	}
	export interface Filter66 {
	  buffs?: Buffs138;
	  combatants_only?: Combatants65;
	  require_all_tags?: RequireAllTags65;
	  exclude?: Exclude70;
	  datafield_evaluations?: DatafieldEvaluations67;
	  items?: Items82;
	}
	export interface Buffs138 {
	  stacks?: Stacks72;
	  buffs: Buffs139;
	  require_all: RequireAll75;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks72 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity109;
	}
	export interface Buffs139 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations67 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items82 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface HealthEvaluation4 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  hp_percentage?: number;
	}
	export interface Items83 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The condition will be met if the player is wielding any of these items.
	 */
	export interface Items84 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface Buffs140 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, then targets other than yourself will be evaluated.
	 */
	export interface NumberOfTargets9 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity110;
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface BuffTargetFilter4 {
	  [k: string]: {
	    order?: number;
	    element?: Filter67;
	  };
	}
	export interface Filter67 {
	  buffs?: Buffs141;
	  combatants_only?: Combatants66;
	  require_all_tags?: RequireAllTags66;
	  exclude?: Exclude71;
	  datafield_evaluations?: DatafieldEvaluations68;
	  items?: Items85;
	  sub_filters?: SubFilters33;
	}
	export interface Buffs141 {
	  stacks?: Stacks73;
	  buffs: Buffs142;
	  require_all: RequireAll78;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks73 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity111;
	}
	export interface Buffs142 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations68 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items85 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Further refine the original filter, such as by excluding some subset of the orignal items.
	 */
	export interface SubFilters33 {
	  [k: string]: {
	    order?: number;
	    element?: Filter68;
	  };
	}
	export interface Filter68 {
	  buffs?: Buffs143;
	  combatants_only?: Combatants67;
	  require_all_tags?: RequireAllTags67;
	  exclude?: Exclude72;
	  datafield_evaluations?: DatafieldEvaluations69;
	  items?: Items86;
	}
	export interface Buffs143 {
	  stacks?: Stacks74;
	  buffs: Buffs144;
	  require_all: RequireAll79;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks74 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity112;
	}
	export interface Buffs144 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations69 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items86 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * How close or far (in grid spaces) the entities must be to be considered for this condition.
	 */
	export interface BuffTargetRange4 {
	  value0?: Min58;
	  value1?: Max58;
	}
	export interface Stacks75 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity113;
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface SummonedEntitiesFilter4 {
	  [k: string]: {
	    order?: number;
	    element?: Filter69;
	  };
	}
	export interface Filter69 {
	  buffs?: Buffs145;
	  combatants_only?: Combatants68;
	  require_all_tags?: RequireAllTags68;
	  exclude?: Exclude73;
	  datafield_evaluations?: DatafieldEvaluations70;
	  items?: Items87;
	  sub_filters?: SubFilters34;
	}
	export interface Buffs145 {
	  stacks?: Stacks76;
	  buffs: Buffs146;
	  require_all: RequireAll80;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks76 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity114;
	}
	export interface Buffs146 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations70 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items87 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Further refine the original filter, such as by excluding some subset of the orignal items.
	 */
	export interface SubFilters34 {
	  [k: string]: {
	    order?: number;
	    element?: Filter70;
	  };
	}
	export interface Filter70 {
	  buffs?: Buffs147;
	  combatants_only?: Combatants69;
	  require_all_tags?: RequireAllTags69;
	  exclude?: Exclude74;
	  datafield_evaluations?: DatafieldEvaluations71;
	  items?: Items88;
	}
	export interface Buffs147 {
	  stacks?: Stacks77;
	  buffs: Buffs148;
	  require_all: RequireAll81;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks77 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity115;
	}
	export interface Buffs148 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations71 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items88 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface NumberSummoned4 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity116;
	}
	/**
	 * The reactor must be in one of these areas for the reaction to occur.
	 */
	export interface Areas7 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The reactor must be in one of these weather conditions for the reaction to occur.
	 */
	export interface Weather4 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface ActionGroups3 {
	  [k: string]: {
	    order: number;
	    element: ActionGroup;
	  };
	}
	export interface ZBehavior {
	  z_target?: ZTarget;
	  z_time?: ZTime;
	  z_style?: ZStyle;
	}
	export interface LifetimeSeconds {
	  value0?: Min59;
	  value1?: Max59;
	}
	export interface SpeedPixelsSec {
	  value0?: Min60;
	  value1?: Max60;
	}
	export interface ActionGroups4 {
	  [k: string]: {
	    order: number;
	    element: ActionGroup;
	  };
	}
	export interface BuffsToRemove {
	  [k: string]: {
	    order?: number;
	    element?: Buff3;
	  };
	}
	export interface ActionProbability7 {
	  chance: Chance14;
	}
	export interface UnlockedBy45 {
	  prerequisite: UnlockedBy46;
	  unlock_text?: UnlockDescription14;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription14 {
	  skip?: Skip94;
	  text: EnglishText94;
	  description?: TranslatorHelperText71;
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface TargetFilters6 {
	  [k: string]: {
	    order?: number;
	    element?: Filter71;
	  };
	}
	export interface Filter71 {
	  buffs?: Buffs149;
	  combatants_only?: Combatants70;
	  require_all_tags?: RequireAllTags70;
	  exclude?: Exclude75;
	  datafield_evaluations?: DatafieldEvaluations72;
	  items?: Items89;
	  sub_filters?: SubFilters35;
	}
	export interface Buffs149 {
	  stacks?: Stacks79;
	  buffs: Buffs150;
	  require_all: RequireAll82;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks79 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity117;
	}
	export interface Buffs150 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations72 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items89 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Further refine the original filter, such as by excluding some subset of the orignal items.
	 */
	export interface SubFilters35 {
	  [k: string]: {
	    order?: number;
	    element?: Filter72;
	  };
	}
	export interface Filter72 {
	  buffs?: Buffs151;
	  combatants_only?: Combatants71;
	  require_all_tags?: RequireAllTags71;
	  exclude?: Exclude76;
	  datafield_evaluations?: DatafieldEvaluations73;
	  items?: Items90;
	}
	export interface Buffs151 {
	  stacks?: Stacks80;
	  buffs: Buffs152;
	  require_all: RequireAll83;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks80 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity118;
	}
	export interface Buffs152 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations73 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items90 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface ActionProbability8 {
	  chance: Chance15;
	}
	export interface LeapStartSounds {
	  [k: string]: {
	    order?: number;
	    element?: {
	      chance?: ChanceOfPlaying1;
	      sound?: Sound5;
	    };
	  };
	}
	export interface LeapLandingSounds {
	  [k: string]: {
	    order?: number;
	    element?: {
	      chance?: ChanceOfPlaying2;
	      sound?: Sound6;
	    };
	  };
	}
	/**
	 * One of these animations will be chosen to play during the movement.
	 */
	export interface MovementAnimations1 {
	  animations?: AnimationsList1;
	}
	export interface AnimationsList1 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      looping?: Looping2;
	      animation?: AnimationName1;
	    };
	  };
	}
	export interface ActionGroups5 {
	  [k: string]: {
	    order: number;
	    element: ActionGroup;
	  };
	}
	export interface UnlockedBy47 {
	  prerequisite: UnlockedBy48;
	  unlock_text?: UnlockDescription15;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription15 {
	  skip?: Skip95;
	  text: EnglishText95;
	  description?: TranslatorHelperText72;
	}
	export interface ActionProbability9 {
	  chance: Chance16;
	}
	/**
	 * If a knockback is successful, these sounds will play.
	 */
	export interface KnockSounds {
	  [k: string]: {
	    order?: number;
	    element?: {
	      chance?: ChanceOfPlaying3;
	      sound?: Sound7;
	    };
	  };
	}
	export interface ActionGroups6 {
	  [k: string]: {
	    order: number;
	    element: ActionGroup;
	  };
	}
	export interface ActionProbability10 {
	  chance: Chance17;
	}
	export interface AbilityPool {
	  scale_change?: ScaleChange;
	  scale_times?: ScaleTimes;
	  location: Location6;
	  tooltip?: PoolTooltipInfo;
	  spawn_sound?: SpawnSound;
	  babbler?: Babbler83;
	  particle_emitters?: ParticleEmitters3;
	  effects: Effects1;
	}
	export interface ScaleChange {
	  value0?: Start;
	  value1?: End;
	}
	/**
	 * At what point in the total duration this pool begins and ends changing its scale
	 */
	export interface ScaleTimes {
	  value0?: StartTime;
	  value1?: EndTime;
	}
	export interface PoolTooltipInfo {
	  color: TooltipColor;
	  description?: TooltipDescription1;
	  icon: TooltipIcon;
	  name: TooltipName;
	}
	/**
	 * The color of the ability pool that will be displayed in the tooltip
	 */
	export interface TooltipColor {
	  r?: Red27;
	  b?: Blue27;
	  g?: Green27;
	}
	/**
	 * The description of the ability pool that will be displayed in the tooltip
	 */
	export interface TooltipDescription1 {
	  skip?: Skip96;
	  text: EnglishText96;
	}
	/**
	 * The name of the ability pool that will be displayed in the tooltip
	 */
	export interface TooltipName {
	  skip?: Skip97;
	  text: EnglishText97;
	}
	export interface ParticleEmitters3 {
	  [k: string]: {
	    order?: number;
	    element?: ParticleEmitter3;
	  };
	}
	export interface ParticleEmitter3 {
	  particle?: Particle;
	  interval?: EmitIntervalSeconds;
	  num_particles?: NumberOfParticles4;
	  scaled_radius?: ScaledSpawnRadius2;
	  local_particles?: Local;
	  outward_blast?: BlastOutward2;
	  direction?: BurstDirection2;
	  spawn_radius?: SpawnRadiusPixels2;
	  radius_as_grid?: SpawnRadiusAsGrid2;
	  z_offset?: ZOffset8;
	}
	/**
	 * How many particles to emit with each interval.
	 */
	export interface NumberOfParticles4 {
	  value0?: Min61;
	  value1?: Max61;
	}
	export interface BurstDirection2 {
	  value0?: Min62;
	  value1?: Max62;
	}
	/**
	 * How far from the source the particles will spawn.
	 */
	export interface SpawnRadiusPixels2 {
	  value0?: Min63;
	  value1?: Max63;
	}
	export interface Effects1 {
	  [k: string]: {
	    order?: number;
	    element?: PoolEffects;
	  };
	}
	export interface PoolEffects {
	  telegraph_show_during_cast?: ShowTelegraphDuringCast2;
	  action_groups: ActionGroups7;
	  times: EffectTimes;
	}
	export interface ActionGroups7 {
	  [k: string]: {
	    order: number;
	    element: ActionGroup;
	  };
	}
	export interface EffectTimes {
	  [k: string]: {
	    order?: number;
	    element?: Seconds4;
	  };
	}
	export interface ActionProbability11 {
	  chance: Chance18;
	}
	export interface UnlockedBy49 {
	  prerequisite: UnlockedBy50;
	  unlock_text?: UnlockDescription16;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription16 {
	  skip?: Skip98;
	  text: EnglishText98;
	  description?: TranslatorHelperText73;
	}
	/**
	 * A collection of shapes used for abilities, targeting, and interactions.
	 */
	export interface Telegraph {
	  shape_collections: ShapeCollections;
	  animations?: TelegraphAnimations;
	  targets_self: IncludeCasterAsViableTarget;
	  rotate_with_aim?: RotateWithAimDirection;
	}
	export interface ShapeCollections {
	  [k: string]: {
	    order: number;
	    element: ShapeCollection;
	  };
	}
	export interface ShapeCollection {
	  shapes: Shapes;
	  mirror?: Mirror2;
	  rotational_mirror?: RotationalMirror2;
	  scale?: ScaleModifier8;
	  unlocked_by?: UnlockedBy55;
	  name?: NameInternal5;
	  offset?: Offset3;
	}
	export interface Shapes {
	  [k: string]: {
	    order: number;
	    element: Shape1;
	  };
	}
	export interface Mirror {
	  x?: X;
	  y?: Y;
	}
	/**
	 * This shape will be mirrored around the origin in a rotational pattern. This mirror applies after the X and Y mirrors, so each of those mirrors will then be rotationally mirrored.
	 */
	export interface RotationalMirror {
	  count?: Count;
	}
	/**
	 * You can optionally customize this shape's color in the editor, so it stands out from other shapes.
	 */
	export interface EditorColor {
	  r?: Red28;
	  b?: Blue28;
	  g?: Green28;
	}
	export interface UnlockedBy51 {
	  prerequisite: UnlockedBy52;
	  unlock_text?: UnlockDescription17;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription17 {
	  skip?: Skip99;
	  text: EnglishText99;
	  description?: TranslatorHelperText74;
	}
	/**
	 * In grid spaces.
	 */
	export interface Radius1 {
	  value0?: Inner;
	  value1?: Outer;
	}
	export interface Arc {
	  spread?: SpreadDegrees2;
	  angle?: DirectionDegrees;
	}
	export interface Offset1 {
	  x?: X1;
	  y?: Y1;
	}
	export interface Mirror1 {
	  x?: X2;
	  y?: Y2;
	}
	/**
	 * This shape will be mirrored around the origin in a rotational pattern. This mirror applies after the X and Y mirrors, so each of those mirrors will then be rotationally mirrored.
	 */
	export interface RotationalMirror1 {
	  count?: Count1;
	}
	/**
	 * You can optionally customize this shape's color in the editor, so it stands out from other shapes.
	 */
	export interface EditorColor1 {
	  r?: Red29;
	  b?: Blue29;
	  g?: Green29;
	}
	/**
	 * Relative to the collection's origin.
	 */
	export interface Points {
	  [k: string]: {
	    order?: number;
	    element?: {
	      x?: X3;
	      y?: Y3;
	    };
	  };
	}
	export interface UnlockedBy53 {
	  prerequisite: UnlockedBy54;
	  unlock_text?: UnlockDescription18;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription18 {
	  skip?: Skip100;
	  text: EnglishText100;
	  description?: TranslatorHelperText75;
	}
	export interface Offset2 {
	  x?: X4;
	  y?: Y4;
	}
	export interface Mirror2 {
	  x: X5;
	  y: Y5;
	}
	/**
	 * This shape will be mirrored around the origin in a rotational pattern. This mirror applies after the X and Y mirrors, so each of those mirrors will then be rotationally mirrored.
	 */
	export interface RotationalMirror2 {
	  count: Count2;
	}
	export interface UnlockedBy55 {
	  prerequisite: UnlockedBy56;
	  unlock_text?: UnlockDescription19;
	}
	/**
	 * If unlocked by research, this description will appear in the Research Node.
	 */
	export interface UnlockDescription19 {
	  skip?: Skip101;
	  text: EnglishText101;
	  description?: TranslatorHelperText76;
	}
	export interface Offset3 {
	  x: X6;
	  y: Y6;
	}
	export interface TelegraphAnimations {
	  shake?: Shake;
	  scale?: Scale5;
	}
	export interface Shake {
	  values: ShakeAmount;
	  times: ShakeTime;
	}
	export interface ShakeAmount {
	  value0: Start1;
	  value1: End1;
	}
	export interface ShakeTime {
	  value0: Start2;
	  value1: End2;
	}
	export interface Scale5 {
	  style: Style12;
	  start_value: ScaleStart;
	  times: ScaleAnimationTime;
	}
	export interface ScaleAnimationTime {
	  value0: Start3;
	  value1: End3;
	}
	/**
	 * If set, this action group will only be performed on targets that match the filter.
	 */
	export interface ActionGroupTargetFilter {
	  [k: string]: {
	    order: number;
	    element: Filter73;
	  };
	}
	export interface Filter73 {
	  buffs?: Buffs153;
	  combatants_only?: Combatants72;
	  require_all_tags?: RequireAllTags72;
	  exclude?: Exclude77;
	  datafield_evaluations?: DatafieldEvaluations74;
	  items?: Items91;
	  sub_filters?: SubFilters36;
	}
	export interface Buffs153 {
	  stacks?: Stacks81;
	  buffs: Buffs154;
	  require_all: RequireAll84;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks81 {
	  comparison: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1: Quantity119;
	}
	export interface Buffs154 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations74 {
	  [k: string]: {
	    order: number;
	    element: {
	      comparison: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0: string;
	      value1: number;
	    };
	  };
	}
	export interface Items91 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	/**
	 * Further refine the original filter, such as by excluding some subset of the orignal items.
	 */
	export interface SubFilters36 {
	  [k: string]: {
	    order: number;
	    element: Filter74;
	  };
	}
	export interface Filter74 {
	  buffs?: Buffs155;
	  combatants_only?: Combatants73;
	  require_all_tags?: RequireAllTags73;
	  exclude?: Exclude78;
	  datafield_evaluations?: DatafieldEvaluations75;
	  items?: Items92;
	}
	export interface Buffs155 {
	  stacks?: Stacks82;
	  buffs: Buffs156;
	  require_all: RequireAll85;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks82 {
	  comparison: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1: Quantity120;
	}
	export interface Buffs156 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations75 {
	  [k: string]: {
	    order: number;
	    element: {
	      comparison: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0: string;
	      value1: number;
	    };
	  };
	}
	export interface Items92 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	/**
	 * When targeting a location, how far (or close) this action group can target.
	 */
	export interface TargetingRangeInGridSpaces {
	  value0: Min64;
	  value1: Max64;
	}
	/**
	 * A sound asset controlled by the Earparty audio engine. Earparty Sounds can contain multiple audio files, which are played as variations of the Earparty Sound.
	 */
	export interface EarpartySound {
	  falloff?: Falloff;
	  priority: Priority;
	  looping?: Looping3;
	  wip?: WIP;
	  name: NameFromGMSProject;
	  group: EarpartyGroup;
	  gain: Gain;
	  seconds_cooldown?: CooldownSeconds;
	  variability?: Variability;
	  non_repeating_number?: NonRepeatingInterval;
	  probability?: PlayChance;
	  auto_pitch?: AutoPitch;
	}
	/**
	 * If the sound is played positionally, the range for it to longer be audible.
	 */
	export interface Falloff {
	  value0: Min65;
	  value1: Max65;
	}
	export interface Storyline1 {
	  order: Order1;
	  wip?: WIP;
	  description?: Description20;
	  icon?: Icon4;
	  name: Name32;
	}
	/**
	 * If set, this description will appear at the top of the Storyline when it is being inspected.
	 */
	export interface Description20 {
	  skip?: Skip102;
	  text: EnglishText102;
	  description?: TranslatorHelperText77;
	}
	export interface Name32 {
	  skip?: Skip103;
	  text: EnglishText103;
	  description?: TranslatorHelperText78;
	}
	export interface Floor1 {
	  flippable: Flippable6;
	  uicon: Icon5;
	  map_color: MapColor2;
	  wip?: WIP;
	  footstep_sound: FootstepSound2;
	  undersprite?: UnderSprite2;
	  placement_sound?: PlacementSound7;
	  dapples?: SunlightDappling2;
	  name: Name33;
	  recipe?: Recipe14;
	  variant_parent?: VariantParent4;
	  editor_group?: EditorGroup28;
	  sprite: MainSprite2;
	  description?: Description21;
	}
	/**
	 * The color to draw this tile on the map.
	 */
	export interface MapColor2 {
	  r: Red30;
	  b: Blue30;
	  g: Green30;
	}
	export interface SunlightDappling2 {
	  dapple_chance: SpawnChance2;
	  dapple_colors: Colors3;
	}
	/**
	 * The color to use for the sunlight dapples.
	 */
	export interface Colors3 {
	  [k: string]: {
	    order: number;
	    element: {
	      r: Red31;
	      b: Blue31;
	      g: Green31;
	    };
	  };
	}
	export interface Name33 {
	  skip?: Skip104;
	  text: EnglishText104;
	  description?: TranslatorHelperText79;
	}
	export interface Recipe14 {
	  artisans?: ArtisansRequired14;
	  station: Station14;
	  badge_output_modifiers?: OutputModifiedByResearch12;
	  badge_cost_modifiers?: CostModifiedByResearch14;
	  source?: UnlockedBy57;
	  components: Ingredients15;
	  effort_modifier?: EffortModifier18;
	  output_quantity?: OutputQuantity12;
	}
	export interface ArtisansRequired14 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface OutputModifiedByResearch12 {
	  [k: string]: {
	    order: number;
	    element: {
	      style: Style13;
	      value: ChangePerPoint34;
	      badge_id: ResearchNode26;
	    };
	  };
	}
	export interface CostModifiedByResearch14 {
	  [k: string]: {
	    order: number;
	    element: {
	      value: ChangePerPoint35;
	      badge_id: ResearchNode27;
	    };
	  };
	}
	export interface Ingredients15 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Description21 {
	  skip?: Skip105;
	  text: EnglishText105;
	  description?: TranslatorHelperText80;
	}
	export interface Dock1 {
	  flippable: Flippable7;
	  uicon: Icon6;
	  map_color: MapColor3;
	  wip?: WIP;
	  footstep_sound: FootstepSound3;
	  undersprite?: UnderSprite3;
	  placement_sound?: PlacementSound8;
	  dapples?: SunlightDappling3;
	  shore_interaction?: WaterInteraction1;
	  name: Name34;
	  recipe?: Recipe15;
	  variant_parent?: VariantParent5;
	  editor_group?: EditorGroup29;
	  sprite: MainSprite3;
	  description?: Description22;
	}
	/**
	 * The color to draw this tile on the map.
	 */
	export interface MapColor3 {
	  r: Red32;
	  b: Blue32;
	  g: Green32;
	}
	export interface SunlightDappling3 {
	  dapple_chance: SpawnChance3;
	  dapple_colors: Colors4;
	}
	/**
	 * The color to use for the sunlight dapples.
	 */
	export interface Colors4 {
	  [k: string]: {
	    order: number;
	    element: {
	      r: Red33;
	      b: Blue33;
	      g: Green33;
	    };
	  };
	}
	/**
	 * If set, this tile will be allowed to touch water.
	 */
	export interface WaterInteraction1 {
	  shelf_sprite?: ShelfUnderwaterSprite1;
	  shore_sprite: ShorelineUnderwaterSprite1;
	}
	export interface Name34 {
	  skip?: Skip106;
	  text: EnglishText106;
	  description?: TranslatorHelperText81;
	}
	export interface Recipe15 {
	  artisans?: ArtisansRequired15;
	  station: Station15;
	  badge_output_modifiers?: OutputModifiedByResearch13;
	  badge_cost_modifiers?: CostModifiedByResearch15;
	  source?: UnlockedBy58;
	  components: Ingredients16;
	  effort_modifier?: EffortModifier19;
	  output_quantity?: OutputQuantity13;
	}
	export interface ArtisansRequired15 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface OutputModifiedByResearch13 {
	  [k: string]: {
	    order: number;
	    element: {
	      style: Style14;
	      value: ChangePerPoint36;
	      badge_id: ResearchNode28;
	    };
	  };
	}
	export interface CostModifiedByResearch15 {
	  [k: string]: {
	    order: number;
	    element: {
	      value: ChangePerPoint37;
	      badge_id: ResearchNode29;
	    };
	  };
	}
	export interface Ingredients16 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Description22 {
	  skip?: Skip107;
	  text: EnglishText107;
	  description?: TranslatorHelperText82;
	}
	export interface Moon {
	  low_quality_night_color: NightColorLowQuality;
	  high_quality_night_color: NightColorHighQuality;
	  wip?: WIP;
	  name: Name35;
	  days_per_cycle: DaysPerCycle;
	}
	/**
	 * What colors to use for night when Low Quality lighting is enabled.
	 */
	export interface NightColorLowQuality {
	  r: Red34;
	  b: Blue34;
	  g: Green34;
	}
	/**
	 * What colors to use for night when High Quality lighting is enabled.
	 */
	export interface NightColorHighQuality {
	  r: Red35;
	  b: Blue35;
	  g: Green35;
	}
	export interface Name35 {
	  skip?: Skip108;
	  text: EnglishText108;
	}
	export interface Terrain1 {
	  flippable: Flippable8;
	  uicon: Icon7;
	  map_color: MapColor4;
	  wip?: WIP;
	  footstep_sound: FootstepSound4;
	  undersprite?: UnderSprite4;
	  placement_sound?: PlacementSound9;
	  dapples?: SunlightDappling4;
	  name: Name36;
	  shore_interaction?: WaterInteraction2;
	  shore_tile?: ShoreTile;
	  cleared_tile?: ClearedTile;
	  editor_group?: EditorGroup30;
	  disallow_floors?: DisallowFloors;
	  depth_priority: DepthPriority;
	  sprite: MainSprite4;
	  spice?: VisualSpice;
	  clear_particle_sprite?: ClearTileParticleSprite;
	}
	/**
	 * The color to draw this tile on the map.
	 */
	export interface MapColor4 {
	  r: Red36;
	  b: Blue36;
	  g: Green36;
	}
	export interface SunlightDappling4 {
	  dapple_chance: SpawnChance4;
	  dapple_colors: Colors5;
	}
	/**
	 * The color to use for the sunlight dapples.
	 */
	export interface Colors5 {
	  [k: string]: {
	    order: number;
	    element: {
	      r: Red37;
	      b: Blue37;
	      g: Green37;
	    };
	  };
	}
	export interface Name36 {
	  skip?: Skip109;
	  text: EnglishText109;
	  description?: TranslatorHelperText83;
	}
	/**
	 * If set, this tile will be allowed to touch water.
	 */
	export interface WaterInteraction2 {
	  shelf_sprite?: ShelfUnderwaterSprite2;
	  shore_sprite: ShorelineUnderwaterSprite2;
	}
	/**
	 * Tiles can spawn additional visual elements, depending on what is around them. Tiles will first sample their neighbors, then randomly choose a neighbor based on the weight of that neighbor's spice group. Then, it will roll based on 'spawn chance' to determine whether to spawn the visual spice. Finally, it will choose among the sprites within that group using their weights.
	 */
	export interface VisualSpice {
	  [k: string]: {
	    order: number;
	    element: {
	      weight: number;
	      locked: boolean;
	      item: SpiceGroup;
	    };
	  };
	}
	export interface SpiceGroup {
	  sprites: Sprites;
	  chance: SpawnChance5;
	  neighbor?: Neighbor;
	}
	export interface Sprites {
	  [k: string]: {
	    order: number;
	    element: {
	      weight: number;
	      locked: boolean;
	      item: string;
	    };
	  };
	}
	/**
	 * A region of the world.
	 */
	export interface Area4 {
	  wip?: WIP;
	  name: Name37;
	  parent?: ParentArea;
	  editor_group?: EditorGroup31;
	  buildmode_allowed?: BuildModeAllowed;
	  demo_blocked?: DemoBlocked2;
	  name_color?: NameColor3;
	  firefly_color?: FireflyColor;
	  play_ambience: PlayAmbience;
	  ambient_day?: AmbientDayTrack;
	  ambient_night?: AmbientNightTrack;
	  color_grading?: ColorGradingProfile;
	  vignette?: Vignette;
	  deep_water?: DeepWater;
	  can_play_music?: PlayMusic;
	  weather_effects?: WeatherEffects;
	  zoom?: DefaultZoom;
	  teleporter_icon?: TeleporterIcon;
	  outdoor_music_day?: OutdoorMusicDay;
	  outdoor_music_night?: OutdoorMusicNight;
	  indoor_music?: IndoorMusic;
	  water_sprite?: WaterSprite;
	  waves_sprite?: WavesSprite;
	  build_mode_access?: BuildModeAccess;
	  discoverable?: Discoverable;
	  show_name: ShowNameUponEntering;
	}
	export interface Name37 {
	  skip?: Skip110;
	  text: EnglishText110;
	  description?: TranslatorHelperText84;
	}
	/**
	 * When the name is displayed, what color the text should be.
	 */
	export interface NameColor3 {
	  r: Red38;
	  b: Blue38;
	  g: Green38;
	}
	/**
	 * The color of the fireflies in this area.
	 */
	export interface FireflyColor {
	  r: Red39;
	  b: Blue39;
	  g: Green39;
	}
	export interface WeatherEffects {
	  [k: string]: {
	    order: number;
	    element: {
	      conditions?: Conditions6;
	      require_all_conditions?: RequireAllConditions5;
	      weather_id: Weather5;
	    };
	  };
	}
	/**
	 * What must be true for this weather to show.
	 */
	export interface Conditions6 {
	  [k: string]: {
	    order: number;
	    element: Condition6;
	  };
	}
	/**
	 * If set, this description will appear on the Research Node to explain what it is unlocking.
	 */
	export interface InsightTooltip5 {
	  skip?: Skip111;
	  text: EnglishText111;
	  description?: TranslatorHelperText85;
	}
	export interface Items93 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * A list of gameplay unlockers that can either enable or disable build mode in this area. The furthest-down item in the list that is unlocked will be applied.
	 */
	export interface BuildModeAccess {
	  [k: string]: {
	    order: number;
	    element: {
	      enables_build_mode: EnablesBuildMode;
	      unlocked_by: UnlockedBy59;
	    };
	  };
	}
	export interface WeatherEffect {
	  color_grading?: ColorGrading;
	  ground_effects?: GroundEffects;
	  overlays?: Overlays;
	  ambient_sound?: AmbientSound;
	  darkness?: Darkness;
	  wip?: WIP;
	  name: NameInternal7;
	}
	export interface GroundEffects {
	  [k: string]: {
	    order: number;
	    element: GroundEffect;
	  };
	}
	export interface GroundEffect {
	  show_on_water: ShowOnWater;
	  frequency: ParticlesSecond;
	  particle: ParticleSystem5;
	  show_on_land: ShowOnLand;
	}
	export interface Overlays {
	  [k: string]: {
	    order: number;
	    element: Overlay;
	  };
	}
	export interface Overlay {
	  color?: Color6;
	  scale?: Scale6;
	  alpha?: Alpha2;
	  x_speed: XSpeed;
	  sprite: Sprite7;
	  y_speed: YSpeed;
	}
	export interface Color6 {
	  r: Red40;
	  b: Blue40;
	  g: Green40;
	}
	export interface XSpeed {
	  base: SpeedPixelsSec1;
	  sine_waves?: SineWaves1;
	}
	export interface SineWaves1 {
	  [k: string]: {
	    order: number;
	    element: SineWave1;
	  };
	}
	export interface SineWave1 {
	  speed: Speed29;
	  amplitude: Amplitude26;
	}
	export interface YSpeed {
	  base: SpeedPixelsSec2;
	  sine_waves?: SineWaves2;
	}
	export interface SineWaves2 {
	  [k: string]: {
	    order: number;
	    element: SineWave2;
	  };
	}
	export interface SineWave2 {
	  speed: Speed30;
	  amplitude: Amplitude27;
	}
	export interface BossDialogueSequence2 {
	  moments: DialogueMoments;
	  animation?: BossSpineAnimation;
	}
	export interface BossGate {
	  flippable?: Flippable9;
	  uicon: UIIcon25;
	  door_open_sound?: DoorOpenSound1;
	  door_close_sound?: DoorCloseSound1;
	  hitbox: Hitbox;
	  wip?: WIP;
	  sprite: WorldSprite22;
	  description?: Description23;
	  name: Name38;
	}
	export interface Description23 {
	  skip?: Skip112;
	  text: EnglishText112;
	  description?: TranslatorHelperText86;
	}
	export interface Name38 {
	  skip?: Skip113;
	  text: EnglishText113;
	  description?: TranslatorHelperText87;
	}
	/**
	 * Items that haven't yet been brought into the Game Changer, but exist as placeholders for UIDs.
	 */
	export interface UnimplementedItem {
	  uicon?: Icon8;
	  wip?: WIP;
	  name?: Name39;
	}
	export interface Name39 {
	  skip?: Skip114;
	  text: EnglishText114;
	  description?: TranslatorHelperText88;
	}
	export interface DamageType1 {
	  parent?: ParentDamageType;
	  aggregator: Aggregator;
	  boosts?: Boosts;
	  color?: Color7;
	  wip?: WIP;
	  name: Name40;
	  resistance_stat?: ResistanceStat;
	}
	/**
	 * Stats that can boost this damage.
	 */
	export interface Boosts {
	  [k: string]: {
	    order: number;
	    element: {
	      modifier_style: BoostStyle;
	      stat: BoostingStat;
	      direct_only?: DirectDamage4;
	    };
	  };
	}
	/**
	 * When you deal this kind of damage, what color its damage popout numbers are.
	 */
	export interface Color7 {
	  r: Red41;
	  b: Blue41;
	  g: Green41;
	}
	export interface Name40 {
	  skip?: Skip115;
	  text: EnglishText115;
	  description?: TranslatorHelperText89;
	}
	/**
	 * A timestamp that is saved on world entities for persistent tracking of when things occurred to them.
	 */
	export interface Timestamp7 {
	  uicon?: UIIcon26;
	  wip?: WIP;
	  description: Description24;
	  name: Name41;
	}
	export interface Infusion2 {
	  uicon: UIIcon27;
	  tier: Tier;
	  wip?: WIP;
	  description?: Description25;
	  name: Name42;
	  stats?: Stats;
	}
	export interface Description25 {
	  skip?: Skip116;
	  text: EnglishText116;
	  description?: TranslatorHelperText90;
	}
	export interface Name42 {
	  skip?: Skip117;
	  text: EnglishText117;
	  description?: TranslatorHelperText91;
	}
	/**
	 * Stats this infusion will give.
	 */
	export interface Stats {
	  [k: string]: {
	    order: number;
	    element: {
	      value: Value4;
	      stat: Stat3;
	    };
	  };
	}
	export interface BuffType {
	  wip?: WIP;
	  exclusive?: Exclusive6;
	  name: Name43;
	}
	export interface Name43 {
	  skip?: Skip118;
	  text: EnglishText118;
	}
	/**
	 * A collection of earparty sounds that share a global Gain.
	 */
	export interface EarpartyGroup1 {
	  parent_group?: ParentGroup;
	  falloff?: Falloff1;
	  wip?: WIP;
	  gain: GainModifier;
	  name: Name44;
	}
	/**
	 * For positional sounds, the pixel range for the audio to no longer become audible.
	 */
	export interface Falloff1 {
	  value0: Min66;
	  value1: Max66;
	}
	/**
	 * A collection of conditions that must be met for a buddy to be comfortable at home.
	 */
	export interface Comfort2 {
	  uicon?: UIIcon28;
	  unlocked_by?: UnlockedBy60;
	  priors?: ProgressionPriors;
	  wip?: WIP;
	  name: Name45;
	  unlocked_description: UnlockedDescription;
	  ignore_in_progression_map?: IgnoreInProgressionMap4;
	  order: OrderIndex;
	  glads: Requirements8;
	  description: BackstoryDescription;
	  artisan_id: Buddy10;
	}
	export interface Name45 {
	  skip?: Skip119;
	  text: EnglishText119;
	  description?: TranslatorHelperText92;
	}
	/**
	 * This text will display on the UI after you have unlocked this comfort.
	 */
	export interface UnlockedDescription {
	  skip?: Skip120;
	  text: EnglishText120;
	  description?: TranslatorHelperText93;
	}
	export interface Requirements8 {
	  [k: string]: {
	    order: number;
	    element: CheckMark1;
	  };
	}
	export interface CheckMark1 {
	  requirements: CheckMarkConditions1;
	  description: Name46;
	}
	export interface CheckMarkConditions1 {
	  [k: string]: {
	    order: number;
	    element: Condition7;
	  };
	}
	/**
	 * The number of spaces that are not occupied by structures (walls/doors/pillars).
	 */
	export interface InteriorTileArea1 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: number;
	}
	/**
	 * Note that if you include an item tag and an item that also belongs to that tag, the item will be double-counted.
	 */
	export interface Items94 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface NumberOfRooms1 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: number;
	}
	/**
	 * The items used to check for relationships. Variant items will count as each other.
	 */
	export interface SourceItems1 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value0?: {
	    [k: string]: {
	      order?: number;
	      element?: string;
	    };
	  };
	  value1?: number;
	}
	/**
	 * The items to check against the source items. Variant items will count as each other.
	 */
	export interface TargetItems1 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value0?: {
	    [k: string]: {
	      order?: number;
	      element?: string;
	    };
	  };
	  value1?: number;
	}
	/**
	 * The evaluated number of source items must meet the tile distance requirement against the evaluated number of target items.
	 */
	export interface TileDistance1 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: number;
	}
	/**
	 * Describe these conditions in a short sentence. This will be next to a checkmark that will check once the requirements are complete.
	 */
	export interface Name46 {
	  skip?: Skip121;
	  text: EnglishText121;
	  description?: TranslatorHelperText94;
	}
	/**
	 * This text will display on the UI before you have unlocked this comfort.
	 */
	export interface BackstoryDescription {
	  skip?: Skip122;
	  text: EnglishText122;
	  description?: TranslatorHelperText95;
	}
	/**
	 * A piece of information that a world element can have stored on it.
	 */
	export interface Datafield5 {
	  saves_to_world: SaveToBaseWorld;
	  saves_to_entity_changes: SaveToGameplay;
	  uicon?: UIIcon29;
	  wip?: WIP;
	  name: Name47;
	  editable?: Editable;
	  editor_range?: EditorRange;
	  editor_uid_pool?: EditorUIDPool;
	  buffer_type: DataType;
	  starting_values: FirstSpawnValues;
	  description: Description26;
	  respawn_values?: RespawnValues;
	  saves_to_inventory: SaveToInventory;
	}
	/**
	 * The range of values that this data field can be set to via the Editor.
	 */
	export interface EditorRange {
	  value0: Min67;
	  value1: Max67;
	}
	/**
	 * These values are randomly chosen when the world element is spawned.
	 */
	export interface FirstSpawnValues {
	  [k: string]: {
	    order: number;
	    element: {
	      weight: number;
	      locked: boolean;
	      item: number;
	    };
	  };
	}
	/**
	 * If this element is destroyed and then respawns, you can optionally have this data field reset to different values.
	 */
	export interface RespawnValues {
	  [k: string]: {
	    order: number;
	    element: {
	      weight: number;
	      locked: boolean;
	      item: number;
	    };
	  };
	}
	export interface Music5 {
	  style: Style15;
	  wip?: WIP;
	  name: Name48;
	}
	export interface Tracks {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * A collection of variables used to control the pacing and flow of the game.
	 */
	export interface GameBalance {
	  wip?: WIP;
	  movespeed_base: BaseGameplayMoveSpeed;
	  dps_growth_per_level: DPSGrowthLevel;
	  crafting_base_effort_per_component: CraftingEffortPerComponent;
	  crafting_growth_per_level: CraftingCostGrowthPerLevel;
	  name: Name51;
	  crafting_growth_per_quality: CraftingCostGrowthPerQuality;
	  time_to_harvest: TimeToHarvest;
	  time_to_die: TimeToDie;
	  time_to_kill: TimeToKill;
	  boss_time_to_kill: BossTimeToKill;
	  healing_cooldown: HealingCooldownSeconds;
	  badge_base_research_seconds: ResearchBaseSeconds;
	  badge_research_seconds_by_depth: ResearchTimeGrowthPerLevel;
	  badge_max_tier: ResearchMaximumTier;
	  badge_max_seconds: ResearchMaximumTime;
	  badge_base_effort_per_component: ResearchEffortPerComponent;
	  badge_comfort_modifier: MaxComfortResearchTime;
	  player_base_hp_mod: PlayerBaseHP;
	  buildmode_range: BuildModeRange;
	  home_teleport_cooldown: HomeTeleportCooldownSeconds;
	  equipment_stat_multipliers: EquipmentStatMultipliers;
	  minutes_per_game_day: MinutesPerGameDay;
	  item_respawn_minutes: WorldElementRespawnMinutes;
	  tile_respawn_minutes: ClearedTileRespawnMinutes;
	  crafting_efficiencies: CraftingEfficiencies;
	}
	/**
	 * The name of this gameplay balance mode.
	 */
	export interface Name51 {
	  skip?: Skip123;
	  text: EnglishText123;
	  description?: TranslatorHelperText96;
	}
	/**
	 * The rough number of seconds it should take the player to harvest a resource of equal level.
	 */
	export interface TimeToHarvest {
	  maximum: MaxSeconds5;
	  start: SecondsAtLevel1;
	  per_level: SecondsChangePerLevel;
	  minimum: MinSeconds5;
	}
	/**
	 * The rough number of seconds it should take the player to be killed by an equal level creature under constant hits.
	 */
	export interface TimeToDie {
	  maximum: MaxSeconds6;
	  start: SecondsAtLevel11;
	  per_level: SecondsChangePerLevel1;
	  minimum: MinSeconds6;
	}
	/**
	 * The rough number of seconds it should take the player to defeat a creature of equal level under constant hits.
	 */
	export interface TimeToKill {
	  maximum: MaxSeconds7;
	  start: SecondsAtLevel12;
	  per_level: SecondsChangePerLevel2;
	  minimum: MinSeconds7;
	}
	/**
	 * Stats have a 'value per point', which is multiplied against these weights. For example, if a trinket has a weight of 0.5 and 'Haste' has a value per point of 10%, then a trinket with 1 point of haste will give 5% haste.
	 */
	export interface EquipmentStatMultipliers {
	  itg_helm: Helm;
	  itg_chestarmor: Suit;
	  itg_pants: Boots;
	  itg_gloves: Gloves;
	  itg_tool: Tool;
	  itg_weapon: Weapon;
	  itg_trinket: Trinket1;
	}
	/**
	 * How recipes for stackable items become more efficient over time as you craft more of them.
	 */
	export interface CraftingEfficiencies {
	  num_crafts: NumCraftsForLevel1;
	  growth_per_level: CostGrowthPerSkillLevel;
	  skill_levels: SkillLevels;
	}
	/**
	 * At each skill level, how do recipes become more efficient?
	 */
	export interface SkillLevels {
	  [k: string]: {
	    order: number;
	    element: {
	      cost: CostReduction;
	      output: OutputIncrease;
	    };
	  };
	}
	/**
	 * Categories for things to be placed into in the World Editor.
	 */
	export interface EditorCategory1 {
	  spawn_mode: SpawnMode;
	  color: Color8;
	  icon: Icon9;
	  order: Order2;
	  wip?: WIP;
	  name: Name52;
	}
	export interface Color8 {
	  r: Red42;
	  b: Blue42;
	  g: Green42;
	}
	/**
	 * A place in the world that gets layered on top of the world map.
	 */
	export interface Scene {
	  editor_group?: EditorGroup32;
	  color?: Color9;
	  phases: Phases;
	  wip?: WIP;
	  description?: DescriptionInternal;
	  name: SceneNameInternal;
	}
	/**
	 * What color the scene will show as in the editor map.
	 */
	export interface Color9 {
	  r: Red43;
	  b: Blue43;
	  g: Green43;
	}
	/**
	 * The phases will be prioritized in the order they appear in this list. Phases farther down the list have a higher priority.
	 */
	export interface Phases {
	  [k: string]: {
	    order: number;
	    element: Phase5;
	  };
	}
	export interface Phase5 {
	  transition?: TransitionVisuals;
	  unlocked_by?: UnlockedBy61;
	  phase_id: UniqueID;
	  name?: PhaseNameInternal;
	}
	export interface FullscreenColor {
	  r?: Red44;
	  b?: Blue44;
	  g?: Green44;
	}
	/**
	 * If set, this text will be displayed during the 'Hold' portion of the transition.
	 */
	export interface TextOverlay {
	  skip?: Skip124;
	  text: EnglishText124;
	}
	export interface Effects2 {
	  [k: string]: {
	    order?: number;
	    element?: TransitionEffect;
	  };
	}
	export interface TransitionEffect {
	  play_on_entities: PlayOnEntities;
	  play_on_tiles: PlayOnTiles;
	  effect: VisualEffect2;
	  chance?: Chance19;
	  targets?: Targets7;
	}
	export interface DecalDurationSeconds2 {
	  value0?: Min68;
	  value1?: Max68;
	}
	/**
	 * The decal will choose a random scale between these numbers.
	 */
	export interface DecalScale2 {
	  value0?: Min69;
	  value1?: Max69;
	}
	export interface BaseColor2 {
	  r?: Red45;
	  b?: Blue45;
	  g?: Green45;
	}
	export interface HighlightColor2 {
	  r?: Red46;
	  b?: Blue46;
	  g?: Green46;
	}
	export interface ExplosionScale2 {
	  value0?: Min70;
	  value1?: Max70;
	}
	/**
	 * Set this to spawn the explosion a random distance away.
	 */
	export interface RandomDistanceGridSpaces2 {
	  value0?: Min71;
	  value1?: Max71;
	}
	/**
	 * Set this to spawn the explosion a random delay.
	 */
	export interface RandomDelaySeconds2 {
	  value0?: Min72;
	  value1?: Max72;
	}
	/**
	 * These are the particles that will shoot out from the explosion.
	 */
	export interface DebrisParticles4 {
	  [k: string]: {
	    order?: number;
	    element?: DebrisParticles5;
	  };
	}
	export interface DebrisParticles5 {
	  sprite?: Sprite8;
	  particle_scale?: ParticleScale2;
	  num_particles?: NumberOfParticles5;
	}
	export interface SkybeamColor {
	  r?: Red47;
	  b?: Blue47;
	  g?: Green47;
	}
	/**
	 * The entities to which the effect will be applied.
	 */
	export interface Targets7 {
	  [k: string]: {
	    order?: number;
	    element?: Filter75;
	  };
	}
	export interface Filter75 {
	  buffs?: Buffs157;
	  combatants_only?: Combatants74;
	  require_all_tags?: RequireAllTags74;
	  exclude?: Exclude79;
	  datafield_evaluations?: DatafieldEvaluations76;
	  items?: Items95;
	  sub_filters?: SubFilters37;
	}
	export interface Buffs157 {
	  stacks?: Stacks83;
	  buffs: Buffs158;
	  require_all: RequireAll87;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks83 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity121;
	}
	export interface Buffs158 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations76 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items95 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Further refine the original filter, such as by excluding some subset of the orignal items.
	 */
	export interface SubFilters37 {
	  [k: string]: {
	    order?: number;
	    element?: Filter76;
	  };
	}
	export interface Filter76 {
	  buffs?: Buffs159;
	  combatants_only?: Combatants75;
	  require_all_tags?: RequireAllTags75;
	  exclude?: Exclude80;
	  datafield_evaluations?: DatafieldEvaluations77;
	  items?: Items96;
	}
	export interface Buffs159 {
	  stacks?: Stacks84;
	  buffs: Buffs160;
	  require_all: RequireAll88;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks84 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity122;
	}
	export interface Buffs160 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations77 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items96 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface Stat4 {
	  display_percent: DisplayAsPercent;
	  naming_priority: Order3;
	  is_modifier?: IsModifier;
	  wip?: WIP;
	  primary_tags?: PrimaryStatForItemTypes;
	  name: Name53;
	  show_on_player_ui: ShowOnPlayerUI;
	  parent?: ParentStat;
	  value_per_point?: ValuePoint;
	  min_value?: ValueMin;
	  usable_on_equipment: UsableOnEquipment;
	  max_value?: ValueMax;
	  usable_on_buffs: UsableOnBuffs;
	  description?: Description27;
	  default_value: ValueDefault;
	  display_precision?: DecimalPrecision;
	}
	/**
	 * If this stat appears on an item and is marked as a 'Primary' stat for that kind of item, this stat will appear first. For example, armor items have 'Hit Points' as a primary stat.
	 */
	export interface PrimaryStatForItemTypes {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Name53 {
	  skip?: Skip125;
	  text: EnglishText125;
	  description?: TranslatorHelperText97;
	}
	export interface Description27 {
	  skip?: Skip126;
	  text: EnglishText126;
	}
	export interface DamageProfile1 {
	  damage_types: DamageTypes3;
	  modifiers?: Modifiers1;
	  wip?: WIP;
	  name: Name54;
	}
	/**
	 * What kind of damage to deal, and what percent of the 'normal' amount to deal. The actual damage dealt will be calculated based on game factors such as the level of the user, cast times, and stats of the damager.
	 */
	export interface DamageTypes3 {
	  [k: string]: {
	    order: number;
	    element: {
	      value: DamageAmount1;
	      key: DamageType2;
	    };
	  };
	}
	/**
	 * Whether to deal extra or reduced damage to certain things, or certain kinds of things.
	 */
	export interface Modifiers1 {
	  [k: string]: {
	    order: number;
	    element: {
	      value: Modifier3;
	      key: Filter77;
	    };
	  };
	}
	export interface CameraAnchor {
	  radius: RadiusGrid;
	  zoom?: Zoom;
	  bias: BiasAmount;
	  wip?: WIP;
	  name: NameInternal8;
	}
	/**
	 * A state that a world element can be in which conveys information about how it should animate
	 */
	export interface AnimationState {
	  fallback?: FallbackState;
	  spine_name_default: DefaultSpineAnimationName;
	  wip?: WIP;
	  description: Description28;
	  name: Name55;
	}
	/**
	 * A particle system asset defined in the Game Maker project.
	 */
	export interface ParticleSystem7 {
	  wip?: WIP;
	  name: Name56;
	}
	export interface GameMode {
	  enemy_attack_speed: EnemyAttackSpeed;
	  enemy_health: EnemyHealth;
	  player_health: PlayerHealth;
	  ded_item_loss: DEDItemLoss;
	  color: Color10;
	  icon: Icon10;
	  wip?: WIP;
	  name: Name57;
	  healing_cooldown: HealingCooldown;
	  order: Order4;
	  description: Description29;
	}
	export interface Color10 {
	  r: Red48;
	  b: Blue48;
	  g: Green48;
	}
	export interface Name57 {
	  skip?: Skip127;
	  text: EnglishText127;
	}
	export interface Description29 {
	  skip?: Skip128;
	  text: EnglishText128;
	}
	/**
	 * Visuals to convey character emotions.
	 */
	export interface Emoji11 {
	  wip?: WIP;
	  sprite: Sprite9;
	  name: NameInternal9;
	  sound?: Sound10;
	}
	/**
	 * Conditions that must be true for the quest to proceed.
	 */
	export interface Requirements9 {
	  [k: string]: {
	    order: number;
	    element: Requirement1;
	  };
	}
	export interface Chat {
	  requirements?: Requirements10;
	  wip?: WIP;
	  moments: Moments;
	  name: NameInternal10;
	}
	/**
	 * Conditions that must be true for the quest to proceed.
	 */
	export interface Requirements10 {
	  [k: string]: {
	    order: number;
	    element: Requirement1;
	  };
	}
	export interface Moments {
	  [k: string]: {
	    order: number;
	    element: Moment;
	  };
	}
	export interface Moment {
	  [k: string]: {
	    order: number;
	    element: {
	      emoji?: Emoji12;
	      speaker: string;
	      text?: Dialogue;
	    };
	  };
	}
	export interface Dialogue {
	  skip?: Skip129;
	  text: EnglishText129;
	}
	/**
	 * A postprocessing effect that can be used to change the feel of an area or situation.
	 */
	export interface ColorGrading1 {
	  wip?: WIP;
	  values: Values;
	  name: ProfileNameInternal;
	}
	export interface Values {
	  brightness?: Brightness1;
	  saturation?: Saturation;
	  contrast_r?: RedMultiplier;
	  contrast_g?: GreenMultiplier;
	  contrast_b?: BlueMultiplier;
	  dark_levels?: DarkLevels;
	  light_levels?: LightLevels;
	  shadow_threshold?: ShadowThreshold;
	  shadow_multiplier?: ShadowMultiplier;
	  highlight_threshold?: HighlightThreshold;
	  highlight_multiplier?: HighlightMultiplier;
	}
	export interface EquipmentSet9 {
	  wip?: WIP;
	  description: Description30;
	  color: Color11;
	  bonuses: Bonuses;
	  name: Name58;
	}
	export interface Description30 {
	  skip?: Skip130;
	  text: EnglishText130;
	}
	/**
	 * What color the set's name and item borders should be displayed on the UI.
	 */
	export interface Color11 {
	  r: Red49;
	  b: Blue49;
	  g: Green49;
	}
	export interface Bonuses {
	  [k: string]: {
	    order: number;
	    element: SetBonus;
	  };
	}
	export interface SetBonus {
	  reactions?: Reactions;
	  num_pieces: Pieces;
	  stats?: Stats1;
	}
	export interface Stats1 {
	  [k: string]: {
	    order: number;
	    element: {
	      amount: Amount1;
	      stat: Stat5;
	    };
	  };
	}
	export interface Name58 {
	  skip?: Skip131;
	  text: EnglishText131;
	  description?: TranslatorHelperText98;
	}
	export interface Credits {
	  wip?: WIP;
	  sections?: Sections;
	  name: NameInternal11;
	}
	export interface Sections {
	  [k: string]: {
	    order: number;
	    element: Section;
	  };
	}
	export interface Section {
	  entries: Entries;
	  name: SectionName;
	  group_color: SectionNameColor;
	}
	export interface Entries {
	  [k: string]: {
	    order: number;
	    element: CreditsEntry;
	  };
	}
	export interface Role {
	  skip?: Skip132;
	  text: EnglishText132;
	}
	export interface Names {
	  [k: string]: {
	    order?: number;
	    element?: {
	      name?: string;
	      use_cjk?: CJK1;
	    };
	  };
	}
	export interface Role1 {
	  skip?: Skip133;
	  text: EnglishText133;
	}
	export interface SectionName {
	  skip?: Skip134;
	  text: EnglishText134;
	}
	export interface SectionNameColor {
	  r: Red50;
	  b: Blue50;
	  g: Green50;
	}
	export interface Schema1 {
	  title?: Name59;
	  _type: Type3;
	  wip?: WIP;
	  description?: Description31;
	}
	export interface PropertyDefinitions {
	  [k: string]: {
	    order?: number;
	    element?: Schema2;
	  };
	}
	export interface BossPhase1 {
	  opening_sequence?: BossDialogueSequence3;
	  boss: Boss8;
	  ending_sequence?: BossDialogueSequence4;
	  wip?: WIP;
	  name: NameInternal12;
	  reactions?: Reactions;
	  movement?: MotionOverride10;
	  order: Order5;
	  zoom_level?: ZoomLevel;
	  music?: Music7;
	  abilities?: Abilities7;
	  description?: DescriptionInternal1;
	}
	export interface BossDialogueSequence3 {
	  moments: DialogueMoments;
	  animation?: BossSpineAnimation;
	}
	export interface BossDialogueSequence4 {
	  moments: DialogueMoments;
	  animation?: BossSpineAnimation;
	}
	export interface MotionOverride10 {
	  moving?: MovementVisuals13;
	  stationary?: StationaryVisuals12;
	  movespeed?: MovementSpeed13;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave25 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      speed?: Speed31;
	      amplitude?: Amplitude28;
	    };
	  };
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements25 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent25;
	  };
	}
	export interface FlapEvent25 {
	  impulse_seconds?: ImpulseDurationSeconds25;
	  recovery_seconds?: RecoveryDurationSeconds25;
	  distance?: VerticalDistance25;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave26 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      speed?: Speed32;
	      amplitude?: Amplitude29;
	    };
	  };
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements26 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent26;
	  };
	}
	export interface FlapEvent26 {
	  impulse_seconds?: ImpulseDurationSeconds26;
	  recovery_seconds?: RecoveryDurationSeconds26;
	  distance?: VerticalDistance26;
	}
	/**
	 * What abilities the boss will use during this phase.
	 */
	export interface Abilities7 {
	  [k: string]: {
	    order: number;
	    element: BossAbilityAI;
	  };
	}
	export interface BossAbilityAI {
	  weight: Weight7;
	  targeting?: Targeting;
	  ability_id: Ability11;
	  conditions?: AbilityUsageConditions;
	  destination?: Destination2;
	  post_ability_pause_ignore_chance?: PostAbilityPauseIgnoreChance1;
	  movement?: MotionOverride11;
	  post_ability_pause?: PostAbilityPause2;
	  followup_abilities?: FollowupAbilities1;
	  direction_randomness?: DirectionRandomness3;
	}
	/**
	 * The boss will only choose targets that are within this range.
	 */
	export interface Range {
	  value0?: Min73;
	  value1?: Max73;
	}
	/**
	 * The boss will choose the nearest target that matches these types.
	 */
	export interface PotentialTargets {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, the boss will only use this ability if its conditions are met.
	 */
	export interface AbilityUsageConditions {
	  conditions: Conditions7;
	  require_all_conditions: RequireAllConditions6;
	}
	export interface Conditions7 {
	  [k: string]: {
	    order: number;
	    element: Condition8;
	  };
	}
	/**
	 * Which abilities are we evaluating?
	 */
	export interface Abilities8 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface Evaluation10 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value0?: string;
	  value1?: number;
	}
	/**
	 * The 'minutes since timestamp' value can be modified up or down based on an Insight.
	 */
	export interface InsightModifier5 {
	  insight?: Insight19;
	  amount?: ChangePerPoint38;
	}
	/**
	 * If set, this description will appear on the Research Node to explain what it is unlocking.
	 */
	export interface InsightTooltip6 {
	  skip?: Skip135;
	  text: EnglishText135;
	  description?: TranslatorHelperText99;
	}
	export interface NumberOfTargets10 {
	  quantity?: Quantity123;
	  comparison?: Evaluation11;
	}
	export interface DistanceRequiredGridSpaces5 {
	  value0?: Min74;
	  value1?: Max74;
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface Targets8 {
	  [k: string]: {
	    order?: number;
	    element?: Filter78;
	  };
	}
	export interface Filter78 {
	  buffs?: Buffs161;
	  combatants_only?: Combatants76;
	  require_all_tags?: RequireAllTags76;
	  exclude?: Exclude81;
	  datafield_evaluations?: DatafieldEvaluations78;
	  items?: Items97;
	  sub_filters?: SubFilters38;
	}
	export interface Buffs161 {
	  stacks?: Stacks85;
	  buffs: Buffs162;
	  require_all: RequireAll89;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks85 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity124;
	}
	export interface Buffs162 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations78 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items97 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Further refine the original filter, such as by excluding some subset of the orignal items.
	 */
	export interface SubFilters38 {
	  [k: string]: {
	    order?: number;
	    element?: Filter79;
	  };
	}
	export interface Filter79 {
	  buffs?: Buffs163;
	  combatants_only?: Combatants77;
	  require_all_tags?: RequireAllTags77;
	  exclude?: Exclude82;
	  datafield_evaluations?: DatafieldEvaluations79;
	  items?: Items98;
	}
	export interface Buffs163 {
	  stacks?: Stacks86;
	  buffs: Buffs164;
	  require_all: RequireAll90;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks86 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity125;
	}
	export interface Buffs164 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations79 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items98 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface HealthEvaluation5 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  hp_percentage?: number;
	}
	export interface Items99 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The condition will be met if the player is wielding any of these items.
	 */
	export interface Items100 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface Buffs165 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, then targets other than yourself will be evaluated.
	 */
	export interface NumberOfTargets11 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity126;
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface BuffTargetFilter5 {
	  [k: string]: {
	    order?: number;
	    element?: Filter80;
	  };
	}
	export interface Filter80 {
	  buffs?: Buffs166;
	  combatants_only?: Combatants78;
	  require_all_tags?: RequireAllTags78;
	  exclude?: Exclude83;
	  datafield_evaluations?: DatafieldEvaluations80;
	  items?: Items101;
	  sub_filters?: SubFilters39;
	}
	export interface Buffs166 {
	  stacks?: Stacks87;
	  buffs: Buffs167;
	  require_all: RequireAll93;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks87 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity127;
	}
	export interface Buffs167 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations80 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items101 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Further refine the original filter, such as by excluding some subset of the orignal items.
	 */
	export interface SubFilters39 {
	  [k: string]: {
	    order?: number;
	    element?: Filter81;
	  };
	}
	export interface Filter81 {
	  buffs?: Buffs168;
	  combatants_only?: Combatants79;
	  require_all_tags?: RequireAllTags79;
	  exclude?: Exclude84;
	  datafield_evaluations?: DatafieldEvaluations81;
	  items?: Items102;
	}
	export interface Buffs168 {
	  stacks?: Stacks88;
	  buffs: Buffs169;
	  require_all: RequireAll94;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks88 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity128;
	}
	export interface Buffs169 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations81 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items102 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * How close or far (in grid spaces) the entities must be to be considered for this condition.
	 */
	export interface BuffTargetRange5 {
	  value0?: Min75;
	  value1?: Max75;
	}
	export interface Stacks89 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity129;
	}
	/**
	 * Item IDs or item tags to filter the targets by. If not set, all targets are valid. Each entry in the Filter list is independently checked, so a valid target only needs to match one filter.
	 */
	export interface SummonedEntitiesFilter5 {
	  [k: string]: {
	    order?: number;
	    element?: Filter82;
	  };
	}
	export interface Filter82 {
	  buffs?: Buffs170;
	  combatants_only?: Combatants80;
	  require_all_tags?: RequireAllTags80;
	  exclude?: Exclude85;
	  datafield_evaluations?: DatafieldEvaluations82;
	  items?: Items103;
	  sub_filters?: SubFilters40;
	}
	export interface Buffs170 {
	  stacks?: Stacks90;
	  buffs: Buffs171;
	  require_all: RequireAll95;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks90 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity130;
	}
	export interface Buffs171 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations82 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items103 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * Further refine the original filter, such as by excluding some subset of the orignal items.
	 */
	export interface SubFilters40 {
	  [k: string]: {
	    order?: number;
	    element?: Filter83;
	  };
	}
	export interface Filter83 {
	  buffs?: Buffs172;
	  combatants_only?: Combatants81;
	  require_all_tags?: RequireAllTags81;
	  exclude?: Exclude86;
	  datafield_evaluations?: DatafieldEvaluations83;
	  items?: Items104;
	}
	export interface Buffs172 {
	  stacks?: Stacks91;
	  buffs: Buffs173;
	  require_all: RequireAll96;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks91 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity131;
	}
	export interface Buffs173 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations83 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0?: string;
	      value1?: number;
	    };
	  };
	}
	export interface Items104 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	export interface NumberSummoned5 {
	  comparison?: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1?: Quantity132;
	}
	/**
	 * The reactor must be in one of these areas for the reaction to occur.
	 */
	export interface Areas8 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * The reactor must be in one of these weather conditions for the reaction to occur.
	 */
	export interface Weather6 {
	  [k: string]: {
	    order?: number;
	    element?: string;
	  };
	}
	/**
	 * If set, the boss will move to this destination before casting the ability.
	 */
	export interface Destination2 {
	  range?: Range1;
	  targets: PotentialTargets1;
	  choose_random?: ChooseRandom1;
	}
	/**
	 * The boss will only choose quest markers that are within this range.
	 */
	export interface Range1 {
	  value0: Min76;
	  value1: Max76;
	}
	/**
	 * The boss will choose the nearest of the quest markers listed here.
	 */
	export interface PotentialTargets1 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface MotionOverride11 {
	  moving?: MovementVisuals14;
	  stationary?: StationaryVisuals13;
	  movespeed?: MovementSpeed14;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave27 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      speed?: Speed33;
	      amplitude?: Amplitude30;
	    };
	  };
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements27 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent27;
	  };
	}
	export interface FlapEvent27 {
	  impulse_seconds?: ImpulseDurationSeconds27;
	  recovery_seconds?: RecoveryDurationSeconds27;
	  distance?: VerticalDistance27;
	}
	/**
	 * You can add sine waves to the vertical position to have the creature move up and down. Sine waves can stack, creating unique motions.
	 */
	export interface AltitudeSineWave28 {
	  [k: string]: {
	    order?: number;
	    element?: {
	      speed?: Speed34;
	      amplitude?: Amplitude31;
	    };
	  };
	}
	/**
	 * How the creature's flight should respond to 'flap' events in Spine.
	 */
	export interface FlappingVerticalMovements28 {
	  [k: string]: {
	    order?: number;
	    element?: FlapEvent28;
	  };
	}
	export interface FlapEvent28 {
	  impulse_seconds?: ImpulseDurationSeconds28;
	  recovery_seconds?: RecoveryDurationSeconds28;
	  distance?: VerticalDistance28;
	}
	/**
	 * If set, the boss will wait for this many seconds after using this ability before moving on to the next ability.
	 */
	export interface PostAbilityPause2 {
	  value0: MinSeconds8;
	  value1: MaxSeconds8;
	}
	/**
	 * If set, these abilities will be cast after the current one. These abilities must already be listed in this phase's abilities, or they will be ignored.
	 */
	export interface FollowupAbilities1 {
	  [k: string]: {
	    order: number;
	    element: FollowupAbility1;
	  };
	}
	export interface FollowupAbility1 {
	  weight: Weight8;
	  ability: Ability12;
	  instant: Instant1;
	}
	export interface ResistanceProfile3 {
	  wip?: WIP;
	  resistances: Resistances;
	  name: Name60;
	}
	/**
	 * Any damage types not listed will have a resistance of zero -- so the entity will take full damage from that type.
	 */
	export interface Resistances {
	  [k: string]: {
	    order: number;
	    element: {
	      value: Resistance;
	      key: DamageType3;
	    };
	  };
	}
	export interface BuildingRoof {
	  roof_sprite?: RoofSprite;
	  fill?: VerticalFiller;
	  peak?: CenterPeak;
	  slope_back?: BackSlope;
	  slope_front?: FrontSlope;
	  wip?: WIP;
	  slope_back_edge?: BackEdge;
	  slope_front_edge?: FrontEdge;
	  name: Name61;
	}
	export interface Name61 {
	  skip?: Skip136;
	  text: EnglishText136;
	  description?: TranslatorHelperText100;
	}
	/**
	 * Details about a level of quality for an item.
	 */
	export interface ItemQuality {
	  effort: Effort;
	  dark_color: DarkColor;
	  wip?: WIP;
	  color: Color12;
	  name: QualityName;
	}
	/**
	 * The color to use as a backdrop when showing items of this quality level.
	 */
	export interface DarkColor {
	  r: Red51;
	  b: Blue51;
	  g: Green51;
	}
	/**
	 * The color to use when showing items of this quality level.
	 */
	export interface Color12 {
	  r: Red52;
	  b: Blue52;
	  g: Green52;
	}
	/**
	 * The term used to describe items of this level of quality (e.g. Common, Rare, Legendary
	 */
	export interface QualityName {
	  skip?: Skip137;
	  text: EnglishText137;
	  description?: TranslatorHelperText101;
	}
	/**
	 * An object asset found in the Game Maker project.
	 */
	export interface Object6 {
	  wip?: WIP;
	  name: Name62;
	}
	export interface Video {
	  wip?: WIP;
	  name: VideoName;
	  video_path: VideoFilePath;
	  gain?: AudioGainModifier;
	  skip_points?: SkipPoints;
	  progress_bar_color?: ProgressBarColor;
	  progress_bar_alpha?: ProgressBarAlpha;
	  progress_bar_background?: ProgressBarBackgroundColor;
	  progress_bar_background_alpha?: ProgressBarBackgroundAlpha;
	  progress_bar_height?: ProgressBarHeightPixels;
	  border_color?: BorderColor;
	  subtitles?: Subtitles;
	}
	/**
	 * Set specific times (in seconds) that the video player will skip ahead to for this video.
	 */
	export interface SkipPoints {
	  [k: string]: {
	    order: number;
	    element: TimestampSeconds;
	  };
	}
	export interface ProgressBarColor {
	  r: Red53;
	  b: Blue53;
	  g: Green53;
	}
	export interface ProgressBarBackgroundColor {
	  r: Red54;
	  b: Blue54;
	  g: Green54;
	}
	/**
	 * If there are 'bars' around the video due to aspect ratio issues, you can customize the color those bars will be drawn. The bars will not be visibile at a 16:9 aspect ratio.
	 */
	export interface BorderColor {
	  r: Red55;
	  b: Blue55;
	  g: Green55;
	}
	export interface Subtitles {
	  [k: string]: {
	    order: number;
	    element: {
	      text: {
	        skip?: Skip138;
	        text: EnglishText138;
	      };
	      times: Times;
	    };
	  };
	}
	export interface Times {
	  value0: number;
	  value1: number;
	}
	/**
	 * The visual information for how to display a type of character in the game world.
	 */
	export interface CharacterSpecies {
	  uicon: UIIcon30;
	  speech_sounds?: SpeechSounds;
	  object: Object7;
	  wip?: WIP;
	  size: Hitbox2;
	  sprite: WorldSprite23;
	  name_color: NameColor4;
	  name: Name63;
	}
	/**
	 * Random sounds to play when the NPC is speaking (but has no emoji)
	 */
	export interface SpeechSounds {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	export interface Hitbox2 {
	  width: Width9;
	  height: Height9;
	}
	/**
	 * For when this name is displayed in a dialogue window.
	 */
	export interface NameColor4 {
	  r: Red56;
	  b: Blue56;
	  g: Green56;
	}
	export interface Name63 {
	  skip?: Skip139;
	  text: EnglishText139;
	  description?: TranslatorHelperText102;
	}
	export interface Ability13 {
	  action_groups?: ActionGroups;
	  wip?: WIP;
	  targeting_range?: TargetingRangeInGridSpaces1;
	  name: Name64;
	  hotbar_number?: HotbarBuffNumber;
	  effective_range?: EffectiveRange;
	  channeling?: Channeling;
	  preview_sprite?: PreviewSprite;
	  postpones_death?: PostponesDeath;
	  tooltip_description?: TooltipDescription2;
	  usable_in_combat?: UsableInCombat;
	  uicon?: UIIcon31;
	  charges?: Charges1;
	  buff_required?: BuffRequirement;
	  telegraph_scale_modifiers?: TelegraphScaleModifiers;
	  juke_charges_required?: JukeChargesRequired;
	  usable_during_forced_movement?: UsableDuringForcedMovement;
	  cooldown?: Cooldown;
	  harmful_draw_override?: TelegraphDrawsAsHarmful;
	  cast_animations?: CastingAnimations;
	  stops_other_casts?: StopsOtherCasts;
	  single_targeting?: SingleTargeted;
	  cast_duration: CastDurationSeconds;
	  start_cast_sound?: StartCastSound;
	}
	/**
	 * When targeting a location, how far (or close) this ability can target.
	 */
	export interface TargetingRangeInGridSpaces1 {
	  value0: Min77;
	  value1: Max77;
	}
	/**
	 * If set, this ability will show this number on the hotbar instead of charges or ammunition.
	 */
	export interface HotbarBuffNumber {
	  number_type: Type4;
	  buff: Buff4;
	  multiplier: Multiplier;
	}
	/**
	 * This is used for AI (such as creatures) to determine how close or far away to get to use the ability. It is relative to the minimum and maximum ranges established in the ability's targeting and telegraph information.
	 */
	export interface EffectiveRange {
	  value0: Min78;
	  value1: Max78;
	}
	/**
	 * If set, this ability will be channeled, causing the action groups to trigger repeatedly over time.
	 */
	export interface Channeling {
	  direction_jump?: DirectionJumpPerTick;
	  ground_speed_limit?: PlayerTargetingGroundSpeedLimit;
	  ticks: TickTimings;
	  direction_change?: DirectionChangeDuringChannel;
	  action_groups: ActionGroups8;
	  animation?: ChannelingAnimation;
	  animation_style: AnimationStyle;
	  single_target_tracking?: SingleTargetTracking;
	  allow_retargeting?: PlayerReTargetingDuringChannel;
	}
	/**
	 * The ability will trigger at these times after the initial cast, triggering the action groups each time.
	 */
	export interface TickTimes {
	  [k: string]: {
	    order?: number;
	    element?: TickTime;
	  };
	}
	export interface ActionGroups8 {
	  [k: string]: {
	    order: number;
	    element: ActionGroup;
	  };
	}
	/**
	 * This ability can automatically adjust its targeting position to follow a single target, with certain constraints. If no constraints are set, it will constantly be locked onto the single target.
	 */
	export interface SingleTargetTracking {
	  distance_jump?: DistanceJumpPerTickGridSpaces;
	  ground_speed?: ConstantGroundSpeed;
	}
	/**
	 * You can have the ground target 'jump' towards the single target each tick.
	 */
	export interface DistanceJumpPerTickGridSpaces {
	  value0: Min79;
	  value1: Max79;
	}
	/**
	 * Describe what this ability does. This is useful for conveying information that the auto-generated tooltip can't provide.
	 */
	export interface TooltipDescription2 {
	  skip?: Skip140;
	  text: EnglishText140;
	}
	/**
	 * An ability that uses Charges must have at least one charge available for the ability to be cast. Each cast consumes a charge.
	 */
	export interface Charges1 {
	  max_charges: MaxCharges;
	  recharge_seconds: RechargeSeconds;
	  recharge_speed_modifier?: RechargeSpeedStatModifiers;
	}
	export interface RechargeSpeedStatModifiers {
	  [k: string]: {
	    order: number;
	    element: Modifier4;
	  };
	}
	export interface Modifier4 {
	  type: ModifierType2;
	  stat: Stat6;
	}
	/**
	 * The caster must have this buff in order to cast this ability.
	 */
	export interface BuffRequirement {
	  stacks: Stacks92;
	  buff: Buff5;
	}
	/**
	 * If set, and this ability has telegraphs, the telegraphs can be grown or shrunk based on game conditions.
	 */
	export interface TelegraphScaleModifiers {
	  [k: string]: {
	    order: number;
	    element: {
	      conditions: Conditions8;
	      require_all_conditions: RequireAllConditions7;
	      multiplier: Multiplier1;
	    };
	  };
	}
	/**
	 * What must be true for this scale modifier to exist.
	 */
	export interface Conditions8 {
	  [k: string]: {
	    order: number;
	    element: Condition9;
	  };
	}
	/**
	 * If set, this description will appear on the Research Node to explain what it is unlocking.
	 */
	export interface InsightTooltip7 {
	  skip?: Skip141;
	  text: EnglishText141;
	  description?: TranslatorHelperText103;
	}
	export interface Cooldown {
	  seconds: CooldownSeconds1;
	  trigger_percentage: CooldownTriggerPercentage;
	  cooldown_speed_modifier?: CooldownSpeedStatModifiers;
	}
	export interface CooldownSpeedStatModifiers {
	  [k: string]: {
	    order: number;
	    element: Modifier5;
	  };
	}
	export interface Modifier5 {
	  type: ModifierType3;
	  stat: Stat7;
	}
	export interface CastingAnimations {
	  shake?: Shake1;
	  animations?: AnimationsList2;
	}
	/**
	 * The caster can shake for some amount during a portion (or all) of the ability cast.
	 */
	export interface Shake1 {
	  values: ShakeAmount1;
	  times: ShakeTime1;
	}
	export interface ShakeAmount1 {
	  value0: Start4;
	  value1: End4;
	}
	export interface ShakeTime1 {
	  value0: Start5;
	  value1: End5;
	}
	export interface AnimationsList2 {
	  [k: string]: {
	    order: number;
	    element: {
	      animation: AnimationName2;
	    };
	  };
	}
	/**
	 * If set, this ability will only be castable if the caster has a specific target that meets these rules.
	 */
	export interface SingleTargeted {
	  filter?: SingleTargetFiltering;
	  range: RangeInGridSpaces;
	  directional_aim?: DirectionalTargetingForPlayer;
	}
	/**
	 * The ability will only be castable on targets that match these filters.
	 */
	export interface SingleTargetFiltering {
	  [k: string]: {
	    order: number;
	    element: Filter84;
	  };
	}
	export interface Filter84 {
	  buffs?: Buffs174;
	  combatants_only?: Combatants82;
	  require_all_tags?: RequireAllTags82;
	  exclude?: Exclude87;
	  datafield_evaluations?: DatafieldEvaluations84;
	  items?: Items105;
	  sub_filters?: SubFilters41;
	}
	export interface Buffs174 {
	  stacks?: Stacks93;
	  buffs: Buffs175;
	  require_all: RequireAll97;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks93 {
	  comparison: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1: Quantity133;
	}
	export interface Buffs175 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations84 {
	  [k: string]: {
	    order: number;
	    element: {
	      comparison: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0: string;
	      value1: number;
	    };
	  };
	}
	export interface Items105 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	/**
	 * Further refine the original filter, such as by excluding some subset of the orignal items.
	 */
	export interface SubFilters41 {
	  [k: string]: {
	    order: number;
	    element: Filter85;
	  };
	}
	export interface Filter85 {
	  buffs?: Buffs176;
	  combatants_only?: Combatants83;
	  require_all_tags?: RequireAllTags83;
	  exclude?: Exclude88;
	  datafield_evaluations?: DatafieldEvaluations85;
	  items?: Items106;
	}
	export interface Buffs176 {
	  stacks?: Stacks94;
	  buffs: Buffs177;
	  require_all: RequireAll98;
	}
	/**
	 * The buffs found must match this stack requirement.
	 */
	export interface Stacks94 {
	  comparison: "==" | "!=" | "<" | "<=" | ">" | ">=";
	  value1: Quantity134;
	}
	export interface Buffs177 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	/**
	 * If set, only items whose datafields meet these criteria will be targeted.
	 */
	export interface DatafieldEvaluations85 {
	  [k: string]: {
	    order: number;
	    element: {
	      comparison: "==" | "!=" | "<" | "<=" | ">" | ">=";
	      value0: string;
	      value1: number;
	    };
	  };
	}
	export interface Items106 {
	  [k: string]: {
	    order: number;
	    element: string;
	  };
	}
	/**
	 * The target must meet these range requirements for the ability to be cast (and the actions to be performed.)
	 */
	export interface RangeInGridSpaces {
	  value0: Min80;
	  value1: Max80;
	}
	export interface Buff6 {
	  effects?: Effects3;
	  swing_sound_overlay?: SwingSoundOverlay;
	  timer_behavior?: TimerRefreshBehavior;
	  expiration_sound?: ExpirationSound;
	  looping_spine_visual?: LoopingSpineVisual;
	  application_spine?: ApplicationSpineSprite;
	  custom_visuals_object?: CustomVFXObject;
	  expires_on_death: ExpiresUponDeath;
	  light_emitter?: LightEmitter;
	  max_instances?: MaximumInstances;
	  max_stacks: MaximumStacks;
	  replace_oldest?: ReplaceOldest;
	  stun?: Stun1;
	  boss_stun?: BossStun;
	  wip?: WIP;
	  prevents_negative_buffs?: PreventsNegativeBuffs;
	  drop_color?: DropShadowColor;
	  name: Name65;
	  stats?: Stats2;
	  reactions?: Reactions;
	  duration?: DurationSeconds1;
	  description?: Description32;
	  positive: Positive;
	  uicon: UIIcon32;
	  color: Color13;
	  particle_emitters?: ParticleEmitters4;
	  buff_type: Type5;
	  infostream?: InfostreamText;
	  show_damage_instead_of_stacks?: ShowDamageInsteadOfStacks;
	  application_sound?: ApplicationSound;
	  reapplication_sound?: ReapplicationSound;
	  show_description_only?: OnlyShowDescription;
	  particle_systems?: ParticleSystems;
	}
	export interface Effects3 {
	  [k: string]: {
	    order: number;
	    element: Effect1;
	  };
	}
	export interface Bursts2 {
	  [k: string]: {
	    order?: number;
	    element?: Burst2;
	  };
	}
	export interface Burst2 {
	  perspective: Perspective2;
	  spawn_at_ground?: SpawnOnGround2;
	  num_particles: NumberOfParticles6;
	  scaled_radius?: ScaledSpawnRadius3;
	  outward_blast: BlastOutward3;
	  direction?: BurstDirection3;
	  spawn_radius: SpawnRadiusPixels3;
	  radius_as_grid?: SpawnRadiusAsGrid3;
	  z_offset?: ZOffset11;
	}
	export interface NumberOfParticles6 {
	  value0?: Min81;
	  value1?: Max81;
	}
	export interface BurstDirection3 {
	  value0?: Min82;
	  value1?: Max82;
	}
	/**
	 * How far from the source the particles will spawn.
	 */
	export interface SpawnRadiusPixels3 {
	  value0?: Min83;
	  value1?: Max83;
	}
	/**
	 * This will render a looping spine animation attached to the buff target for the duration of the buff.
	 */
	export interface LoopingSpineVisual {
	  z_anchor?: VerticalPosition;
	  sprite: SpineSprite;
	  z_offset?: ZOffsetPixels;
	  animation: LoopingAnimationName;
	}
	export interface DropShadowColor {
	  r: Red57;
	  b: Blue57;
	  g: Green57;
	}
	export interface Name65 {
	  skip?: Skip142;
	  text: EnglishText142;
	  description?: TranslatorHelperText104;
	}
	/**
	 * If set, this buff can modify the stats of the entity for the duration of its application.
	 */
	export interface Stats2 {
	  [k: string]: {
	    order: number;
	    element: StatBuff;
	  };
	}
	export interface StatBuff {
	  amount: Amount2;
	  otherstat_boosts?: BoostedByOtherStats;
	  modifier_style: ModifierStyle2;
	  multiply_by_stacks: MultiplyByStacks1;
	  stat: Stat9;
	}
	/**
	 * You can choose other stats to boost the gains of this stat.
	 */
	export interface BoostedByOtherStats {
	  [k: string]: {
	    order: number;
	    element: {
	      modifier_style: ModifierStyle1;
	      multiply_by_stacks: MultiplyByStacks;
	      stat: Stat8;
	      stat_source?: StatSource;
	    };
	  };
	}
	/**
	 * A description of this buff to show on item tooltips.
	 */
	export interface Description32 {
	  skip?: Skip143;
	  text: EnglishText143;
	  description?: TranslatorHelperText105;
	}
	export interface Color13 {
	  r: Red58;
	  b: Blue58;
	  g: Green58;
	}
	export interface ParticleEmitters4 {
	  [k: string]: {
	    order: number;
	    element: ParticleEmitter4;
	  };
	}
	export interface ParticleEmitter4 {
	  particle: Particle;
	  interval: EmitIntervalSeconds1;
	  num_particles: NumberOfParticles7;
	  scale: EmitterScale7;
	  local_particles: Local1;
	  outward_blast: BlastOutward4;
	}
	/**
	 * How many particles to emit with each interval.
	 */
	export interface NumberOfParticles7 {
	  value0: Min84;
	  value1: Max84;
	}
	/**
	 * Text that will be shown in the infostream when this buff is applied.
	 */
	export interface InfostreamText {
	  text: Text2;
	  color: TextColor1;
	}
	export interface Text2 {
	  skip?: Skip144;
	  text: EnglishText144;
	}
	export interface TextColor1 {
	  r: Red59;
	  b: Blue59;
	  g: Green59;
	}
	export interface ParticleSystems {
	  [k: string]: {
	    order: number;
	    element: ParticleSystem9;
	  };
	}
	export interface ParticleSystem9 {
	  particle_system: ParticleSystem10;
	  local_particles?: Local2;
	  interval?: BurstIntervalSeconds;
	  scale?: EmitterScale8;
	}
	export interface RecipeCategory1 {
	  color: Color14;
	  icon: Icon11;
	  order: Order6;
	  wip?: WIP;
	  name: Name66;
	  unselected_color: UnselectedColor;
	}
	export interface Color14 {
	  r: Red60;
	  b: Blue60;
	  g: Green60;
	}
	export interface UnselectedColor {
	  r: Red61;
	  b: Blue61;
	  g: Green61;
	}
	
}
